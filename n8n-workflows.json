{"data":[{"createdAt":"2025-08-18T10:17:53.582Z","updatedAt":"2025-09-18T12:45:46.000Z","id":"1rrMigHGbR8UamA3","name":"Image Generation API","active":true,"isArchived":false,"nodes":[{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"has-validation-errors","leftValue":"={{ $json.status }}","rightValue":"error","operator":{"type":"string","operation":"equals"}}],"combinator":"and"},"options":{}},"id":"validation-check","name":"Validation Check","type":"n8n-nodes-base.if","typeVersion":2.2,"position":[304,656]},{"parameters":{"respondWith":"json","responseBody":"={{ JSON.stringify($json) }}","options":{}},"id":"return-validation-error","name":"Return Validation Error","type":"n8n-nodes-base.respondToWebhook","typeVersion":1.1,"position":[528,544]},{"parameters":{"method":"PATCH","url":"=https://baserow.aiautomata.co.za/api/database/rows/table/{{ $json.body.baserow.imagesTableId }}/{{ $json.imageId }}/","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"application/json"},{"name":"Authorization","value":"=Token {{ $json.body.baserow.token }}"}]},"sendBody":true,"specifyBody":"json","jsonBody":"={\n  \"Image Status\": \"Generating\",\n  \"Image Prompt\": {{ JSON.stringify($json.finalPrompt) }}\n}","options":{}},"id":"update-generating","name":"Update Status - Generating","type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[528,752]},{"parameters":{"respondWith":"json","responseBody":"={\n  \"status\": \"success\",\n  \"message\": \"Image generation started\",\n  \"imageId\": {{ $json.id }},\n  \"timestamp\": \"{{ new Date().toISOString() }}\"\n}","options":{}},"id":"success-response","name":"Success Response","type":"n8n-nodes-base.respondToWebhook","typeVersion":1.1,"position":[752,752]},{"parameters":{"httpMethod":"POST","path":"image-generator-webhook","responseMode":"responseNode","options":{}},"type":"n8n-nodes-base.webhook","typeVersion":2,"position":[-544,-736],"id":"ec9d82a0-9d7c-4455-8b54-f390c027aed3","name":"Image Generation API","webhookId":"dc8872eb-729c-46d2-8ab5-1555dbaaf5fa"},{"parameters":{"jsCode":"// Enhanced payload processing for 6 image types + flexible reference handling\nconst webhookData = $json;\nconst payload = webhookData.body || webhookData; // Handle both webhook and direct data\n\nconsole.log('📨 Received image generation request:', JSON.stringify(payload, null, 2));\n\n// Extract required fields\nconst {\n  imageId,\n  imagePrompt,\n  imageType,\n  imageModel,\n  clientId,\n  imageScene = '',\n  captionText = '',\n  captionPosition = 'bottom-center',\n  referenceUrl = '',\n  referenceImage = null\n} = payload;\n\n// Validation\nconst errors = [];\nif (!imageId) errors.push('imageId is required');\nif (!imagePrompt) errors.push('imagePrompt is required');\nif (!imageType) errors.push('imageType is required');\nif (!imageModel) errors.push('imageModel is required');\nif (!clientId) errors.push('clientId is required');\n\nif (errors.length > 0) {\n  return {\n    json: {\n      status: 'error',\n      message: 'Validation failed',\n      errors: errors,\n      imageId: payload.imageId || 'unknown'\n    }\n  };\n}\n\n// 🎯 Enhanced Image Type Analysis with flexible reference detection\nconst imageTypeAnalysis = {\n  'New image': { hasReference: false, referenceType: null, needsCaptions: false },\n  'New image with captions': { hasReference: false, referenceType: null, needsCaptions: true },\n  'Image from reference image': { hasReference: true, referenceType: 'upload', needsCaptions: false },\n  'Image from reference with captions': { hasReference: true, referenceType: 'upload', needsCaptions: true },\n  'Image from URL': { hasReference: true, referenceType: 'url', needsCaptions: false },\n  'Image from URL with captions': { hasReference: true, referenceType: 'url', needsCaptions: true }\n};\n\nlet analysis = imageTypeAnalysis[imageType] || { hasReference: false, referenceType: null, needsCaptions: false };\n\n// 🔄 SMART REFERENCE TYPE DETECTION\n// Override the analysis if we detect URL in referenceImage field\nif (analysis.hasReference) {\n  // Check if referenceImage contains a URL (starts with http)\n  if (referenceImage && typeof referenceImage === 'string' && referenceImage.startsWith('http')) {\n    console.log('🔄 Detected URL in referenceImage field, switching to URL mode');\n    analysis.referenceType = 'url';\n    analysis.actualReferenceUrl = referenceImage; // Use referenceImage as URL\n  }\n  // Check if referenceUrl is provided\n  else if (referenceUrl && referenceUrl.trim()) {\n    analysis.referenceType = 'url';\n    analysis.actualReferenceUrl = referenceUrl;\n  }\n  // Otherwise treat as upload\n  else {\n    analysis.referenceType = 'upload';\n    analysis.actualReferenceData = referenceImage;\n  }\n}\n\n// 🚀 API Method Determination\nconst isOpenAI = imageModel === 'openai/gpt-image-1';\nlet apiMethod = '';\n\nif (isOpenAI) {\n  apiMethod = analysis.hasReference ? 'edit' : 'generation';\n} else {\n  apiMethod = analysis.hasReference ? 'img2img' : 'text2img';\n}\n\n// 📝 Enhanced Prompt Building\nlet finalPrompt = imagePrompt;\n\n// Add scene context\nif (imageScene && imageScene.trim() && imageScene !== 'Scene') {\n  finalPrompt += ` Scene: ${imageScene.trim()}.`;\n}\n\n// Add caption instruction to prompt if needed\nif (analysis.needsCaptions && captionText && captionText.trim()) {\n  finalPrompt += ` Include text: \"${captionText.trim()}\" positioned at ${captionPosition}.`;\n}\n\n// Add style enhancement for better results\nif (payload.imageStyle) {\n  finalPrompt += ` Style: ${payload.imageStyle}.`;\n}\n\n// 🔍 Enhanced Reference Validation\nlet referenceValidation = { valid: true, message: '' };\nif (analysis.hasReference) {\n  if (analysis.referenceType === 'url') {\n    const urlToCheck = analysis.actualReferenceUrl || referenceUrl;\n    if (!urlToCheck || !urlToCheck.trim()) {\n      referenceValidation = { valid: false, message: 'Reference URL is required but not provided' };\n    } else if (!urlToCheck.startsWith('http')) {\n      referenceValidation = { valid: false, message: 'Invalid reference URL format' };\n    }\n  } else if (analysis.referenceType === 'upload') {\n    if (!referenceImage) {\n      referenceValidation = { valid: false, message: 'Reference image upload is required but not provided' };\n    }\n  }\n}\n\nif (!referenceValidation.valid) {\n  return {\n    json: {\n      status: 'error',\n      message: 'Reference validation failed',\n      errors: [referenceValidation.message],\n      imageId: payload.imageId || 'unknown'\n    }\n  };\n}\n\n// 📊 Return Enhanced Payload\nreturn {\n  json: {\n    ...webhookData, // Include original webhook structure\n    ...payload,     // Include the body data at top level for easy access\n    // Original flags (for backward compatibility)\n    isOpenAI,\n    useReference: analysis.hasReference,\n    addCaptions: analysis.needsCaptions,\n    finalPrompt,\n    \n    // 🆕 Enhanced routing flags\n    imageTypeAnalysis: {\n      originalType: imageType,\n      hasReference: analysis.hasReference,\n      referenceType: analysis.referenceType, // This will be 'url' for your case\n      needsCaptions: analysis.needsCaptions,\n      apiMethod: apiMethod,\n      actualReferenceUrl: analysis.actualReferenceUrl, // The actual URL to use\n      detectedFromField: referenceImage && referenceImage.startsWith('http') ? 'referenceImage' : 'referenceUrl'\n    },\n    \n    // 🎯 Processing metadata\n    processing: {\n      model: imageModel,\n      isOpenAI: isOpenAI,\n      apiMethod: apiMethod,\n      promptEnhanced: finalPrompt !== imagePrompt,\n      hasScene: !!(imageScene && imageScene.trim() && imageScene !== 'Scene'),\n      hasCaptions: analysis.needsCaptions && !!(captionText && captionText.trim()),\n      referenceSource: analysis.referenceType\n    },\n    \n    // ✅ Validation status\n    validated: true,\n    timestamp: new Date().toISOString()\n  }\n};"},"id":"enhanced-process-payload","name":"Enhanced Process Payload","type":"n8n-nodes-base.code","typeVersion":2,"position":[96,656]},{"parameters":{"amount":15,"unit":"seconds"},"id":"e0c87ba4-497e-4308-ad61-0e919eb9ac50","name":"Wait for Replicate","type":"n8n-nodes-base.wait","typeVersion":1,"position":[2064,976],"webhookId":"19725cbb-0338-4a6d-a21e-bf6ec105890d"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"is-complete","leftValue":"={{ $json.status }}","rightValue":"succeeded","operator":{"type":"string","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[2512,976],"id":"b07958f5-00f1-44fc-8e18-00d06ecc1a52","name":"Check Status"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"has-reference","leftValue":"={{ $('Enhanced Process Payload').item.json.imageTypeAnalysis.hasReference }}","rightValue":true,"operator":{"type":"boolean","operation":"equals"}}],"combinator":"and"},"options":{}},"id":"aab6aac6-59da-439a-a101-c948e3d8bf1b","name":"Reference Image Router","type":"n8n-nodes-base.if","typeVersion":2.2,"position":[976,752]},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"is-url-reference","leftValue":"={{ $('Enhanced Process Payload').item.json.imageTypeAnalysis.referenceType }}","rightValue":"url","operator":{"type":"string","operation":"equals"}}],"combinator":"and"},"options":{}},"id":"fffc16f1-f2ab-465c-bec5-05daa1c14736","name":"Reference Type Router","type":"n8n-nodes-base.if","typeVersion":2.2,"position":[1184,576]},{"parameters":{"url":"={{ $('Enhanced Process Payload').item.json.imageTypeAnalysis.actualReferenceUrl }}","options":{"response":{"response":{"responseFormat":"file"}}}},"id":"90d9ff62-690f-4b70-932a-aff94836e75c","name":"Download Reference URL","type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[1408,464]},{"parameters":{"jsCode":"// Process uploaded reference image\nconst payload = $json;\n\nconsole.log('🖼️ Processing uploaded reference image...');\n\n// Check if we have the reference image in the payload\nif (!payload.referenceImage) {\n  return {\n    json: {\n      ...payload,\n      error: 'No reference image found in upload',\n      referenceProcessed: false\n    }\n  };\n}\n\n// For now, we'll assume the referenceImage contains the binary data\n// In a real implementation, this would process the uploaded file\nreturn {\n  json: {\n    ...payload,\n    referenceProcessed: true,\n    referenceSource: 'upload',\n    processingNote: 'Reference image processed from upload'\n  },\n  // The binary data would be handled here\n  binary: payload.referenceImage || {}\n};"},"id":"82e0c0f9-9e07-4be9-8719-46c37075953c","name":"Process Reference Upload","type":"n8n-nodes-base.code","typeVersion":2,"position":[1408,720]},{"parameters":{"method":"POST","url":"https://baserow.aiautomata.co.za/api/user-files/upload-file/","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"contentType":"multipart-form-data","bodyParameters":{"parameters":[{"parameterType":"formBinaryData","name":"file","inputDataFieldName":"data"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[3456,752],"id":"b262009e-b8ac-4ab6-a809-2dc85a3bb130","name":"Upload OpenAI to Baserow","credentials":{"httpHeaderAuth":{"id":"eLr9WkAowHbRSmCb","name":"Baserow Auth account"}}},{"parameters":{"url":"={{ 'https://api.replicate.com/v1/predictions/' + $json.id }}","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[2288,896],"id":"66271f09-2999-4cff-b365-9463a3a80cb6","name":"Check Replicate Status","credentials":{"httpHeaderAuth":{"id":"JlfTRouEz1b1K4bJ","name":"Flux Replicate Auth account"}}},{"parameters":{"url":"={{ Array.isArray($json.output) ? $json.output[0] : $json.output }}","options":{"response":{"response":{"responseFormat":"file"}}}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[2736,976],"id":"faccb81d-58f4-4dd3-9428-00a58c7afbc2","name":"Download Replicate Result"},{"parameters":{"amount":18},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[2304,576],"id":"18247b2d-cfba-4c16-9c7c-88e99565469c","name":"Wait for Caption Processing1","webhookId":"caption-replicate-wait"},{"parameters":{"url":"={{ 'https://api.replicate.com/v1/predictions/' + $json.id }}","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[2512,576],"id":"1fe57ecd-4eb7-4299-a706-4db9d105770c","name":"Check Caption Status1","credentials":{"httpHeaderAuth":{"id":"JlfTRouEz1b1K4bJ","name":"Flux Replicate Auth account"}}},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"is-complete","leftValue":"={{ $json.status }}","rightValue":"succeeded","operator":{"type":"string","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[2672,576],"id":"ffb55180-a1dc-45aa-8c6b-6057f57f1cf3","name":"Check if Caption Complete1"},{"parameters":{"url":"={{ Array.isArray($json.output) ? $json.output[0] : $json.output }}","options":{"response":{"response":{"responseFormat":"file"}}}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[2928,448],"id":"aaaf13c4-cde8-494a-babf-d38a70d7a9de","name":"Download Caption Result1"},{"parameters":{"amount":12},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[2944,672],"id":"a61d4f69-f51f-4035-9197-053a902a252b","name":"Wait and Retry Caption1","webhookId":"caption-retry-wait"},{"parameters":{"method":"POST","url":"={{ $json.apiUrl }}","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Prefer","value":"wait"}]},"sendBody":true,"specifyBody":"json","jsonBody":"={{ JSON.stringify($json.requestBody) }}","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[2064,576],"id":"cf94094e-76df-43b3-a099-cafd10ea3e94","name":"Replicate Img2Img","credentials":{"httpHeaderAuth":{"id":"JlfTRouEz1b1K4bJ","name":"Flux Replicate Auth account"}}},{"parameters":{"method":"POST","url":"={{ $json.apiUrl }}","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Prefer","value":"wait"}]},"sendBody":true,"specifyBody":"json","jsonBody":"={{ JSON.stringify($json.requestBody) }}","options":{}},"id":"replicate-generation","name":"Replicate Text2Img","type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[1856,976],"credentials":{"httpHeaderAuth":{"id":"JlfTRouEz1b1K4bJ","name":"Flux Replicate Auth account"}}},{"parameters":{"jsCode":"// Dynamic Replicate Model Parameter Builder for YOUR SPECIFIC MODELS\n// This code node goes BEFORE the Replicate API calls\n\nconst payload = $('Enhanced Process Payload').item.json;\nconst { imageModel, finalPrompt, imageSize, imageStyle } = payload;\n\n// Check if this is img2img (has reference image data OR should use reference)\nconst hasImageData = $json.data && $json.data.length > 0;\nconst shouldUseReference = payload.imageTypeAnalysis && payload.imageTypeAnalysis.hasReference;\nconst isImg2Img = hasImageData || shouldUseReference;\n\nconsole.log('🎯 Building parameters for model:', imageModel);\nconsole.log('📏 Image size requested:', imageSize);\nconsole.log('📸 Has binary image data:', hasImageData);\nconsole.log('📸 Should use reference:', shouldUseReference);\nconsole.log('📸 Final img2img decision:', isImg2Img);\n\n// Image size conversion utilities\nconst sizeConfigs = {\n  '1024x1024 (1:1)': {\n    width: 1024, height: 1024, aspect_ratio: '1:1', openai_size: '1024x1024'\n  },\n  '1080 x 1920 (9:16)': {\n    width: 1080, height: 1920, aspect_ratio: '9:16', openai_size: '1024x1792'\n  },\n  '1200 x 630 (1.91:1)': {\n    width: 1200, height: 630, aspect_ratio: '16:9', openai_size: '1792x1024'\n  },\n  '1920 x 1080 (16:9)': {\n    width: 1920, height: 1080, aspect_ratio: '16:9', openai_size: '1792x1024'\n  },\n  '896 x 1120 (4:5)': {\n    width: 896, height: 1120, aspect_ratio: '4:5', openai_size: '1024x1024'\n  }\n};\n\nconst sizeConfig = sizeConfigs[imageSize] || sizeConfigs['1024x1024 (1:1)'];\nconsole.log('📐 Size config:', sizeConfig);\n\n// Determine image source for img2img\nconst imageSource = $json.data || payload.imageTypeAnalysis?.actualReferenceUrl || \"data\";\nconsole.log('🖼️ Image source for img2img:', hasImageData ? 'Binary Data' : 'Reference URL');\n\n// Model-specific parameter builders for YOUR MODELS\nconst modelConfigs = {\n  // OpenAI (your custom model name)\n  'openai/gpt-image-1': {\n    text2img: {\n      prompt: finalPrompt,\n      size: sizeConfig.openai_size,\n      quality: 'hd',\n      style: 'natural'\n    },\n    img2img: {\n      prompt: finalPrompt,\n      image: imageSource,\n      size: sizeConfig.openai_size,\n      quality: 'hd',\n      style: 'natural'\n    }\n  },\n\n  // Flux Models\n  'black-forest-labs/flux-schnell': {\n    text2img: {\n      prompt: finalPrompt,\n      aspect_ratio: sizeConfig.aspect_ratio,\n      output_format: 'jpg',\n      num_outputs: 1\n    },\n    img2img: {\n      prompt: finalPrompt,\n      image: imageSource,\n      aspect_ratio: sizeConfig.aspect_ratio,\n      output_format: 'jpg',\n      num_outputs: 1,\n      strength: 0.8\n    }\n  },\n\n  'black-forest-labs/flux-dev': {\n    text2img: {\n      prompt: finalPrompt,\n      aspect_ratio: sizeConfig.aspect_ratio,\n      output_format: 'jpg',\n      guidance_scale: 3.5,\n      num_inference_steps: 30\n    },\n    img2img: {\n      prompt: finalPrompt,\n      image: imageSource,\n      aspect_ratio: sizeConfig.aspect_ratio,\n      output_format: 'jpg',\n      guidance_scale: 3.5,\n      num_inference_steps: 30,\n      strength: 0.8\n    }\n  },\n\n  'black-forest-labs/flux-1.1-pro-ultra': {\n    text2img: {\n      prompt: finalPrompt,\n      aspect_ratio: sizeConfig.aspect_ratio,\n      output_format: 'jpg',\n      safety_tolerance: 2\n    },\n    img2img: {\n      prompt: finalPrompt,\n      image: imageSource,\n      aspect_ratio: sizeConfig.aspect_ratio,\n      output_format: 'jpg',\n      safety_tolerance: 2,\n      strength: 0.8\n    }\n  },\n\n  'black-forest-labs/flux-kontext-dev': {\n    text2img: {\n      prompt: finalPrompt,\n      aspect_ratio: sizeConfig.aspect_ratio,\n      output_format: 'jpg',\n      num_inference_steps: 30\n    },\n    img2img: {\n      prompt: finalPrompt,\n      input_image: imageSource,  // ✅ Changed from \"image\" to \"input_image\"\n      aspect_ratio: sizeConfig.aspect_ratio,\n      output_format: 'jpg',\n      num_inference_steps: 30,\n      strength: 0.8\n    }\n  },\n\n  'black-forest-labs/flux-kontext-pro': {\n    text2img: {\n      prompt: finalPrompt,\n      aspect_ratio: sizeConfig.aspect_ratio,\n      output_format: 'jpg',\n      safety_tolerance: 2\n    },\n    img2img: {\n      prompt: finalPrompt,\n      input_image: imageSource,  // ✅ Changed from \"image\" to \"input_image\"\n      aspect_ratio: sizeConfig.aspect_ratio,\n      output_format: 'jpg',\n      safety_tolerance: 2,\n      strength: 0.8\n    }\n  },\n\n  // Stability AI Models\n  'stability-ai/stable-diffusion-3.5-large': {\n    text2img: {\n      prompt: finalPrompt,\n      width: sizeConfig.width,\n      height: sizeConfig.height,\n      guidance_scale: 4.5,\n      num_inference_steps: 40,\n      scheduler: 'K_EULER'\n    },\n    img2img: {\n      prompt: finalPrompt,\n      image: imageSource,\n      width: sizeConfig.width,\n      height: sizeConfig.height,\n      guidance_scale: 4.5,\n      num_inference_steps: 40,\n      strength: 0.8\n    }\n  },\n\n  'stability-ai/sdxl-turbo': {\n    text2img: {\n      prompt: finalPrompt,\n      width: sizeConfig.width,\n      height: sizeConfig.height,\n      guidance_scale: 1.0,\n      num_inference_steps: 1,\n      scheduler: 'K_EULER'\n    },\n    img2img: {\n      prompt: finalPrompt,\n      image: imageSource,\n      width: sizeConfig.width,\n      height: sizeConfig.height,\n      guidance_scale: 1.0,\n      num_inference_steps: 1,\n      strength: 0.8\n    }\n  },\n\n  // Recraft AI\n  'recraft-ai/recraft-v3': {\n    text2img: {\n      prompt: finalPrompt,\n      width: sizeConfig.width,\n      height: sizeConfig.height,\n      num_inference_steps: 50,\n      guidance_scale: 7.5\n    },\n    img2img: {\n      prompt: finalPrompt,\n      image: imageSource,\n      width: sizeConfig.width,\n      height: sizeConfig.height,\n      num_inference_steps: 50,\n      guidance_scale: 7.5,\n      strength: 0.8\n    }\n  },\n\n  // Ideogram AI\n  'ideogram-ai/ideogram-v2': {\n    text2img: {\n      prompt: finalPrompt,\n      aspect_ratio: sizeConfig.aspect_ratio,\n      model: 'V_2',\n      magic_prompt_option: 'Auto'\n    },\n    img2img: {\n      prompt: finalPrompt,\n      image_file: imageSource,  // ✅ Ideogram uses \"image_file\"\n      aspect_ratio: sizeConfig.aspect_ratio,\n      model: 'V_2',\n      magic_prompt_option: 'Auto',\n      image_weight: 0.8\n    }\n  },\n\n  // ByteDance Lightning\n  'bytedance/sdxl-lightning-4step': {\n    text2img: {\n      prompt: finalPrompt,\n      width: sizeConfig.width,\n      height: sizeConfig.height,\n      guidance_scale: 2.0,\n      num_inference_steps: 4,\n      scheduler: 'K_EULER'\n    },\n    img2img: {\n      prompt: finalPrompt,\n      image: imageSource,\n      width: sizeConfig.width,\n      height: sizeConfig.height,\n      guidance_scale: 2.0,\n      num_inference_steps: 4,\n      strength: 0.8\n    }\n  }\n};\n\n// Get model configuration\nconst modelConfig = modelConfigs[imageModel];\nif (!modelConfig) {\n  return {\n    json: {\n      status: 'error',\n      error: `Unsupported model: ${imageModel}`,\n      supportedModels: Object.keys(modelConfigs),\n      message: 'Please use one of the supported models'\n    }\n  };\n}\n\n// Select appropriate config based on image type\nconst configType = isImg2Img ? 'img2img' : 'text2img';\nconst selectedConfig = modelConfig[configType];\n\nif (!selectedConfig) {\n  return {\n    json: {\n      status: 'error',\n      error: `Model ${imageModel} doesn't support ${configType}`,\n      availableTypes: Object.keys(modelConfig).filter(key => modelConfig[key] !== null),\n      message: `Try using a different model or image type`\n    }\n  };\n}\n\n// Clone the config to avoid modifying the original\nconst finalConfig = JSON.parse(JSON.stringify(selectedConfig));\n\n// Add style modifications if specified\nif (imageStyle && imageStyle !== 'Default' && imageStyle !== 'Photorealistic') {\n  const styleMap = {\n    'Artistic': 'artistic style, creative, expressive',\n    'Cartoon': 'cartoon style, animated, colorful',\n    'Realistic': 'photorealistic, detailed, high quality',\n    'Abstract': 'abstract art style, creative, artistic',\n    'Vintage': 'vintage style, retro, classic',\n    'Modern': 'modern style, contemporary, sleek'\n  };\n  \n  const stylePrompt = styleMap[imageStyle] || imageStyle.toLowerCase();\n  finalConfig.prompt += `, ${stylePrompt}`;\n}\n\n// Build final request body\nconst requestBody = {\n  input: finalConfig\n};\n\nconsole.log('✅ Generated request body:', JSON.stringify(requestBody, null, 2));\n\n// Return the configured request\nreturn {\n  json: {\n    ...payload,\n    // Original data preserved\n    originalImageData: $json.data,\n    \n    // Model configuration\n    modelType: configType,\n    requestBody: requestBody,\n    selectedModel: imageModel,\n    selectedSize: imageSize,\n    \n    // For debugging\n    modelConfig: finalConfig,\n    isImg2Img: isImg2Img,\n    hasImageData: hasImageData,\n    shouldUseReference: shouldUseReference,\n    imageSource: imageSource,\n    sizeConfig: sizeConfig,\n    \n    // URL for the API call\n    apiUrl: `https://api.replicate.com/v1/models/${imageModel}/predictions`\n  }\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1856,576],"id":"c22c77b5-1ca7-414f-9097-dde14139daa7","name":"Dynamic JSON Builder"},{"parameters":{"jsCode":"// Dynamic Replicate Model Parameter Builder for YOUR SPECIFIC MODELS\n// This code node goes BEFORE the Replicate API calls\n\nconst payload = $('Enhanced Process Payload').item.json;\nconst { imageModel, finalPrompt, imageSize, imageStyle } = payload;\n\n// Check if this is img2img (has reference image data OR should use reference)\nconst hasImageData = $json.data && $json.data.length > 0;\nconst shouldUseReference = payload.imageTypeAnalysis && payload.imageTypeAnalysis.hasReference;\nconst isImg2Img = hasImageData || shouldUseReference;\n\nconsole.log('🎯 Building parameters for model:', imageModel);\nconsole.log('📏 Image size requested:', imageSize);\nconsole.log('📸 Has binary image data:', hasImageData);\nconsole.log('📸 Should use reference:', shouldUseReference);\nconsole.log('📸 Final img2img decision:', isImg2Img);\n\n// Image size conversion utilities\nconst sizeConfigs = {\n  '1024x1024 (1:1)': {\n    width: 1024, height: 1024, aspect_ratio: '1:1', openai_size: '1024x1024'\n  },\n  '1080 x 1920 (9:16)': {\n    width: 1080, height: 1920, aspect_ratio: '9:16', openai_size: '1024x1792'\n  },\n  '1200 x 630 (1.91:1)': {\n    width: 1200, height: 630, aspect_ratio: '16:9', openai_size: '1792x1024'\n  },\n  '1920 x 1080 (16:9)': {\n    width: 1920, height: 1080, aspect_ratio: '16:9', openai_size: '1792x1024'\n  },\n  '896 x 1120 (4:5)': {\n    width: 896, height: 1120, aspect_ratio: '4:5', openai_size: '1024x1024'\n  }\n};\n\nconst sizeConfig = sizeConfigs[imageSize] || sizeConfigs['1024x1024 (1:1)'];\nconsole.log('📐 Size config:', sizeConfig);\n\n// Determine image source for img2img\nconst imageSource = $json.data || payload.imageTypeAnalysis?.actualReferenceUrl || \"data\";\nconsole.log('🖼️ Image source for img2img:', hasImageData ? 'Binary Data' : 'Reference URL');\n\n// Model-specific parameter builders for YOUR MODELS\nconst modelConfigs = {\n  // OpenAI (your custom model name)\n  'openai/gpt-image-1': {\n    text2img: {\n      prompt: finalPrompt,\n      size: sizeConfig.openai_size,\n      quality: 'hd',\n      style: 'natural'\n    },\n    img2img: {\n      prompt: finalPrompt,\n      image: imageSource,\n      size: sizeConfig.openai_size,\n      quality: 'hd',\n      style: 'natural'\n    }\n  },\n\n  // Flux Models\n  'black-forest-labs/flux-schnell': {\n    text2img: {\n      prompt: finalPrompt,\n      aspect_ratio: sizeConfig.aspect_ratio,\n      output_format: 'jpg',\n      num_outputs: 1\n    },\n    img2img: {\n      prompt: finalPrompt,\n      image: imageSource,\n      aspect_ratio: sizeConfig.aspect_ratio,\n      output_format: 'jpg',\n      num_outputs: 1,\n      strength: 0.8\n    }\n  },\n\n  'black-forest-labs/flux-dev': {\n    text2img: {\n      prompt: finalPrompt,\n      aspect_ratio: sizeConfig.aspect_ratio,\n      output_format: 'jpg',\n      guidance_scale: 3.5,\n      num_inference_steps: 30\n    },\n    img2img: {\n      prompt: finalPrompt,\n      image: imageSource,\n      aspect_ratio: sizeConfig.aspect_ratio,\n      output_format: 'jpg',\n      guidance_scale: 3.5,\n      num_inference_steps: 30,\n      strength: 0.8\n    }\n  },\n\n  'black-forest-labs/flux-1.1-pro-ultra': {\n    text2img: {\n      prompt: finalPrompt,\n      aspect_ratio: sizeConfig.aspect_ratio,\n      output_format: 'jpg',\n      safety_tolerance: 2\n    },\n    img2img: {\n      prompt: finalPrompt,\n      image: imageSource,\n      aspect_ratio: sizeConfig.aspect_ratio,\n      output_format: 'jpg',\n      safety_tolerance: 2,\n      strength: 0.8\n    }\n  },\n\n  'black-forest-labs/flux-kontext-dev': {\n    text2img: {\n      prompt: finalPrompt,\n      aspect_ratio: sizeConfig.aspect_ratio,\n      output_format: 'jpg',\n      num_inference_steps: 30\n    },\n    img2img: {\n      prompt: finalPrompt,\n      input_image: imageSource,  // ✅ Changed from \"image\" to \"input_image\"\n      aspect_ratio: sizeConfig.aspect_ratio,\n      output_format: 'jpg',\n      num_inference_steps: 30,\n      strength: 0.8\n    }\n  },\n\n  'black-forest-labs/flux-kontext-pro': {\n    text2img: {\n      prompt: finalPrompt,\n      aspect_ratio: sizeConfig.aspect_ratio,\n      output_format: 'jpg',\n      safety_tolerance: 2\n    },\n    img2img: {\n      prompt: finalPrompt,\n      input_image: imageSource,  // ✅ Changed from \"image\" to \"input_image\"\n      aspect_ratio: sizeConfig.aspect_ratio,\n      output_format: 'jpg',\n      safety_tolerance: 2,\n      strength: 0.8\n    }\n  },\n\n  // Stability AI Models\n  'stability-ai/stable-diffusion-3.5-large': {\n    text2img: {\n      prompt: finalPrompt,\n      width: sizeConfig.width,\n      height: sizeConfig.height,\n      guidance_scale: 4.5,\n      num_inference_steps: 40,\n      scheduler: 'K_EULER'\n    },\n    img2img: {\n      prompt: finalPrompt,\n      image: imageSource,\n      width: sizeConfig.width,\n      height: sizeConfig.height,\n      guidance_scale: 4.5,\n      num_inference_steps: 40,\n      strength: 0.8\n    }\n  },\n\n  'stability-ai/sdxl-turbo': {\n    text2img: {\n      prompt: finalPrompt,\n      width: sizeConfig.width,\n      height: sizeConfig.height,\n      guidance_scale: 1.0,\n      num_inference_steps: 1,\n      scheduler: 'K_EULER'\n    },\n    img2img: {\n      prompt: finalPrompt,\n      image: imageSource,\n      width: sizeConfig.width,\n      height: sizeConfig.height,\n      guidance_scale: 1.0,\n      num_inference_steps: 1,\n      strength: 0.8\n    }\n  },\n\n  // Recraft AI\n  'recraft-ai/recraft-v3': {\n    text2img: {\n      prompt: finalPrompt,\n      width: sizeConfig.width,\n      height: sizeConfig.height,\n      num_inference_steps: 50,\n      guidance_scale: 7.5\n    },\n    img2img: {\n      prompt: finalPrompt,\n      image: imageSource,\n      width: sizeConfig.width,\n      height: sizeConfig.height,\n      num_inference_steps: 50,\n      guidance_scale: 7.5,\n      strength: 0.8\n    }\n  },\n\n  // Ideogram AI\n  'ideogram-ai/ideogram-v2': {\n    text2img: {\n      prompt: finalPrompt,\n      aspect_ratio: sizeConfig.aspect_ratio,\n      model: 'V_2',\n      magic_prompt_option: 'Auto'\n    },\n    img2img: {\n      prompt: finalPrompt,\n      image_file: imageSource,  // ✅ Ideogram uses \"image_file\"\n      aspect_ratio: sizeConfig.aspect_ratio,\n      model: 'V_2',\n      magic_prompt_option: 'Auto',\n      image_weight: 0.8\n    }\n  },\n\n  // ByteDance Lightning\n  'bytedance/sdxl-lightning-4step': {\n    text2img: {\n      prompt: finalPrompt,\n      width: sizeConfig.width,\n      height: sizeConfig.height,\n      guidance_scale: 2.0,\n      num_inference_steps: 4,\n      scheduler: 'K_EULER'\n    },\n    img2img: {\n      prompt: finalPrompt,\n      image: imageSource,\n      width: sizeConfig.width,\n      height: sizeConfig.height,\n      guidance_scale: 2.0,\n      num_inference_steps: 4,\n      strength: 0.8\n    }\n  }\n};\n\n// Get model configuration\nconst modelConfig = modelConfigs[imageModel];\nif (!modelConfig) {\n  return {\n    json: {\n      status: 'error',\n      error: `Unsupported model: ${imageModel}`,\n      supportedModels: Object.keys(modelConfigs),\n      message: 'Please use one of the supported models'\n    }\n  };\n}\n\n// Select appropriate config based on image type\nconst configType = isImg2Img ? 'img2img' : 'text2img';\nconst selectedConfig = modelConfig[configType];\n\nif (!selectedConfig) {\n  return {\n    json: {\n      status: 'error',\n      error: `Model ${imageModel} doesn't support ${configType}`,\n      availableTypes: Object.keys(modelConfig).filter(key => modelConfig[key] !== null),\n      message: `Try using a different model or image type`\n    }\n  };\n}\n\n// Clone the config to avoid modifying the original\nconst finalConfig = JSON.parse(JSON.stringify(selectedConfig));\n\n// Add style modifications if specified\nif (imageStyle && imageStyle !== 'Default' && imageStyle !== 'Photorealistic') {\n  const styleMap = {\n    'Artistic': 'artistic style, creative, expressive',\n    'Cartoon': 'cartoon style, animated, colorful',\n    'Realistic': 'photorealistic, detailed, high quality',\n    'Abstract': 'abstract art style, creative, artistic',\n    'Vintage': 'vintage style, retro, classic',\n    'Modern': 'modern style, contemporary, sleek'\n  };\n  \n  const stylePrompt = styleMap[imageStyle] || imageStyle.toLowerCase();\n  finalConfig.prompt += `, ${stylePrompt}`;\n}\n\n// Build final request body\nconst requestBody = {\n  input: finalConfig\n};\n\nconsole.log('✅ Generated request body:', JSON.stringify(requestBody, null, 2));\n\n// Return the configured request\nreturn {\n  json: {\n    ...payload,\n    // Original data preserved\n    originalImageData: $json.data,\n    \n    // Model configuration\n    modelType: configType,\n    requestBody: requestBody,\n    selectedModel: imageModel,\n    selectedSize: imageSize,\n    \n    // For debugging\n    modelConfig: finalConfig,\n    isImg2Img: isImg2Img,\n    hasImageData: hasImageData,\n    shouldUseReference: shouldUseReference,\n    imageSource: imageSource,\n    sizeConfig: sizeConfig,\n    \n    // URL for the API call\n    apiUrl: `https://api.replicate.com/v1/models/${imageModel}/predictions`\n  }\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1632,976],"id":"4e9838e1-a21c-484d-9966-3d33aa1c915b","name":"Dynamic JSON Builder1"},{"parameters":{"method":"PATCH","url":"=https://baserow.aiautomata.co.za/api/database/rows/table/{{ $('Enhanced Process Payload').item.json.baserow.imagesTableId }}/{{ $('Enhanced Process Payload').item.json.imageId }}/","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"application/json"},{"name":"Authorization","value":"=Token {{ $('Enhanced Process Payload').item.json.baserow.token }}"}]},"sendBody":true,"specifyBody":"json","jsonBody":"={\n  \"field_7185\": \"Completed\",\n  \"field_7178\": [\n    {\n      \"name\": \"{{ $json.name }}\"\n    }\n  ]\n}","options":{}},"id":"e8c02a23-25b5-46f5-b7f7-6c856356dda8","name":"Update Baserow Success","type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[3664,752]},{"parameters":{"method":"POST","url":"https://api.openai.com/v1/images/edits","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"contentType":"multipart-form-data","bodyParameters":{"parameters":[{"parameterType":"formBinaryData","name":"image","inputDataFieldName":"data"},{"name":"prompt","value":"={{ $json.mainPrompt }}"},{"name":"model","value":"gpt-image-1"},{"name":"size","value":"={{ $json.apiSize }}"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[2064,320],"id":"87e0277a-078c-4ff5-ae18-73ac81ce15d3","name":"OpenAI Caption Edit1","credentials":{"httpHeaderAuth":{"id":"z06CbCGaeEeBPVIt","name":"GPT Image Generator"}}},{"parameters":{"method":"POST","url":"https://api.openai.com/v1/images/generations","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"application/json"}]},"sendBody":true,"specifyBody":"json","jsonBody":"={\n  \"model\": \"gpt-image-1\",\n  \"prompt\": {{ JSON.stringify($json.openaiPrompt) }},\n  \"size\": \"{{ $json.openaiSize }}\"\n}","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[1824,784],"id":"3a462e02-4217-4618-89b0-dc0825bed722","name":"OpenAI Caption Generate1","credentials":{"httpHeaderAuth":{"id":"z06CbCGaeEeBPVIt","name":"GPT Image Generator"}}},{"parameters":{"operation":"toBinary","sourceProperty":"data[0].b64_json","options":{}},"type":"n8n-nodes-base.convertToFile","typeVersion":1.1,"position":[2416,400],"id":"e1467fc9-1ff3-4c64-8229-b28367bf8716","name":"Convert OpenAI Caption1"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"use-edits","leftValue":"={{ $('Enhanced Process Payload').item.json.isOpenAI }}","rightValue":true,"operator":{"type":"boolean","operation":"true","singleValue":true}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[1616,384],"id":"b79e8c75-3bf6-46f6-9006-d71c494c78cf","name":"API Router Node"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"use-edits","leftValue":"={{ $('Enhanced Process Payload').item.json.isOpenAI }}","rightValue":true,"operator":{"type":"boolean","operation":"true","singleValue":true}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[1344,912],"id":"c19f748c-6e2f-4faf-b950-d2798a8be411","name":"API Router Node1"},{"parameters":{"jsCode":"// Enhanced OpenAI Dynamic JSON Builder - Improved Binary Handling\n// This node processes payload and builds comprehensive prompts for OpenAI while preserving image data\n\nconst payload = $('Enhanced Process Payload').item.json;\nconst { \n  finalPrompt, \n  imageSize, \n  imageTypeAnalysis, \n  processing, \n  imageStyle,\n  imageScene,\n  captionText,\n  captionFontStyle,\n  captionFontSize,\n  captionPosition\n} = payload;\n\nconsole.log('🔧 Enhanced OpenAI Dynamic JSON Builder');\nconsole.log('📝 Base Prompt:', finalPrompt);\nconsole.log('📏 Image Size:', imageSize);\nconsole.log('🎨 Image Style:', imageStyle);\nconsole.log('🎬 Image Scene:', imageScene);\nconsole.log('📝 Caption Text:', captionText);\nconsole.log('🔤 Caption Font:', captionFontStyle, captionFontSize);\nconsole.log('📍 Caption Position:', captionPosition);\n\n// IMPROVED: Better binary data handling\nconst inputItem = $input.item || {};\nconst inputBinary = inputItem.binary || $input.binary || {};\nconst binaryKeys = Object.keys(inputBinary);\n\nconsole.log('📸 Available binary fields:', binaryKeys);\nconsole.log('📸 Input binary structure:', Object.keys(inputBinary));\n\n// Log more details about binary data\nif (binaryKeys.length > 0) {\n  binaryKeys.forEach(key => {\n    const binaryData = inputBinary[key];\n    console.log(`📸 Binary field '${key}':`, {\n      mimeType: binaryData?.mimeType,\n      fileExtension: binaryData?.fileExtension,\n      fileName: binaryData?.fileName,\n      hasData: !!binaryData?.data\n    });\n  });\n}\n\n// OpenAI size mapping - converts your size format to OpenAI format\nconst openaiSizeMap = {\n  '1024x1024 (1:1)': '1024x1024',\n  '1080 x 1920 (9:16)': '1024x1792',\n  '1200 x 630 (1.91:1)': '1792x1024', \n  '1920 x 1080 (16:9)': '1792x1024',\n  '896 x 1120 (4:5)': '1024x1024'  // OpenAI doesn't support 4:5, fallback to square\n};\n\nconst openaiSize = openaiSizeMap[imageSize] || '1024x1024';\nconsole.log('📐 Mapped OpenAI Size:', openaiSize);\n\n// 🎯 BUILD COMPREHENSIVE PROMPT FOR OPENAI\nlet enhancedPrompt = finalPrompt;\n\n// Add image style if specified\nif (imageStyle && imageStyle !== 'Default' && imageStyle !== 'Photorealistic') {\n  const styleMap = {\n    'Artistic': 'artistic style, creative and expressive artwork',\n    'Cartoon': 'cartoon style, animated and colorful illustration',\n    'Realistic': 'photorealistic style, detailed and lifelike',\n    'Abstract': 'abstract art style, creative and artistic interpretation',\n    'Vintage': 'vintage style, retro and classic aesthetic',\n    'Modern': 'modern style, contemporary and sleek design',\n    'Cyberpunk': 'cyberpunk style, futuristic neon aesthetic with dark themes',\n    'Pixel Art': 'pixel art style, retro 8-bit video game aesthetic'\n  };\n  \n  const styleDescription = styleMap[imageStyle] || `${imageStyle.toLowerCase()} style`;\n  enhancedPrompt += ` Render in ${styleDescription}.`;\n}\n\n// Add scene context if provided\nif (imageScene && imageScene.trim() && imageScene !== 'Scene') {\n  enhancedPrompt += ` Scene context: ${imageScene.trim()}.`;\n}\n\n// Add caption requirements if this is a caption type\nconst needsCaptions = imageTypeAnalysis?.needsCaptions || \n                     (payload.imageType && payload.imageType.includes('captions'));\n\nif (needsCaptions && captionText && captionText.trim()) {\n  // Build detailed caption instructions\n  const fontSizeMap = {\n    'Small (12px)': 'small text',\n    'Medium (16px)': 'medium-sized text', \n    'Large (20px)': 'large text',\n    'Extra Large (24px)': 'very large text'\n  };\n  \n  const positionMap = {\n    'top-left': 'top-left corner',\n    'top-center': 'top center',\n    'top-right': 'top-right corner',\n    'center-left': 'center-left',\n    'center': 'center',\n    'center-right': 'center-right', \n    'bottom-left': 'bottom-left corner',\n    'bottom-center': 'bottom center',\n    'bottom-right': 'bottom-right corner'\n  };\n  \n  const fontSize = fontSizeMap[captionFontSize] || 'medium-sized text';\n  const position = positionMap[captionPosition] || 'bottom center';\n  const fontFamily = captionFontStyle || 'clean sans-serif';\n  \n  enhancedPrompt += ` Include text overlay: \"${captionText.trim()}\" positioned at ${position} using ${fontSize} in ${fontFamily} font style. The text should be clearly readable with good contrast against the background.`;\n}\n\n// Add quality and format specifications for OpenAI\nenhancedPrompt += ' High quality, professional result, clean composition.';\n\nconsole.log('✅ Enhanced Prompt:', enhancedPrompt);\n\n// Determine routing based on reference image presence  \nconst hasReference = imageTypeAnalysis?.hasReference || binaryKeys.length > 0;\n\n// IMPROVED: Better binary data selection and validation\nlet selectedBinaryData = null;\n\n// Priority order for binary field selection (define outside if block)\nconst priorityFields = ['data', 'image', 'file', 'attachment'];\n\nif (binaryKeys.length > 0) {\n  \n  // First try priority fields\n  for (const field of priorityFields) {\n    if (inputBinary[field]) {\n      selectedBinaryData = inputBinary[field];\n      console.log(`📸 Selected binary field: '${field}'`);\n      break;\n    }\n  }\n  \n  // If no priority field found, use first available\n  if (!selectedBinaryData && binaryKeys[0]) {\n    selectedBinaryData = inputBinary[binaryKeys[0]];\n    console.log(`📸 Using first available binary field: '${binaryKeys[0]}'`);\n  }\n  \n  // Validate binary data\n  if (selectedBinaryData) {\n    console.log('📸 Selected binary data details:', {\n      mimeType: selectedBinaryData.mimeType,\n      fileExtension: selectedBinaryData.fileExtension,\n      fileName: selectedBinaryData.fileName,\n      hasData: !!selectedBinaryData.data,\n      dataType: typeof selectedBinaryData.data\n    });\n    \n    // Check if it's an image\n    const isImage = selectedBinaryData.mimeType?.startsWith('image/') || \n                    ['jpg', 'jpeg', 'png', 'gif', 'webp', 'bmp'].includes(\n                      selectedBinaryData.fileExtension?.toLowerCase()\n                    );\n    \n    if (!isImage) {\n      console.warn('⚠️ Selected binary data may not be an image:', selectedBinaryData.mimeType);\n    }\n  }\n}\n\nconsole.log('🔀 Routing decision:', {\n  hasReference,\n  binaryFieldsCount: binaryKeys.length,\n  selectedBinaryData: !!selectedBinaryData,\n  routeToEdit: hasReference,\n  routeToGeneration: !hasReference\n});\n\n// Return properly formatted data for OpenAI nodes\nreturn {\n  json: {\n    // Pass through original payload\n    ...payload,\n    \n    // 🎯 OpenAI Caption Edit1 expects these exact field names:\n    mainPrompt: enhancedPrompt,    // Used by OpenAI Caption Edit1\n    apiSize: openaiSize,           // Used by OpenAI Caption Edit1\n    \n    // Also provide for generation node\n    openaiPrompt: enhancedPrompt,  // Used by OpenAI Caption Generate1\n    openaiSize: openaiSize,        // Used by OpenAI Caption Generate1\n    \n    // Individual components for debugging\n    promptComponents: {\n      basePrompt: finalPrompt,\n      imageStyle: imageStyle,\n      imageScene: imageScene,\n      captionText: captionText,\n      captionFont: `${captionFontStyle} ${captionFontSize}`,\n      captionPosition: captionPosition,\n      needsCaptions: needsCaptions\n    },\n    \n    // Routing info\n    hasReference: hasReference,\n    routeToGeneration: !hasReference,\n    routeToEdit: hasReference,\n    \n    // Enhanced debugging info\n    openaiBuilder: {\n      inputSize: imageSize,\n      mappedSize: openaiSize,\n      promptLength: enhancedPrompt.length,\n      binaryInfo: {\n        availableFields: binaryKeys,\n        selectedField: selectedBinaryData ? \n          (priorityFields.find(f => inputBinary[f]) || binaryKeys[0]) : null,\n        hasData: !!selectedBinaryData,\n        dataValid: !!(selectedBinaryData?.data),\n        mimeType: selectedBinaryData?.mimeType,\n        isImage: selectedBinaryData?.mimeType?.startsWith('image/')\n      },\n      componentsUsed: {\n        style: !!(imageStyle && imageStyle !== 'Default'),\n        scene: !!(imageScene && imageScene.trim() && imageScene !== 'Scene'),\n        captions: needsCaptions && !!(captionText && captionText.trim())\n      },\n      timestamp: new Date().toISOString()\n    }\n  },\n  \n  // 🔑 CRITICAL: Improved binary data mapping\n  binary: selectedBinaryData ? {\n    data: selectedBinaryData  // Pass the complete binary object\n  } : {}\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1856,224],"id":"2db4c61e-fce3-45f0-90a3-5bfb53e383fa","name":"OpenAI Dynamic JSON Builder"},{"parameters":{"jsCode":"// Enhanced OpenAI Dynamic JSON Builder - Includes ALL caption and style data\n// This node processes payload and builds comprehensive prompts for OpenAI\n\nconst payload = $('Enhanced Process Payload').item.json;\nconst { \n  finalPrompt, \n  imageSize, \n  imageTypeAnalysis, \n  processing, \n  imageStyle,\n  imageScene,\n  captionText,\n  captionFontStyle,\n  captionFontSize,\n  captionPosition\n} = payload;\n\nconsole.log('🔧 Enhanced OpenAI Dynamic JSON Builder');\nconsole.log('📝 Base Prompt:', finalPrompt);\nconsole.log('📏 Image Size:', imageSize);\nconsole.log('🎨 Image Style:', imageStyle);\nconsole.log('🎬 Image Scene:', imageScene);\nconsole.log('📝 Caption Text:', captionText);\nconsole.log('🔤 Caption Font:', captionFontStyle, captionFontSize);\nconsole.log('📍 Caption Position:', captionPosition);\n\n// OpenAI size mapping - converts your size format to OpenAI format\nconst openaiSizeMap = {\n  '1024x1024 (1:1)': '1024x1024',\n  '1080 x 1920 (9:16)': '1024x1792',\n  '1200 x 630 (1.91:1)': '1792x1024', \n  '1920 x 1080 (16:9)': '1792x1024',\n  '896 x 1120 (4:5)': '1024x1024'  // OpenAI doesn't support 4:5, fallback to square\n};\n\nconst openaiSize = openaiSizeMap[imageSize] || '1024x1024';\nconsole.log('📐 Mapped OpenAI Size:', openaiSize);\n\n// 🎯 BUILD COMPREHENSIVE PROMPT FOR OPENAI\nlet enhancedPrompt = finalPrompt;\n\n// Add image style if specified\nif (imageStyle && imageStyle !== 'Default' && imageStyle !== 'Photorealistic') {\n  const styleMap = {\n    'Artistic': 'artistic style, creative and expressive artwork',\n    'Cartoon': 'cartoon style, animated and colorful illustration',\n    'Realistic': 'photorealistic style, detailed and lifelike',\n    'Abstract': 'abstract art style, creative and artistic interpretation',\n    'Vintage': 'vintage style, retro and classic aesthetic',\n    'Modern': 'modern style, contemporary and sleek design',\n    'Cyberpunk': 'cyberpunk style, futuristic neon aesthetic with dark themes',\n    'Pixel Art': 'pixel art style, retro 8-bit video game aesthetic'\n  };\n  \n  const styleDescription = styleMap[imageStyle] || `${imageStyle.toLowerCase()} style`;\n  enhancedPrompt += ` Render in ${styleDescription}.`;\n}\n\n// Add scene context if provided\nif (imageScene && imageScene.trim() && imageScene !== 'Scene') {\n  enhancedPrompt += ` Scene context: ${imageScene.trim()}.`;\n}\n\n// Add caption requirements if this is a caption type\nconst needsCaptions = imageTypeAnalysis?.needsCaptions || \n                     (payload.imageType && payload.imageType.includes('captions'));\n\nif (needsCaptions && captionText && captionText.trim()) {\n  // Build detailed caption instructions\n  const fontSizeMap = {\n    'Small (12px)': 'small text',\n    'Medium (16px)': 'medium-sized text', \n    'Large (20px)': 'large text',\n    'Extra Large (24px)': 'very large text'\n  };\n  \n  const positionMap = {\n    'top-left': 'top-left corner',\n    'top-center': 'top center',\n    'top-right': 'top-right corner',\n    'center-left': 'center-left',\n    'center': 'center',\n    'center-right': 'center-right', \n    'bottom-left': 'bottom-left corner',\n    'bottom-center': 'bottom center',\n    'bottom-right': 'bottom-right corner'\n  };\n  \n  const fontSize = fontSizeMap[captionFontSize] || 'medium-sized text';\n  const position = positionMap[captionPosition] || 'bottom center';\n  const fontFamily = captionFontStyle || 'clean sans-serif';\n  \n  enhancedPrompt += ` Include text overlay: \"${captionText.trim()}\" positioned at ${position} using ${fontSize} in ${fontFamily} font style. The text should be clearly readable with good contrast against the background.`;\n}\n\n// Add quality and format specifications for OpenAI\nenhancedPrompt += ' High quality, professional result, clean composition.';\n\nconsole.log('✅ Enhanced Prompt:', enhancedPrompt);\n\n// Build OpenAI Generation request\nconst generationRequest = {\n  model: 'gpt-image-1',\n  prompt: enhancedPrompt,\n  size: openaiSize,\n  quality: 'hd',\n  style: 'natural',\n  response_format: 'b64_json'\n};\n\nconsole.log('✅ Generation Request:', JSON.stringify(generationRequest, null, 2));\n\n// Return properly formatted data for OpenAI nodes\nreturn {\n  json: {\n    // Pass through original payload\n    ...payload,\n    \n    // Enhanced OpenAI-specific data\n    openaiPrompt: enhancedPrompt,\n    openaiSize: openaiSize,\n    \n    // For OpenAI Generation (JSON body)\n    generationRequest: generationRequest,\n    \n    // Individual components for debugging\n    promptComponents: {\n      basePrompt: finalPrompt,\n      imageStyle: imageStyle,\n      imageScene: imageScene,\n      captionText: captionText,\n      captionFont: `${captionFontStyle} ${captionFontSize}`,\n      captionPosition: captionPosition,\n      needsCaptions: needsCaptions\n    },\n    \n    // Routing info\n    hasReference: imageTypeAnalysis?.hasReference || false,\n    \n    // For debugging\n    openaiBuilder: {\n      inputSize: imageSize,\n      mappedSize: openaiSize,\n      promptLength: enhancedPrompt.length,\n      componentsUsed: {\n        style: !!(imageStyle && imageStyle !== 'Default'),\n        scene: !!(imageScene && imageScene.trim() && imageScene !== 'Scene'),\n        captions: needsCaptions && !!(captionText && captionText.trim())\n      },\n      timestamp: new Date().toISOString()\n    }\n  }\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1616,816],"id":"f57b57ca-34da-4fd2-836e-b87ea68639ee","name":"OpenAI Dynamic JSON Builder1"},{"parameters":{"jsCode":"// Extract Generated Image URL from Baserow Response\n// This extracts the actual image URL that was stored in Baserow\n\nconst baserowResponse = $input.item.json;\n\nconsole.log('🔍 Extracting image URL from Baserow response...');\n\n// Extract the generated image URL from field_7178 (Generated Image field)\nlet generatedImageUrl = null;\nlet imageId = null;\nlet socialMediaId = null;\n\ntry {\n  // Get the image ID and basic info\n  imageId = baserowResponse.id || baserowResponse.field_7177;\n  \n  // Get social media content link\n  if (baserowResponse.field_7192 && baserowResponse.field_7192.length > 0) {\n    socialMediaId = baserowResponse.field_7192[0].id;\n  }\n  \n  // Extract the generated image URL from field_7178\n  if (baserowResponse.field_7178 && baserowResponse.field_7178.length > 0) {\n    const imageData = baserowResponse.field_7178[0];\n    generatedImageUrl = imageData.url;\n    \n    console.log('✅ Found generated image URL:', generatedImageUrl);\n    console.log('📸 Image details:', {\n      name: imageData.visible_name,\n      size: imageData.size,\n      dimensions: `${imageData.image_width}x${imageData.image_height}`,\n      mimeType: imageData.mime_type\n    });\n  } else {\n    console.log('❌ No generated image found in field_7178');\n  }\n\n  // Also check if we need to extract from reference image for debugging\n  if (baserowResponse.field_7186 && baserowResponse.field_7186.length > 0) {\n    const refImage = baserowResponse.field_7186[0];\n    console.log('📋 Reference image:', refImage.url);\n  }\n  \n} catch (error) {\n  console.error('❌ Error extracting image URL:', error.message);\n}\n\nconsole.log('🎯 Extracted data:', {\n  imageId,\n  socialMediaId,\n  generatedImageUrl,\n  status: baserowResponse.field_7185?.value || 'Unknown'\n});\n\n// Prepare data for the completion webhook\nreturn {\n  json: {\n    // Original Baserow response\n    ...baserowResponse,\n    \n    // Extracted data for webhook\n    extractedData: {\n      imageId: imageId,\n      socialMediaId: socialMediaId,\n      generatedImageUrl: generatedImageUrl,\n      status: baserowResponse.field_7185?.value || 'Completed',\n      imagePrompt: baserowResponse.field_7179,\n      imageType: baserowResponse.field_7180?.value,\n      imageScene: baserowResponse.field_7181,\n      imageStyle: baserowResponse.field_7182?.value,\n      imageModel: baserowResponse.field_7183?.value,\n      imageSize: baserowResponse.field_7184?.value,\n      captionText: baserowResponse.field_7188,\n      captionFont: baserowResponse.field_7189?.value,\n      captionSize: baserowResponse.field_7190?.value,\n      captionPosition: baserowResponse.field_7191?.value,\n      completedAt: new Date().toISOString()\n    }\n  }\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[4144,752],"id":"55f32f96-2d23-4b2d-9a01-8715f9545a1b","name":"Code"},{"parameters":{"jsCode":"// Image Generation Completion Webhook\n// Add this as a Code node after the \"Extract Image URL\" node\n\n// Get the extracted data from the previous node\nconst extractedInfo = $input.item.json.extractedData;\n\nconsole.log('🔗 Preparing completion webhook data...');\nconsole.log('📥 Extracted info:', extractedInfo);\n\n// Use the extracted data from Baserow\nconst {\n  imageId,\n  socialMediaId,\n  generatedImageUrl,\n  status,\n  imagePrompt,\n  imageType,\n  imageScene,\n  imageStyle,\n  imageModel,\n  imageSize,\n  captionText,\n  captionFont,\n  captionSize,\n  captionPosition,\n  completedAt\n} = extractedInfo;\n\n// Validate that we have the essential data\nif (!generatedImageUrl) {\n  console.warn('⚠️ No generated image URL found - this might indicate an issue');\n}\n\nconsole.log('✅ Using Baserow-stored image URL:', generatedImageUrl);\n\n// Prepare webhook payload matching your field mappings\nconst webhookPayload = {\n  imageId: imageId,                    // To identify which record to update\n  status: status,                      // field_7185: Image Status\n  generatedImageUrl: generatedImageUrl, // field_7187: Generated Image URL\n  errorMessage: null,                  // No error since we got here successfully\n  updatedFields: {\n    field_7185: status,                              // Image Status\n    field_7187: generatedImageUrl,                   // Generated Image URL ⭐ This will update the empty field\n    field_7179: imagePrompt,                         // Image Prompt\n    field_7180: imageType,                           // Image Type\n    field_7181: imageScene,                          // Image Scene\n    field_7182: imageStyle,                          // Image Style\n    field_7183: imageModel,                          // Image Model\n    field_7192: socialMediaId,                       // Social Media Content link\n    field_7184: imageSize,                           // Image Size\n    field_7188: captionText,                         // Caption Text\n    field_7189: captionFont,                         // Caption Font Style\n    field_7190: captionSize,                         // Caption Font Size\n    field_7191: captionPosition,                     // Caption Position\n    field_7196: completedAt                          // Completed At timestamp\n  },\n  metadata: {\n    completedAt: completedAt,\n    workflowExecutionId: $workflow.id,\n    imageId: imageId,\n    socialMediaContentId: socialMediaId\n  }\n};\n\nconsole.log('📤 Webhook payload prepared:', JSON.stringify(webhookPayload, null, 2));\n\n// Return the payload for the HTTP Request node\nreturn {\n  json: webhookPayload\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[4272,752],"id":"27a65d88-97d5-4f04-8b38-87f2bf53df2d","name":"Code1"},{"parameters":{"method":"POST","url":"http://localhost:3000/api/webhooks/n8n/image-generation-complete","sendBody":true,"specifyBody":"json","jsonBody":"={{ JSON.stringify($json) }}","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[4448,752],"id":"63d6d0cc-5cb8-4fb8-8eb6-8191747d60c3","name":"HTTP Request"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"use-edits","leftValue":"={{ $json.body.metadata.contentType }}","rightValue":"image-idea","operator":{"type":"string","operation":"contains"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[-224,-736],"id":"f4bdf9dd-00ae-4178-a85a-bfa7a85325b4","name":"Nano Banana Route"},{"parameters":{"rules":{"values":[{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"e7211e46-0f49-46a0-9cb7-e83fed150efd","leftValue":"={{ $json.operationType }}","rightValue":"generate","operator":{"type":"string","operation":"equals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"generate"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"leftValue":"={{ $json.operationType }}","rightValue":"edit","operator":{"type":"string","operation":"equals"},"id":"85edf561-8f5e-4215-9e19-78ff0392068e"}],"combinator":"and"},"renameOutput":true,"outputKey":"edit"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"a6499bb1-6539-4491-8d5f-8d955507efde","leftValue":"={{ $json.operationType }}","rightValue":"combine","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"combine"}]},"options":{}},"type":"n8n-nodes-base.switch","typeVersion":3.2,"position":[1968,-800],"id":"68081019-5950-4c4d-ad0d-abf6c9f567a2","name":"Switch"},{"parameters":{"model":{"__rl":true,"value":"claude-3-5-sonnet-20241022","mode":"list","cachedResultName":"Claude Sonnet 3.5 (New)"},"options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatAnthropic","typeVersion":1.3,"position":[2512,-416],"id":"07169a9f-7a3a-45d4-88f1-3edf1a0079aa","name":"Sonnet 3.5","credentials":{"anthropicApi":{"id":"vh9pvkS1xu1Sr2bF","name":"Anthropic account"}}},{"parameters":{"promptType":"define","text":"={{ $json.message.text }}","needsFallback":true,"options":{"systemMessage":"=# Image Processing Agent\nYou are an AI image processing agent. Your job is to help users with specific image operations based on their request.\n\n## Operation Types\n- **GENERATE**: Create new images from text prompts\n- **EDIT**: Modify existing images \n- **COMBINE**: Merge multiple images together\n- **SEARCH**: Find existing images\n- **RENAME**: Change image names\n\n## Tool Usage Rules\n1. **Only use tools that match the user's specific request**\n2. **For GENERATE operations**: Use the Create New Image tool.\n3. **For EDIT operations**: Only use Edit Image tool if user provides specific edit instructions\n4. **For COMBINE operations**: Only use Combine Images tool if user provides 2+ image IDs. Get the image urls. When you find the image id's you need to send the image urls to the combine image tool. Do not send the image id, only send image url.\n5. **For SEARCH operations**: Use Search Raw Files or Search AI Images only when user asks to find images\n6. **For RENAME operations**: Use Change Name tool only when user explicitly asks to rename\n\n## Current Request Context\nOperation Type: {{ $json.userContext?.operationType || 'unknown' }}\nTask: {{ $json.userContext?.task || 'unknown' }}\n\n## Instructions\n- Read the user's request carefully\n- Identify what they actually want to do\n- Only call tools if the request explicitly requires that action\n- For simple generation requests, just provide the prompt - don't call tools\n","maxIterations":3,"returnIntermediateSteps":true}},"type":"@n8n/n8n-nodes-langchain.agent","typeVersion":2.2,"position":[3152,-832],"id":"4a66f4d9-314d-47cb-9131-6e974a5cef2f","name":"Photoshop Agent","onError":"continueErrorOutput"},{"parameters":{"description":"Call this tool to combine two images. You must pass over an image generation prompt, the IDs of both of the images, and a title for this new image.","workflowId":{"__rl":true,"value":"QNVD8DNkhhOiS1BD","mode":"list","cachedResultName":"Combined Images Nanobanana"},"workflowInputs":{"mappingMode":"defineBelow","value":{"prompt":"={{ $fromAI('prompt', `The image generation prompt. This should be optimized for AI image generation, and should only reference the images as image1 and image2. This prompt should not contain \\\\n or \"\".`, 'string') }}","image1":"={{ $fromAI('image1', `The URL of image 1`, 'string') }}","image2":"={{ $fromAI('image2', `The URL of image 2`, 'string') }}","imageTitle":"={{ $fromAI('imageTitle', `The title for the new image`, 'string') }}"},"matchingColumns":[],"schema":[{"id":"prompt","displayName":"prompt","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string"},{"id":"image1","displayName":"image1","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string"},{"id":"image2","displayName":"image2","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string"},{"id":"imageTitle","displayName":"imageTitle","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string","removed":false}],"attemptToConvertTypes":false,"convertFieldsToString":false}},"type":"@n8n/n8n-nodes-langchain.toolWorkflow","typeVersion":2.2,"position":[2928,-400],"id":"3c44eb42-9d1a-4f26-9086-2205384b6ec6","name":"Combine Images"},{"parameters":{"description":"Call this tool to edit an image. You must pass over a new image title, Url, an image prompt, and the image ID. ","workflowId":{"__rl":true,"mode":"list","value":"Q3mNKBzQD77ARCWD","cachedResultName":"Edit Image Nano Banana Tool"},"workflowInputs":{"mappingMode":"defineBelow","value":{"imageUrl":"={{ $fromAI('imageUrl', `The URL of the image to edit`, 'string') }}","imageTitle":"={{ $fromAI('imageTitle', `The title of the new image`, 'string') }}","imagePrompt":"={{ $fromAI('imagePrompt', `The image generation prompt. This should be detailed and optimized for AI image generation. This prompt should not contain \\\\n or \"\".`, 'string') }}","imageID":"={{ $fromAI('imageID', `The ID of the image to edit`, 'string') }}"},"matchingColumns":[],"schema":[{"id":"imageTitle","displayName":"imageTitle","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"removed":false},{"id":"imagePrompt","displayName":"imagePrompt","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"removed":false},{"id":"imageID","displayName":"imageID","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"removed":false},{"id":"imageUrl","displayName":"imageUrl","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"removed":false}],"attemptToConvertTypes":false,"convertFieldsToString":false}},"type":"@n8n/n8n-nodes-langchain.toolWorkflow","typeVersion":2.2,"position":[3040,-400],"id":"fd8850f7-76ae-42c6-8bd2-18aa2f26b3ea","name":"Edit Image"},{"parameters":{"content":"## Brain","height":224,"width":416,"color":7},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[2336,-480],"id":"e1508195-78ad-4fd8-96cc-c637a4024cfa","name":"Sticky Note"},{"parameters":{"content":"## AI Image Gen","height":224,"width":368,"color":5},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[2768,-480],"id":"f7fdf3d8-10be-42cf-b1d9-9f88490b1771","name":"Sticky Note1"},{"parameters":{"content":"## File Handling\n","height":224,"width":480,"color":4},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[3136,-480],"id":"e7df608e-8b8c-417c-9638-574ca9423874","name":"Sticky Note2"},{"parameters":{"content":"## Text/Image Input","height":352,"width":720,"color":2},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[1664,-928],"id":"e7941876-49a4-4d13-91cc-e5e2251c1484","name":"Sticky Note3"},{"parameters":{"content":"## Photoshop Agent","height":352,"width":480,"color":6},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[2400,-928],"id":"5ea24db3-521f-4c13-9b25-babb695d1e35","name":"Sticky Note4"},{"parameters":{"sessionIdType":"customKey","sessionKey":"={{ $('Telegram Trigger').item.json.message.chat.id }}"},"type":"@n8n/n8n-nodes-langchain.memoryBufferWindow","typeVersion":1.3,"position":[2640,-400],"id":"cc4f3d58-3a36-45c2-971e-7d57b3d25b65","name":"Simple Memory"},{"parameters":{"model":"openai/gpt-5-mini","options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenRouter","typeVersion":1,"position":[2384,-416],"id":"c3a01156-29bc-4670-8dec-a0aaee433380","name":"GPT 5 mini","credentials":{"openRouterApi":{"id":"eni2kFdHGvy7lEd3","name":"OpenRouter account"}}},{"parameters":{"operation":"update","databaseId":"={{ $('Nano Banana Payload Processor').item.json.baserow.databaseId }}","tableId":"={{ $('Nano Banana Payload Processor').item.json.baserow.tableId }}","rowId":"={{ $fromAI('rowId', 'The ID of the record/row to update', 'number') }}"},"type":"n8n-nodes-base.baserowTool","typeVersion":1,"position":[3200,-416],"id":"8ce7dc5c-7111-4ada-939b-db71bcd64a72","name":"Change File Name","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"databaseId":"={ $('Nano Banana Payload Processor').item.json.baserow.databaseId }}","tableId":"={{ $('Nano Banana Payload Processor').item.json.baserow.tableId }}","additionalOptions":{}},"type":"n8n-nodes-base.baserowTool","typeVersion":1,"position":[3344,-416],"id":"4ff24056-788c-4012-84be-323d7de24494","name":"Search Raw Files","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"databaseId":"={{ $('Nano Banana Payload Processor').item.json.baserow.databaseId }}","tableId":"={{ $('Nano Banana Payload Processor').item.json.baserow.tableId }}","limit":100,"additionalOptions":{}},"type":"n8n-nodes-base.baserowTool","typeVersion":1,"position":[3504,-416],"id":"62d219b0-e5d9-4c56-b83b-1aeeb4132a49","name":"Search AI Images","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"jsCode":"// Complete Nano Banana Payload Processor\n// Insert this as a Code node right after \"Nano Banana Route\" and before \"Switch\"\n\nconst webhookData = $json;\nconst payload = webhookData.body || webhookData;\n\nconsole.log('🍌 Nano Banana Payload Processor - Complete Version');\nconsole.log('📨 Received payload:', JSON.stringify(payload, null, 2));\n\n// Extract data from your payload structure\nconst {\n  client_id,\n  clientId = client_id,\n  base_id,\n  table_id,\n  baserow,\n  image,\n  tables,\n  metadata\n} = payload;\n\n// Extract image data\nconst {\n  imagePrompt,\n  imageScene = '',\n  imageType,\n  imageStyle,\n  imageModel,\n  imageSize,\n  referenceUrl = '',\n  operationType, // \"generate\", \"edit\", \"combine\"\n  notes,\n  imageStatus,\n  selectedImages = [],\n  uploadedImages = [],\n  referenceImageData = {},\n  voiceNoteData = null\n} = image || {};\n\nconsole.log('🎯 Extracted data:', {\n  operationType,\n  imagePrompt,\n  hasVoiceNote: !!voiceNoteData,\n  uploadedCount: uploadedImages.length,\n  selectedCount: selectedImages.length\n});\n\n// Validation\nconst errors = [];\nif (!clientId) errors.push('clientId is required');\nif (!baserow?.tableId) errors.push('baserow.tableId is required');\nif (!baserow?.token) errors.push('baserow.token is required');\nif (!operationType) errors.push('image.operationType is required');\nif (!imageModel) errors.push('image.imageModel is required');\n\n// For generate: need prompt or voice note\nif (operationType === 'generate' && !imagePrompt && !voiceNoteData) {\n  errors.push('imagePrompt or voiceNoteData required for generate operation');\n}\n\n// For edit/combine: need reference images\nif ((operationType === 'edit' || operationType === 'combine') && \n    selectedImages.length === 0 && uploadedImages.length === 0) {\n  errors.push('selectedImages or uploadedImages required for edit/combine operations');\n}\n\nif (errors.length > 0) {\n  return {\n    json: {\n      status: 'error',\n      message: 'Nano Banana validation failed',\n      errors: errors,\n      originalPayload: payload\n    }\n  };\n}\n\n// Record ID - app always creates the record first\nconst recordId = baserow.recordId || tables?.images?.recordId;\nif (!recordId) {\n  errors.push('recordId is required - app should create record first');\n  return {\n    json: {\n      status: 'error',\n      message: 'Missing recordId',\n      errors: errors\n    }\n  };\n}\n\nconsole.log('✅ Using existing record ID:', recordId);\n\n// Process voice note if present\nlet voiceProcessing = {\n  hasVoiceNote: !!voiceNoteData,\n  needsConversion: false,\n  voiceData: null\n};\n\nif (voiceNoteData) {\n  voiceProcessing = {\n    hasVoiceNote: true,\n    needsConversion: true,\n    voiceData: voiceNoteData,\n    format: 'webm', // You specified .webm format\n    processingNote: 'Voice note will be converted to text and sent to AI agent'\n  };\n  console.log('🎙️ Voice note detected, will need conversion');\n}\n\n// Enhanced Image Type Analysis\nconst operationAnalysis = {\n  'generate': { \n    hasReference: false, \n    referenceType: null, \n    needsCaptions: imageType?.includes('captions') || false,\n    aiAgentRole: 'Generate new image based on prompt/voice instructions',\n    expectedFlow: 'voice-to-text → AI agent → generation'\n  },\n  'edit': { \n    hasReference: true, \n    referenceType: selectedImages.length > 0 ? 'database' : 'upload',\n    needsCaptions: imageType?.includes('captions') || false,\n    aiAgentRole: 'Edit existing image based on instructions',\n    expectedFlow: 'voice-to-text → AI agent → edit tool → img2img'\n  },\n  'combine': { \n    hasReference: true, \n    referenceType: selectedImages.length > 0 ? 'database' : 'upload',\n    needsCaptions: false,\n    aiAgentRole: 'Combine multiple images based on instructions',\n    expectedFlow: 'voice-to-text → AI agent → combine tool'\n  }\n};\n\nconst analysis = operationAnalysis[operationType] || operationAnalysis['generate'];\n\n// Process image references\nlet imageReferences = {\n  fromDatabase: selectedImages.map(id => ({\n    id: id,\n    source: 'database',\n    needsDownload: true\n  })),\n  fromUploads: uploadedImages.map((img, index) => ({\n    ...img,\n    id: `upload_${index}`,\n    source: 'upload',\n    needsProcessing: true\n  })),\n  totalCount: selectedImages.length + uploadedImages.length\n};\n\n// Determine primary reference based on operation\nlet primaryReference = null;\nif (analysis.hasReference) {\n  if (selectedImages.length > 0) {\n    primaryReference = { type: 'database', id: selectedImages[0] };\n  } else if (uploadedImages.length > 0) {\n    primaryReference = { type: 'upload', data: uploadedImages[0] };\n  }\n}\n\n// Build enhanced prompt (base for AI agent)\nlet basePrompt = imagePrompt || '';\nif (imageScene && imageScene.trim() && imageScene !== 'Scene') {\n  basePrompt += ` Scene: ${imageScene.trim()}.`;\n}\nif (imageStyle && imageStyle !== 'Default') {\n  basePrompt += ` Style: ${imageStyle}.`;\n}\n\n// Create AI Agent instruction based on operation\nlet aiAgentInstruction = '';\nswitch (operationType) {\n  case 'generate':\n    aiAgentInstruction = voiceProcessing.hasVoiceNote \n      ? 'The user provided voice instructions for generating a new image. Convert the voice to text and create an appropriate image based on those instructions.'\n      : `Generate a new image with this prompt: ${basePrompt}`;\n    break;\n    \n  case 'edit':\n    aiAgentInstruction = `Edit an existing image. `;\n    if (selectedImages.length > 0) {\n      aiAgentInstruction += `Use image ID ${selectedImages[0]} from the database. `;\n    }\n    if (uploadedImages.length > 0) {\n      aiAgentInstruction += `The user uploaded ${uploadedImages.length} image(s): ${uploadedImages.map(img => img.name).join(', ')}. `;\n    }\n    aiAgentInstruction += voiceProcessing.hasVoiceNote \n      ? 'Follow the voice instructions for how to edit the image.'\n      : `Edit instructions: ${basePrompt}`;\n    break;\n    \n  case 'combine':\n    aiAgentInstruction = `Combine multiple images. `;\n    if (selectedImages.length > 0) {\n      aiAgentInstruction += `Use these database images: ${selectedImages.join(', ')}. `;\n    }\n    if (uploadedImages.length > 0) {\n      aiAgentInstruction += `Plus these uploaded images: ${uploadedImages.map(img => img.name).join(', ')}. `;\n    }\n    aiAgentInstruction += voiceProcessing.hasVoiceNote \n      ? 'Follow the voice instructions for how to combine the images.'\n      : `Combination instructions: ${basePrompt}`;\n    break;\n}\n\n// API configuration (in case needed for direct calls)\nconst isOpenAI = imageModel === 'openai/gpt-image-1';\nconst apiMethod = analysis.hasReference ? (isOpenAI ? 'edit' : 'img2img') : 'text2img';\n\nconsole.log('🎯 Processing complete:', {\n  operationType,\n  hasVoiceNote: voiceProcessing.hasVoiceNote,\n  referenceCount: imageReferences.totalCount,\n  primaryReference,\n  aiAgentRole: analysis.aiAgentRole\n});\n\n// Return comprehensive payload for nano banana workflow\nreturn {\n  json: {\n    // === ORIGINAL WEBHOOK DATA ===\n    ...webhookData,\n    \n    // === CORE IDENTIFICATION ===\n    recordId: recordId,\n    imageId: recordId, // For compatibility with existing nodes\n    clientId: clientId,\n    operationType: operationType,\n    \n    // === IMAGE CONFIGURATION ===\n    imagePrompt: imagePrompt,\n    imageType: imageType,\n    imageModel: imageModel,\n    imageScene: imageScene,\n    imageStyle: imageStyle,\n    imageSize: imageSize,\n    basePrompt: basePrompt,\n    \n    // === BASEROW CONFIGURATION ===\n    baserow: {\n      databaseId: baserow.databaseId,\n      token: baserow.token,\n      tableId: baserow.tableId,\n      recordId: recordId,\n      needsUpdate: true, // Always update existing record\n      needsNewRecord: false // App creates record first\n    },\n    \n    // === VOICE NOTE PROCESSING ===\n    voiceNote: voiceProcessing,\n    \n    // === IMAGE REFERENCES ===\n    imageReferences: imageReferences,\n    primaryReference: primaryReference,\n    \n    // === AI AGENT CONFIGURATION ===\n    aiAgent: {\n      instruction: aiAgentInstruction,\n      operationType: operationType,\n      role: analysis.aiAgentRole,\n      expectedFlow: analysis.expectedFlow,\n      hasVoiceNote: voiceProcessing.hasVoiceNote,\n      needsVoiceConversion: voiceProcessing.needsConversion\n    },\n    \n    // === ROUTING FLAGS ===\n    isOpenAI: isOpenAI,\n    useReference: analysis.hasReference,\n    addCaptions: analysis.needsCaptions,\n    \n    // === ANALYSIS DATA ===\n    imageTypeAnalysis: {\n      originalType: imageType,\n      hasReference: analysis.hasReference,\n      referenceType: analysis.referenceType,\n      needsCaptions: analysis.needsCaptions,\n      apiMethod: apiMethod\n    },\n    \n    // === NANO BANANA SPECIFIC ===\n    nanoBanana: {\n      operationType: operationType,\n      uploadedImages: uploadedImages,\n      selectedImages: selectedImages,\n      referenceImageData: referenceImageData,\n      voiceNoteData: voiceNoteData,\n      clientInfo: {\n        id: clientId,\n        name: payload.client?.name || clientId\n      },\n      tables: tables,\n      metadata: metadata,\n      originalPayload: payload\n    },\n    \n    // === PROCESSING METADATA ===\n    processing: {\n      model: imageModel,\n      isOpenAI: isOpenAI,\n      apiMethod: apiMethod,\n      hasScene: !!(imageScene && imageScene.trim() && imageScene !== 'Scene'),\n      referenceSource: analysis.referenceType,\n      needsVoiceConversion: voiceProcessing.needsConversion\n    },\n    \n    // === STATUS ===\n    validated: true,\n    source: 'nano-banana-complete',\n    timestamp: new Date().toISOString()\n  }\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[480,-816],"id":"160af290-78c4-46df-93fe-59342938e5fb","name":"Nano Banana Payload Processor"},{"parameters":{"assignments":{"assignments":[{"id":"53de4eb0-6684-48f5-a5b5-2b3bedaff817","name":"message.text","value":"=GENERATE REQUEST: Create a new image with this instruction: {{ $json.finalInstruction }}. \n\n\nSTEPS:\n1. Then use \"Create New Image\" tool with:\n   - imagePrompt: {{ $json.finalInstruction }}\n   - imageTitle: [generate an appropriate title]\nto create a new image.","type":"string"},{"id":"ed1f35f6-72ff-4734-b907-a8825ae7cd8b","name":"userContext","value":"={\n              \"operationType\": \"={{ $json.operationType }}\",\n              \"clientId\": \"={{ $json.clientId }}\",\n              \"recordId\": \"={{ $json.recordId }}\",\n              \"task\": \"generate\",\n              \"instruction\": \"={{ $json.finalInstruction }}\",\n              \"baserowConfig\": {\n                \"databaseId\": \"={{ $json.baserow.databaseId }}\",\n                \"tableId\": \"={{ $json.baserow.tableId }}\",\n                \"token\": \"={{ $json.baserow.token }}\"\n              },\n              \"imageConfig\": {\n                \"model\": \"={{ $json.imageModel }}\",\n                \"size\": \"={{ $json.imageSize }}\",\n                \"style\": \"={{ $json.imageStyle }}\"\n              },\n              \"inputProcessing\": \"={{ $json.processedInput }}\"\n            }","type":"object"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[2624,-912],"id":"bbbd2f50-c52f-4cdc-adc4-5c46ed94f814","name":"Set Text for Generate"},{"parameters":{"assignments":{"assignments":[{"id":"53de4eb0-6684-48f5-a5b5-2b3bedaff817","name":"message.text","value":"=EDIT REQUEST: Edit an existing image with these instructions: {{ $json.finalInstruction }}.\n\nSTEPS:\n1. First use \"Search AI Images\" tool to find the image record by ID: \n- Databaseid: {{ $json.baserow.databaseId }}\n- Tableid: {{ $json.baserow.tableId }}\n- Recordid: {{ $json.baserow.recordId }}\n2. Extract the image URL from the search results (field_7178[0].url or Generated Image field)\n3. Then use \"Edit Image\" tool with:\n   - imageID: {{ $json.baserow.recordId }}\n   - imageUrl: [the URL you found in step 2 - this can be in the image field or the Reference Image field]\n   - imagePrompt: {{ $json.finalInstruction }}\n   - imageTitle: [generate an appropriate title]","type":"string"},{"id":"ed1f35f6-72ff-4734-b907-a8825ae7cd8b","name":"userContext","value":"={\n              \"operationType\": \"={{ $json.operationType }}\",\n              \"clientId\": \"={{ $json.clientId }}\",\n              \"recordId\": \"={{ $json.recordId }}\",\n              \"task\": \"edit\",\n              \"instruction\": \"={{ $json.finalInstruction }}\",\n              \"baserowConfig\": {\n                \"databaseId\": \"={{ $json.baserow.databaseId }}\",\n                \"tableId\": \"={{ $json.baserow.tableId }}\",\n                \"token\": \"={{ $json.baserow.token }}\"\n              },\n              \"imageConfig\": {\n                \"model\": \"={{ $json.imageModel }}\",\n                \"size\": \"={{ $json.imageSize }}\",\n                \"style\": \"={{ $json.imageStyle }}\"\n              },\n              \"imageReferences\": {\n                \"fromDatabase\": \"={{ $json.imageReferences.fromDatabase }}\",\n                \"fromUploads\": \"={{ $json.imageReferences.fromUploads }}\",\n                \"primary\": \"={{ $json.primaryReference }}\"\n              },\n              \"inputProcessing\": \"={{ $json.processedInput }}\"\n            }","type":"object"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[2624,-784],"id":"694e8337-89dd-4945-96e4-43fb4beafbc9","name":"Set Text for Edit"},{"parameters":{"assignments":{"assignments":[{"id":"53de4eb0-6684-48f5-a5b5-2b3bedaff817","name":"message.text","value":"=COMBINE REQUEST: Combine multiple images with these instructions: {{ $json.finalInstruction }}. {{ $json.imageReferences.fromDatabase.length > 0 ? 'Image IDs to combine: ' + $json.imageReferences.fromDatabase.map(img => img.id).join(', ') + '. ' : '' }}{{ $json.imageReferences.fromUploads.length > 0 ? 'Uploaded images to combine: ' + $json.imageReferences.fromUploads.map(img => img.name).join(', ') + '. ' : '' }}Use ONLY the Combine Images tool with exactly these image IDs.","type":"string"},{"id":"ed1f35f6-72ff-4734-b907-a8825ae7cd8b","name":"userContext","value":"={\n              \"operationType\": \"={{ $json.operationType }}\",\n              \"clientId\": \"={{ $json.clientId }}\",\n              \"recordId\": \"={{ $json.recordId }}\",\n              \"task\": \"combine\",\n              \"instruction\": \"={{ $json.finalInstruction }}\",\n              \"baserowConfig\": {\n                \"databaseId\": \"={{ $json.baserow.databaseId }}\",\n                \"tableId\": \"={{ $json.baserow.tableId }}\",\n                \"token\": \"={{ $json.baserow.token }}\"\n              },\n              \"imageConfig\": {\n                \"model\": \"={{ $json.imageModel }}\",\n                \"size\": \"={{ $json.imageSize }}\",\n                \"style\": \"={{ $json.imageStyle }}\"\n              },\n              \"imageReferences\": {\n                \"fromDatabase\": \"={{ $json.imageReferences.fromDatabase }}\",\n                \"fromUploads\": \"={{ $json.imageReferences.fromUploads }}\",\n                \"totalCount\": \"={{ $json.imageReferences.totalCount }}\"\n              },\n              \"inputProcessing\": \"={{ $json.processedInput }}\"\n            }","type":"object"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[2624,-656],"id":"0ba1dcbc-8b72-471a-a813-9a225e58706d","name":"Set Text for Combine"},{"parameters":{"jsCode":"// Dynamic Field Mapping for Photoshop Agent Response - GET DATA FROM SOURCE\nconst agentResponse = $input.item.json;\n\nconsole.log('🤖 Processing Photoshop Agent Response');\n\n// Extract the image information from the agent's observation\nlet imageName = null;\nlet imageUrl = null;\n\ntry {\n  if (agentResponse.observation) {\n    let observationData;\n    \n    if (typeof agentResponse.observation === 'string') {\n      const cleanObservation = agentResponse.observation.replace(/\\n/g, '').trim();\n      observationData = JSON.parse(cleanObservation);\n    } else {\n      observationData = agentResponse.observation;\n    }\n    \n    if (observationData && observationData.length > 0) {\n      const responseText = observationData[0].Response;\n      \n      const nameMatch = responseText.match(/named\\s+\"([^\"]+)\"/);\n      const urlMatch = responseText.match(/https:\\/\\/[^\\s\"]+/);\n      \n      if (nameMatch) imageName = nameMatch[1];\n      if (urlMatch) imageUrl = urlMatch[0];\n    }\n  }\n  \n  // Fallback extraction\n  if (!imageName || !imageUrl) {\n    const responseStr = JSON.stringify(agentResponse);\n    \n    if (!imageUrl) {\n      const urlMatch = responseStr.match(/https:\\/\\/baserow\\.aiautomata\\.co\\.za\\/media\\/[^\\s\"]+/);\n      if (urlMatch) imageUrl = urlMatch[0];\n    }\n    \n    if (!imageName && imageUrl) {\n      const urlParts = imageUrl.split('/');\n      imageName = urlParts[urlParts.length - 1];\n    }\n  }\n  \n} catch (error) {\n  console.error('❌ Error parsing agent response:', error.message);\n}\n\n// ✅ GET ORIGINAL CONFIG FROM NANO BANANA PAYLOAD PROCESSOR\nlet originalPayload = null;\nlet recordId = null;\nlet tableId = null;\nlet token = null;\n\ntry {\n  // Get the original payload data from the Nano Banana Payload Processor node\n  originalPayload = $('Nano Banana Payload Processor').item.json;\n  \n  console.log('🍌 Original Nano Banana payload found:', !!originalPayload);\n  \n  if (originalPayload) {\n    recordId = originalPayload.recordId || originalPayload.imageId;\n    tableId = originalPayload.baserow?.tableId;\n    token = originalPayload.baserow?.token;\n    \n    console.log('✅ Extracted from original payload:', {\n      recordId,\n      tableId,\n      tokenPresent: !!token\n    });\n  }\n} catch (error) {\n  console.error('❌ Error accessing Nano Banana Payload Processor:', error.message);\n  \n  // Fallback: try to get from current node context\n  try {\n    // Sometimes the data might be available in a different way\n    const workflowData = $workflow;\n    console.log('🔍 Checking workflow context...');\n    \n    // You might need to adjust this based on your workflow structure\n    // This is a fallback approach\n  } catch (fallbackError) {\n    console.error('❌ Fallback approach failed:', fallbackError.message);\n  }\n}\n\nconsole.log('🎯 Final configuration check:', {\n  imageName,\n  imageUrl,\n  recordId,\n  tableId,\n  token: token ? 'Present' : 'Missing'\n});\n\n// Validation\nif (!imageName || !imageUrl) {\n  return {\n    json: {\n      status: 'error',\n      message: 'Could not extract image name or URL from agent response',\n      debug: { \n        imageName, \n        imageUrl, \n        agentResponseKeys: Object.keys(agentResponse)\n      }\n    }\n  };\n}\n\nif (!recordId || !tableId || !token) {\n  return {\n    json: {\n      status: 'error',\n      message: 'Missing required Baserow configuration',\n      debug: { \n        recordId, \n        tableId, \n        token: !!token,\n        originalPayloadAvailable: !!originalPayload\n      },\n      suggestion: 'Check if Nano Banana Payload Processor node is named correctly and executed before this node'\n    }\n  };\n}\n\n// Build update data\nconst dynamicUpdateData = {\n  \"field_7185\": \"Completed\",\n  \"field_7178\": [{\n    \"name\": imageName\n  }],\n  \"field_7187\": imageUrl,\n  \"field_7196\": new Date().toISOString()\n};\n\nconst baserowUpdate = {\n  url: `https://baserow.aiautomata.co.za/api/database/rows/table/${tableId}/${recordId}/`,\n  headers: {\n    \"Authorization\": `Token ${token}`\n  }\n};\n\nconsole.log('✅ Successfully prepared Baserow update:', {\n  url: baserowUpdate.url,\n  updateDataFields: Object.keys(dynamicUpdateData)\n});\n\nreturn {\n  json: {\n    // Keep agent response data\n    agentResponse: agentResponse,\n    \n    // Extracted and processed data\n    extractedImageData: {\n      imageName,\n      imageUrl,\n      recordId,\n      tableId\n    },\n    \n    // Dynamic update configuration for the HTTP Request node\n    dynamicUpdateData,\n    baserowUpdate,\n    \n    // Original payload for reference\n    originalConfig: {\n      recordId,\n      tableId,\n      tokenPresent: !!token\n    },\n    \n    // Status\n    status: 'success',\n    message: 'Successfully prepared Baserow update from agent response',\n    timestamp: new Date().toISOString()\n  }\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[3840,-784],"id":"04fcd227-d2e7-4466-8311-ff567a4681c0","name":"Dynamic Field Mapping"},{"parameters":{"jsCode":"// Pre-Switch Smart Voice and Text Processor\n// Processes voice and text BEFORE routing to operation-specific logic\n// Position: After \"Nano Banana Payload Processor\", Before \"Switch\"\n\nconst inputData = $json;\n\nconsole.log('🎙️📝 Pre-Switch Smart Voice and Text Processor');\nconsole.log('📋 Has voice note:', inputData.voiceNote?.hasVoiceNote);\nconsole.log('📝 Has text prompt:', !!(inputData.imagePrompt && inputData.imagePrompt.trim()));\nconsole.log('🔄 Operation type:', inputData.operationType);\n\n// Extract available inputs\nconst hasVoiceNote = inputData.voiceNote?.hasVoiceNote || false;\nconst hasTextPrompt = !!(inputData.imagePrompt && inputData.imagePrompt.trim());\nconst needsVoiceConversion = inputData.voiceNote?.needsConversion || false;\nconst basePrompt = inputData.basePrompt || inputData.imagePrompt || '';\nconst operation = inputData.operationType;\n\nconsole.log('📊 Input analysis:', {\n  hasVoiceNote,\n  hasTextPrompt,\n  needsVoiceConversion,\n  basePromptLength: basePrompt.length,\n  operation\n});\n\n// Initialize processing variables\nlet processingApproach = '';\nlet finalText = '';\nlet convertedVoiceText = '';\nlet processingSuccess = true;\nlet processingError = null;\nlet combinedInstruction = '';\n\n// STEP 1: Handle voice conversion if needed\nif (hasVoiceNote && needsVoiceConversion) {\n  console.log('🎙️ Converting voice to text...');\n  \n  // Voice conversion logic (replace with actual API call)\n  // Simulated conversion - replace with real Whisper/Google API\n  const voiceConversionResult = {\n    success: true,\n    convertedText: \"Make this image more vibrant and add a sunset background with warm colors\", // Simulated\n    confidence: 0.94,\n    language: 'en',\n    duration: 3.8,\n    processingTime: Date.now()\n  };\n  \n  if (voiceConversionResult.success) {\n    convertedVoiceText = voiceConversionResult.convertedText;\n    console.log('✅ Voice converted:', convertedVoiceText);\n  } else {\n    processingError = 'Voice conversion failed';\n    console.log('❌ Voice conversion failed');\n  }\n}\n\n// STEP 2: Determine the best text to use\nif (!hasVoiceNote && !hasTextPrompt) {\n  // No input at all\n  processingApproach = 'error-no-input';\n  processingSuccess = false;\n  processingError = 'No voice note or text prompt provided';\n  finalText = '';\n  \n} else if (hasVoiceNote && convertedVoiceText && hasTextPrompt) {\n  // Both voice and text available\n  processingApproach = 'voice-and-text-combined';\n  finalText = `${convertedVoiceText}. Additional context: ${basePrompt}`;\n  \n} else if (hasVoiceNote && convertedVoiceText) {\n  // Voice only (successful conversion)\n  processingApproach = 'voice-only';\n  finalText = convertedVoiceText;\n  \n} else if (hasTextPrompt) {\n  // Text only (either no voice, or voice conversion failed)\n  processingApproach = hasVoiceNote ? 'voice-failed-text-fallback' : 'text-only';\n  finalText = basePrompt;\n  \n} else {\n  // Voice conversion failed and no text backup\n  processingApproach = 'error-voice-failed-no-text';\n  processingSuccess = false;\n  processingError = 'Voice conversion failed and no text prompt provided';\n  finalText = '';\n}\n\n// STEP 3: Build operation-agnostic instruction\n// The Switch node will handle operation-specific routing\nif (processingSuccess && finalText) {\n  combinedInstruction = finalText;\n  \n  // Add any common context that applies to all operations\n  if (inputData.imageScene && inputData.imageScene.trim() && inputData.imageScene !== 'Scene') {\n    combinedInstruction += ` Scene context: ${inputData.imageScene.trim()}.`;\n  }\n  \n  if (inputData.imageStyle && inputData.imageStyle !== 'Default' && inputData.imageStyle !== 'Photorealistic') {\n    combinedInstruction += ` Style: ${inputData.imageStyle}.`;\n  }\n  \n} else {\n  combinedInstruction = processingError || 'Unable to process input';\n}\n\nconsole.log('🎯 Processing complete:', {\n  approach: processingApproach,\n  success: processingSuccess,\n  finalTextLength: finalText.length,\n  hasVoiceText: !!convertedVoiceText,\n  instructionLength: combinedInstruction.length\n});\n\n// Return processed data for routing and downstream use\nreturn {\n  json: {\n    // Original data passed through\n    ...inputData,\n    \n    // Enhanced with processed voice/text\n    processedInput: {\n      approach: processingApproach,\n      success: processingSuccess,\n      error: processingError,\n      \n      // Input analysis\n      hasVoiceNote: hasVoiceNote,\n      hasTextPrompt: hasTextPrompt,\n      needsVoiceConversion: needsVoiceConversion,\n      \n      // Conversion results\n      convertedVoiceText: convertedVoiceText,\n      originalTextPrompt: basePrompt,\n      finalText: finalText,\n      combinedInstruction: combinedInstruction,\n      \n      // Quality metadata\n      voiceConfidence: hasVoiceNote ? 0.94 : null, // From voice conversion\n      processingTimestamp: new Date().toISOString()\n    },\n    \n    // Ready-to-use instruction for downstream nodes\n    finalInstruction: combinedInstruction,\n    \n    // Enhanced prompt for image generation (combines everything)\n    enhancedPrompt: combinedInstruction,\n    \n    // Success/error status for routing decisions\n    inputProcessingSuccess: processingSuccess,\n    inputProcessingError: processingError,\n    \n    // Voice conversion details (for compatibility with existing structure)\n    voiceConversion: {\n      processed: hasVoiceNote,\n      success: hasVoiceNote ? !!convertedVoiceText : null,\n      convertedText: convertedVoiceText,\n      approach: processingApproach\n    },\n    \n    // AI Agent will use this\n    message: {\n      text: combinedInstruction\n    },\n    \n    // Metadata\n    voiceTextProcessed: true,\n    processingStage: 'pre-switch',\n    timestamp: new Date().toISOString()\n  }\n};\n\n/* \n🚨 VOICE API INTEGRATION NOTES:\nReplace the voiceConversionResult simulation with actual API:\n\n// Option 1: n8n HTTP Request node for Whisper (add before this Code node)\n// Then use: const conversionResult = $('Whisper API').item.json;\n\n// Option 2: Direct API call in this node:\nif (hasVoiceNote && needsVoiceConversion) {\n  try {\n    const formData = new FormData();\n    formData.append('file', inputData.voiceNote.voiceData);\n    formData.append('model', 'whisper-1');\n    \n    const response = await fetch('https://api.openai.com/v1/audio/transcriptions', {\n      method: 'POST',\n      headers: { 'Authorization': 'Bearer YOUR_OPENAI_KEY' },\n      body: formData\n    });\n    \n    const result = await response.json();\n    convertedVoiceText = result.text;\n    \n  } catch (error) {\n    console.error('Voice conversion failed:', error);\n    processingError = `Voice conversion failed: ${error.message}`;\n  }\n}\n*/"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[832,-816],"id":"b9809654-88e8-44cd-ab61-d9b90ff53fdd","name":"Smart Voice & Text Processor"},{"parameters":{"description":"Call this tool to create new images. You must pass over an image generation prompt,  and a title for this new image.","workflowId":{"__rl":true,"value":"enW3ViUlsacdPdH2","mode":"list","cachedResultName":"Generate Image Nano Banana Tool"},"workflowInputs":{"mappingMode":"defineBelow","value":{"imageTitle":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('imageTitle', `The title for the new image`, 'string') }}","imagePrompt":"={{ $fromAI('imagePrompt', `The image generation prompt. This should be detailed and optimized for AI image generation. This prompt should not contain \\\\n or \"\".`, 'string') }}","imageID":"={{ $fromAI('imageID', `The ID of the image to edit`, 'string') }}"},"matchingColumns":[],"schema":[{"id":"imageTitle","displayName":"imageTitle","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string","removed":false},{"id":"imagePrompt","displayName":"imagePrompt","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string","removed":false},{"id":"imageID","displayName":"imageID","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string","removed":false}],"attemptToConvertTypes":false,"convertFieldsToString":false}},"type":"@n8n/n8n-nodes-langchain.toolWorkflow","typeVersion":2.2,"position":[2816,-400],"id":"68575745-eb97-4df3-b222-d6100c0c3341","name":"Create New Image"},{"parameters":{"operation":"update","databaseId":"={{ $('Nano Banana Payload Processor').item.json.body.base_id }}","tableId":"={{ $json.extractedImageData.tableId }}","rowId":"={{ $json.extractedImageData.recordId }}","dataToSend":"autoMapInputData"},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[4688,-592],"id":"659ebfae-5f4e-4c41-9026-b631ddc20965","name":"Update a row","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"method":"PATCH","url":"={{ $json.baserowUpdate.url }}","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"application/json"},{"name":"Authorization","value":"={{ $json.baserowUpdate.headers.Authorization }}"}]},"sendBody":true,"specifyBody":"json","jsonBody":"={{ $json.dynamicUpdateData }}","options":{}},"id":"d5212190-a75d-47b6-b317-5f3c4b86071b","name":"Update Baserow Success1","type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[4240,-768]},{"parameters":{"jsCode":"// Clean the data from Dynamic Field Mapping - Fixed Array Issue\nconst inputData = $json;\n\nconsole.log('🔍 Clean Data Input Type:', typeof inputData.dynamicUpdateData);\nconsole.log('🔍 Clean Data Input IsArray:', Array.isArray(inputData.dynamicUpdateData));\nconsole.log('🔍 Clean Data Input:', JSON.stringify(inputData.dynamicUpdateData, null, 2));\n\n// Extract the actual image URL and filename from the agent response\nlet cleanImageUrl = '';\nlet cleanImageName = '';\n\n// Get the agent response text\nconst agentOutput = inputData.agentResponse?.output || '';\n\n// Extract URL using regex - look for the EDITED image URL (the new one)\n// First try to find the edited image URL (appears after 'Edited image URL:')\nlet urlMatch = agentOutput.match(/Edited image URL:\\s*\\n?\\s*(https:\\/\\/baserow\\.aiautomata\\.co\\.za\\/media\\/user_files\\/[^\\s\\n]+)/);\nif (!urlMatch) {\n  // Fallback: look for any baserow URL\n  urlMatch = agentOutput.match(/https:\\/\\/baserow\\.aiautomata\\.co\\.za\\/media\\/user_files\\/[^\\s\\n]+/g);\n  if (urlMatch && urlMatch.length > 1) {\n    // If multiple URLs found, take the last one (likely the new edited image)\n    urlMatch = [urlMatch[urlMatch.length - 1]];\n  }\n}\nif (urlMatch) {\n  cleanImageUrl = Array.isArray(urlMatch) ? urlMatch[0] : urlMatch[1] || urlMatch[0];\n  // Extract filename from URL\n  const urlParts = cleanImageUrl.split('/');\n  const fullFilename = urlParts[urlParts.length - 1];\n  // Baserow format: {hash}_{actualfilename}.{extension}\n  // For edited images, use a clean, short filename\n  const fileExtension = fullFilename.split('.').pop();\n  cleanImageName = fullFilename;\n  console.log('✅ Extracted from URL:', { cleanImageUrl, cleanImageName });\n}\n\n// Fallback: try to clean the existing extracted data\nif (!cleanImageUrl && inputData.extractedImageData?.imageUrl) {\n  cleanImageUrl = inputData.extractedImageData.imageUrl\n    .replace(/Notes:.*$/g, '')  // Remove \"Notes:\" and everything after\n    .replace(/\\\\n.*$/g, '')    // Remove \\n and everything after\n    .replace(/-$/, '')         // Remove trailing dash\n    .trim();\n}\n\nif (!cleanImageName && inputData.extractedImageData?.imageName) {\n  cleanImageName = inputData.extractedImageData.imageName\n    .replace(/Notes:.*$/g, '')  // Remove \"Notes:\" and everything after\n    .replace(/\\\\n.*$/g, '')    // Remove \\n and everything after\n    .replace(/-$/, '')         // Remove trailing dash\n    .trim();\n}\n\n// Handle dynamicUpdateData - CRITICAL FIX for array issue\nlet cleanedUpdateData = {};\n\nif (!inputData.dynamicUpdateData) {\n  console.error('❌ No dynamicUpdateData found in input');\n  cleanedUpdateData = {};\n} else {\n  // CRITICAL: Check if dynamicUpdateData is an array and extract the object\n  let rawData = inputData.dynamicUpdateData;\n  if (Array.isArray(rawData)) {\n    console.log('🔄 dynamicUpdateData is an array with length:', rawData.length);\n    if (rawData.length > 0) {\n      rawData = rawData[0]; // Extract the first (and likely only) object\n      console.log('🔄 Extracted object from array:', JSON.stringify(rawData, null, 2));\n    } else {\n      console.error('❌ dynamicUpdateData array is empty');\n      rawData = {};\n    }\n  }\n  \n  try {\n    // Deep clone the data\n    cleanedUpdateData = JSON.parse(JSON.stringify(rawData));\n    \n    // Update the image name in the dynamic structure\n    if (cleanedUpdateData && typeof cleanedUpdateData === 'object') {\n      Object.keys(cleanedUpdateData).forEach(fieldKey => {\n        const fieldValue = cleanedUpdateData[fieldKey];\n        \n        // Handle file array structure\n        if (Array.isArray(fieldValue) && \n            fieldValue[0] && \n            typeof fieldValue[0] === 'object' &&\n            fieldValue[0].name) {\n          console.log(`🔧 Updating file name in field ${fieldKey}: ${fieldValue[0].name} → ${cleanImageName}`);\n          if (cleanImageName) {\n            fieldValue[0].name = cleanImageName;\n          }\n        }\n        \n        // Handle direct URL string\n        if (typeof fieldValue === 'string' && \n            fieldValue.includes('baserow.aiautomata.co.za')) {\n          console.log(`🔧 Updating URL in field ${fieldKey}: ${fieldValue} → ${cleanImageUrl}`);\n          if (cleanImageUrl) {\n            cleanedUpdateData[fieldKey] = cleanImageUrl;\n          }\n        }\n      });\n    }\n  } catch (error) {\n    console.error('❌ Error processing dynamicUpdateData:', error);\n    cleanedUpdateData = rawData || {}; // Use raw data if parsing fails\n  }\n}\n\nconsole.log('🧹 Final Clean Data Results:', {\n  cleanImageName: cleanImageName,\n  cleanImageUrl: cleanImageUrl,\n  cleanedUpdateDataType: typeof cleanedUpdateData,\n  cleanedUpdateDataIsArray: Array.isArray(cleanedUpdateData),\n  cleanedUpdateData: JSON.stringify(cleanedUpdateData, null, 2)\n});\n\n// Final validation - ensure it's an object, not an array\nif (Array.isArray(cleanedUpdateData)) {\n  console.error('❌ CRITICAL: cleanedUpdateData is still an array! Converting to object.');\n  cleanedUpdateData = cleanedUpdateData[0] || {};\n}\n\nreturn {\n  json: {\n    ...inputData,\n    extractedImageData: {\n      ...inputData.extractedImageData,\n      imageName: cleanImageName,\n      imageUrl: cleanImageUrl\n    },\n    dynamicUpdateData: cleanedUpdateData\n  }\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[4032,-784],"id":"e1acbf03-b9be-49bc-b27c-49b6ac02b482","name":"Clean Data1"},{"parameters":{"operation":"update","databaseId":"={{ $('Nano Banana Payload Processor').item.json.baserow.databaseId }}","tableId":"={{ $json.extractedImageData.tableId }}","rowId":"={{ $json.extractedImageData.recordId }}","dataToSend":"autoMapInputData"},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[4688,-400],"id":"c8015c2d-8700-4ac6-8cac-aa526f4a06eb","name":"Update Baserow Success3","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"jsCode":"// Debug and fix dynamicUpdateData before sending to Baserow\nconst inputData = $json;\n\nconsole.log('🔍 DEBUG - Input data type:', typeof inputData.dynamicUpdateData);\nconsole.log('🔍 DEBUG - Is array:', Array.isArray(inputData.dynamicUpdateData));\nconsole.log('🔍 DEBUG - Raw data:', inputData.dynamicUpdateData);\nconsole.log('🔍 DEBUG - JSON stringified:', JSON.stringify(inputData.dynamicUpdateData, null, 2));\n\n// Extract the actual object from array if needed\nlet finalUpdateData = inputData.dynamicUpdateData;\n\nif (Array.isArray(finalUpdateData)) {\n  console.log('⚠️ dynamicUpdateData is an array, extracting first element');\n  finalUpdateData = finalUpdateData[0] || {};\n}\n\nconsole.log('✅ Final update data:', JSON.stringify(finalUpdateData, null, 2));\nconsole.log('✅ Final data type:', typeof finalUpdateData);\nconsole.log('✅ Final is array:', Array.isArray(finalUpdateData));\n\nreturn {\n  json: {\n    ...inputData,\n    dynamicUpdateData: finalUpdateData,\n    fixedData: finalUpdateData\n  }\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[4656,-784],"id":"fb6f3c52-edca-40d7-9829-6d8ae3fbaf07","name":"Debug & Fix Data"}],"connections":{"Validation Check":{"main":[[{"node":"Return Validation Error","type":"main","index":0}],[{"node":"Update Status - Generating","type":"main","index":0}]]},"Update Status - Generating":{"main":[[{"node":"Success Response","type":"main","index":0}]]},"Image Generation API":{"main":[[{"node":"Nano Banana Route","type":"main","index":0}]]},"Enhanced Process Payload":{"main":[[{"node":"Validation Check","type":"main","index":0}]]},"Success Response":{"main":[[{"node":"Reference Image Router","type":"main","index":0}]]},"Wait for Replicate":{"main":[[{"node":"Check Replicate Status","type":"main","index":0}]]},"Check Status":{"main":[[{"node":"Download Replicate Result","type":"main","index":0}],[{"node":"Wait for Replicate","type":"main","index":0}]]},"Reference Image Router":{"main":[[{"node":"Reference Type Router","type":"main","index":0}],[{"node":"API Router Node1","type":"main","index":0}]]},"Reference Type Router":{"main":[[{"node":"Download Reference URL","type":"main","index":0}],[{"node":"Process Reference Upload","type":"main","index":0}]]},"Download Reference URL":{"main":[[{"node":"API Router Node","type":"main","index":0}]]},"Process Reference Upload":{"main":[[{"node":"API Router Node","type":"main","index":0}]]},"Upload OpenAI to Baserow":{"main":[[{"node":"Update Baserow Success","type":"main","index":0}]]},"Check Replicate Status":{"main":[[{"node":"Check Status","type":"main","index":0}]]},"Download Replicate Result":{"main":[[{"node":"Upload OpenAI to Baserow","type":"main","index":0}]]},"Wait for Caption Processing1":{"main":[[{"node":"Check Caption Status1","type":"main","index":0}]]},"Check Caption Status1":{"main":[[{"node":"Check if Caption Complete1","type":"main","index":0}]]},"Check if Caption Complete1":{"main":[[{"node":"Download Caption Result1","type":"main","index":0}],[{"node":"Wait and Retry Caption1","type":"main","index":0}]]},"Wait and Retry Caption1":{"main":[[{"node":"Check Caption Status1","type":"main","index":0}]]},"Download Caption Result1":{"main":[[{"node":"Upload OpenAI to Baserow","type":"main","index":0}]]},"Replicate Img2Img":{"main":[[{"node":"Wait for Caption Processing1","type":"main","index":0}],[]]},"Replicate Text2Img":{"main":[[{"node":"Wait for Replicate","type":"main","index":0}]]},"Dynamic JSON Builder1":{"main":[[{"node":"Replicate Text2Img","type":"main","index":0}]]},"Dynamic JSON Builder":{"main":[[{"node":"Replicate Img2Img","type":"main","index":0}]]},"OpenAI Caption Edit1":{"main":[[{"node":"Convert OpenAI Caption1","type":"main","index":0}]]},"OpenAI Caption Generate1":{"main":[[{"node":"Convert OpenAI Caption1","type":"main","index":0}]]},"API Router Node":{"main":[[{"node":"OpenAI Dynamic JSON Builder","type":"main","index":0}],[{"node":"Dynamic JSON Builder","type":"main","index":0}]]},"API Router Node1":{"main":[[{"node":"OpenAI Dynamic JSON Builder1","type":"main","index":0}],[{"node":"Dynamic JSON Builder1","type":"main","index":0}]]},"Convert OpenAI Caption1":{"main":[[{"node":"Upload OpenAI to Baserow","type":"main","index":0}]]},"OpenAI Dynamic JSON Builder":{"main":[[{"node":"OpenAI Caption Edit1","type":"main","index":0}]]},"OpenAI Dynamic JSON Builder1":{"main":[[{"node":"OpenAI Caption Generate1","type":"main","index":0}]]},"Update Baserow Success":{"main":[[{"node":"Code","type":"main","index":0}]]},"Code":{"main":[[{"node":"Code1","type":"main","index":0}]]},"Code1":{"main":[[{"node":"HTTP Request","type":"main","index":0}]]},"Nano Banana Route":{"main":[[{"node":"Nano Banana Payload Processor","type":"main","index":0}],[{"node":"Enhanced Process Payload","type":"main","index":0}]]},"Switch":{"main":[[{"node":"Set Text for Generate","type":"main","index":0}],[{"node":"Set Text for Edit","type":"main","index":0}],[{"node":"Set Text for Combine","type":"main","index":0}]]},"Sonnet 3.5":{"ai_languageModel":[[{"node":"Photoshop Agent","type":"ai_languageModel","index":1}]]},"Photoshop Agent":{"main":[[{"node":"Dynamic Field Mapping","type":"main","index":0}]]},"Combine Images":{"ai_tool":[[{"node":"Photoshop Agent","type":"ai_tool","index":0}]]},"Edit Image":{"ai_tool":[[{"node":"Photoshop Agent","type":"ai_tool","index":0}]]},"Simple Memory":{"ai_memory":[[]]},"GPT 5 mini":{"ai_languageModel":[[{"node":"Photoshop Agent","type":"ai_languageModel","index":0}]]},"Change File Name":{"ai_tool":[[{"node":"Photoshop Agent","type":"ai_tool","index":0}]]},"Search Raw Files":{"ai_tool":[[{"node":"Photoshop Agent","type":"ai_tool","index":0}]]},"Search AI Images":{"ai_tool":[[{"node":"Photoshop Agent","type":"ai_tool","index":0}]]},"Nano Banana Payload Processor":{"main":[[{"node":"Smart Voice & Text Processor","type":"main","index":0}]]},"Set Text for Generate":{"main":[[{"node":"Photoshop Agent","type":"main","index":0}]]},"Set Text for Edit":{"main":[[{"node":"Photoshop Agent","type":"main","index":0}]]},"Set Text for Combine":{"main":[[{"node":"Photoshop Agent","type":"main","index":0}]]},"Dynamic Field Mapping":{"main":[[{"node":"Clean Data1","type":"main","index":0}]]},"Smart Voice & Text Processor":{"main":[[{"node":"Switch","type":"main","index":0}]]},"Create New Image":{"ai_tool":[[{"node":"Photoshop Agent","type":"ai_tool","index":0}]]},"Update a row":{"main":[[]]},"Clean Data1":{"main":[[{"node":"Update Baserow Success1","type":"main","index":0}]]},"Debug & Fix Data":{"main":[[]]}},"settings":{"executionOrder":"v1","saveDataErrorExecution":"all","saveDataSuccessExecution":"all","saveManualExecutions":true,"saveExecutionProgress":true},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{"Image Generation API":[{"json":{"headers":{"host":"n8n.aiautomata.co.za","user-agent":"node","content-length":"896","accept":"*/*","accept-encoding":"gzip, br","accept-language":"*","cdn-loop":"cloudflare; loops=1","cf-connecting-ip":"197.184.83.126","cf-ipcountry":"ZA","cf-ray":"9810ce9938dceda5-JNB","cf-visitor":"{\"scheme\":\"https\"}","content-type":"application/json","sec-fetch-mode":"cors","x-forwarded-for":"172.68.140.155","x-forwarded-host":"n8n.aiautomata.co.za","x-forwarded-port":"443","x-forwarded-proto":"https","x-forwarded-server":"76d7d2696ec9","x-real-ip":"172.68.140.155"},"params":{},"query":{},"body":{"client_id":"modern-management","base_id":"176","table_id":"729","event":"image_generation","timestamp":"2025-09-18T12:22:06.830Z","clientId":"modern-management","client":{"name":"Modern Management","id":"modern-management"},"tables":{"images":{"id":"729","recordId":"130"}},"baserow":{"databaseId":"176","token":"SXe0k6Btm7i28uZP5mp8hr5KPBoWsiE1","tableId":"729","recordId":"130"},"image":{"imagePrompt":"Can you park these two cars next to each other.","imageScene":"","imageType":"New image","imageStyle":"Photorealistic","imageModel":"openai/gpt-image-1","imageSize":"1024x1024 (1:1)","referenceUrl":"","operationType":"combine","notes":null,"imageStatus":"Generating","selectedImages":["67","66"],"uploadedImages":[],"referenceImageData":null,"voiceNoteData":null},"metadata":{"createdAt":"2025-09-18T12:22:06.830Z","source":"content-engine-app","version":"1.0","contentType":"image-idea"}},"webhookUrl":"https://n8n.aiautomata.co.za/webhook/image-generator-webhook","executionMode":"production"}}]},"versionId":"d92cc9ce-94a8-4d2a-9412-dffcc4689bc7","triggerCount":1,"shared":[{"createdAt":"2025-08-18T10:17:53.591Z","updatedAt":"2025-08-18T10:17:53.591Z","role":"workflow:owner","workflowId":"1rrMigHGbR8UamA3","projectId":"pRXFeKq9D8e0hAOx"}],"tags":[]},{"createdAt":"2025-07-25T03:17:31.515Z","updatedAt":"2025-08-27T02:53:27.000Z","id":"3JGEzcRLtOoAu59h","name":"Social Media Engine","active":true,"isArchived":false,"nodes":[{"parameters":{"httpMethod":"POST","path":"6d6e8bbb-bd47-41c6-b6ba-5e5cb43d0a84","options":{}},"type":"n8n-nodes-base.webhook","typeVersion":2,"position":[-460,220],"id":"0a5544e4-30f7-40c3-baf6-0e797a14a08c","name":"Webhook","webhookId":"6d6e8bbb-bd47-41c6-b6ba-5e5cb43d0a84"},{"parameters":{"jsCode":"// Updated Universal Content Type Router Code\n// Handles your current React app format\n\n// Extract data from body object (your React app structure)\nconst bodyData = $json.body || $json;\nconst contentIdea = bodyData.contentIdea || {};\nconst ideaType = contentIdea.ideaType || bodyData.idea_type; // Your app uses camelCase\n\n// Map your naming to our processor naming\nlet mappedIdeaType = '';\nswitch (ideaType) {\n  case 'social_media_post':\n    mappedIdeaType = 'social_media_idea';\n    break;\n  case 'bolg_ideas': // I see you have this in the switch\n    mappedIdeaType = 'blog_post_idea';\n    break;\n  case 'video_ideas':\n    mappedIdeaType = 'video_idea';\n    break;\n  case 'email_campaign_ideas':\n    mappedIdeaType = 'email_campaign_idea';\n    break;\n  case 'product_uvp_ideas':\n    mappedIdeaType = 'product_uvp_idea';\n    break;\n  default:\n    mappedIdeaType = ideaType;\n}\n\n// Determine which processor to call\nlet processorUrl = '';\nlet processorName = '';\nlet isImplemented = false;\n\nswitch (mappedIdeaType) {\n  case 'social_media_idea':\n    processorUrl = 'https://n8n.aiautomata.co.za/webhook/social-media-processor';\n    processorName = 'Social Media Processor';\n    isImplemented = true;\n    break;\n  case 'blog_post_idea':\n    processorUrl = 'https://n8n.aiautomata.co.za/webhook/blog-post-processor';\n    processorName = 'Blog Post Processor';\n    isImplemented = false;\n    break;\n  case 'video_idea':\n    processorUrl = 'https://n8n.aiautomata.co.za/webhook/video-processor';\n    processorName = 'Video Processor';\n    isImplemented = false;\n    break;\n  case 'email_campaign_idea':\n    processorUrl = 'https://n8n.aiautomata.co.za/webhook/email-processor';\n    processorName = 'Email Processor';\n    isImplemented = false;\n    break;\n  case 'product_uvp_idea':\n    processorUrl = 'https://n8n.aiautomata.co.za/webhook/uvp-processor';\n    processorName = 'UVP Processor';\n    isImplemented = false;\n    break;\n  default:\n    processorUrl = '';\n    processorName = 'Unknown Content Type';\n    isImplemented = false;\n}\n\nreturn {\n  json: {\n    // Pass through original data\n    ...($json),\n    // Add routing information\n    processor_url: processorUrl,\n    processor_name: processorName,\n    is_implemented: isImplemented,\n    // Standardized data format\n    client_id: bodyData.clientId || bodyData.client_id,\n    idea_id: bodyData.ideaId || bodyData.record_id,\n    idea_type: mappedIdeaType,\n    original_idea_type: ideaType,\n    title: contentIdea.title || bodyData.title,\n    priority: contentIdea.priority || bodyData.priority,\n    routing_decision: {\n      original_type: ideaType,\n      mapped_type: mappedIdeaType,\n      processor: processorName,\n      url: processorUrl,\n      implemented: isImplemented,\n      timestamp: new Date().toISOString()\n    }\n  }\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-240,220],"id":"f35601a7-9f9b-46a9-a33c-70223474ccf1","name":"universal-content-engine-code"},{"parameters":{"rules":{"values":[{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"leftValue":"={{ $json.body.idea_type }}","rightValue":"social_media_idea","operator":{"type":"string","operation":"equals"},"id":"2ab49c02-b343-4921-9312-30fc30b11361"}],"combinator":"and"},"renameOutput":true,"outputKey":"social_media_idea"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"de0d2b8a-06db-4516-b0ce-fd43f632ea79","leftValue":"={{ $json.query.idea_Type }}","rightValue":"bolg_ideas","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"bolg_ideas"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"2bff4a2a-5771-4061-a036-92772ba058f5","leftValue":"={{ $json.body.metadata.contentType }}","rightValue":"email_idea","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"email_idea"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"a6b5e636-fcd3-4106-ad4e-25553d62b794","leftValue":"={{ $json.query.ideaType }}","rightValue":"video_ideas","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"video_ideas"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"7a7810d3-4215-40aa-9a81-b27a264a4cff","leftValue":"={{ $json.query.ideaType }}","rightValue":"product_uvp_ideas","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"}}]},"options":{}},"type":"n8n-nodes-base.switch","typeVersion":3.2,"position":[-20,180],"id":"25355e34-0508-407b-b4cf-d6301adc62e6","name":"Content Idea Switch"},{"parameters":{"method":"POST","url":"https://n8n.aiautomata.co.za/webhook/social-media-processor","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"application/json"},{"name":"X-Workflow-Source","value":"universal-content-engine"}]},"sendBody":true,"specifyBody":"json","jsonBody":"={{ $json }}","options":{"response":{"response":{}}}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[240,0],"id":"84585444-2598-4138-9af5-49f433f1878d","name":"HTTP Request"},{"parameters":{"method":"POST","url":"https://n8n.aiautomata.co.za/webhook/email-processor","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"application/json"},{"name":"X-Workflow-Source","value":"universal-content-engine"}]},"sendBody":true,"specifyBody":"json","jsonBody":"={{ $json }}","options":{"response":{"response":{}}}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[260,220],"id":"7dcf7a3b-490a-4f8c-bb35-9570367ae0cb","name":"Email Flow"}],"connections":{"Webhook":{"main":[[{"node":"universal-content-engine-code","type":"main","index":0}]]},"universal-content-engine-code":{"main":[[{"node":"Content Idea Switch","type":"main","index":0}]]},"Content Idea Switch":{"main":[[{"node":"HTTP Request","type":"main","index":0}],[],[{"node":"Email Flow","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":null,"pinData":{"Webhook":[{"json":{"headers":{"host":"n8n.aiautomata.co.za","user-agent":"node","content-length":"833","accept":"*/*","accept-encoding":"gzip, br","accept-language":"*","cdn-loop":"cloudflare; loops=1","cf-connecting-ip":"165.73.28.159","cf-ipcountry":"ZA","cf-ray":"9754b00f691b4e73-CDG","cf-visitor":"{\"scheme\":\"https\"}","content-type":"application/json","sec-fetch-mode":"cors","x-forwarded-for":"172.71.232.111","x-forwarded-host":"n8n.aiautomata.co.za","x-forwarded-port":"443","x-forwarded-proto":"https","x-forwarded-server":"1dc384f6e279","x-real-ip":"172.71.232.111"},"params":{},"query":{},"body":{"client_id":"modern-management","base_id":"176","table_id":"730","event":"email_idea_generation","timestamp":"2025-08-26T16:25:53.211Z","clientId":"modern-management","client":{"name":"Modern Management","id":"modern-management"},"tables":{"emailIdeas":{"id":"730","recordId":null},"templates":{"id":"731"}},"baserow":{"databaseId":"176","token":"2D0QTPo1l1bVWN5MwVkgKUbFZLgVW0Mz","tableId":"730","recordId":null},"emailIdea":{"emailIdeaName":"Dercksen Test","emailType":"Newsletter / Content Emails","hook":"johan","cta":"dercksen","emailTextIdea":"","emailUrlIdea":"https://brandingz.co.za","status":"Draft","templates":["1"],"selectedTemplateId":"1","selectedTemplateName":"Welcome & Onboarding Emails"},"metadata":{"createdAt":"2025-08-26T16:25:53.212Z","source":"content-engine-app","version":"1.0","contentType":"email_idea"}},"webhookUrl":"https://n8n.aiautomata.co.za/webhook/6d6e8bbb-bd47-41c6-b6ba-5e5cb43d0a84","executionMode":"production"}}]},"versionId":"51d6e2ff-57be-4c8c-9096-938cd7f9edf0","triggerCount":1,"shared":[{"createdAt":"2025-07-25T03:17:31.521Z","updatedAt":"2025-07-25T03:17:31.521Z","role":"workflow:owner","workflowId":"3JGEzcRLtOoAu59h","projectId":"pRXFeKq9D8e0hAOx"}],"tags":[]},{"createdAt":"2025-05-27T04:06:26.401Z","updatedAt":"2025-05-29T10:56:18.000Z","id":"4AFsHltTb4x1IovT","name":"Miniture People Video generator","active":false,"isArchived":false,"nodes":[{"parameters":{},"type":"n8n-nodes-base.manualTrigger","typeVersion":1,"position":[-1620,900],"id":"f8f0ce2c-31e9-4891-a401-888a997f11c5","name":"When clicking ‘Test workflow’"},{"parameters":{"model":"openai/gpt-4.1-mini","options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenRouter","typeVersion":1,"position":[460,320],"id":"59aadcb1-d6e5-4fa9-877d-f08e7ce7b19e","name":"OpenRouter Chat Model1","credentials":{"openRouterApi":{"id":"eni2kFdHGvy7lEd3","name":"OpenRouter account"}}},{"parameters":{"model":"openai/gpt-4.1-mini","options":{"temperature":0.9}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenRouter","typeVersion":1,"position":[840,320],"id":"e6019570-ef60-48ba-8633-b01b7654cb1f","name":"OpenRouter Chat Model","credentials":{"openRouterApi":{"id":"eni2kFdHGvy7lEd3","name":"OpenRouter account"}}},{"parameters":{"jsonSchemaExample":"{\n  \"process\": \"process\",\n  \"steps\": [{\n    \"number\": 1,\n    \"rawDescription\": \"\",\n    \"textToImagePrompt\": \"\",\n    \"animationPrompt\": \"\",\n    \"soundEffectPrompt\": \"\"\n  }, {}],\n  \"backgroundMusicPrompt\": \"\"\n}\n"},"type":"@n8n/n8n-nodes-langchain.outputParserStructured","typeVersion":1.2,"position":[1020,320],"id":"900da48c-0d7c-48e8-b50f-d53351c71bc0","name":"Structured Output Parser2"},{"parameters":{"promptType":"define","text":"=Process:\n{{ $json.output.process }}\n\nSteps:\n{{ $json.output.steps.toJsonString() }}","hasOutputParser":true,"options":{"systemMessage":"=### #Role  \nYou are a creative director for a TikTok account featuring AI-generated videos of tiny workers in whimsical miniature worlds. The videos you create show a process those workers do from start to finish.\n\nYou will be given the process name and raw description of each step in the process performed by these tiny human workers.\n\n---\n\n### #Task  \nYour task is to analyze each scene in the context of the whole process, craft a detailed text to image prompt for our visualization team for each step based on that information, and also craft a short prompt for animation and sound effect for that scene. Each scene will last only 5 seconds. The context is a highly detailed miniature setting where tiny human workers use tools and props to complete their tasks.\n\n---\n\n### #Instructions  \nFor each step:  \n1. Write a concise yet vivid image description that captures the scene, including the tiny human workers’ actions, the miniature environment, and any quirky or charming details; describe light, viewpoint, main objects on a scene and scene details. Ensure the description is specific enough for an AI image generator to produce a clear, engaging visual that fits a short TikTok clip. Make sure to emphasize the oversized giant objects and miniature size of the figures in each prompt.  \n2. For animation prompt use a minimal explanation of what is happening in the scene.  \n3. For Sound effect prompt focus on sounds in that environment. It should be concise.\n\n**Note:** each text to image prompt will be used independently of previous images or prompts, so you are not allowed to point to objects from previous prompts or scenes. When you need to do that, just repeat the details (environment, clothes, props) instead of pointing to the objects.  \nSound effect prompt will be used on its own, don’t point to objects from a scene in it. It should be independent.  \nAnimation will be done using image to video, so you need to mention same objects as you mentioned in the image.\n\n---\n\n### #Output  \n**Output result as json:**\n\n{\n  \"process\": \"process\",\n  \"steps\": [{\n    \"number\": 1,\n    \"rawDescription\": \"\",\n    \"textToImagePrompt\": \"\",\n    \"animationPrompt\": \"\",\n    \"soundEffectPrompt\": \"\"\n  }, {}],\n  \"backgroundMusicPrompt\": \"\" //prompt for instrumental background music for the whole video. Should match the style, pace, theme, mood of the process. Should be classical and cinematic. Below 200 chars here please.\n}\n\n\n---\n\n### #Example  \n**Example `textToImagePrompt`:**  \nIn this *whimsical depiction*, a large white sneaker serves as the focal point, embellished with a fabric golden star. Miniature figures, dressed in quaint work attire, are seen creating and maintaining the shoe, emphasizing the concept of craftsmanship. The composition is warm and inviting, with soft, ambient lighting that highlights the textures of the materials surrounding the shoe. The overall mood evokes a sense of creativity and artisanal charm. The shot is a shot from the top as a miniature panorama scene.\n\n"}},"type":"@n8n/n8n-nodes-langchain.agent","typeVersion":1.8,"position":[860,100],"id":"7de0d07a-af4f-4aff-bad6-09b61088c455","name":"Create Scenes"},{"parameters":{"options":{}},"type":"n8n-nodes-base.splitInBatches","typeVersion":3,"position":[720,1420],"id":"65f5f5a9-df18-40d5-a6d5-312f2af685b2","name":"Loop Over Items"},{"parameters":{"method":"POST","url":"https://api.freepik.com/v1/ai/mystic","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"application/json"},{"name":"Accept","value":"application/json"}]},"sendBody":true,"specifyBody":"json","jsonBody":"={\n  \"prompt\": {{ JSON.stringify($json[\"Image Prompt\"]) }},\n  \"style_reference\": \"{{ $('Convert to Base64 String').item.json.base64_String }}\",\n  \"adherence\": 50,\n  \"hdr\": 60,\n  \"resolution\": \"1k\",\n  \"aspect_ratio\": \"social_story_9_16\",\n  \"model\": \"realism\",\n  \"creative_detailing\": 60,\n  \"engine\": \"magnific_sharpy\",\n  \"fixed_generation\": false,\n  \"filter_nsfw\": false\n}","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[940,1340],"id":"3103188d-701c-42a5-a764-a613e8c33741","name":"Send Request","credentials":{"httpHeaderAuth":{"id":"MnFk2IHNTKhV11ec","name":"FreePik Header Auth"}}},{"parameters":{"url":"=https://api.freepik.com/v1/ai/mystic/{{ $json.data.task_id }}","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[1380,1260],"id":"2c3b33cb-b689-43c9-a1f7-323da2a50885","name":"Check Request","credentials":{"httpHeaderAuth":{"id":"MnFk2IHNTKhV11ec","name":"FreePik Header Auth"}}},{"parameters":{"amount":120},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[1160,1340],"id":"2dae8c99-c100-491e-ab21-cf6f046e7047","name":"Wait","webhookId":"cc23db54-fce3-4789-a6bd-afda8545c632"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"loose","version":2},"conditions":[{"id":"bdb4c198-4df9-41ba-8b83-36c416b62e38","leftValue":"={{ $input.all().filter(item => item.json.data.status == \"IN_PROGRESS\").length }}\n","rightValue":0,"operator":{"type":"number","operation":"equals"}},{"id":"b9ef78f1-336b-4546-a827-2667842aa1e9","leftValue":"={{ $runIndex }}","rightValue":50,"operator":{"type":"number","operation":"gt"}}],"combinator":"or"},"looseTypeValidation":true,"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[1600,1340],"id":"d8896baf-c671-4fab-9a05-bd9913601fa7","name":"Is Completed"},{"parameters":{"aggregate":"aggregateAllItemData","include":"specifiedFields","fieldsToInclude":"Process Idea","options":{}},"type":"n8n-nodes-base.aggregate","typeVersion":1,"position":[3040,1260],"id":"28f6cb16-eb58-42d3-8ad7-dadb0289358a","name":"Aggregate"},{"parameters":{"jsonSchemaExample":"{\n  \"process_ideas\": [\n    \"Weaving grass hammocks between bonsai trees\",\n    \"Frosting miniature cupcakes with flower-petal icing\",\n    \"Filling sand timers with stardust grains\",\n    \"Polishing beetle shells for royal insect parades\",\n    \"Stacking and organizing leaf-cut paper files\",\n    \"Charging glowberries with tiny lightning rods\",\n    \"Binding dream journals using spider-silk thread\",\n    \"Repainting street signs in a snail-sized village\",\n    \"Carving furniture from sugar cubes\",\n    \"Harvesting dewdrops from velvet moss\"\n  ]\n}\n"},"type":"@n8n/n8n-nodes-langchain.outputParserStructured","typeVersion":1.2,"position":[3460,1380],"id":"fc1313a2-073d-48d1-886a-5680f506da5a","name":"Structured Output Parser"},{"parameters":{"fieldToSplitOut":"output.process_ideas","options":{}},"type":"n8n-nodes-base.splitOut","typeVersion":1,"position":[3640,1260],"id":"573196bc-5348-400a-af2e-bcb79932cb4d","name":"Split Out1"},{"parameters":{"model":"openai/gpt-4.1-mini","options":{"temperature":0.6}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenRouter","typeVersion":1,"position":[3240,1380],"id":"851fdb52-f17b-4839-bf20-4d2ecc89d376","name":"OpenRouter Chat Model3","credentials":{"openRouterApi":{"id":"eni2kFdHGvy7lEd3","name":"OpenRouter account"}}},{"parameters":{"aggregate":"aggregateAllItemData","destinationFieldName":"AudioTracks","options":{}},"type":"n8n-nodes-base.aggregate","typeVersion":1,"position":[720,960],"id":"b5d85330-6bdb-41f6-9287-f17d95ffec9f","name":"Aggregate1"},{"parameters":{"assignments":{"assignments":[{"id":"40f3446b-5b76-4f5a-8706-1be04af684dd","name":"id","value":"={{ $json.id }}","type":"number"},{"id":"fa4d5917-f4de-4d5a-bc2b-a95cae944d2a","name":"Description","value":"={{ $json.Description }}","type":"string"},{"id":"2b04b258-6fb4-42b5-8726-fb73c31950bc","name":"AudioTrackURL","value":"={{ $json['Audio File'][0].url }}","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[500,960],"id":"d51aa80e-6ff8-46e3-85a0-c631c70198ef","name":"Edit Fields"},{"parameters":{"jsonSchemaExample":"{\n  \"Process ID\": \"id from the process list\",\n  \"process\": \"randomly chosen process from list\",\n  \"steps\": [\n    {\n      \"number\": 1,\n      \"rawDescription\": \"\"\n    },\n    {\n      \"number\": 2,\n      \"rawDescription\": \"\"\n    }\n  ]\n}\n"},"type":"@n8n/n8n-nodes-langchain.outputParserStructured","typeVersion":1.2,"position":[660,320],"id":"eb8e9c65-c1f3-4163-9e5a-63984798f78a","name":"Structured Output Parser1"},{"parameters":{"assignments":{"assignments":[{"id":"fadd6161-93a2-4e60-9ef8-da47ecb7f7ab","name":"scenes","value":"={{ $('Create Scenes').item.json.output.steps }}","type":"array"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[1680,100],"id":"10738feb-3f74-4aa6-8a47-9199520bbf64","name":"Set Scenes"},{"parameters":{"operation":"create","databaseId":170,"tableId":683,"fieldsUi":{"fieldValues":[{"fieldId":6638,"fieldValue":"={{ $('Create Scenes').item.json.output.process }}"},{"fieldId":6640,"fieldValue":"={{ $('Create Scenes').item.json.output.backgroundMusicPrompt }}"},{"fieldId":6641,"fieldValue":"Processing"}]}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[1460,100],"id":"c22e57de-159e-4e72-996c-b27e1777426b","name":"Create Video Record","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"fieldToSplitOut":"scenes","options":{}},"type":"n8n-nodes-base.splitOut","typeVersion":1,"position":[1900,100],"id":"5c852dba-2355-4dc6-8734-07aafa64598a","name":"Split Out Scenes"},{"parameters":{"promptType":"define","text":"=Music: {{ $('Get Video').item.json['Background Music Prompt'] }}\nProcess: {{ $('Get Video').item.json.Process }}","hasOutputParser":true,"options":{"systemMessage":"=You are a creative director for a TikTok account featuring AI-generated videos of tiny workers in whimsical miniature worlds.\n\nYou will be given a description of a music we want to have in a video and your task is to pick one and only one music track from our music library that matches the best, and return it.\n\n**##Music Library**  \n`{{ $json.AudioTracks.toJsonString() }}`\n\n**#Return Format**  \nReturn matching track in json format:\n\n{\n  \"id\": 1,\n  \"musicurl\": \"url\"\n}\n"}},"type":"@n8n/n8n-nodes-langchain.agent","typeVersion":1.8,"position":[1140,880],"id":"7611b83c-358d-40b2-b868-9719b8507587","name":"Music Picker"},{"parameters":{"databaseId":170,"tableId":683,"returnAll":true,"additionalOptions":{"filters":{"fields":[{"field":6641,"operator":"contains","value":"Processing"}]}}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[60,960],"id":"0c3af052-ab82-48f9-864e-fc4bd8a3fffc","name":"Get Video","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"databaseId":170,"tableId":686,"returnAll":true,"additionalOptions":{}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[280,960],"id":"3fe01c50-78d5-42be-9da9-27c293398580","name":"Get Music","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenRouter","typeVersion":1,"position":[1060,1080],"id":"144f6274-6387-4d63-8b7d-35f6345a5d2f","name":"OpenRouter Chat Model4","credentials":{"openRouterApi":{"id":"eni2kFdHGvy7lEd3","name":"OpenRouter account"}}},{"parameters":{"jsonSchemaExample":"{\n  \"id\": 1,\n  \"musicurl\": \"url\"\n}\n"},"type":"@n8n/n8n-nodes-langchain.outputParserStructured","typeVersion":1.2,"position":[1360,1080],"id":"36b0766a-bef0-42e3-ae10-2ef2a00c7b1f","name":"Structured Output Parser3"},{"parameters":{"method":"POST","url":"https://baserow.aiautomata.co.za/api/user-files/upload-file/","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"contentType":"multipart-form-data","bodyParameters":{"parameters":[{"parameterType":"formBinaryData","name":"file","inputDataFieldName":"data"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[2040,1340],"id":"0a45d1ce-6a48-457d-b832-968f43bc01b8","name":"Upload to baserow","credentials":{"httpHeaderAuth":{"id":"eLr9WkAowHbRSmCb","name":"Baserow Auth account"}}},{"parameters":{"url":"={{ $json.data.generated[0] }}","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[1820,1340],"id":"43821213-922d-4cb1-bb56-46072a7238d2","name":"Download Image"},{"parameters":{"batchSize":5,"options":{}},"type":"n8n-nodes-base.splitInBatches","typeVersion":3,"position":[720,1780],"id":"481d89bb-e06a-464f-9d1e-873030f9585d","name":"Loop Over Items1"},{"parameters":{"amount":20},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[1160,1720],"id":"23d96b17-1ee2-4af7-b231-bdda9bfeb3df","name":"Wait1","webhookId":"6d55d750-b380-45dd-a322-026ba020358d"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"loose","version":2},"conditions":[{"id":"bdb4c198-4df9-41ba-8b83-36c416b62e38","leftValue":"={{ $input.all().filter(item => item.json.status === \"IN_PROGRESS\" || item.json.status === \"IN_QUEUE\").length }}","rightValue":0,"operator":{"type":"number","operation":"equals"}},{"id":"b9ef78f1-336b-4546-a827-2667842aa1e9","leftValue":"={{ $runIndex }}","rightValue":50,"operator":{"type":"number","operation":"gt"}}],"combinator":"or"},"looseTypeValidation":true,"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[1600,1720],"id":"31f27b0e-adf6-400a-97f7-6a0335806d6a","name":"Is Completed1"},{"parameters":{"method":"POST","url":"https://baserow.aiautomata.co.za/api/user-files/upload-file/","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"contentType":"multipart-form-data","bodyParameters":{"parameters":[{"parameterType":"formBinaryData","name":"file","inputDataFieldName":"data"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[2260,1720],"id":"11937ef1-16e7-46f2-9fe7-65c7622d52bb","name":"Upload to baserow1","credentials":{"httpHeaderAuth":{"id":"eLr9WkAowHbRSmCb","name":"Baserow Auth account"}}},{"parameters":{"method":"POST","url":"https://nca.aiautomata.co.za/v1/video/concatenate","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"specifyBody":"json","jsonBody":"={\n    \"video_urls\": {{ JSON.stringify($json.video_urls) }},\n    \"id\": \"{{ $('Get video').item.json.id }}\"\n}","options":{"timeout":50000}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[1140,2420],"id":"67022d2d-75fb-4f9d-a3ac-dd61ad3c12a2","name":"Combine Clips","credentials":{"httpHeaderAuth":{"id":"XhOG8EmUXSMMk7ct","name":"NCS-Toolkit Auth account"}}},{"parameters":{"content":"## Section 7 - Combine clips into 1 video","height":300,"width":1680,"color":5},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[0,2320],"id":"b80d390a-a881-4645-842c-97630a50b0dc","name":"Sticky Note3"},{"parameters":{"jsCode":"// Extract the array of URLs\nconst urls = $input.first().json.url || [];\n\n// Map URLs into the required structure\nconst formattedURLs = urls.map(url => ({ \"video_url\": url }));\n\n// Return the transformed data\nreturn [{\n    json: {\n        \"video_urls\": formattedURLs\n    }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[920,2420],"id":"ccc43e7e-a7a6-4643-bbaa-7e4aa39c2072","name":"Video url to array"},{"parameters":{"databaseId":170,"tableId":683,"returnAll":true,"additionalOptions":{"filters":{"fields":[{"field":6641,"operator":"contains","value":"Processing"}]}}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[40,2420],"id":"f32536cb-4213-4af6-a619-f0788e5debcb","name":"Get video","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"databaseId":170,"tableId":684,"returnAll":true,"additionalOptions":{"filters":{"fields":[{"field":6646,"value":"={{ $json.id }}"}]}}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[480,2420],"id":"a8fe544c-53be-44c3-b59a-df075e5b1d1a","name":"Get Scenes","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"fieldsToAggregate":{"fieldToAggregate":[{"fieldToAggregate":"Video Clip URL"},{"fieldToAggregate":"['Video + SoundFX'][0].url"}]},"options":{}},"type":"n8n-nodes-base.aggregate","typeVersion":1,"position":[700,2420],"id":"8c9191c4-968d-4c76-8310-c8bf47e87779","name":"Aggregate2"},{"parameters":{"method":"POST","url":"https://nca.aiautomata.co.za/v1/ffmpeg/compose","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"specifyBody":"json","jsonBody":"={\n  \"id\": \"audio-layering-over-original\",\n  \"inputs\": [\n    {\n      \"file_url\": \"{{ $('Get Video1').item.json['Raw Video URL'] }}\"\n    },\n    {\n      \"file_url\": \"{{ $json['Audio File'][0].url }}\"\n    }\n  ],\n  \"filters\": [\n    {\n      \"filter\": \"[0:a][1:a]amix=inputs=2:duration=shortest[outa]\"\n    }\n  ],\n  \"outputs\": [\n    {\n      \"options\": [\n        {\n          \"option\": \"-map\",\n          \"argument\": \"0:v\"\n        },\n        {\n          \"option\": \"-map\",\n          \"argument\": \"[outa]\"\n        },\n        {\n          \"option\": \"-c:v\",\n          \"argument\": \"copy\"\n        },\n        {\n          \"option\": \"-c:a\",\n          \"argument\": \"aac\"\n        },\n        {\n          \"option\": \"-shortest\"\n        }\n      ]\n    }\n  ]\n}\n","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[480,2720],"id":"0f39f45e-3b9a-4e0c-b5ba-4ecc50601d12","name":"Add Music","credentials":{"httpHeaderAuth":{"id":"XhOG8EmUXSMMk7ct","name":"NCS-Toolkit Auth account"}}},{"parameters":{"content":"## Section 8 - Add BG Music","height":300,"width":1460,"color":4},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[0,2640],"id":"9f10c599-3084-4684-b479-60e527ccb6f2","name":"Sticky Note8"},{"parameters":{"operation":"update","databaseId":170,"tableId":683,"rowId":"={{ $('Get Video1').item.json.id }}","fieldsUi":{"fieldValues":[{"fieldId":6644,"fieldValue":"={{ $json.name }}"},{"fieldId":6641,"fieldValue":"Done"}]}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[1140,2720],"id":"599e312c-5452-4edd-af41-d5af84ee2c74","name":"Baserow17","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"method":"POST","url":"https://baserow.aiautomata.co.za/api/user-files/upload-file/","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"contentType":"multipart-form-data","bodyParameters":{"parameters":[{"parameterType":"formBinaryData","name":"file","inputDataFieldName":"data"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[1580,2020],"id":"6828bc0f-ff9d-4a0f-9dc5-14913b182367","name":"Upload to baserow3","credentials":{"httpHeaderAuth":{"id":"eLr9WkAowHbRSmCb","name":"Baserow Auth account"}}},{"parameters":{"databaseId":170,"tableId":683,"returnAll":true,"additionalOptions":{"filters":{"fields":[{"field":6641,"operator":"contains","value":"Processing"}]}}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[40,2720],"id":"26eeb249-4c26-4a69-9dfe-e9d44bb38b7e","name":"Get Video1","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"operation":"get","databaseId":170,"tableId":686,"rowId":"={{ $json.Music[0].id }}"},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[260,2720],"id":"d1fd8be9-be66-4591-981d-d91d0559085f","name":"Get Music1","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"content":"## Section 6 - Add Sound FX","height":300,"width":2000,"color":5},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[0,2000],"id":"ece88997-b80c-4cd8-8374-61e2081e3083","name":"Sticky Note"},{"parameters":{"databaseId":170,"tableId":683,"returnAll":true,"additionalOptions":{"filters":{"fields":[{"field":6641,"operator":"contains","value":"Processing"}]}}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[40,2100],"id":"d4f3fa3a-fb62-4b38-83b5-b773da44ccfa","name":"Get video1","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"databaseId":170,"tableId":684,"returnAll":true,"additionalOptions":{"filters":{"fields":[{"field":6646,"value":"={{ $json.id }}"}]}}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[480,2100],"id":"a64a9b2c-c900-403c-9b28-9897004920ac","name":"Get Scenes1","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"options":{}},"type":"n8n-nodes-base.splitInBatches","typeVersion":3,"position":[700,2100],"id":"3f65fae7-7e7c-4828-a8ce-219dc0db184c","name":"Loop Over Items3"},{"parameters":{"method":"POST","url":"https://baserow.aiautomata.co.za/api/user-files/upload-file/","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"contentType":"multipart-form-data","bodyParameters":{"parameters":[{"parameterType":"formBinaryData","name":"file","inputDataFieldName":"data"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[920,2720],"id":"62b0551c-f91d-4547-b694-ff2bb8b63176","name":"Upload to baserow6","credentials":{"httpHeaderAuth":{"id":"eLr9WkAowHbRSmCb","name":"Baserow Auth account"}}},{"parameters":{"url":"={{ $json.response[0].file_url }}","options":{"response":{"response":{"responseFormat":"file"}}}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[700,2720],"id":"fefd7cbf-a407-4fbf-a634-5c644ea5adce","name":"HTTP Request6"},{"parameters":{"operation":"create","databaseId":170,"tableId":684,"fieldsUi":{"fieldValues":[{"fieldId":6647,"fieldValue":"={{ $json.rawDescription }}"},{"fieldId":6648,"fieldValue":"={{ $json.textToImagePrompt }}"},{"fieldId":6650,"fieldValue":"={{ $json.animationPrompt }}"},{"fieldId":6651,"fieldValue":"={{ $json.soundEffectPrompt }}"},{"fieldId":6649,"fieldValue":"={{ $('Create Video Record').item.json.id }}"}]}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[2120,100],"id":"0a53ab43-e204-483f-8734-2cce7474eb9b","name":"Create Scene Records","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"content":"## Process Generator (10 new)\n","height":440,"width":1320,"color":4},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[2720,1080],"id":"30e28782-05f9-4528-af82-392421428065","name":"Sticky Note2"},{"parameters":{"databaseId":170,"tableId":685,"returnAll":true,"additionalOptions":{}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[2820,1260],"id":"8b9aca3f-9cd2-4015-86d7-d69dd3b74ec7","name":"Get All Processes","alwaysOutputData":true,"credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}},"onError":"continueRegularOutput"},{"parameters":{"promptType":"define","text":"=Existing ideas:\n{{ JSON.stringify($json.data) }}","hasOutputParser":true,"options":{"systemMessage":"=You are a creative ideation agent tasked with generating **original and visually compelling process ideas** for use in short-form video content featuring AI-generated tiny workers in whimsical miniature worlds.\n\nYour goal is to come up with **fresh, never-before-used process ideas** that are visually dynamic, satisfying, and full of charm.\n\nEach idea should belong to or be inspired by one of the following categories:\n- Manufacturing Processes  \n- Personal Attention Roleplays  \n- Crafting and Artisanal Processes  \n- Organizational Tasks  \n- Rituals  \n- Cultivation  \n- Transformation  \n\nProcess ideas can be real, imaginary, or fairytale-inspired — as long as they are highly visual and engaging at a tiny scale. Think of what would be mesmerizing to watch in a 1-minute video.\n\n**Important Instructions:**\n- The user will provide a list of already-generated ideas.\n- Your task is to generate 10 **new** ideas only — do **not** repeat or rephrase any existing ideas.\n- Do **not** include process steps or breakdowns. Just generate concise, distinct process concepts.\n\n---\nexample outputs\n\n    \"Weaving grass hammocks between bonsai trees\",\n    \"Frosting miniature cupcakes with flower-petal icing\",\n    \"Filling sand timers with stardust grains\",\n    \"Polishing beetle shells for royal insect parades\",\n    \"Stacking and organizing leaf-cut paper files\",\n    \"Charging glowberries with tiny lightning rods\",\n    \"Binding dream journals using spider-silk thread\",\n    \"Repainting street signs in a snail-sized village\",\n    \"Carving furniture from sugar cubes\",\n    \"Harvesting dewdrops from velvet moss\"\n\n\n**Output JSON format:**\n\n{\n  \"process_ideas\": [\n    \"Weaving grass hammocks between bonsai trees\",\n    \"Frosting miniature cupcakes with flower-petal icing\",\n    \"Filling sand timers with stardust grains\",\n    \"Polishing beetle shells for royal insect parades\",\n    \"Stacking and organizing leaf-cut paper files\",\n    \"Charging glowberries with tiny lightning rods\",\n    \"Binding dream journals using spider-silk thread\",\n    \"Repainting street signs in a snail-sized village\",\n    \"Carving furniture from sugar cubes\",\n    \"Harvesting dewdrops from velvet moss\"\n  ]\n}\n"}},"type":"@n8n/n8n-nodes-langchain.agent","typeVersion":1.8,"position":[3260,1160],"id":"3fa157cd-d342-4228-956e-d551227294bf","name":"Generate"},{"parameters":{"operation":"create","databaseId":170,"tableId":685,"fieldsUi":{"fieldValues":[{"fieldId":6658,"fieldValue":"={{ $json[\"output.process_ideas\"] }}"},{"fieldId":6659,"fieldValue":"Available"}]}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[3860,1260],"id":"edc12ffd-9bf9-43dd-a754-a000e09372a0","name":"Add New Processes","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"databaseId":170,"tableId":683,"returnAll":true,"additionalOptions":{"filters":{"fields":[{"field":6641,"operator":"contains","value":"Processing"}]}}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[480,580],"id":"3c8213f6-6f9b-4575-a26c-9858111f38a1","name":"Get Video2","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"aggregate":"aggregateAllItemData","include":"specifiedFields","fieldsToInclude":"id, Description","options":{}},"type":"n8n-nodes-base.aggregate","typeVersion":1,"position":[260,580],"id":"5ab093f4-f790-404c-a6b2-f71ac6d6f11d","name":"Aggregate3"},{"parameters":{"promptType":"define","text":"=SoundFX library:\n{{ $('Aggregate3').item.json.data.toJsonString() }}\n\nSound Prompt:\n{{ $json['Sound Effect Prompt'] }}","hasOutputParser":true,"options":{"systemMessage":"=You are an AI agent tasked with selecting the most appropriate SoundFX from a provided SoundFX library based on a given Sound Prompt.\n\nThe SoundFX library is provided as a list of JSON objects in the following format:\n\n\n{\n  \"id\": 21,\n  \"Description\": \"string\"\n}\n\n\nYour goal is to choose the single SoundFX entry that best matches the meaning or intent of the Sound Prompt.  \n**Do not** generate new SoundFX, modify existing entries, or alter the Sound Prompt in any way.  \nSimply return the `id` of the best-matching SoundFX from the library.\n"}},"type":"@n8n/n8n-nodes-langchain.agent","typeVersion":1.8,"position":[1140,500],"id":"5371ff09-324c-4567-a973-1df375197140","name":"SoundFX Picker"},{"parameters":{"operation":"get","databaseId":170,"tableId":684,"rowId":"={{ $json.id }}"},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[920,580],"id":"2567c709-11ea-4296-b6c7-f08e10f8f190","name":"Get Scenes2","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenRouter","typeVersion":1,"position":[1100,700],"id":"ba4166c6-12b3-463b-bb88-7290cb148e17","name":"OpenRouter Chat Model2","credentials":{"openRouterApi":{"id":"eni2kFdHGvy7lEd3","name":"OpenRouter account"}}},{"parameters":{"jsonSchemaExample":"{\n\"id\": 21,\n\"Orginal Sound Prompt\": \"Orginal Sound Prompt\",\n\"Description\": \"string\"\n}"},"type":"@n8n/n8n-nodes-langchain.outputParserStructured","typeVersion":1.2,"position":[1360,700],"id":"a375a881-1650-4927-9259-318410b6398b","name":"Structured Output Parser4"},{"parameters":{"content":"## Section 5 - Generate Videos","height":360,"width":2700,"color":5},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[0,1620],"id":"56f463c2-cfd4-4674-85d7-20f18d981c11","name":"Sticky Note1"},{"parameters":{"content":"## Section 4 - Generate Scene Images","height":360,"width":2700,"color":5},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[0,1240],"id":"331a1c22-4022-430f-a922-709d193bf652","name":"Sticky Note5"},{"parameters":{"content":"## Section 3 - Pick Music From Library","height":360,"width":1780,"color":5},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[0,860],"id":"76759589-4b52-45a9-b56e-3a5c16e72d22","name":"Sticky Note6"},{"parameters":{"content":"## Section 2 -  Pick SoundFX from library","height":360,"width":1780,"color":5},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[0,480],"id":"a37e6661-61b6-464a-945c-940a0de7cbf6","name":"Sticky Note7"},{"parameters":{"aggregate":"aggregateAllItemData","include":"specifiedFields","fieldsToInclude":"id, Process Idea","options":{}},"type":"n8n-nodes-base.aggregate","typeVersion":1,"position":[280,100],"id":"d7e826c8-96af-4a57-aabf-5b978da824c2","name":"Aggregate4"},{"parameters":{"databaseId":170,"tableId":685,"returnAll":true,"additionalOptions":{"filters":{"fields":[{"field":6659,"operator":"contains","value":"Available"}]}}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[60,100],"id":"2ab71fd0-3da9-4a44-938a-33bcee3aa3e2","name":"Get Process Ideas","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"operation":"update","databaseId":170,"tableId":685,"rowId":"={{ $('Process Picker/Generator').item.json.output['Process ID'] }}","fieldsUi":{"fieldValues":[{"fieldId":6659,"fieldValue":"Used"}]}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[1240,100],"id":"7cd1fcac-687d-44e9-877a-213fa09972a7","name":"Mark Process Used","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"content":"# Section 1 - Pick process and scenes","height":460,"width":2300,"color":5},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[0,0],"id":"4be9cbae-4192-44f5-ac1c-167ebb3d6ef2","name":"Sticky Note9"},{"parameters":{"databaseId":170,"tableId":683,"returnAll":true,"additionalOptions":{"filters":{"fields":[{"field":6641,"operator":"contains","value":"Processing"}]}}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[60,1420],"id":"baff0ad1-9e18-45ab-981b-839e387d36f2","name":"Get Video3","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"databaseId":170,"tableId":684,"returnAll":true,"additionalOptions":{"filters":{"fields":[{"field":6646,"value":"={{ $json.id }}"},{"field":6652,"operator":"empty"}]}}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[500,1420],"id":"a014a445-9b89-4e95-bfc4-8dcbe52f5bfb","name":"Get Scenes3","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"operation":"get","databaseId":170,"tableId":688,"rowId":"4"},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[60,1280],"id":"a6932c7d-202e-4a9a-bed7-331d1b808ddd","name":"Get Style By ID","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"url":"={{ $json['style reference'][0].url }}","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[280,1280],"id":"2bb73512-1a06-4845-843a-ff31c3a5c31a","name":"Download Image2"},{"parameters":{"operation":"binaryToPropery","destinationKey":"base64_String","options":{}},"type":"n8n-nodes-base.extractFromFile","typeVersion":1,"position":[500,1280],"id":"c18d1005-a692-48ee-88bf-ca60b084d2cc","name":"Convert to Base64 String"},{"parameters":{"resource":"video","operation":"upload","title":"={{ $('Create titles & hashtags').item.json.output.title }}, {{ $json.output.hashtags }}","regionCode":"GB","categoryId":"24","options":{"description":"={{ $('Create titles & hashtags').item.json.output.title }} {{ $json.output.hashtags }}","privacyStatus":"private","selfDeclaredMadeForKids":false}},"type":"n8n-nodes-base.youTube","typeVersion":1,"position":[880,3020],"id":"af1bb9be-4c2e-41b2-b409-8e47d3a91aa4","name":"YouTube"},{"parameters":{"model":"openai/gpt-4.1-mini","options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenRouter","typeVersion":1,"position":[260,3180],"id":"d0804f37-74bc-4075-a5e8-9710704f1361","name":"OpenRouter Chat Model6"},{"parameters":{"jsonSchemaExample":"{\n  \"title\": \"string\",\n  \"hashtags\": \"string\"\n}"},"type":"@n8n/n8n-nodes-langchain.outputParserStructured","typeVersion":1.2,"position":[480,3180],"id":"c3e3ed87-10ae-4e5c-ad61-551b682943c4","name":"Structured Output Parser6"},{"parameters":{"promptType":"define","text":"=Process: {{ $json.Process }}","hasOutputParser":true,"options":{"systemMessage":"=You are a creative AI assistant that specializes in crafting viral YouTube Shorts titles and hashtags. You are given a short, whimsical description of a process done by tiny, cute workers (e.g., fairies, mini creatures, toy-like beings). Your job is to generate:\n\n1. A catchy and curiosity-inducing **title** that would make viewers want to click.\n2. A set of **2 to 3 relevant and popular hashtags**, optimized for virality in the \"cute\", \"miniature\", and \"oddly satisfying\" niches.\n\n📝 Your output must follow this **JSON format**:\n\n```json\n{\n  \"title\": \"string\",\n  \"hashtags\": \"string\"\n}\n```\n\n🎯 The **combined length of the title and hashtags must not exceed 80 characters**.\nMake the title playful, emotional, or intriguing. Hashtags should be space-separated and each start with `#`."}},"type":"@n8n/n8n-nodes-langchain.agent","typeVersion":1.9,"position":[280,3020],"id":"27bf0887-bbae-4dbc-91fb-cffc80a3b966","name":"Create titles & hashtags"},{"parameters":{"url":"={{ $('Get Last video').item.json['Final Video'][0].url }}","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[660,3020],"id":"ef40ed8f-5b5b-43b3-a558-43289a7ba4d2","name":"Download video"},{"parameters":{"content":"## Generate title & hashtag, Upload to YouTube","height":360,"width":1220,"color":3},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[0,2960],"id":"f4c39d20-bddc-4cf7-b049-e6675b550d4a","name":"Sticky Note10"},{"parameters":{"databaseId":191,"tableId":735,"limit":1,"additionalOptions":{"order":{"fields":[{"field":7253,"direction":"-"}]}}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[60,3020],"id":"ccc03812-edea-4546-9146-2044deb99c5f","name":"Get Last video"},{"parameters":{"promptType":"define","text":"=Use a process from the following list:\n{{ $json.data.toJsonString() }}","hasOutputParser":true,"options":{"systemMessage":"=You are a creative director for a TikTok account featuring AI-generated videos of tiny workers in miniature worlds.\n\nYour task is to pick one deeply satisfying process from the **provided list** that will captivate viewers in a 1-minute video made up of short, mesmerizing clips.\n\nThe list contains processes from categories such as: Manufacturing Processes, Personal Attention Roleplays, Crafting and Artisanal Processes, Organizational Tasks, Ritual, Cultivation, or Transformation Processes. They may be real or inspired by fairytales.  \nYour job is to **select one process** from this list that would be visually dynamic, whimsical, and suited to a shifting, fantastical realm.\n\nThen, provide a detailed list of 6–8 raw steps that break down that process from start to finish.\n\nEach step should be concise, represent a clear progression, and highlight the charm of tiny human workers (about 2–3 inches tall) using tools or props in creative, unexpected ways. The goal is to make the task fun, magical, and captivating to watch on a tiny scale.\n\nYou will be provided the list of processes in this format:  \n**Use a process from the following list: [list of processes...]**\n\n---\n\n**Output result as JSON:**\n\n\n{\n  \"Process ID\": \"id from the process list\",\n  \"process\": \"randomly chosen process from list\",\n  \"steps\": [\n    {\n      \"number\": 1,\n      \"rawDescription\": \"\"\n    },\n    {\n      \"number\": 2,\n      \"rawDescription\": \"\"\n    }\n    // Continue to 6–8 steps\n  ]\n}\n"}},"type":"@n8n/n8n-nodes-langchain.agent","typeVersion":1.8,"position":[500,100],"id":"762eafdd-09c7-4ffe-9ee6-8dff8ad015ae","name":"Process Picker/Generator"},{"parameters":{"jsonSchemaExample":"{\n  \"Music_prompts\": [\n    \"Orchestral, playful pizzicato strings, light percussion, bouncing rhythm\",\n    \"Orchestral classical, staccato violins, playful xylophone, upbeat tempo\",\n    \"Classical, ethereal harp, delicate strings, lilting woodwinds, morning atmosphere\",\n    \"... (7 more prompts) ...\"\n  ]\n}\n"},"type":"@n8n/n8n-nodes-langchain.outputParserStructured","typeVersion":1.2,"position":[3160,1840],"id":"131673df-d8a5-43e6-9ada-8a698f9b1258","name":"Structured Output Parser5"},{"parameters":{"model":"openai/gpt-4.1-mini","options":{"temperature":0.6}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenRouter","typeVersion":1,"position":[2880,1840],"id":"f7db26c7-e6d4-46be-8670-830a42e0fbdd","name":"OpenRouter Chat Model5","credentials":{"openRouterApi":{"id":"eni2kFdHGvy7lEd3","name":"OpenRouter account"}}},{"parameters":{"promptType":"define","text":"=go","hasOutputParser":true,"options":{"systemMessage":"=You are an AI music generation assistant designed to support the creation of background music for short TikTok videos featuring tiny workers performing miniature tasks such as cooking, cleaning, and crafting. Your task is to generate **10 unique music prompts** using only **music-related language**.\n\nEach prompt must:\n\n* Be suitable for whimsical, creative, or slightly childish video themes.\n* Use dynamic, expressive musical descriptors (e.g., instrument types, rhythms, moods).\n* Focus on styles like classical, orchestral, lighthearted, fun, or beautiful.\n* Avoid non-musical language, explanations, or context.\n* Be rich enough to guide an AI music generation tool.\n\nYour output should always follow this **JSON format**:\n\n{\n  \"Music_prompts\": [\n    \"Orchestral, playful pizzicato strings, light percussion, bouncing rhythm\",\n    \"Orchestral classical, staccato violins, playful xylophone, upbeat tempo\",\n    \"Classical, ethereal harp, delicate strings, lilting woodwinds, morning atmosphere\",\n    \"... (7 more prompts) ...\"\n  ]\n}\n\n\nGenerate only the JSON object—do not include any additional commentary or formatting outside the JSON.\n\n"}},"type":"@n8n/n8n-nodes-langchain.agent","typeVersion":1.8,"position":[2940,1660],"id":"97d13983-d5fc-4355-af2a-4c7aef5bd26c","name":"Generate Music Promps"},{"parameters":{"fieldToSplitOut":"output.Music_prompts","options":{}},"type":"n8n-nodes-base.splitOut","typeVersion":1,"position":[3340,1660],"id":"72ca86a6-8d70-414c-b769-23d398ff8adc","name":"Split Prompts"},{"parameters":{"operation":"create","databaseId":170,"tableId":686,"fieldsUi":{"fieldValues":[{"fieldId":6662,"fieldValue":"={{ $json['output.Music_prompts'] }}"}]}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[3600,1660],"id":"cff65691-a553-49fc-aa1d-dddd6472178e","name":"Add New Music Prompt","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"content":"## Music Prompt Generator (10 new)\n","height":440,"width":1320,"color":4},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[2720,1540],"id":"28f37d88-f026-4752-9021-2cde02780bf6","name":"Sticky Note11"},{"parameters":{"databaseId":170,"tableId":687,"returnAll":true,"additionalOptions":{}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[40,580],"id":"111a0d2e-1677-4ea6-af37-052dfb8bf2ff","name":"Get SoundFX Library","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"operation":"update","databaseId":170,"tableId":684,"rowId":"={{ $('Get Scenes2').item.json.id }}","fieldsUi":{"fieldValues":[{"fieldId":6657,"fieldValue":"={{ $json.output.id }}"}]}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[1520,580],"id":"070d7f32-2908-44f8-a398-ffe5639bd4db","name":"Update Scene with SoudFX ID","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"databaseId":170,"tableId":683,"returnAll":true,"additionalOptions":{"filters":{"fields":[{"field":6641,"operator":"contains","value":"Processing"}]}}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[60,1780],"id":"59a3cc38-db74-4028-94ab-ffed2976f676","name":"Get Video4","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"databaseId":170,"tableId":684,"returnAll":true,"additionalOptions":{"filters":{"fields":[{"field":6646,"value":"={{ $json.id }}"}]}}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[480,1780],"id":"ba6d0677-13b2-44e4-9e72-09509a7ca408","name":"Get Scenes4","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"method":"POST","url":"https://queue.fal.run/fal-ai/kling-video/v1.6/standard/image-to-video","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"specifyBody":"json","jsonBody":"={\n     \"prompt\":{{ JSON.stringify($json['Animation Prompt']) }},\n     \"image_url\": \"{{ $json['External Image URL'] }}\",\n     \"duration\": \"5\",\n     \"aspect_ratio\": \"9:16\",\n     \"negative_prompt\": \"blur, distort, and low quality\",\n     \"cfg_scale\": 0.5\n}\n","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[940,1720],"id":"6c70802c-bceb-4a8b-bfac-f0e3683c99e7","name":"fal.ai - Send Video Request","credentials":{"httpHeaderAuth":{"id":"ir1jYgd60Pw6yEVx","name":"fal.ai Auth account"}}},{"parameters":{"url":"={{ $json.status_url }}","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[1380,1640],"id":"5a3ee37f-75a5-46ae-9de4-7a0e2fda1172","name":"Check Progress Status","credentials":{"httpHeaderAuth":{"id":"ir1jYgd60Pw6yEVx","name":"fal.ai Auth account"}}},{"parameters":{"url":"={{ $json.response_url }}","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[1820,1720],"id":"e3ee18b8-4ea2-4a11-bea2-9cc7ddf90979","name":"Get Download URL","credentials":{"httpHeaderAuth":{"id":"ir1jYgd60Pw6yEVx","name":"fal.ai Auth account"}}},{"parameters":{"url":"={{ $json.video.url }}","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[2040,1720],"id":"11af373a-9a02-44a1-a933-9ae4352b26c6","name":"Download Video"},{"parameters":{"operation":"update","databaseId":170,"tableId":684,"rowId":"={{ $('Loop Over Items1').item.json.id }}","fieldsUi":{"fieldValues":[{"fieldId":6653,"fieldValue":"={{ $json.name }}"},{"fieldId":6655,"fieldValue":"={{ $('Download Video').item.json.video.url }}"}]}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[2480,1780],"id":"d868608f-ca77-4259-a7a5-8b6cb94b5fa1","name":"Update Scene","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"url":"={{ $json.response[0].file_url }}","options":{"response":{"response":{"responseFormat":"file"}}}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[1360,2020],"id":"6abdb2b1-a209-454d-9ba4-534a61e50a5e","name":"Download Clip"},{"parameters":{"method":"POST","url":"https://nca.aiautomata.co.za/v1/ffmpeg/compose","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"specifyBody":"json","jsonBody":"={\n  \"id\": \"audio-layering\",\n  \"inputs\": [\n    {\n      \"file_url\": \"{{ $('Loop Over Items3').item.json['Video Clip'][0].url }}\"\n    },\n    {\n      \"file_url\": \"{{ $json['SoundFX File'][0].url }}\"\n    }\n  ],\n  \"filters\": [\n    {\n      \"filter\": \"[1:a]volume=1[outa]\"\n    }\n  ],\n  \"outputs\": [\n    {\n      \"options\": [\n        {\n          \"option\": \"-map\",\n          \"argument\": \"0:v\"\n        },\n        {\n          \"option\": \"-map\",\n          \"argument\": \"[outa]\"\n        },\n        {\n          \"option\": \"-c:v\",\n          \"argument\": \"copy\"\n        },\n        {\n          \"option\": \"-c:a\",\n          \"argument\": \"aac\"\n        },\n        {\n          \"option\": \"-shortest\"\n        }\n      ]\n    }\n  ]\n}\n","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[1140,2020],"id":"2def901c-6b82-4f39-8ec1-6a942becd669","name":"NCA Add SoundFX","credentials":{"httpHeaderAuth":{"id":"XhOG8EmUXSMMk7ct","name":"NCS-Toolkit Auth account"}}},{"parameters":{"fieldToSplitOut":"[\"Miniature Scenes\"]","options":{}},"type":"n8n-nodes-base.splitOut","typeVersion":1,"position":[280,1420],"id":"92944cea-3120-4e85-ad81-6300c24b972a","name":"Split Out Scenes 1"},{"parameters":{"fieldToSplitOut":"['Miniature Scenes']","options":{}},"type":"n8n-nodes-base.splitOut","typeVersion":1,"position":[260,2420],"id":"fa60ac8e-e350-4d0c-a95b-607eddc723d9","name":"Split Out Scenes4"},{"parameters":{"fieldToSplitOut":"[\"Miniature Scenes\"]","options":{}},"type":"n8n-nodes-base.splitOut","typeVersion":1,"position":[260,1780],"id":"38645b85-e537-4f48-b42c-de67e838f37e","name":"Split Out Scenes 2"},{"parameters":{"fieldToSplitOut":"['Miniature Scenes']","options":{}},"type":"n8n-nodes-base.splitOut","typeVersion":1,"position":[260,2100],"id":"b28ccdaf-9c2e-45c3-ac86-c51adaa2c918","name":"Split Out Scenes 3"},{"parameters":{"fieldToSplitOut":"[\"Miniature Scenes\"]","options":{}},"type":"n8n-nodes-base.splitOut","typeVersion":1,"position":[700,580],"id":"5f0c1690-dd98-400b-b8ba-dd7abd5b65da","name":"Split Out Scenes1"},{"parameters":{"operation":"update","databaseId":170,"tableId":684,"rowId":"={{ $('Loop Over Items').item.json.id }}","fieldsUi":{"fieldValues":[{"fieldId":6652,"fieldValue":"={{ $json.name }}"},{"fieldId":6654,"fieldValue":"={{ $('Download Image').item.json.data.generated[0] }}"}]}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[2260,1420],"id":"32c55b4c-498d-4632-9c76-c0479ba4d032","name":"Update Scene1","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"operation":"update","databaseId":170,"tableId":684,"rowId":"={{ $('Loop Over Items3').item.json.id }}","fieldsUi":{"fieldValues":[{"fieldId":6656,"fieldValue":"={{ $json.name }}"}]}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[1800,2100],"id":"2705240e-7b12-4705-88e5-7ccabefabf8d","name":"Update Scene2","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"operation":"update","databaseId":170,"tableId":683,"rowId":"={{ $json.id }}","fieldsUi":{"fieldValues":[{"fieldId":6643,"fieldValue":"={{ $json.response }}"}]}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[1360,2420],"id":"445765df-8708-4961-8b30-6be89f016857","name":"Update Video","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"operation":"update","databaseId":170,"tableId":683,"rowId":"={{ $('Get Video').item.json.id }}","fieldsUi":{"fieldValues":[{"fieldId":6642,"fieldValue":"={{ $json.output.id }}"}]}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[1540,920],"id":"d1da1ee4-51bc-4bc0-9799-9fe05af5a22f","name":"Update Video1","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"operation":"get","databaseId":170,"tableId":687,"rowId":"={{ $json.SoundFX[0].id }}"},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[920,2020],"id":"4cb40652-f715-44a8-abfe-eec2333d7559","name":"Get SoundFX","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}}],"connections":{"When clicking ‘Test workflow’":{"main":[[{"node":"Get Video1","type":"main","index":0}]]},"OpenRouter Chat Model1":{"ai_languageModel":[[{"node":"Process Picker/Generator","type":"ai_languageModel","index":0}]]},"OpenRouter Chat Model":{"ai_languageModel":[[{"node":"Create Scenes","type":"ai_languageModel","index":0}]]},"Structured Output Parser2":{"ai_outputParser":[[{"node":"Create Scenes","type":"ai_outputParser","index":0}]]},"Create Scenes":{"main":[[{"node":"Mark Process Used","type":"main","index":0}]]},"Loop Over Items":{"main":[[],[{"node":"Send Request","type":"main","index":0}]]},"Send Request":{"main":[[{"node":"Wait","type":"main","index":0}]]},"Check Request":{"main":[[{"node":"Is Completed","type":"main","index":0}]]},"Wait":{"main":[[{"node":"Check Request","type":"main","index":0}]]},"Is Completed":{"main":[[{"node":"Download Image","type":"main","index":0}],[{"node":"Wait","type":"main","index":0}]]},"Aggregate":{"main":[[{"node":"Generate","type":"main","index":0}]]},"Structured Output Parser":{"ai_outputParser":[[{"node":"Generate","type":"ai_outputParser","index":0}]]},"Split Out1":{"main":[[{"node":"Add New Processes","type":"main","index":0}]]},"OpenRouter Chat Model3":{"ai_languageModel":[[{"node":"Generate","type":"ai_languageModel","index":0}]]},"Edit Fields":{"main":[[{"node":"Aggregate1","type":"main","index":0}]]},"Structured Output Parser1":{"ai_outputParser":[[{"node":"Process Picker/Generator","type":"ai_outputParser","index":0}]]},"Set Scenes":{"main":[[{"node":"Split Out Scenes","type":"main","index":0}]]},"Create Video Record":{"main":[[{"node":"Set Scenes","type":"main","index":0}]]},"Split Out Scenes":{"main":[[{"node":"Create Scene Records","type":"main","index":0}]]},"Get Music":{"main":[[{"node":"Edit Fields","type":"main","index":0}]]},"Get Video":{"main":[[{"node":"Get Music","type":"main","index":0}]]},"Aggregate1":{"main":[[{"node":"Music Picker","type":"main","index":0}]]},"OpenRouter Chat Model4":{"ai_languageModel":[[{"node":"Music Picker","type":"ai_languageModel","index":0}]]},"Structured Output Parser3":{"ai_outputParser":[[{"node":"Music Picker","type":"ai_outputParser","index":0}]]},"Music Picker":{"main":[[{"node":"Update Video1","type":"main","index":0}]]},"Upload to baserow":{"main":[[{"node":"Update Scene1","type":"main","index":0}]]},"Download Image":{"main":[[{"node":"Upload to baserow","type":"main","index":0}]]},"Loop Over Items1":{"main":[[],[{"node":"fal.ai - Send Video Request","type":"main","index":0}]]},"Wait1":{"main":[[{"node":"Check Progress Status","type":"main","index":0}]]},"Is Completed1":{"main":[[{"node":"Get Download URL","type":"main","index":0}],[{"node":"Wait1","type":"main","index":0}]]},"Upload to baserow1":{"main":[[{"node":"Update Scene","type":"main","index":0}]]},"Combine Clips":{"main":[[{"node":"Update Video","type":"main","index":0}]]},"Video url to array":{"main":[[{"node":"Combine Clips","type":"main","index":0}]]},"Get video":{"main":[[{"node":"Split Out Scenes4","type":"main","index":0}]]},"Get Scenes":{"main":[[{"node":"Aggregate2","type":"main","index":0}]]},"Aggregate2":{"main":[[{"node":"Video url to array","type":"main","index":0}]]},"Add Music":{"main":[[{"node":"HTTP Request6","type":"main","index":0}]]},"Get Video1":{"main":[[{"node":"Get Music1","type":"main","index":0}]]},"Get Music1":{"main":[[{"node":"Add Music","type":"main","index":0}]]},"Get video1":{"main":[[{"node":"Split Out Scenes 3","type":"main","index":0}]]},"Get Scenes1":{"main":[[{"node":"Loop Over Items3","type":"main","index":0}]]},"Loop Over Items3":{"main":[[],[{"node":"Get SoundFX","type":"main","index":0}]]},"Upload to baserow3":{"main":[[{"node":"Update Scene2","type":"main","index":0}]]},"HTTP Request6":{"main":[[{"node":"Upload to baserow6","type":"main","index":0}]]},"Upload to baserow6":{"main":[[{"node":"Baserow17","type":"main","index":0}]]},"Get All Processes":{"main":[[{"node":"Aggregate","type":"main","index":0}]]},"Generate":{"main":[[{"node":"Split Out1","type":"main","index":0}]]},"Get Video2":{"main":[[{"node":"Split Out Scenes1","type":"main","index":0}]]},"Aggregate3":{"main":[[{"node":"Get Video2","type":"main","index":0}]]},"Get Scenes2":{"main":[[{"node":"SoundFX Picker","type":"main","index":0}]]},"OpenRouter Chat Model2":{"ai_languageModel":[[{"node":"SoundFX Picker","type":"ai_languageModel","index":0}]]},"Structured Output Parser4":{"ai_outputParser":[[{"node":"SoundFX Picker","type":"ai_outputParser","index":0}]]},"SoundFX Picker":{"main":[[{"node":"Update Scene with SoudFX ID","type":"main","index":0}]]},"Aggregate4":{"main":[[{"node":"Process Picker/Generator","type":"main","index":0}]]},"Get Process Ideas":{"main":[[{"node":"Aggregate4","type":"main","index":0}]]},"Mark Process Used":{"main":[[{"node":"Create Video Record","type":"main","index":0}]]},"Get Video3":{"main":[[{"node":"Split Out Scenes 1","type":"main","index":0}]]},"Get Scenes3":{"main":[[{"node":"Loop Over Items","type":"main","index":0}]]},"Get Style By ID":{"main":[[{"node":"Download Image2","type":"main","index":0}]]},"Download Image2":{"main":[[{"node":"Convert to Base64 String","type":"main","index":0}]]},"Convert to Base64 String":{"main":[[{"node":"Get Video3","type":"main","index":0}]]},"OpenRouter Chat Model6":{"ai_languageModel":[[{"node":"Create titles & hashtags","type":"ai_languageModel","index":0}]]},"Structured Output Parser6":{"ai_outputParser":[[{"node":"Create titles & hashtags","type":"ai_outputParser","index":0}]]},"Create titles & hashtags":{"main":[[{"node":"Download video","type":"main","index":0}]]},"Download video":{"main":[[{"node":"YouTube","type":"main","index":0}]]},"Get Last video":{"main":[[{"node":"Create titles & hashtags","type":"main","index":0}]]},"Process Picker/Generator":{"main":[[{"node":"Create Scenes","type":"main","index":0}]]},"Structured Output Parser5":{"ai_outputParser":[[{"node":"Generate Music Promps","type":"ai_outputParser","index":0}]]},"OpenRouter Chat Model5":{"ai_languageModel":[[{"node":"Generate Music Promps","type":"ai_languageModel","index":0}]]},"Generate Music Promps":{"main":[[{"node":"Split Prompts","type":"main","index":0}]]},"Split Prompts":{"main":[[{"node":"Add New Music Prompt","type":"main","index":0}]]},"Get SoundFX Library":{"main":[[{"node":"Aggregate3","type":"main","index":0}]]},"Get Video4":{"main":[[{"node":"Split Out Scenes 2","type":"main","index":0}]]},"Get Scenes4":{"main":[[{"node":"Loop Over Items1","type":"main","index":0}]]},"fal.ai - Send Video Request":{"main":[[{"node":"Wait1","type":"main","index":0}]]},"Check Progress Status":{"main":[[{"node":"Is Completed1","type":"main","index":0}]]},"Get Download URL":{"main":[[{"node":"Download Video","type":"main","index":0}]]},"Download Video":{"main":[[{"node":"Upload to baserow1","type":"main","index":0}]]},"Update Scene":{"main":[[{"node":"Loop Over Items1","type":"main","index":0}]]},"Download Clip":{"main":[[{"node":"Upload to baserow3","type":"main","index":0}]]},"NCA Add SoundFX":{"main":[[{"node":"Download Clip","type":"main","index":0}]]},"Split Out Scenes 1":{"main":[[{"node":"Get Scenes3","type":"main","index":0}]]},"Split Out Scenes4":{"main":[[{"node":"Get Scenes","type":"main","index":0}]]},"Split Out Scenes 2":{"main":[[{"node":"Get Scenes4","type":"main","index":0}]]},"Split Out Scenes 3":{"main":[[{"node":"Get Scenes1","type":"main","index":0}]]},"Split Out Scenes1":{"main":[[{"node":"Get Scenes2","type":"main","index":0}]]},"Update Scene1":{"main":[[{"node":"Loop Over Items","type":"main","index":0}]]},"Update Scene2":{"main":[[{"node":"Loop Over Items3","type":"main","index":0}]]},"Get SoundFX":{"main":[[{"node":"NCA Add SoundFX","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":null,"pinData":{},"versionId":"38507f80-f9cd-423e-aa7a-241ea5eee642","triggerCount":0,"shared":[{"createdAt":"2025-05-27T04:06:26.412Z","updatedAt":"2025-05-27T04:06:26.412Z","role":"workflow:owner","workflowId":"4AFsHltTb4x1IovT","projectId":"pRXFeKq9D8e0hAOx"}],"tags":[]},{"createdAt":"2025-07-14T11:27:53.634Z","updatedAt":"2025-07-14T15:44:53.000Z","id":"5DPhH7PSWybURKb3","name":"create-creative-subflow","active":false,"isArchived":false,"nodes":[{"parameters":{"path":"create-creative","options":{}},"type":"n8n-nodes-base.webhook","typeVersion":2,"position":[-620,0],"id":"2073f0ad-b383-4dc3-b932-e3179fac3d52","name":"Webhook Trigger1","webhookId":"create-creative-webhook"},{"parameters":{"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[-400,0],"id":"69bd3df3-d6ca-4416-9c40-dbf240550666","name":"Set Config1"},{"parameters":{"jsCode":"// Extract and validate input parameters\nconst body = $input.first().json.body;\nconst config = $('Set Config1').first().json;\n\n// Validate required parameters\nif (!body.creative_name || !body.headline || !body.primary_text || !body.cta) {\n  throw new Error('Missing required parameters: creative_name, headline, primary_text, or cta');\n}\n\nif (!body.baserow_creative_id) {\n  throw new Error('Missing required parameter: baserow_creative_id');\n}\n\nif (!body.facebook_page_id) {\n  throw new Error('Missing required parameter: facebook_page_id');\n}\n\n// Map CTA to Facebook format\nconst ctaMapping = {\n  'learn more': 'LEARN_MORE',\n  'shop now': 'SHOP_NOW',\n  'sign up': 'SIGN_UP',\n  'download': 'DOWNLOAD',\n  'get quote': 'GET_QUOTE',\n  'contact us': 'CONTACT_US',\n  'book now': 'BOOK_TRAVEL',\n  'apply now': 'APPLY_NOW'\n};\n\nconst facebookCta = ctaMapping[body.cta.toLowerCase()] || 'LEARN_MORE';\n\n// Handle image - could be URL or attachment\nlet imageUrl = null;\nif (body.image_url) {\n  imageUrl = body.image_url;\n} else if (body.image_file && body.image_file.length > 0) {\n  // Handle Baserow attachment format\n  imageUrl = body.image_file[0].url || body.image_file[0].file_url;\n}\n\nreturn [{\n  json: {\n    creative_name: body.creative_name,\n    headline: body.headline,\n    primary_text: body.primary_text,\n    description: body.description || '', // Optional description field\n    cta: facebookCta,\n    image_url: imageUrl,\n    baserow_creative_id: parseInt(body.baserow_creative_id),\n    ad_account_id: config.FACEBOOK_AD_ACCOUNT_ID,\n    page_id: body.facebook_page_id, // Now comes from input, not config\n    link_url: body.link_url || config.DEFAULT_LINK_URL,\n    has_image: !!imageUrl\n  }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-180,0],"id":"71543e44-e917-4245-b950-d35d2c3d9ed0","name":"Validate Input1"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict"},"conditions":[{"id":"has-image","leftValue":"={{ $json.has_image }}","rightValue":true,"operator":{"type":"boolean","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2,"position":[40,0],"id":"81688b0e-1d9d-4cc5-97d5-d570efd75724","name":"Check Has Image1"},{"parameters":{"method":"POST","url":"=https://graph.facebook.com/v18.0/act_{{ $json.ad_account_id }}/adimages","authentication":"predefinedCredentialType","nodeCredentialType":"facebookGraphApi","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"application/json"}]},"sendBody":true,"bodyParameters":{"parameters":[{"name":"url","value":"={{ $json.image_url }}"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[260,-100],"id":"9641c22f-97f6-4b08-bcb7-6c14cd7d6021","name":"Upload Image1","credentials":{"facebookGraphApi":{"id":"l4pIP1rC506QwuLu","name":"Facebook Graph account"}}},{"parameters":{"jsCode":"// Process image upload response and prepare for creative creation\nconst imageResponse = $input.first().json;\nconst inputData = $('Validate Input1').first().json;\n\n// Extract image hash from Facebook response\nlet imageHash = null;\nif (imageResponse && imageResponse.images) {\n  // Facebook returns images object with hash as key\n  const imageKeys = Object.keys(imageResponse.images);\n  if (imageKeys.length > 0) {\n    imageHash = imageKeys[0];\n  }\n}\n\nif (!imageHash) {\n  throw new Error('Failed to upload image - no image hash returned from Facebook');\n}\n\nreturn [{\n  json: {\n    ...inputData,\n    image_hash: imageHash,\n    upload_success: true\n  }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[480,-100],"id":"7eae04d0-fbb3-4e15-816e-947a91b7dbea","name":"Process Image Upload1"},{"parameters":{"jsCode":"// Prepare creative data - merge image data if available\nconst inputData = $input.first().json;\nlet creativeData = { ...inputData };\n\n// If we came from image upload path, we already have image_hash\n// If no image, we proceed without image_hash\n\n// Build the object_story_spec for the creative\nconst linkData = {\n  link: creativeData.link_url,\n  message: creativeData.primary_text,\n  name: creativeData.headline,\n  call_to_action: {\n    type: creativeData.cta\n  }\n};\n\n// Add description if provided\nif (creativeData.description && creativeData.description.trim()) {\n  linkData.description = creativeData.description;\n}\n\n// Add image if we have one\nif (creativeData.image_hash) {\n  linkData.image_hash = creativeData.image_hash;\n}\n\nconst objectStorySpec = {\n  page_id: creativeData.page_id,\n  link_data: linkData\n};\n\nreturn [{\n  json: {\n    ...creativeData,\n    object_story_spec: objectStorySpec\n  }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[260,100],"id":"8cc64c32-2133-4608-bc6b-127b72896a5a","name":"Prepare Creative Data1"},{"parameters":{"method":"POST","url":"=https://graph.facebook.com/v18.0/act_{{ $json.ad_account_id }}/adcreatives","authentication":"predefinedCredentialType","nodeCredentialType":"facebookGraphApi","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"application/json"}]},"sendBody":true,"bodyParameters":{"parameters":[{"name":"name","value":"={{ $json.creative_name }}"},{"name":"object_story_spec","value":"={{ JSON.stringify($json.object_story_spec) }}"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[480,100],"id":"265b3162-f00c-4888-b7b3-19e9d3260c50","name":"Create Facebook Creative1","credentials":{"facebookGraphApi":{"id":"l4pIP1rC506QwuLu","name":"Facebook Graph account"}},"onError":"continueErrorOutput"},{"parameters":{"jsCode":"// Process creative creation response\nconst creativeResponse = $input.first().json;\nconst inputData = $('Prepare Creative Data1').first().json;\n\nif (!creativeResponse.id) {\n  throw new Error('Failed to create Facebook creative - no ID returned');\n}\n\nreturn [{\n  json: {\n    facebook_creative_id: creativeResponse.id,\n    baserow_creative_id: inputData.baserow_creative_id,\n    creative_name: inputData.creative_name,\n    headline: inputData.headline,\n    primary_text: inputData.primary_text,\n    description: inputData.description || '',\n    cta: inputData.cta,\n    page_id: inputData.page_id,\n    had_image: !!inputData.image_hash,\n    image_hash: inputData.image_hash || null,\n    success: true,\n    message: `Successfully created Facebook creative: ${creativeResponse.id}`\n  }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[700,100],"id":"e2d50fc9-1e4b-4bfa-ba43-cc0c52f8a643","name":"Process Creative Response1"},{"parameters":{"databaseId":174,"tableId":"AD_CREATIVE_TABLE_ID","additionalOptions":{}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[920,100],"id":"1b95b751-1740-48dd-aa34-901ed56883b1","name":"Update Baserow Creative1","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"respondWith":"json","responseBody":"={\n  \"success\": true,\n  \"facebook_creative_id\": \"{{ $json.facebook_creative_id }}\",\n  \"message\": \"{{ $json.message }}\",\n  \"creative_details\": {\n    \"name\": \"{{ $json.creative_name }}\",\n    \"headline\": \"{{ $json.headline }}\",\n    \"description\": \"{{ $json.description || 'No description' }}\",\n    \"cta\": \"{{ $json.cta }}\",\n    \"had_image\": {{ $json.had_image }},\n    \"page_id\": \"{{ $json.page_id }}\"\n  },\n  \"baserow_updated\": true\n}","options":{}},"type":"n8n-nodes-base.respondToWebhook","typeVersion":1,"position":[1140,100],"id":"681a9008-58ce-4168-a290-94da7a3dea39","name":"Success Response1"},{"parameters":{"jsCode":"// Handle errors and prepare error response\nconst error = $input.first().json;\nconst inputData = $('Validate Input1').first()?.json || {};\n\nconst errorMessage = error.message || error.error?.message || 'Unknown error occurred creating creative';\n\nconsole.error('Creative creation failed:', errorMessage);\nconsole.error('Input data was:', JSON.stringify(inputData, null, 2));\n\n// Check for specific error types\nlet detailedError = errorMessage;\nif (errorMessage.includes('image')) {\n  detailedError = `Image error: ${errorMessage}. Check that the image URL/attachment is accessible and valid.`;\n}\nif (errorMessage.includes('page_id') || errorMessage.includes('page')) {\n  detailedError = `Page error: ${errorMessage}. Verify the Facebook Page ID is correct and accessible.`;\n}\nif (errorMessage.includes('object_story_spec')) {\n  detailedError = `Creative format error: ${errorMessage}. Check headline, text, description, and CTA format.`;\n}\nif (errorMessage.includes('cta') || errorMessage.includes('call_to_action')) {\n  detailedError = `CTA error: ${errorMessage}. Ensure the call-to-action type is supported.`;\n}\nif (errorMessage.includes('attachment') || errorMessage.includes('file')) {\n  detailedError = `File attachment error: ${errorMessage}. Check that the image attachment is properly uploaded in Baserow.`;\n}\nif (errorMessage.includes('facebook_page_id')) {\n  detailedError = `Missing page ID: ${errorMessage}. Ensure the campaign is linked to a valid Facebook page.`;\n}\n\nreturn [{\n  json: {\n    success: false,\n    error: detailedError,\n    baserow_creative_id: inputData.baserow_creative_id || 'unknown',\n    creative_name: inputData.creative_name || 'unknown',\n    page_id: inputData.page_id || 'unknown'\n  }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[700,300],"id":"7a2b1445-0394-4749-97f9-b6a7d6e21dd2","name":"Handle Error1"},{"parameters":{"databaseId":174,"tableId":"AD_CREATIVE_TABLE_ID","additionalOptions":{}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[920,300],"id":"89c94e91-27c5-41b5-b50f-b1778ed40169","name":"Update Baserow Error1","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"respondWith":"json","responseBody":"={\n  \"success\": false,\n  \"error\": \"{{ $json.error }}\",\n  \"baserow_creative_id\": \"{{ $json.baserow_creative_id }}\",\n  \"creative_name\": \"{{ $json.creative_name }}\",\n  \"page_id\": \"{{ $json.page_id }}\",\n  \"baserow_updated\": true\n}","options":{"responseCode":400}},"type":"n8n-nodes-base.respondToWebhook","typeVersion":1,"position":[1140,300],"id":"7e1d8cc0-8dc7-4940-bfee-ee66fd37d5fd","name":"Error Response1"}],"connections":{"Webhook Trigger1":{"main":[[{"node":"Set Config1","type":"main","index":0}]]},"Set Config1":{"main":[[{"node":"Validate Input1","type":"main","index":0}]]},"Validate Input1":{"main":[[{"node":"Check Has Image1","type":"main","index":0}]]},"Check Has Image1":{"main":[[{"node":"Upload Image1","type":"main","index":0}],[{"node":"Prepare Creative Data1","type":"main","index":0}]]},"Upload Image1":{"main":[[{"node":"Process Image Upload1","type":"main","index":0}]]},"Process Image Upload1":{"main":[[{"node":"Prepare Creative Data1","type":"main","index":0}]]},"Prepare Creative Data1":{"main":[[{"node":"Create Facebook Creative1","type":"main","index":0}]]},"Create Facebook Creative1":{"main":[[{"node":"Process Creative Response1","type":"main","index":0}],[{"node":"Handle Error1","type":"main","index":0}]]},"Process Creative Response1":{"main":[[{"node":"Update Baserow Creative1","type":"main","index":0}]]},"Update Baserow Creative1":{"main":[[{"node":"Success Response1","type":"main","index":0}]]},"Handle Error1":{"main":[[{"node":"Update Baserow Error1","type":"main","index":0}]]},"Update Baserow Error1":{"main":[[{"node":"Error Response1","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":null,"pinData":{},"versionId":"02014bc9-502a-423d-95b1-2b4d66cd7e05","triggerCount":0,"shared":[{"createdAt":"2025-07-14T11:27:53.639Z","updatedAt":"2025-07-14T11:27:53.639Z","role":"workflow:owner","workflowId":"5DPhH7PSWybURKb3","projectId":"pRXFeKq9D8e0hAOx"}],"tags":[]},{"createdAt":"2025-07-01T15:46:26.618Z","updatedAt":"2025-07-19T03:13:52.000Z","id":"7lwKXdZG6oQglW6G","name":"Content Focus Plan","active":false,"isArchived":false,"nodes":[{"parameters":{"path":"bc345552-aae4-4a01-a88b-76399baf345e","formTitle":"🚀 World-Class Content Planning Generator","formDescription":"Create irresistibly engaging content campaigns that outperform industry averages","formFields":{"values":[{"fieldLabel":"Company Name","fieldType":"dropdown","fieldOptions":{"values":[{"option":"Ebiexperts"},{"option":"Onicavox"},{"option":"Modern Management"},{"option":"Jetour"},{"option":"JAC"},{"option":"Mitsubishi"},{"option":"JAC Westrand"},{"option":"VS. Sports"},{"option":"RevDev"},{"option":"MG Bryanston"},{"option":"MG Ruimsig"},{"option":"JAC Middelburg"},{"option":"CBRM"},{"option":"Octogas"}]}},{"fieldLabel":"Product/Service Name","placeholder":"e.g., MG ZS, Wip Active Backup, Marketing Consultation"},{"fieldLabel":"Campaign Type","fieldType":"dropdown","fieldOptions":{"values":[{"option":"Product Launch Campaign"},{"option":"Brand Awareness Campaign"},{"option":"Educational Content Series"},{"option":"Competitive Advantage Campaign"},{"option":"Customer Success Campaign"},{"option":"Technical Authority Campaign"},{"option":"Problem-Solution Campaign"},{"option":"Industry Leadership Campaign"}]}},{"fieldLabel":"Content Intensity","fieldType":"dropdown","fieldOptions":{"values":[{"option":"High-Impact Sprint (7 days)"},{"option":"Standard Campaign (14 days)"},{"option":"Comprehensive Campaign (30 days)"},{"option":"Extended Strategy (60 days)"}]}},{"fieldLabel":"Target Platforms","fieldType":"dropdown","fieldOptions":{"values":[{"option":"LinkedIn"},{"option":"Facebook"},{"option":"Instagram"},{"option":"X"},{"option":"Email Newsletter"},{"option":"Blog Posts"},{"option":"YouTube"},{"option":"TikTok"},{"option":"Medium"}]},"multiselect":true},{"fieldLabel":"Content Psychology Focus","fieldType":"dropdown","fieldOptions":{"values":[{"option":"Authority & Expertise"},{"option":"Problem & Solution"},{"option":"Social Proof & Success"},{"option":"Curiosity & Discovery"},{"option":"Transformation & Results"},{"option":"Urgency & Opportunity"},{"option":"Community & Belonging"}]}},{"fieldLabel":"Engagement Goals","fieldType":"multipleChoice"},{"fieldLabel":"Special Campaign Requirements","fieldType":"textarea","placeholder":"Any specific messaging, compliance requirements, or campaign goals?"}]},"options":{"appendAttribution":false,"buttonLabel":"Generate World-Class Content Plan"}},"type":"n8n-nodes-base.formTrigger","typeVersion":2.1,"position":[-1440,1880],"id":"32ef4943-a73e-4ee4-9815-c93aa7a73c43","name":"World-Class Content Planning Form2","webhookId":"bc345552-aae4-4a01-a88b-76399baf345e"},{"parameters":{"authentication":"airtableOAuth2Api","operation":"search","base":{"__rl":true,"value":"appQoW8tY1s6ceKOV","mode":"list","cachedResultName":"Ebiexperts","cachedResultUrl":"https://airtable.com/appQoW8tY1s6ceKOV"},"table":{"__rl":true,"value":"tblw4J7WN8ssrSFY0","mode":"list","cachedResultName":"UVP ProductService","cachedResultUrl":"https://airtable.com/appQoW8tY1s6ceKOV/tblw4J7WN8ssrSFY0"},"filterByFormula":"=AND({Company Name}='{{ $json['Company Name'] }}', {Product/Service}='{{ $json['Product/Service Name'] }}', {Status}='Active')","options":{},"sort":{"property":[{"field":"Last Updated","direction":"desc"}]}},"type":"n8n-nodes-base.airtable","typeVersion":2.1,"position":[-1140,1880],"id":"690f9c2d-8976-449c-b86a-5acbab1e5850","name":"Fetch Product Intelligence2","credentials":{"airtableOAuth2Api":{"id":"pOcHNkax3d1V3xqS","name":"Airtable VS Sport"}}},{"parameters":{"jsCode":"// SIMPLIFIED ENHANCED CONTENT INTELLIGENCE PROCESSOR\n// Uses the complete Product Intelligence Document as primary source\n\nconst formData = $('World-Class Content Planning Form2').first().json;\nconst intelligenceData = $('Fetch Product Intelligence2').first().json;\n\nconsole.log('=== SIMPLIFIED ENHANCED CONTENT INTELLIGENCE PROCESSOR ===');\nconsole.log('Company:', formData['Company Name']);\nconsole.log('Product:', formData['Product/Service Name']);\nconsole.log('Campaign Type:', formData['Campaign Type']);\n\n// Validate inputs\nif (!intelligenceData) {\n  throw new Error('No Product Intelligence found for ' + formData['Company Name'] + ' - ' + formData['Product/Service Name']);\n}\n\n// Extract campaign duration from intensity\nfunction extractCampaignDuration(intensity) {\n  const durationMap = {\n    'High-Impact Sprint (7 days)': 7,\n    'Standard Campaign (14 days)': 14,\n    'Comprehensive Campaign (30 days)': 30,\n    'Extended Strategy (60 days)': 60\n  };\n  return durationMap[intensity] || 14;\n}\n\nconst campaignDuration = extractCampaignDuration(formData['Content Intensity']);\nconst targetPlatforms = Array.isArray(formData['Target Platforms']) ? formData['Target Platforms'] : [formData['Target Platforms']];\nconst engagementGoals = Array.isArray(formData['Engagement Goals']) ? formData['Engagement Goals'] : [formData['Engagement Goals']];\n\nconst contentIntelligence = {\n  // Campaign Configuration\n  campaign_config: {\n    company: formData['Company Name'],\n    product: formData['Product/Service Name'],\n    campaign_type: formData['Campaign Type'],\n    duration: campaignDuration,\n    platforms: targetPlatforms,\n    psychology_focus: formData['Content Psychology Focus'],\n    engagement_goals: engagementGoals,\n    special_requirements: formData['Special Campaign Requirements'] || 'None'\n  },\n  \n  // ENHANCED Product Intelligence - Using COMPLETE DOCUMENT\n  product_intelligence: {\n    intelligence_id: intelligenceData['Intelligence ID'],\n    \n    // THE KEY CHANGE: Use the complete document as primary UVP\n    primary_uvp: intelligenceData['Product Intelligence Document'], // ENTIRE RICH DOCUMENT\n    \n    // Keep these for reference/backup\n    technical_uvp: intelligenceData['Technical UVP'],\n    benefit_uvp: intelligenceData['Benefit UVP'],\n    competitive_uvp: intelligenceData['Competitive UVP'],\n    \n    // Additional context fields\n    target_market: intelligenceData['Target Market'],\n    industry: intelligenceData['Industry'],\n    company_name: intelligenceData['Company Name']\n  },\n  \n  // Processing Metadata\n  processing_metadata: {\n    generation_timestamp: new Date().toISOString(),\n    intelligence_last_updated: intelligenceData['Last Updated'],\n    content_planning_version: 'WorldClass_v3.0_CompleteDocument',\n    ready_for_content_generation: true,\n    uses_complete_intelligence_document: true\n  }\n};\n\nconsole.log('=== ENHANCED CONTENT INTELLIGENCE COMPLETE ===');\nconsole.log(`🎯 Campaign: ${contentIntelligence.campaign_config.campaign_type}`);\nconsole.log(`📊 Duration: ${contentIntelligence.campaign_config.duration} days`);\nconsole.log(`🧠 Psychology: ${contentIntelligence.campaign_config.psychology_focus}`);\nconsole.log(`🚀 Platforms: ${contentIntelligence.campaign_config.platforms.join(', ')}`);\nconsole.log(`📖 Complete Document Length: ${contentIntelligence.product_intelligence.primary_uvp.length} characters`);\nconsole.log(`✅ AI now has access to complete product intelligence document`);\n\nreturn { json: contentIntelligence };"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-840,1880],"id":"bcbf56e4-0212-4a49-a028-c8b0c4418e20","name":"Content Intelligence Processor3"},{"parameters":{"promptType":"define","text":"=## WORLD-CLASS CONTENT CAMPAIGN ARCHITECT\n\nYou are an elite content strategist who creates psychology-driven, highly engaging content campaigns using comprehensive product intelligence.\n\n### CAMPAIGN CONFIGURATION:\n**Company:** {{ $json.campaign_config.company }}\n**Product:** {{ $json.campaign_config.product }}\n**Campaign Type:** {{ $json.campaign_config.campaign_type }}\n**Duration:** {{ $json.campaign_config.duration }} days\n**Platforms:** {{ $json.campaign_config.platforms }}\n**Psychology Focus:** {{ $json.campaign_config.psychology_focus }}\n\n### COMPLETE PRODUCT INTELLIGENCE DOCUMENT:\n{{ $json.product_intelligence.primary_uvp }}\n\n### CRITICAL CONTENT STRATEGY:\n\n**You have access to the COMPLETE product intelligence document above. Use this rich source to create DIFFERENT focused content for each day by extracting different technical aspects, capabilities, and implementation details.**\n\n### DAILY EXTRACTION STRATEGY:\n\n**Day 1:** Extract and focus on **core technical architecture** (monitoring engines, technical components)\n**Day 2:** Extract and focus on **specific capabilities** (asset coverage, backup methods)  \n**Day 3:** Extract and focus on **enterprise features** (governance, compliance, audit capabilities)\n**Day 4:** Extract and focus on **competitive advantages** (continuous vs intermittent, technical superiority)\n**Day 5:** Extract and focus on **implementation details** (deployment options, integration methods)\n**Day 6:** Extract and focus on **business value** (use cases, ROI, business impact)\n**Day 7:** Extract and focus on **technical differentiators** (unique technical approaches, innovation)\n\n### CONTENT CREATION RULES:\n\n1. **EXTRACT SPECIFIC DETAILS**: Don't use generic summaries - extract specific technical components, system names, architectural elements from the document\n2. **VARY DAILY FOCUS**: Each day must highlight DIFFERENT technical aspects from the complete document\n3. **USE TECHNICAL TERMINOLOGY**: Include specific system names, technical processes, architectural components mentioned in the document\n4. **SHOW IMPLEMENTATION DEPTH**: Explain HOW things work technically, not just WHAT they do\n5. **CREATE TECHNICAL AUTHORITY**: Position the company as technical experts by showcasing implementation sophistication\n\n### DAILY UVP GENERATION:\n\n**CRITICAL: Generate a different technical UVP for each day based on what you extract from the complete document.**\n\n**Examples:**\n- Day 1: \"Advanced Synchronous Monitoring Engine that continuously tracks Power BI environments without performance impact\"\n- Day 2: \"Comprehensive Asset Tracking system protecting reports, semantic models, workspaces, data sources, pipelines, and notebooks\"  \n- Day 3: \"Enterprise-grade governance with customizable retention policies and comprehensive audit trails\"\n\n### OUTPUT FORMAT:\n\n```json\n{\n  \"campaign_overview\": {\n    \"campaign_name\": \"Technical campaign name\",\n    \"strategic_objective\": \"Showcase technical depth and implementation excellence\",\n    \"content_distribution_strategy\": \"Each day extracts different technical aspects from complete product intelligence\"\n  },\n  \"daily_content_calendar\": [\n    {\n      \"day\": 1,\n      \"technical_focus_area\": \"Specific area extracted from complete document\",\n      \"extracted_technical_details\": \"Specific technical details pulled from the document\",\n      \"daily_technical_uvp\": \"Day-specific UVP based on extracted technical focus\",\n      \"implementation_highlights\": \"How this technical aspect works\",\n      \"competitive_technical_angle\": \"Technical superiority demonstrated\",\n      \"content_theme\": \"Theme based on extracted technical focus\",\n      \"platform_content\": {\n        \"linkedin\": {\n          \"technical_hook\": \"Opening showcasing specific technical capability\",\n          \"main_content\": \"Detailed explanation of the technical implementation\",\n          \"technical_proof_points\": \"Specific technical evidence from the document\",\n          \"call_to_action\": \"Technical expertise-focused CTA\"\n        }\n      }\n    }\n  ]\n}\n```\n\n**GENERATE COMPLETE {{ $json.campaign_config.duration }}-DAY CAMPAIGN WHERE EACH DAY EXTRACTS AND FOCUSES ON DIFFERENT TECHNICAL ASPECTS FROM THE COMPLETE PRODUCT INTELLIGENCE DOCUMENT.**","messages":{"messageValues":[{"message":"=You are a world-class content strategist who creates psychology-driven campaigns that consistently achieve 3-5x industry average engagement rates. You understand how to combine compelling storytelling, strategic psychology, and platform optimization to create content that people can't ignore. YOU MUST GENERATE COMPLETE CAMPAIGNS - ALL DAYS, NO SHORTCUTS OR COMMENTS."}]}},"type":"@n8n/n8n-nodes-langchain.chainLlm","typeVersion":1.6,"position":[-580,1880],"id":"1e957dac-cdac-438f-9567-3af5fbe2e304","name":"World-Class Content Architect2"},{"parameters":{"model":"openai/gpt-4o","options":{"maxTokens":8000,"temperature":0.7}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenRouter","typeVersion":1,"position":[-440,2080],"id":"63b4dcb8-5945-40b3-ab73-64e06de5b2bb","name":"GPT-4o Content Model2","credentials":{"openRouterApi":{"id":"eni2kFdHGvy7lEd3","name":"OpenRouter account"}}},{"parameters":{"jsCode":"// ENHANCED CAMPAIGN PROCESSOR WITH ROBUST ERROR HANDLING\nconst campaignResponse = $('World-Class Content Architect2').first().json;\nconst campaignConfig = $('Content Intelligence Processor3').first().json;\n\nconsole.log('=== WORLD-CLASS CONTENT CAMPAIGN PROCESSOR ===');\n\n// Extract JSON from AI response with enhanced error handling\nfunction extractCampaignData(response) {\n  try {\n    if (response.text) {\n      console.log('🔍 Extracting campaign from AI response...');\n      console.log('Response length:', response.text.length);\n      \n      // Try to extract JSON from markdown blocks\n      let jsonMatch = response.text.match(/```json\\s*\\n?([\\s\\S]*?)\\n?\\s*```/);\n      \n      if (!jsonMatch) {\n        jsonMatch = response.text.match(/```([\\s\\S]*?)```/);\n      }\n      \n      if (jsonMatch) {\n        let cleanJson = jsonMatch[1].trim();\n        \n        // Clean up common AI issues\n        console.log('🧹 Cleaning JSON...');\n        \n        // Remove comments\n        cleanJson = cleanJson.replace(/\\/\\/.*$/gm, '');\n        \n        // Fix incomplete arrays - if we find incomplete daily_content_calendar\n        if (cleanJson.includes('\"daily_content_calendar\"') && !cleanJson.includes('\"}\\n  ]')) {\n          console.log('⚠️ Detected incomplete daily_content_calendar, attempting fix...');\n          \n          // Find the last complete day object\n          const dayMatches = cleanJson.match(/\"day\":\\s*(\\d+)/g);\n          if (dayMatches && dayMatches.length > 0) {\n            const lastDayMatch = dayMatches[dayMatches.length - 1];\n            const lastDay = parseInt(lastDayMatch.match(/\\d+/)[0]);\n            console.log(`📅 Found ${dayMatches.length} days, last complete day: ${lastDay}`);\n            \n            // If incomplete, close the array properly\n            if (cleanJson.includes('// Continue') || cleanJson.includes('Continue similar')) {\n              console.log('🔧 Fixing incomplete array...');\n              // Remove the comment and any trailing content after the last complete day\n              const lastCompleteDay = cleanJson.lastIndexOf('}\\n    }');\n              if (lastCompleteDay > 0) {\n                cleanJson = cleanJson.substring(0, lastCompleteDay + 6) + '\\n  ]\\n}';\n              }\n            }\n          }\n        }\n        \n        console.log('🔍 Attempting to parse cleaned JSON...');\n        console.log('Clean JSON length:', cleanJson.length);\n        console.log('First 200 chars:', cleanJson.substring(0, 200));\n        console.log('Last 200 chars:', cleanJson.substring(cleanJson.length - 200));\n        \n        const parsed = JSON.parse(cleanJson);\n        console.log('✅ Successfully parsed JSON');\n        return parsed;\n      } else {\n        console.log('❌ No JSON blocks found, trying direct parse...');\n        return JSON.parse(response.text.trim());\n      }\n    }\n    \n    return response; // Already parsed\n    \n  } catch (error) {\n    console.error('❌ Campaign extraction failed:', error.message);\n    console.error('Error at position:', error.message.match(/position (\\d+)/)?.[1]);\n    \n    // Try to provide helpful debugging info\n    if (response.text) {\n      const errorPos = parseInt(error.message.match(/position (\\d+)/)?.[1] || '0');\n      console.log('Context around error:');\n      console.log(response.text.substring(Math.max(0, errorPos - 100), errorPos + 100));\n    }\n    \n    throw new Error(`Failed to extract campaign data: ${error.message}`);\n  }\n}\n\n// Process daily content into Airtable format\nfunction processDailyContent(dailyContent, campaignOverview, campaignConfig) {\n  const records = [];\n  \n  if (!Array.isArray(dailyContent)) {\n    console.error('❌ Daily content is not an array');\n    return [];\n  }\n  \n  dailyContent.forEach((dayData, index) => {\n    console.log(`📅 Processing Day ${dayData.day || index + 1}`);\n    \n    const platformContent = dayData.platform_content || {};\n    \n    // Create base record\n    const record = {\n      // Campaign Identity\n      'Campaign Name': campaignOverview.campaign_name || 'World-Class Campaign',\n      'Company Name': campaignConfig.campaign_config.company,\n      'Product/Service': campaignConfig.campaign_config.product,\n      'Campaign Type': campaignConfig.campaign_config.campaign_type,\n      'Day Number': dayData.day || index + 1,\n      'Week Number': dayData.week || Math.ceil((dayData.day || index + 1) / 7),\n      \n      // Content Strategy\n      'Content Theme': dayData.content_theme || 'Engagement Theme',\n      'Psychological Trigger': dayData.psychological_trigger || campaignConfig.campaign_config.psychology_focus,\n      'Narrative Element': dayData.narrative_element || 'Story progression',\n      'Engagement Objective': dayData.engagement_objective || 'Drive engagement',\n      \n      // Platform Content\n      'LinkedIn Content': formatPlatformContent(platformContent.linkedin, 'LinkedIn'),\n      'Facebook Content': formatPlatformContent(platformContent.facebook, 'Facebook'),\n      'Instagram Content': formatPlatformContent(platformContent.instagram, 'Instagram'),\n      'X Content': formatPlatformContent(platformContent.x, 'X'),\n      'Email Content': formatPlatformContent(platformContent.email, 'Email'),\n      'Blog Content': formatPlatformContent(platformContent.blog, 'Blog'),\n      \n      // Intelligence Reference\n      'Intelligence ID': campaignConfig.product_intelligence.intelligence_id,\n      'Primary UVP': campaignConfig.product_intelligence.primary_uvp,\n      'Target Market': campaignConfig.product_intelligence.target_market,\n      \n      // Quality Metrics\n      'Engagement Prediction': extractEngagementPrediction(dayData),\n      'Content Quality Score': calculateContentQualityScore(dayData),\n      \n      // Metadata\n      'Status': 'Ready for Review',\n      'Created Date': new Date().toISOString(),\n      'Campaign Duration': campaignConfig.campaign_config.duration,\n      'Target Platforms': campaignConfig.campaign_config.platforms.join(', '),\n      'Psychology Focus': campaignConfig.campaign_config.psychology_focus\n    };\n    \n    records.push(record);\n  });\n  \n  return records;\n}\n\n// Format platform content for Airtable\nfunction formatPlatformContent(content, platform) {\n  if (!content) return `${platform} content pending`;\n  \n  switch(platform) {\n    case 'LinkedIn':\n      return `Hook: ${content.hook || 'Hook pending'}\\n\\nContent: ${content.main_content || 'Content pending'}\\n\\nCTA: ${content.call_to_action || 'CTA pending'}\\n\\nHashtags: ${(content.hashtags || []).join(' ')}`;\n    \n    case 'Facebook':\n      return `Hook: ${content.hook || 'Hook pending'}\\n\\nContent: ${content.main_content || 'Content pending'}\\n\\nCTA: ${content.call_to_action || 'CTA pending'}`;\n    \n    case 'Instagram':\n      return `Hook: ${content.hook || 'Hook pending'}\\n\\nContent: ${content.main_content || 'Content pending'}\\n\\nHashtags: ${(content.hashtags || []).join(' ')}\\n\\nCTA: ${content.call_to_action || 'CTA pending'}`;\n    \n    case 'X':\n      return `Hook: ${content.hook || 'Hook pending'}\\n\\nContent: ${content.main_content || 'Content pending'}\\n\\nCTA: ${content.call_to_action || 'CTA pending'}`;\n    \n    case 'Email':\n      return `Subject: ${content.subject_line || 'Subject pending'}\\n\\nContent: ${content.main_content || 'Content pending'}\\n\\nCTA: ${content.call_to_action || 'CTA pending'}`;\n    \n    case 'Blog':\n      return `Title: ${content.title || 'Title pending'}\\n\\nContent: ${content.main_content || 'Content pending'}\\n\\nCTA: ${content.call_to_action || 'CTA pending'}`;\n    \n    default:\n      return JSON.stringify(content);\n  }\n}\n\n// Extract engagement prediction\nfunction extractEngagementPrediction(dayData) {\n  const predictions = [];\n  const platformContent = dayData.platform_content || {};\n  \n  Object.entries(platformContent).forEach(([platform, content]) => {\n    if (content.estimated_engagement) {\n      predictions.push(`${platform}: ${content.estimated_engagement}`);\n    }\n  });\n  \n  return predictions.join(' | ') || 'High engagement expected';\n}\n\n// Calculate content quality score\nfunction calculateContentQualityScore(dayData) {\n  let score = 0;\n  const platformContent = dayData.platform_content || {};\n  \n  // Check for psychology elements\n  if (dayData.psychological_trigger) score += 20;\n  if (dayData.narrative_element) score += 15;\n  \n  // Check platform completeness\n  const platformCount = Object.keys(platformContent).length;\n  score += Math.min(platformCount * 10, 30);\n  \n  // Check content quality indicators\n  Object.values(platformContent).forEach(content => {\n    if (content.hook && content.hook.length > 20) score += 5;\n    if (content.main_content && content.main_content.length > 50) score += 5;\n    if (content.call_to_action) score += 5;\n  });\n  \n  return Math.min(score, 100);\n}\n\n// Main processing\ntry {\n  console.log('🔄 Processing world-class content campaign...');\n  \n  const campaignData = extractCampaignData(campaignResponse);\n  \n  if (!campaignData.daily_content_calendar) {\n    throw new Error('No daily content calendar found in campaign data');\n  }\n  \n  // Validate we have complete content\n  const expectedDays = campaignConfig.campaign_config.duration;\n  const actualDays = campaignData.daily_content_calendar.length;\n  \n  console.log(`📊 Expected ${expectedDays} days, got ${actualDays} days`);\n  \n  if (actualDays < expectedDays) {\n    console.log(`⚠️ WARNING: Incomplete campaign - missing ${expectedDays - actualDays} days`);\n    // Still process what we have, but flag it\n  }\n  \n  // Validate each day has platform content\n  let validDays = 0;\n  campaignData.daily_content_calendar.forEach((day, index) => {\n    if (day.platform_content && Object.keys(day.platform_content).length > 0) {\n      validDays++;\n    } else {\n      console.log(`⚠️ Day ${day.day || index + 1} missing platform content`);\n    }\n  });\n  \n  console.log(`✅ ${validDays}/${actualDays} days have platform content`);\n  \n  const processedRecords = processDailyContent(\n    campaignData.daily_content_calendar,\n    campaignData.campaign_overview || {},\n    campaignConfig\n  );\n  \n  // Create campaign summary\n  const campaignSummary = {\n    campaign_overview: campaignData.campaign_overview || {},\n    content_records: processedRecords,\n    processing_metadata: {\n      total_days: processedRecords.length,\n      platforms_covered: campaignConfig.campaign_config.platforms,\n      psychology_focus: campaignConfig.campaign_config.psychology_focus,\n      average_quality_score: Math.round(processedRecords.reduce((sum, record) => sum + record['Content Quality Score'], 0) / processedRecords.length),\n      generation_timestamp: new Date().toISOString(),\n      ready_for_airtable: true\n    }\n  };\n  \n  console.log('=== WORLD-CLASS CONTENT CAMPAIGN PROCESSING COMPLETE ===');\n  console.log(`🎯 Campaign: ${campaignSummary.campaign_overview.campaign_name}`);\n  console.log(`📊 Total Days: ${campaignSummary.processing_metadata.total_days}`);\n  console.log(`🧠 Psychology: ${campaignSummary.processing_metadata.psychology_focus}`);\n  console.log(`📱 Platforms: ${campaignSummary.processing_metadata.platforms_covered.join(', ')}`);\n  console.log(`⭐ Avg Quality: ${campaignSummary.processing_metadata.average_quality_score}%`);\n  \n  return { json: campaignSummary };\n  \n} catch (error) {\n  console.error('❌ Campaign processing failed:', error.message);\n  \n  return {\n    json: {\n      error: true,\n      errorMessage: error.message,\n      campaignResponse: campaignResponse,\n      campaignConfig: campaignConfig\n    }\n  };\n}"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-240,1880],"id":"2d3a276e-c410-4ca3-ba21-8cc3bcff2780","name":"Enhanced Campaign Processor1"},{"parameters":{"jsCode":"// WORLD-CLASS CONTENT SPLITTER FOR AIRTABLE\nconst campaignSummary = $input.first().json;\n\nconsole.log('=== WORLD-CLASS CONTENT SPLITTER ===');\n\n// Handle errors\nif (campaignSummary.error) {\n  console.error('❌ Error in campaign summary:', campaignSummary.errorMessage);\n  return [{\n    json: {\n      error: true,\n      message: 'Campaign processing failed: ' + campaignSummary.errorMessage,\n      originalError: campaignSummary\n    }\n  }];\n}\n\n// Validate content records\nif (!campaignSummary.content_records || !Array.isArray(campaignSummary.content_records)) {\n  console.error('❌ No content records found');\n  return [{\n    json: {\n      error: true,\n      message: 'No content records to process',\n      availableData: Object.keys(campaignSummary)\n    }\n  }];\n}\n\nconst contentRecords = campaignSummary.content_records;\nconsole.log(`📊 Splitting ${contentRecords.length} world-class content records`);\n\n// Process each record with world-class enhancements\nconst outputItems = contentRecords.map((record, index) => {\n  console.log(`Processing record ${index + 1}: Day ${record['Day Number']}, Week ${record['Week Number']}`);\n  \n  // Enhance record with world-class analysis\n  const enhancedRecord = {\n    ...record,\n    \n    // World-Class Analytics\n    'Viral Potential': record['Content Quality Score'] > 80 ? 'High' : record['Content Quality Score'] > 60 ? 'Medium' : 'Low',\n    'Content Temperature': record['Day Number'] <= 3 ? 'Cold' : record['Day Number'] <= 7 ? 'Warm' : 'Hot',\n    'Business Impact Level': record['Content Quality Score'] > 75 ? 'High' : record['Content Quality Score'] > 50 ? 'Medium' : 'Low',\n    \n    // World-Class Metadata\n    'Content Generation Method': 'World-Class AI + Psychology Framework',\n    'Performance Prediction': 'Above industry average expected'\n  };\n  \n  console.log(`✅ Enhanced record ${index + 1}:`);\n  console.log(`   Quality Score: ${enhancedRecord['Content Quality Score']}%`);\n  console.log(`   Viral Potential: ${enhancedRecord['Viral Potential']}`);\n  \n  return {\n    json: enhancedRecord,\n    pairedItem: 0\n  };\n});\n\nconsole.log(`✅ Successfully split ${outputItems.length} world-class content records`);\n\nreturn outputItems;"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[60,1880],"id":"14ae4107-f1fe-4440-bdfb-8f9f0e5aa6e2","name":"Content Splitter2"},{"parameters":{"authentication":"airtableOAuth2Api","operation":"create","base":{"__rl":true,"value":"appQoW8tY1s6ceKOV","mode":"list","cachedResultName":"Ebiexperts","cachedResultUrl":"https://airtable.com/appQoW8tY1s6ceKOV"},"table":{"__rl":true,"value":"tblVPzmyb3l45S0Sx","mode":"list","cachedResultName":"Content Focus Plan","cachedResultUrl":"https://airtable.com/appQoW8tY1s6ceKOV/tblVPzmyb3l45S0Sx"},"columns":{"mappingMode":"defineBelow","value":{"Campaign Name":"={{ $json['Campaign Name'] }}","Company Name":"={{ $json['Company Name'] }}","Product/Service":"={{ $json['Product/Service'] }}","Campaign Type":"={{ $json['Campaign Type'] }}","Content Theme":"={{ $json['Content Theme'] }}","Psychological Trigger":"={{ $json['Psychological Trigger'] }}","Narrative Element":"={{ $json['Narrative Element'] }}","Engagement Objective":"={{ $json['Engagement Objective'] }}","LinkedIn Content":"={{ $json['LinkedIn Content'] }}","Facebook Content":"={{ $json['Facebook Content'] }}","Instagram Content":"={{ $json['Instagram Content'] }}","Email Content":"={{ $json['Email Content'] }}","Blog Content":"={{ $json['Blog Content'] }}","Intelligence ID":"={{ $json['Intelligence ID'] }}","Primary UVP":"={{ $json['Primary UVP'] }}","Target Market":"={{ $json['Target Market'] }}","Engagement Prediction":"={{ $json['Engagement Prediction'] }}","Content Quality Score":"={{ $json['Content Quality Score'] }}","Viral Potential":"={{ $json['Viral Potential'] }}","Content Temperature":"={{ $json['Content Temperature'] }}","Business Impact Level":"={{ $json['Business Impact Level'] }}","Status":"={{ $json['Status'] }}","Created Date":"={{ $json['Created Date'] }}","Campaign Duration":"={{ $json['Campaign Duration'] }}","Target Platforms":"={{ $json['Target Platforms'] }}","Psychology Focus":"={{ $json['Psychology Focus'] }}","Week":"={{ $json[\"Week Number\"] }}","Day":"={{ $json[\"Day Number\"] }}","X Content":"={{ $json[\"X Content\"] }}"},"matchingColumns":[],"schema":[{"id":"Campaign Name","displayName":"Campaign Name","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Company Name","displayName":"Company Name","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Product/Service","displayName":"Product/Service","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Campaign Type","displayName":"Campaign Type","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Week","displayName":"Week","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"number","readOnly":false,"removed":false},{"id":"Day","displayName":"Day","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"number","readOnly":false,"removed":false},{"id":"Content Theme","displayName":"Content Theme","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Psychological Trigger","displayName":"Psychological Trigger","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Narrative Element","displayName":"Narrative Element","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Engagement Objective","displayName":"Engagement Objective","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"LinkedIn Content","displayName":"LinkedIn Content","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Facebook Content","displayName":"Facebook Content","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Instagram Content","displayName":"Instagram Content","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"X Content","displayName":"X Content","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Email Content","displayName":"Email Content","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Blog Content","displayName":"Blog Content","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Intelligence ID","displayName":"Intelligence ID","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Primary UVP","displayName":"Primary UVP","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Target Market","displayName":"Target Market","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Engagement Prediction","displayName":"Engagement Prediction","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Content Quality Score","displayName":"Content Quality Score","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"number","readOnly":false,"removed":false},{"id":"Viral Potential","displayName":"Viral Potential","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"options","options":[{"name":"High","value":"High"},{"name":"Medium","value":"Medium"},{"name":"Low","value":"Low"}],"readOnly":false,"removed":false},{"id":"Content Temperature","displayName":"Content Temperature","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"options","options":[{"name":"Cold","value":"Cold"},{"name":"Warm","value":"Warm"},{"name":"Hot","value":"Hot"}],"readOnly":false,"removed":false},{"id":"Business Impact Level","displayName":"Business Impact Level","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"options","options":[{"name":"High","value":"High"},{"name":"Medium","value":"Medium"},{"name":"Low","value":"Low"}],"readOnly":false,"removed":false},{"id":"Status","displayName":"Status","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"options","options":[{"name":"Ready for Review","value":"Ready for Review"},{"name":"Approved","value":"Approved"},{"name":"Published","value":"Published"}],"readOnly":false,"removed":false},{"id":"Created Date","displayName":"Created Date","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"dateTime","readOnly":false,"removed":false},{"id":"Campaign Duration","displayName":"Campaign Duration","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"number","readOnly":false,"removed":false},{"id":"Target Platforms","displayName":"Target Platforms","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Psychology Focus","displayName":"Psychology Focus","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"CTA","displayName":"CTA","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Success_Metric","displayName":"Success_Metric","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Business_Name","displayName":"Business_Name","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Product","displayName":"Product","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Product URL","displayName":"Product URL","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Persona","displayName":"Persona","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"UVP","displayName":"UVP","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Created","displayName":"Created","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"dateTime","readOnly":false,"removed":false},{"id":"Blog URL","displayName":"Blog URL","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"SM Created","displayName":"SM Created","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false}],"attemptToConvertTypes":false,"convertFieldsToString":false},"options":{}},"type":"n8n-nodes-base.airtable","typeVersion":2.1,"position":[360,1880],"id":"1815cf48-a353-4fe1-a451-ac3168c63b1f","name":"Save World-Class Content Planning2","credentials":{"airtableOAuth2Api":{"id":"pOcHNkax3d1V3xqS","name":"Airtable VS Sport"}}}],"connections":{"World-Class Content Planning Form2":{"main":[[{"node":"Fetch Product Intelligence2","type":"main","index":0}]]},"Fetch Product Intelligence2":{"main":[[{"node":"Content Intelligence Processor3","type":"main","index":0}]]},"Content Intelligence Processor3":{"main":[[{"node":"World-Class Content Architect2","type":"main","index":0}]]},"World-Class Content Architect2":{"main":[[{"node":"Enhanced Campaign Processor1","type":"main","index":0}]]},"GPT-4o Content Model2":{"ai_languageModel":[[{"node":"World-Class Content Architect2","type":"ai_languageModel","index":0}]]},"Enhanced Campaign Processor1":{"main":[[{"node":"Content Splitter2","type":"main","index":0}]]},"Content Splitter2":{"main":[[{"node":"Save World-Class Content Planning2","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"9cb396b8-1749-4143-8a0e-71c5dfdd476a","triggerCount":0,"shared":[{"createdAt":"2025-07-01T15:46:26.626Z","updatedAt":"2025-07-01T15:46:26.626Z","role":"workflow:owner","workflowId":"7lwKXdZG6oQglW6G","projectId":"pRXFeKq9D8e0hAOx"}],"tags":[]},{"createdAt":"2025-07-14T11:26:45.554Z","updatedAt":"2025-07-16T02:39:48.000Z","id":"AW4NQtI1AyRXshlz","name":"create-campaign-subflow","active":false,"isArchived":false,"nodes":[{"parameters":{"assignments":{"assignments":[{"id":"e11531f8-e065-4204-ac2c-df687ed9f3f0","name":"","value":"={{ $workflow.id }}","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[-100,600],"id":"d425f191-44fb-4aa0-9d50-ef8c29c6a3e8","name":"Set Config"},{"parameters":{"path":"create-campaign","options":{}},"type":"n8n-nodes-base.webhook","typeVersion":2,"position":[-320,600],"id":"900ba83f-f610-43e1-8f3d-18ad236d2ade","name":"Webhook Trigger","webhookId":"create-campaign-webhook"},{"parameters":{"jsCode":"// Extract and validate input parameters\nconst body = $input.first().json.body;\n\n// Validate required parameters\nif (!body.campaign_name || !body.objective || !body.baserow_campaign_id) {\n  throw new Error('Missing required parameters: campaign_name, objective, or baserow_campaign_id');\n}\n\n// Map campaign objectives to Facebook API format\nconst objectiveMapping = {\n  'AWARENESS': 'REACH',\n  'TRAFFIC': 'LINK_CLICKS', \n  'LEAD_GEN': 'LEAD_GENERATION',\n  'LEAD_GENERATION': 'LEAD_GENERATION',\n  'CONVERSIONS': 'CONVERSIONS'\n};\n\nconst facebookObjective = objectiveMapping[body.objective.toUpperCase()] || 'LINK_CLICKS';\n\n// Get config from previous node\nconst config = $('Set Config').first().json;\n\nreturn [{\n  json: {\n    campaign_name: body.campaign_name,\n    objective: facebookObjective,\n    baserow_campaign_id: parseInt(body.baserow_campaign_id),\n    status: 'PAUSED', // Start campaigns in paused state\n    special_ad_categories: [], // Empty for most use cases\n    ad_account_id: config.FACEBOOK_AD_ACCOUNT_ID\n  }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[60,600],"id":"8cebc529-b4d4-4fc7-8f0c-917765b86b97","name":"Validate Input"},{"parameters":{"method":"POST","url":"=https://graph.facebook.com/v18.0/act_{{ $json.ad_account_id }}/campaigns","authentication":"predefinedCredentialType","nodeCredentialType":"facebookGraphApi","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"application/json"}]},"sendBody":true,"bodyParameters":{"parameters":[{"name":"name","value":"={{ $json.campaign_name }}"},{"name":"objective","value":"={{ $json.objective }}"},{"name":"status","value":"={{ $json.status }}"},{"name":"special_ad_categories","value":"={{ JSON.stringify($json.special_ad_categories) }}"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[200,660],"id":"84e941af-8c8d-49ca-8112-885df6d32748","name":"Create Facebook Campaign","credentials":{"facebookGraphApi":{"id":"l4pIP1rC506QwuLu","name":"Facebook Graph account"}},"onError":"continueErrorOutput"},{"parameters":{"jsCode":"// Handle errors and prepare error response\nconst error = $input.first().json;\nconst inputData = $('Validate Input').first()?.json || {};\n\nconst errorMessage = error.message || error.error?.message || 'Unknown error occurred';\n\nconsole.error('Campaign creation failed:', errorMessage);\n\n// Try to update Baserow with error status if we have the campaign ID\nif (inputData.baserow_campaign_id) {\n  return [{\n    json: {\n      baserow_campaign_id: inputData.baserow_campaign_id,\n      error_message: errorMessage,\n      success: false\n    }\n  }];\n}\n\n// If no campaign ID, just return error response\nreturn [{\n  json: {\n    success: false,\n    error: errorMessage,\n    skip_baserow_update: true\n  }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[340,800],"id":"afeee327-7978-488d-b436-33f5f0b3ccab","name":"Handle Error"},{"parameters":{"jsCode":"// Extract Facebook campaign ID and prepare for Baserow update\nconst facebookResponse = $input.first().json;\nconst inputData = $('Validate Input').first().json;\n\nif (!facebookResponse.id) {\n  throw new Error('Failed to create Facebook campaign - no ID returned');\n}\n\nreturn [{\n  json: {\n    facebook_campaign_id: facebookResponse.id,\n    baserow_campaign_id: inputData.baserow_campaign_id,\n    campaign_name: inputData.campaign_name,\n    objective: inputData.objective,\n    success: true,\n    message: `Successfully created Facebook campaign: ${facebookResponse.id}`\n  }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[360,560],"id":"f9dcaece-0830-436c-8447-bdec61f00da0","name":"Process Response"},{"parameters":{"databaseId":174,"tableId":705,"additionalOptions":{}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[520,560],"id":"0fe5fefd-c0fb-4fca-9a92-f877fc0bdce8","name":"Update Baserow Campaign","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"databaseId":174,"tableId":705,"additionalOptions":{}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[560,800],"id":"050f27c3-9177-408a-8e4e-cf12ad2cc4b5","name":"Update Baserow Error","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"respondWith":"json","responseBody":"={\n  \"success\": true,\n  \"facebook_campaign_id\": \"{{ $json.facebook_campaign_id }}\",\n  \"message\": \"{{ $json.message }}\",\n  \"baserow_updated\": true\n}","options":{}},"type":"n8n-nodes-base.respondToWebhook","typeVersion":1,"position":[760,560],"id":"c3c268b4-30fd-49bb-8230-c51b22bce02a","name":"Success Response"},{"parameters":{"respondWith":"json","responseBody":"={\n  \"success\": false,\n  \"error\": \"{{ $json.error_message || $json.error }}\",\n  \"baserow_updated\": {{ !$json.skip_baserow_update }}\n}","options":{"responseCode":400}},"type":"n8n-nodes-base.respondToWebhook","typeVersion":1,"position":[780,800],"id":"9f64c878-ce40-4189-8b48-afd2e34a4619","name":"Error Response"}],"connections":{"Set Config":{"main":[[{"node":"Validate Input","type":"main","index":0}]]},"Webhook Trigger":{"main":[[{"node":"Set Config","type":"main","index":0}]]},"Validate Input":{"main":[[{"node":"Create Facebook Campaign","type":"main","index":0}]]},"Create Facebook Campaign":{"main":[[{"node":"Process Response","type":"main","index":0}],[{"node":"Handle Error","type":"main","index":0}]]},"Handle Error":{"main":[[{"node":"Update Baserow Error","type":"main","index":0}]]},"Process Response":{"main":[[{"node":"Update Baserow Campaign","type":"main","index":0}]]},"Update Baserow Campaign":{"main":[[{"node":"Success Response","type":"main","index":0}]]},"Update Baserow Error":{"main":[[{"node":"Error Response","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"ab0a6644-c4a5-4689-94dd-0ff42b47be9f","triggerCount":0,"shared":[{"createdAt":"2025-07-14T11:26:45.559Z","updatedAt":"2025-07-14T11:26:45.559Z","role":"workflow:owner","workflowId":"AW4NQtI1AyRXshlz","projectId":"pRXFeKq9D8e0hAOx"}],"tags":[]},{"createdAt":"2025-07-14T11:27:29.265Z","updatedAt":"2025-07-14T15:49:09.000Z","id":"BJrpgfN9rZJnrpN8","name":"get-creatives-subflow","active":false,"isArchived":false,"nodes":[{"parameters":{"path":"get-creatives","options":{}},"type":"n8n-nodes-base.webhook","typeVersion":2,"position":[460,480],"id":"11a2b1a4-c274-4089-89ee-4968586971ef","name":"Webhook Trigger1","webhookId":"get-creatives-webhook"},{"parameters":{"jsCode":"// Extract and validate input parameters\nconst body = $input.first().json.body;\n\n// Validate required parameters\nif (!body.baserow_campaign_id) {\n  throw new Error('Missing required parameter: baserow_campaign_id');\n}\n\nconst campaignId = parseInt(body.baserow_campaign_id);\n\nif (isNaN(campaignId)) {\n  throw new Error('baserow_campaign_id must be a valid number');\n}\n\nreturn [{\n  json: {\n    baserow_campaign_id: campaignId\n  }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[680,480],"id":"561c746b-527d-4020-baad-6844cb1d79b1","name":"Validate Input1"},{"parameters":{"databaseId":174,"tableId":706,"additionalOptions":{}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[900,480],"id":"16cbce02-a586-45a6-80fd-8bf79da1120b","name":"Get Creatives1","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}},"onError":"continueErrorOutput"},{"parameters":{"jsCode":"// Process and format the creatives data\nconst creatives = $input.all();\nconst inputData = $('Validate Input1').first().json;\n\nif (creatives.length === 0) {\n  return [{\n    json: {\n      success: true,\n      baserow_campaign_id: inputData.baserow_campaign_id,\n      creatives: [],\n      total_creatives: 0,\n      message: 'No completed creatives found for this campaign'\n    }\n  }];\n}\n\n// Format creatives for the AI agent\nconst formattedCreatives = creatives.map(item => {\n  const creative = item.json;\n  \n  // Handle image - could be attachment or URL\n  let imageUrl = null;\n  let hasImage = false;\n  \n  if (creative.image_file && Array.isArray(creative.image_file) && creative.image_file.length > 0) {\n    // Handle Baserow attachment format\n    imageUrl = creative.image_file[0].url || creative.image_file[0].file_url;\n    hasImage = true;\n  } else if (creative.image_url) {\n    // Fallback to URL field if still used\n    imageUrl = creative.image_url;\n    hasImage = true;\n  }\n  \n  return {\n    id: creative.id,\n    headline: creative.headline || '',\n    primary_text: creative.primary_text || '',\n    description: creative.description || '', // New description field\n    cta: creative.cta || 'Learn More',\n    copy_status: creative.copy_status,\n    creative_id: creative.creative_id || null, // Facebook creative ID if already created\n    image_prompt_status: creative.image_prompt_status || 'idle',\n    // Image info\n    has_image: hasImage,\n    image_url: imageUrl,\n    image_file: creative.image_file || null // Include original attachment data\n  };\n});\n\n// Check if any creatives are missing required fields\nconst incompleteCreatives = formattedCreatives.filter(c => \n  !c.headline || !c.primary_text || !c.cta\n);\n\nif (incompleteCreatives.length > 0) {\n  const missingFields = incompleteCreatives.map(c => {\n    const missing = [];\n    if (!c.headline) missing.push('headline');\n    if (!c.primary_text) missing.push('primary_text');\n    if (!c.cta) missing.push('cta');\n    return { id: c.id, missing_fields: missing };\n  });\n  \n  return [{\n    json: {\n      success: false,\n      error: `Found ${incompleteCreatives.length} creatives with missing required fields`,\n      baserow_campaign_id: inputData.baserow_campaign_id,\n      incomplete_creatives: missingFields,\n      total_creatives: creatives.length\n    }\n  }];\n}\n\nreturn [{\n  json: {\n    success: true,\n    baserow_campaign_id: inputData.baserow_campaign_id,\n    creatives: formattedCreatives,\n    total_creatives: formattedCreatives.length,\n    message: `Found ${formattedCreatives.length} completed creative(s) ready for ad creation`,\n    summary: {\n      with_images: formattedCreatives.filter(c => c.has_image).length,\n      without_images: formattedCreatives.filter(c => !c.has_image).length,\n      already_created: formattedCreatives.filter(c => c.creative_id).length,\n      with_description: formattedCreatives.filter(c => c.description && c.description.trim()).length\n    }\n  }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1120,480],"id":"29c14570-7956-4c21-891e-037679590a84","name":"Process Creatives1"},{"parameters":{"respondWith":"json","responseBody":"={{ JSON.stringify($json, null, 2) }}","options":{}},"type":"n8n-nodes-base.respondToWebhook","typeVersion":1,"position":[1340,480],"id":"7f4af3a2-8ffa-4938-8d42-856c15f8563e","name":"Success Response1"},{"parameters":{"jsCode":"// Handle errors and prepare error response\nconst error = $input.first().json;\nconst inputData = $('Validate Input1').first()?.json || {};\n\nconst errorMessage = error.message || error.error?.message || 'Unknown error occurred while getting creatives';\n\nconsole.error('Get creatives failed:', errorMessage);\nconsole.error('Campaign ID was:', inputData.baserow_campaign_id);\n\n// Check for specific error types\nlet detailedError = errorMessage;\nif (errorMessage.includes('filter') || errorMessage.includes('field')) {\n  detailedError = `Database filter error: ${errorMessage}. Check that campaign_ref and copy_status fields exist in the Ad Creative table.`;\n}\nif (errorMessage.includes('table') || errorMessage.includes('database')) {\n  detailedError = `Database access error: ${errorMessage}. Verify the Ad Creative table ID and database permissions.`;\n}\nif (errorMessage.includes('baserow_campaign_id')) {\n  detailedError = `Invalid campaign ID: ${errorMessage}. Ensure the campaign ID is a valid number.`;\n}\nif (errorMessage.includes('attachment') || errorMessage.includes('image_file')) {\n  detailedError = `Image attachment error: ${errorMessage}. Check that image attachments are properly uploaded in Baserow.`;\n}\nif (errorMessage.includes('description')) {\n  detailedError = `Description field error: ${errorMessage}. Verify the description field exists in the Ad Creative table.`;\n}\n\nreturn [{\n  json: {\n    success: false,\n    error: detailedError,\n    baserow_campaign_id: inputData.baserow_campaign_id || 'unknown',\n    creatives: [],\n    total_creatives: 0\n  }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1120,680],"id":"3c073cca-9072-46d7-bf1e-4bea4955cdbb","name":"Handle Error1"},{"parameters":{"respondWith":"json","responseBody":"={{ JSON.stringify($json, null, 2) }}","options":{"responseCode":400}},"type":"n8n-nodes-base.respondToWebhook","typeVersion":1,"position":[1340,680],"id":"fbbcbdf2-15ae-4dc9-b0a3-1a1e2ca2e6a0","name":"Error Response1"}],"connections":{"Webhook Trigger1":{"main":[[{"node":"Validate Input1","type":"main","index":0}]]},"Validate Input1":{"main":[[{"node":"Get Creatives1","type":"main","index":0}]]},"Get Creatives1":{"main":[[{"node":"Process Creatives1","type":"main","index":0}],[{"node":"Handle Error1","type":"main","index":0}]]},"Process Creatives1":{"main":[[{"node":"Success Response1","type":"main","index":0}]]},"Handle Error1":{"main":[[{"node":"Error Response1","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":null,"pinData":{},"versionId":"09aa4c2a-0308-4734-a974-86a75a1a7505","triggerCount":0,"shared":[{"createdAt":"2025-07-14T11:27:29.287Z","updatedAt":"2025-07-14T11:27:29.287Z","role":"workflow:owner","workflowId":"BJrpgfN9rZJnrpN8","projectId":"pRXFeKq9D8e0hAOx"}],"tags":[]},{"createdAt":"2025-07-14T11:25:49.596Z","updatedAt":"2025-07-15T09:03:05.000Z","id":"IaPQCe4koRyGTXxo","name":"Social Media Ad Campaign","active":false,"isArchived":false,"nodes":[{"parameters":{"model":"anthropic/claude-3.7-sonnet:thinking","options":{"temperature":0.1}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenRouter","typeVersion":1,"position":[-220,-600],"id":"d6304375-88bb-4907-b6f2-4c35ce4a4dd1","name":"OpenRouter Chat Model","credentials":{"openRouterApi":{"id":"eni2kFdHGvy7lEd3","name":"OpenRouter account"}}},{"parameters":{},"type":"n8n-nodes-base.manualTrigger","typeVersion":1,"position":[-780,-820],"id":"6dc9c9d7-dbbb-4fb4-a23e-774eda06ba41","name":"When clicking ‘Execute workflow’"},{"parameters":{"databaseId":174,"tableId":705,"additionalOptions":{}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[-560,-820],"id":"6166a6ff-2afa-4521-9bab-f5fbd94d317b","name":"Get Ready Campaigns","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"jsCode":"// Process campaign data and prepare for AI agent\nconst campaigns = $input.all();\n\nif (campaigns.length === 0) {\n  return [{ json: { message: \"No campaigns ready to process\", campaigns: [] } }];\n}\n\n// Format campaigns for AI agent\nconst formattedCampaigns = campaigns.map(item => {\n  const campaign = item.json;\n  return {\n    id: campaign.id,\n    campaign_name: campaign.campaign_name,\n    product_url: campaign.product_url,\n    campaign_objective: campaign.campaign_objective,\n    daily_budget: campaign.daily_budget,\n    \n    // Facebook Page Information (from lookup)\n    facebook_page: {\n      page_id: campaign.facebook_page?.facebook_page_id,\n      page_name: campaign.facebook_page?.page_name,\n      ad_account_id: campaign.facebook_page?.facebook_ad_account_id,\n      default_link_url: campaign.facebook_page?.default_link_url\n    },\n    \n    // Location Targeting (multiple select)\n    target_provinces: campaign.target_provinces || [],\n    target_cities: campaign.target_cities || [],\n    \n    // Demographics\n    age_min: campaign.age_min,\n    age_max: campaign.age_max,\n    gender: campaign.gender,\n    \n    // Conversion Tracking\n    pixel_id: campaign.pixel_id,\n    conversion_event: campaign.conversion_event,\n    \n    // Campaign Settings\n    create_ads: campaign.create_ads,\n    \n    // Brand Insights (from AI)\n    target_audience: campaign.target_audience,\n    pain_point: campaign.pain_point,\n    solution: campaign.solution\n  };\n});\n\n// Validate that campaigns have required Facebook page data\nconst invalidCampaigns = formattedCampaigns.filter(c => \n  !c.facebook_page?.page_id || !c.facebook_page?.ad_account_id\n);\n\nif (invalidCampaigns.length > 0) {\n  console.warn(`Found ${invalidCampaigns.length} campaigns with missing Facebook page data:`, \n    invalidCampaigns.map(c => ({ id: c.id, name: c.campaign_name })));\n}\n\n// Validate location targeting\nconst noLocationCampaigns = formattedCampaigns.filter(c => \n  (!c.target_provinces || c.target_provinces.length === 0) && \n  (!c.target_cities || c.target_cities.length === 0)\n);\n\nif (noLocationCampaigns.length > 0) {\n  console.warn(`Found ${noLocationCampaigns.length} campaigns with no location targeting:`, \n    noLocationCampaigns.map(c => ({ id: c.id, name: c.campaign_name })));\n}\n\nreturn [{ \n  json: { \n    message: `Found ${campaigns.length} campaign(s) ready to process`,\n    campaigns: formattedCampaigns,\n    total_campaigns: campaigns.length,\n    validation: {\n      invalid_page_data: invalidCampaigns.length,\n      no_location_targeting: noLocationCampaigns.length\n    }\n  } \n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-340,-820],"id":"7c4cd76c-9eaa-4c14-9330-4babf6b20810","name":"Process Campaign Data"},{"parameters":{"method":"POST","url":"YOUR_CREATE_ADSET_WEBHOOK_URL_HERE","sendBody":true,"specifyBody":"json","jsonBody":"={{ JSON.stringify($parameter) }}"},"type":"@n8n/n8n-nodes-langchain.toolHttpRequest","typeVersion":1.1,"position":[-60,-620],"id":"4ab4216c-1c62-4031-abcb-54bc2b849fce","name":"Tool: Create AdSet"},{"parameters":{"method":"POST","url":"YOUR_GET_CREATIVES_WEBHOOK_URL_HERE","sendBody":true,"specifyBody":"json","jsonBody":"={{ JSON.stringify($parameter) }}"},"type":"@n8n/n8n-nodes-langchain.toolHttpRequest","typeVersion":1.1,"position":[80,-660],"id":"4820aad2-5920-41ce-8395-a0e380554259","name":"Tool: Get Creatives"},{"parameters":{"method":"POST","url":"YOUR_CREATE_CREATIVE_WEBHOOK_URL_HERE","sendBody":true,"specifyBody":"json","jsonBody":"={{ JSON.stringify($parameter) }}"},"type":"@n8n/n8n-nodes-langchain.toolHttpRequest","typeVersion":1.1,"position":[220,-580],"id":"8da938b9-b3b7-4737-b383-ebbf16475df8","name":"Tool: Create Creative"},{"parameters":{"method":"POST","url":"YOUR_CREATE_AD_WEBHOOK_URL_HERE","sendBody":true,"specifyBody":"json","jsonBody":"={{ JSON.stringify($parameter) }}"},"type":"@n8n/n8n-nodes-langchain.toolHttpRequest","typeVersion":1.1,"position":[380,-580],"id":"4b35fd09-41f3-42a5-a880-1ad3fb9474d1","name":"Tool: Create Ad"},{"parameters":{"method":"POST","url":"YOUR_UPDATE_STATUS_WEBHOOK_URL_HERE","sendBody":true,"specifyBody":"json","jsonBody":"={{ JSON.stringify($parameter) }}"},"type":"@n8n/n8n-nodes-langchain.toolHttpRequest","typeVersion":1.1,"position":[480,-700],"id":"7415553f-5690-4d5a-a362-3657ab29ef27","name":"Tool: Update Status"},{"parameters":{"method":"POST","url":"https://n8n.aiautomata.co.za/webhook/create-campaign","sendBody":true,"specifyBody":"json","jsonBody":"={{ JSON.stringify($parameter) }}"},"type":"@n8n/n8n-nodes-langchain.toolHttpRequest","typeVersion":1.1,"position":[700,-720],"id":"00c11535-6d44-45da-97f5-547b37f283e0","name":"Tool: Create Campaign"},{"parameters":{"promptType":"define","text":"=You are an expert Facebook Ads campaign manager AI agent. Your role is to intelligently create and launch Facebook ad campaigns using the available tools.\n\nYou will receive campaign data and need to:\n1. Analyze each campaign's requirements\n2. Create Facebook campaigns, ad sets, and ads using the provided tools\n3. Handle any errors gracefully\n4. Update campaign status throughout the process\n\nCampaign data to process:\n{{ JSON.stringify($json.campaigns, null, 2) }}\n\nPlease process each campaign systematically by:\n1. Creating the Facebook campaign\n2. Creating the ad set with proper targeting\n3. Getting the ad creatives for this campaign\n4. Creating Facebook ads for each creative\n5. Updating the campaign status to 'completed'\n\nWork through them one at a time and provide detailed status updates.","options":{}},"type":"@n8n/n8n-nodes-langchain.agent","typeVersion":1.6,"position":[152,-920],"id":"cac299a1-176c-4b15-9dbc-728fefef01a0","name":"AI Campaign Agent"}],"connections":{"OpenRouter Chat Model":{"ai_languageModel":[[{"node":"AI Campaign Agent","type":"ai_languageModel","index":0}]]},"When clicking ‘Execute workflow’":{"main":[[{"node":"Get Ready Campaigns","type":"main","index":0}]]},"Get Ready Campaigns":{"main":[[{"node":"Process Campaign Data","type":"main","index":0}]]},"Process Campaign Data":{"main":[[{"node":"AI Campaign Agent","type":"main","index":0}]]},"Tool: Create AdSet":{"ai_tool":[[{"node":"AI Campaign Agent","type":"ai_tool","index":0}]]},"Tool: Get Creatives":{"ai_tool":[[{"node":"AI Campaign Agent","type":"ai_tool","index":0}]]},"Tool: Create Creative":{"ai_tool":[[{"node":"AI Campaign Agent","type":"ai_tool","index":0}]]},"Tool: Create Ad":{"ai_tool":[[{"node":"AI Campaign Agent","type":"ai_tool","index":0}]]},"Tool: Update Status":{"ai_tool":[[{"node":"AI Campaign Agent","type":"ai_tool","index":0}]]},"Tool: Create Campaign":{"ai_tool":[[{"node":"AI Campaign Agent","type":"ai_tool","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"1a15f79f-e74c-4fc5-875d-6bb9cdb00424","triggerCount":0,"shared":[{"createdAt":"2025-07-14T11:25:49.618Z","updatedAt":"2025-07-14T11:25:49.618Z","role":"workflow:owner","workflowId":"IaPQCe4koRyGTXxo","projectId":"pRXFeKq9D8e0hAOx"}],"tags":[]},{"createdAt":"2025-08-23T04:49:21.631Z","updatedAt":"2025-08-24T13:37:56.000Z","id":"IbjF2mTSPF8oRrSF","name":"Brand Asset Generator v2","active":true,"isArchived":false,"nodes":[{"parameters":{"httpMethod":"POST","path":"brand-asset-generator","responseMode":"responseNode","options":{}},"id":"webhook-v2","name":"Brand Asset Webhook v2","type":"n8n-nodes-base.webhook","position":[0,84],"typeVersion":2,"webhookId":"c0a47203-accc-4d04-89da-c730a015d7ce"},{"parameters":{"jsCode":"// BRAND ASSET CONFIG EXTRACTOR v2 - Updated for Real App Payload\n// Handles the actual payload structure from Modern Management app\n\nconst payload = $json;\n\nconsole.log('=== BRAND ASSET CONFIG EXTRACTOR v2 START ===');\nconsole.log('Processing Modern Management app payload...');\n\n// Extract webhook data from actual app structure\nconst webhookData = payload.body;\nif (!webhookData) {\n  console.log('❌ No webhook data found in payload.body');\n  console.log('Available payload keys:', Object.keys(payload));\n  throw new Error('Could not locate webhook data in payload.body');\n}\n\nconsole.log('✅ Found webhook data in payload.body');\nconsole.log('Webhook data keys:', Object.keys(webhookData));\n\n// Validate required fields using ACTUAL app field names\nconst requiredFields = ['clientId', 'databaseId', 'assetName', 'platform', 'contentType', 'assetType', 'tableId'];\nconst missingFields = requiredFields.filter(field => !webhookData[field]);\n\nif (missingFields.length > 0) {\n  console.log('❌ Missing required fields:', missingFields);\n  console.log('Available webhook fields:', Object.keys(webhookData));\n  throw new Error(`Missing required fields for brand asset: ${missingFields.join(', ')}`);\n}\n\n// Extract client config from the payload\nconst clientConfig = webhookData.clientConfig || {};\n\n// EXTRACT BRAND ASSET CONFIGURATION using REAL app structure\nconst brandAssetConfig = {\n  // Core database information (using ACTUAL field names)\n  baseId: webhookData.databaseId, // \"176\"\n  \n  // Client information (using ACTUAL field names)\n  client: {\n    id: webhookData.clientId, // \"modern-management\"\n    name: webhookData.clientName // \"Modern Management\"\n  },\n  \n  // Brand Assets table configuration (using ACTUAL structure)\n  tables: {\n    brandAssets: {\n      id: webhookData.tableId // \"728\"\n    },\n    // Other tables from clientConfig\n    contentIdeas: {\n      id: clientConfig.baserow?.tables?.contentIdeas || null\n    },\n    socialMediaContent: {\n      id: clientConfig.baserow?.tables?.socialMediaContent || null\n    },\n    images: {\n      id: clientConfig.baserow?.tables?.images || null\n    }\n  },\n  \n  // Baserow connection (using ACTUAL tokens and IDs)\n  baserow: {\n    baseUrl: 'https://baserow.aiautomata.co.za',\n    token: clientConfig.baserow?.token || webhookData.token, // Real token!\n    databaseId: webhookData.databaseId // \"176\"\n  },\n  \n  // Brand asset specific data (using ACTUAL app field names)\n  brandAsset: {\n    name: webhookData.assetName, // \"Test Facebook Brand\"\n    platform: webhookData.platform, // \"Facebook\"\n    contentType: webhookData.contentType, // \"Social Media Post\"\n    assetType: webhookData.assetType, // \"Brand Voice\"\n    fileUpload: webhookData.uploadedFile, // null\n    fileUrl: webhookData.fileUrl, // \"\"\n    notes: webhookData.notes // \"Testing the information\"\n  },\n  \n  // Field mappings (VERY useful for Baserow API calls!)\n  fieldMappings: webhookData.fieldMappings,\n  \n  // Row information\n  rowInfo: {\n    rowId: webhookData.rowId, // 6\n    tableId: webhookData.tableId, // \"728\"\n    requestId: webhookData.requestId, // \"brand-asset-6-1755924033764\"\n    timestamp: webhookData.timestamp\n  },\n  \n  // Client settings\n  clientSettings: {\n    branding: clientConfig.branding,\n    settings: clientConfig.settings,\n    users: clientConfig.users\n  },\n  \n  // Metadata\n  metadata: {\n    timestamp: new Date().toISOString(),\n    source: 'Brand Asset Config Extractor v2',\n    version: '2.0',\n    workflowType: 'brand-asset-generator',\n    appVersion: 'Modern Management App v1'\n  }\n};\n\n// Validation for brand asset creation\nconst validation = {\n  hasValidBaseId: !!webhookData.databaseId && webhookData.databaseId !== '',\n  hasValidClientId: !!webhookData.clientId && webhookData.clientId !== '',\n  hasBrandAssetsTable: !!webhookData.tableId && webhookData.tableId !== '',\n  hasAssetName: !!webhookData.assetName && webhookData.assetName !== '',\n  hasPlatform: !!webhookData.platform && webhookData.platform !== '',\n  hasContentType: !!webhookData.contentType && webhookData.contentType !== '',\n  hasAssetType: !!webhookData.assetType && webhookData.assetType !== '',\n  hasBaserowToken: !!brandAssetConfig.baserow.token && brandAssetConfig.baserow.token !== 'YOUR_BASEROW_API_TOKEN_HERE',\n  hasFieldMappings: !!webhookData.fieldMappings && Object.keys(webhookData.fieldMappings).length > 0,\n  hasRowId: !!webhookData.rowId\n};\n\nconsole.log('=== BRAND ASSET VALIDATION v2 ===');\nconsole.log(`✅ Valid Base ID: ${validation.hasValidBaseId} (${webhookData.databaseId})`);\nconsole.log(`✅ Valid Client ID: ${validation.hasValidClientId} (${webhookData.clientId})`);\nconsole.log(`✅ Brand Assets Table: ${validation.hasBrandAssetsTable} (${webhookData.tableId})`);\nconsole.log(`✅ Asset Name: ${validation.hasAssetName} (${webhookData.assetName})`);\nconsole.log(`✅ Platform: ${validation.hasPlatform} (${webhookData.platform})`);\nconsole.log(`✅ Content Type: ${validation.hasContentType} (${webhookData.contentType})`);\nconsole.log(`✅ Asset Type: ${validation.hasAssetType} (${webhookData.assetType})`);\nconsole.log(`✅ Baserow Token: ${validation.hasBaserowToken}`);\nconsole.log(`✅ Field Mappings: ${validation.hasFieldMappings}`);\nconsole.log(`✅ Row ID: ${validation.hasRowId} (${webhookData.rowId})`);\n\n// Critical validations\nif (!validation.hasValidBaseId) {\n  throw new Error(`Invalid databaseId for client ${webhookData.clientId}: ${webhookData.databaseId}`);\n}\n\nif (!validation.hasValidClientId) {\n  throw new Error(`Invalid clientId: ${webhookData.clientId}`);\n}\n\nif (!validation.hasBrandAssetsTable) {\n  throw new Error(`Missing brand assets tableId for client ${webhookData.clientId}`);\n}\n\nif (!validation.hasAssetName) {\n  throw new Error('Asset name is required for brand asset creation');\n}\n\nif (!validation.hasBaserowToken) {\n  throw new Error('Valid Baserow API token is required');\n}\n\n// Create enriched payload with brand asset configuration\nconst enrichedPayload = {\n  // Preserve original webhook payload\n  ...payload,\n  \n  // Brand asset configuration\n  brandAssetConfig: brandAssetConfig,\n  \n  // Quick access fields for downstream nodes (using ACTUAL app naming)\n  baseId: webhookData.databaseId,\n  clientId: webhookData.clientId,\n  clientName: webhookData.clientName,\n  brandAssetsTableId: webhookData.tableId,\n  \n  // Asset details for easy access (using ACTUAL app naming)\n  assetName: webhookData.assetName,\n  platform: webhookData.platform,\n  contentType: webhookData.contentType,\n  assetType: webhookData.assetType,\n  fileUpload: webhookData.uploadedFile,\n  fileUrl: webhookData.fileUrl,\n  notes: webhookData.notes,\n  \n  // Row and technical information\n  rowId: webhookData.rowId,\n  tableId: webhookData.tableId,\n  requestId: webhookData.requestId,\n  fieldMappings: webhookData.fieldMappings,\n  baserowToken: brandAssetConfig.baserow.token,\n  \n  // Processing flags\n  configExtracted: true,\n  brandAssetReady: true,\n  readyForProcessing: true,\n  \n  // Validation results\n  validation: validation,\n  \n  // Debug information\n  debugInfo: {\n    extractionMethod: 'brand_asset_config_extraction_v2_modern_management',\n    clientId: webhookData.clientId,\n    baseId: webhookData.databaseId,\n    brandAssetsTable: webhookData.tableId,\n    assetDetails: {\n      name: webhookData.assetName,\n      platform: webhookData.platform,\n      type: webhookData.assetType,\n      notes: webhookData.notes\n    },\n    validationPassed: Object.values(validation).every(Boolean),\n    processingTimestamp: new Date().toISOString(),\n    payloadStructure: 'modern_management_app_v1_complete',\n    hasAllRequiredData: true\n  }\n};\n\nconsole.log('=== BRAND ASSET CONFIG SUMMARY v2 ===');\nconsole.log(`✅ Client: ${webhookData.clientName} (${webhookData.clientId})`);\nconsole.log(`✅ Database: ${webhookData.databaseId}`);\nconsole.log(`✅ Brand Assets Table: ${webhookData.tableId}`);\nconsole.log(`✅ Asset: ${webhookData.assetName}`);\nconsole.log(`✅ Platform: ${webhookData.platform}`);\nconsole.log(`✅ Asset Type: ${webhookData.assetType}`);\nconsole.log(`✅ Row ID: ${webhookData.rowId}`);\nconsole.log(`✅ Request ID: ${webhookData.requestId}`);\nconsole.log(`✅ Baserow Token: Available`);\nconsole.log(`✅ Field Mappings: ${Object.keys(webhookData.fieldMappings).length} mappings`);\nconsole.log(`✅ Notes: ${webhookData.notes}`);\nconsole.log(`✅ All validations passed: ${Object.values(validation).every(Boolean)}`);\nconsole.log(`✅ Brand asset creation: READY FOR PROCESSING`);\nconsole.log('=== CONFIG EXTRACTION COMPLETE v2 ===');\n\nreturn {\n  json: enrichedPayload\n};"},"id":"config-v2","name":"Config Extractor v2","type":"n8n-nodes-base.code","position":[220,84],"typeVersion":2},{"parameters":{"jsCode":"// MERGE BRAND ASSET DATA v2 - Updated for Real App Payload\n// Handles the actual payload structure from Modern Management app\n\nconsole.log('=== MERGE BRAND ASSET DATA v2 START ===');\n\nconst payload = $json;\n\n// Extract brand asset configuration (should be available from Config Extractor v2)\nif (!payload.brandAssetConfig) {\n  throw new Error('❌ No brandAssetConfig found. Check Config Extractor v2 node.');\n}\n\nconst brandAssetConfig = payload.brandAssetConfig;\nconst webhookData = payload.body; // Original app data\n\nconsole.log(`✅ Brand Asset: ${webhookData.assetName}`);\nconsole.log(`✅ Client: ${webhookData.clientName} (${webhookData.clientId})`);\nconsole.log(`✅ Platform: ${webhookData.platform}`);\nconsole.log(`✅ Asset Type: ${webhookData.assetType}`);\nconsole.log(`✅ Table ID: ${webhookData.tableId}`);\nconsole.log(`✅ Row ID: ${webhookData.rowId}`);\nconsole.log(`✅ Notes: ${webhookData.notes}`);\n\n// FILE ANALYSIS - Handle actual app structure\nlet sourceContent = '';\nlet hasFileUpload = false;\nlet hasFileUrl = false;\nlet fileType = 'text';\nlet fileName = '';\nlet fileExtension = '';\n\n// Check for file upload (uploadedFile)\nif (webhookData.uploadedFile && webhookData.uploadedFile !== null) {\n  hasFileUpload = true;\n  \n  if (Array.isArray(webhookData.uploadedFile) && webhookData.uploadedFile.length > 0) {\n    const fileInfo = webhookData.uploadedFile[0];\n    fileName = fileInfo.name || fileInfo.filename || 'uploaded_file';\n    sourceContent = fileInfo.url || fileInfo.path || '';\n    \n    if (fileName.includes('.')) {\n      fileExtension = fileName.split('.').pop().toLowerCase();\n    }\n  }\n  \n  console.log(`✅ File Upload Detected: ${fileName}`);\n}\n\n// Check for file URL\nif (webhookData.fileUrl && webhookData.fileUrl !== null && webhookData.fileUrl !== '') {\n  hasFileUrl = true;\n  sourceContent = webhookData.fileUrl;\n  \n  try {\n    const url = new URL(webhookData.fileUrl);\n    const pathname = url.pathname;\n    if (pathname.includes('.')) {\n      fileExtension = pathname.split('.').pop().toLowerCase();\n      fileName = pathname.split('/').pop();\n    }\n  } catch (error) {\n    console.log('⚠️ Could not parse file URL:', error.message);\n  }\n  \n  console.log(`✅ File URL Detected: ${webhookData.fileUrl}`);\n}\n\n// Determine file type based on extension\nif (fileExtension) {\n  if (['pdf'].includes(fileExtension)) {\n    fileType = 'pdf';\n  } else if (['doc', 'docx'].includes(fileExtension)) {\n    fileType = 'word';\n  } else if (['jpg', 'jpeg', 'png', 'gif', 'bmp', 'webp'].includes(fileExtension)) {\n    fileType = 'image';\n  } else if (['mp4', 'avi', 'mov', 'wmv', 'flv', 'webm'].includes(fileExtension)) {\n    fileType = 'video';\n  } else if (['mp3', 'wav', 'ogg', 'm4a', 'aac'].includes(fileExtension)) {\n    fileType = 'audio';\n  } else {\n    fileType = 'unknown';\n  }\n}\n\n// If no file but has URL, treat as web content\nif (!hasFileUpload && hasFileUrl && fileType === 'text') {\n  fileType = 'url';\n}\n\n// If no file or URL, use text input (asset name + notes as source)\nif (!hasFileUpload && !hasFileUrl) {\n  // Use asset name + notes as source content\n  sourceContent = `${webhookData.assetName}. ${webhookData.notes || ''}`;\n  fileType = 'text';\n}\n\nconsole.log('=== FILE ANALYSIS v2 ===');\nconsole.log(`✅ File Type: ${fileType}`);\nconsole.log(`✅ File Extension: ${fileExtension || 'none'}`);\nconsole.log(`✅ File Name: ${fileName || 'none'}`);\nconsole.log(`✅ Source Content Preview: ${sourceContent.substring(0, 100)}...`);\nconsole.log(`✅ Has File Upload: ${hasFileUpload}`);\nconsole.log(`✅ Has File URL: ${hasFileUrl}`);\nconsole.log(`✅ Content Length: ${sourceContent.length} characters`);\n\n// Create merged data for processing - using ACTUAL app structure\nconst mergedData = {\n  // Preserve all original data\n  ...payload,\n  \n  // Brand asset configuration\n  brandAssetConfig: brandAssetConfig,\n  \n  // File processing information\n  fileInfo: {\n    type: fileType,\n    extension: fileExtension,\n    name: fileName,\n    hasUpload: hasFileUpload,\n    hasUrl: hasFileUrl,\n    sourceContent: sourceContent\n  },\n  \n  // Processing data (using app field names for consistency)\n  sourceContent: sourceContent,\n  contentType: fileType,\n  needsFileProcessing: fileType !== 'text',\n  \n  // Asset details (using ACTUAL app naming)\n  assetName: webhookData.assetName,\n  platform: webhookData.platform,\n  assetContentType: webhookData.contentType,\n  assetType: webhookData.assetType,\n  notes: webhookData.notes,\n  \n  // Client details\n  clientId: webhookData.clientId,\n  clientName: webhookData.clientName,\n  baseId: webhookData.databaseId,\n  brandAssetsTableId: webhookData.tableId,\n  baserowToken: brandAssetConfig.baserow.token,\n  \n  // Row and field information (VERY useful for Baserow operations!)\n  rowId: webhookData.rowId,\n  tableId: webhookData.tableId,\n  requestId: webhookData.requestId,\n  fieldMappings: webhookData.fieldMappings,\n  \n  // Processing flags\n  readyForFileProcessing: true,\n  contentReady: fileType === 'text',\n  dataComplete: true,\n  \n  // Debug information\n  debugInfo: {\n    ...payload.debugInfo,\n    mergeCompleted: true,\n    fileTypeDetected: fileType,\n    processingPath: fileType === 'text' ? 'direct_text_processing' : 'file_processing_required',\n    mergeTimestamp: new Date().toISOString(),\n    payloadStructure: 'modern_management_app_v1',\n    originalRequestId: webhookData.requestId,\n    baseIdMapped: webhookData.databaseId,\n    hasFieldMappings: !!webhookData.fieldMappings,\n    hasNotes: !!webhookData.notes,\n    hasValidToken: !!brandAssetConfig.baserow.token,\n    contentSourceMethod: fileType === 'text' ? 'asset_name_plus_notes' : `file_${fileType}`\n  }\n};\n\nconsole.log('=== MERGE COMPLETE v2 ===');\nconsole.log('✅ Brand asset config: INCLUDED');\nconsole.log('✅ File information: ANALYZED');\nconsole.log(`✅ Processing path: ${fileType === 'text' ? 'DIRECT TEXT PROCESSING' : 'FILE PROCESSING REQUIRED'}`);\nconsole.log(`✅ Asset: ${webhookData.assetName}`);\nconsole.log(`✅ Client: ${webhookData.clientName}`);\nconsole.log(`✅ Base ID: ${webhookData.databaseId}`);\nconsole.log(`✅ Table ID: ${webhookData.tableId}`);\nconsole.log(`✅ Row ID: ${webhookData.rowId}`);\nconsole.log(`✅ Baserow Token: ${brandAssetConfig.baserow.token ? 'AVAILABLE' : 'MISSING'}`);\nconsole.log(`✅ Field Mappings: ${Object.keys(webhookData.fieldMappings).length} mappings available`);\nconsole.log(`✅ Notes: ${webhookData.notes || 'none'}`);\nconsole.log(`✅ Source Content Length: ${sourceContent.length} characters`);\nconsole.log(`✅ Data completeness: ALL REQUIRED DATA PRESENT`);\nconsole.log('=== READY FOR FILE TYPE ROUTING ===');\n\nreturn {\n  json: mergedData\n};"},"id":"merge-v2","name":"Merge Data v2","type":"n8n-nodes-base.code","position":[440,84],"typeVersion":2},{"parameters":{"rules":{"values":[{"conditions":{"options":{"version":1,"leftValue":"","caseSensitive":true,"typeValidation":"strict"},"combinator":"and","conditions":[{"id":"pdf-condition","operator":{"type":"string","operation":"equals"},"leftValue":"={{ $json.fileInfo.type }}","rightValue":"pdf"}]},"renameOutput":true,"outputKey":"pdf"},{"conditions":{"options":{"version":1,"leftValue":"","caseSensitive":true,"typeValidation":"strict"},"combinator":"and","conditions":[{"id":"word-condition","operator":{"type":"string","operation":"equals"},"leftValue":"={{ $json.fileInfo.type }}","rightValue":"word"}]},"renameOutput":true,"outputKey":"word"},{"conditions":{"options":{"version":1,"leftValue":"","caseSensitive":true,"typeValidation":"strict"},"combinator":"and","conditions":[{"id":"image-condition","operator":{"type":"string","operation":"equals"},"leftValue":"={{ $json.fileInfo.type }}","rightValue":"image"}]},"renameOutput":true,"outputKey":"image"},{"conditions":{"options":{"version":1,"leftValue":"","caseSensitive":true,"typeValidation":"strict"},"combinator":"and","conditions":[{"id":"url-condition","operator":{"type":"string","operation":"equals"},"leftValue":"={{ $json.fileInfo.type }}","rightValue":"url"}]},"renameOutput":true,"outputKey":"url"},{"conditions":{"options":{"version":1,"leftValue":"","caseSensitive":true,"typeValidation":"strict"},"combinator":"and","conditions":[{"id":"text-condition","operator":{"type":"string","operation":"equals"},"leftValue":"={{ $json.fileInfo.type }}","rightValue":"text"}]},"renameOutput":true,"outputKey":"text"},{"conditions":{"options":{"version":1,"leftValue":"","caseSensitive":true,"typeValidation":"strict"},"combinator":"and","conditions":[{"id":"video-condition","operator":{"type":"string","operation":"equals"},"leftValue":"={{ $json.fileInfo.type }}","rightValue":"video"}]},"renameOutput":true,"outputKey":"video"},{"conditions":{"options":{"version":1,"leftValue":"","caseSensitive":true,"typeValidation":"strict"},"combinator":"and","conditions":[{"id":"audio-condition","operator":{"type":"string","operation":"equals"},"leftValue":"={{ $json.fileInfo.type }}","rightValue":"audio"}]},"renameOutput":true,"outputKey":"audio"}]},"options":{}},"id":"router-v2","name":"File Type Router v2","type":"n8n-nodes-base.switch","position":[660,0],"typeVersion":3},{"parameters":{"jsCode":"// TEXT PROCESSOR v2 - Updated for Real App Payload\n// Processes text-based brand assets from Modern Management app\n\nconst payload = $json;\n\nconsole.log('=== TEXT PROCESSOR v2 START ===');\nconsole.log('Processing Modern Management app text-based brand asset...');\n\n// Get the original webhook data\nconst webhookData = payload.body;\nconst brandAssetConfig = payload.brandAssetConfig;\n\nconsole.log(`✅ Processing Asset: ${webhookData.assetName}`);\nconsole.log(`✅ Platform: ${webhookData.platform}`);\nconsole.log(`✅ Asset Type: ${webhookData.assetType}`);\nconsole.log(`✅ Source Content: ${payload.sourceContent}`);\nconsole.log(`✅ Notes: ${webhookData.notes}`);\n\n// For text assets, we use the asset name + notes as the source content\nconst fullSourceContent = `Asset Name: ${webhookData.assetName}\\n\\nPlatform: ${webhookData.platform}\\n\\nContent Type: ${webhookData.contentType}\\n\\nAsset Type: ${webhookData.assetType}\\n\\nAdditional Notes: ${webhookData.notes || 'No additional notes provided'}`;\n\nconst processedData = {\n  // Preserve all original data\n  ...payload,\n  \n  // Processing results\n  processedContent: fullSourceContent,\n  processingStatus: 'completed',\n  processingType: 'text_direct_v2',\n  contentReady: true,\n  processingNotes: 'Text content processed successfully - ready for AI brand analysis',\n  \n  // Enhanced content information\n  contentAnalysis: {\n    assetName: webhookData.assetName,\n    platform: webhookData.platform,\n    contentType: webhookData.contentType,\n    assetType: webhookData.assetType,\n    notes: webhookData.notes,\n    contentLength: fullSourceContent.length,\n    hasNotes: !!webhookData.notes && webhookData.notes.trim() !== '',\n    sourceMethod: 'asset_metadata_plus_notes'\n  },\n  \n  // Processing metadata\n  processingTimestamp: new Date().toISOString(),\n  \n  // Ready for AI analysis flags\n  readyForAIAnalysis: true,\n  readyForBrandAssetGeneration: true,\n  \n  // Debug info\n  debugInfo: {\n    ...payload.debugInfo,\n    textProcessingCompleted: true,\n    contentLength: fullSourceContent.length,\n    processingPath: 'text_direct_v2',\n    sourceContentMethod: 'asset_name_plus_metadata_plus_notes',\n    hasUserNotes: !!webhookData.notes,\n    processingTimestamp: new Date().toISOString()\n  }\n};\n\nconsole.log('=== TEXT PROCESSING RESULT v2 ===');\nconsole.log(`✅ Processed content length: ${fullSourceContent.length} characters`);\nconsole.log(`✅ Has user notes: ${!!webhookData.notes}`);\nconsole.log(`✅ Ready for AI analysis: ${processedData.readyForAIAnalysis}`);\nconsole.log(`✅ Processing status: ${processedData.processingStatus}`);\nconsole.log(`✅ Content preview: ${fullSourceContent.substring(0, 150)}...`);\nconsole.log('✅ TEXT PROCESSING COMPLETE - READY FOR AI AGENT');\n\nreturn {\n  json: processedData\n};"},"id":"text-v2","name":"Text Processor v2","type":"n8n-nodes-base.code","position":[980,40],"typeVersion":2},{"parameters":{"respondWith":"json","responseBody":"={{ $json }}","options":{}},"id":"response-v2","name":"Response v2","type":"n8n-nodes-base.respondToWebhook","position":[2220,80],"typeVersion":1},{"parameters":{"promptType":"define","text":"=You are an expert Brand Strategist AI with access to existing brand assets and web research. Create comprehensive brand guidelines for {{ $json.assetName }} on {{ $json.platform }}.\n\n## CONTEXT\n**Asset Details:**\n- Name: {{ $json.assetName }}\n- Platform: {{ $json.platform }}\n- Content Type: {{ $json.assetContentType }}\n- Asset Type: {{ $json.assetType }}\n- Client: {{ $json.clientName }}\n- User Notes: {{ $json.notes }}\n\n**Source Content:**\n{{ $json.processedContent }}\n\n**Existing Brand Assets Research:**\n\n**Latest Platform Best Practices:**\n\n\n\n\n## TASK\nGenerate comprehensive brand asset guidelines that:\n1. **Maintain consistency** with existing brand assets\n2. **Follow latest platform best practices** from research\n3. **Reflect the specific asset requirements**\n4. **Provide actionable, specific guidance**\n\n## REQUIRED OUTPUT FORMAT\nReturn ONLY valid JSON with this exact structure:\n\n```json\n{\n  \"success\": true,\n  \"assetName\": \"{{ $json.assetName }}\",\n  \"platform\": \"{{ $json.platform }}\",\n  \"assetType\": \"{{ $json.assetType }}\",\n  \"assetInformation\": \"Comprehensive description of this brand asset, its purpose, usage guidelines, and strategic importance (200-500 words)\",\n  \"brandVoiceGuidelines\": \"Detailed brand voice guidelines including tone, personality, communication style, key messages, and voice characteristics (300-600 words)\",\n  \"approvedHashtags\": \"Platform-appropriate hashtags for this asset type, formatted as comma-separated list (10-20 hashtags)\",\n  \"toneStylePreferences\": \"Specific tone and style preferences including writing style, emotional approach, formality level, and stylistic elements (200-400 words)\",\n  \"forbiddenWordsTopics\": \"Words, phrases, topics, or approaches to avoid when using this brand asset, with explanations (150-300 words)\",\n  \"platformSpecificRules\": \"Platform-specific guidelines, character limits, posting best practices, optimal timing, and platform-unique considerations (200-400 words)\",\n  \"priority\": \"High\",\n  \"status\": \"Draft\",\n  \"reasoning\": \"Brief explanation of why these guidelines were chosen based on existing assets, research, and platform requirements (100-200 words)\",\n  \"consistencyNotes\": \"How these guidelines align with existing brand assets for brand coherence (100-200 words)\",\n  \"researchInsights\": \"Key insights from web research that influenced these guidelines (100-200 words)\"\n}\n```\n\n## BRAND ANALYSIS PRINCIPLES\n1. **Research-Driven**: Use web research for current platform best practices and trends\n2. **Consistency-Focused**: Align with existing brand assets for coherent brand identity\n3. **Platform-Optimized**: Tailor guidelines to platform-specific requirements and audience behavior\n4. **Actionable**: Provide specific, implementable guidance rather than generic advice\n5. **Strategic**: Consider business goals and brand positioning in recommendations\n6. **Comprehensive**: Cover all aspects from voice to tactical implementation\n\n**CRITICAL**: Output ONLY the JSON structure. No explanations before or after. Ensure all fields contain substantive, actionable content based on the research and existing brand assets.","hasOutputParser":true,"options":{"systemMessage":"You are a Brand Strategy AI Agent with access to:\n✅ Web research capabilities for latest brand and platform research\n✅ Existing brand assets database for consistency analysis  \n✅ Platform-specific best practices and guidelines\n✅ Strategic brand positioning and voice development expertise\n\nYour role is to synthesize research, existing brand data, and strategic thinking to create comprehensive, actionable brand asset guidelines that maintain consistency while optimizing for platform performance.\n\nAlways base recommendations on:\n1. Existing brand assets (for consistency)\n2. Current web research (for best practices) \n3. Platform requirements (for optimization)\n4. Strategic brand goals (for alignment)\n\nOutput structured JSON that can be easily processed and stored in Baserow database."}},"id":"brand-ai-agent","name":"Brand Asset AI Agent","type":"@n8n/n8n-nodes-langchain.agent","typeVersion":2,"position":[1260,80]},{"parameters":{"model":"anthropic/claude-3.7-sonnet:thinking","options":{}},"name":"OpenRouter Chat Model3","typeVersion":1,"id":"24c68abb-13b0-4a6c-8797-e4247f78cef8","position":[1100,304],"type":"@n8n/n8n-nodes-langchain.lmChatOpenRouter","credentials":{"openRouterApi":{"id":"eni2kFdHGvy7lEd3","name":"OpenRouter account"}}},{"parameters":{},"type":"@n8n/n8n-nodes-langchain.memoryBufferWindow","typeVersion":1.3,"position":[380,460],"id":"d99dae57-1dc2-42f6-a965-5e3e87500fbe","name":"Simple Memory"},{"parameters":{"schemaType":"manual","inputSchema":"{\n  \"type\": \"object\",\n  \"properties\": {\n    \"success\": {\n      \"type\": \"boolean\",\n      \"description\": \"Indicates if the brand asset generation was successful\"\n    },\n    \"assetName\": {\n      \"type\": \"string\",\n      \"description\": \"The name of the brand asset\"\n    },\n    \"platform\": {\n      \"type\": \"string\",\n      \"description\": \"The platform this brand asset is for (e.g., Facebook, Instagram, X, LinkedIn)\"\n    },\n    \"assetType\": {\n      \"type\": \"string\",\n      \"description\": \"The type of brand asset (e.g., Brand Voice, Visual Identity, Content Guidelines)\"\n    },\n    \"assetInformation\": {\n      \"type\": \"string\",\n      \"description\": \"Comprehensive description of this brand asset, its purpose, usage guidelines, and strategic importance (200-500 words)\"\n    },\n    \"brandVoiceGuidelines\": {\n      \"type\": \"string\",\n      \"description\": \"Detailed brand voice guidelines including tone, personality, communication style, key messages, and voice characteristics (300-600 words)\"\n    },\n    \"approvedHashtags\": {\n      \"type\": \"string\",\n      \"description\": \"Platform-appropriate hashtags for this asset type, formatted as comma-separated list (10-20 hashtags)\"\n    },\n    \"toneStylePreferences\": {\n      \"type\": \"string\",\n      \"description\": \"Specific tone and style preferences including writing style, emotional approach, formality level, and stylistic elements (200-400 words)\"\n    },\n    \"forbiddenWordsTopics\": {\n      \"type\": \"string\",\n      \"description\": \"Words, phrases, topics, or approaches to avoid when using this brand asset, with explanations (150-300 words)\"\n    },\n    \"platformSpecificRules\": {\n      \"type\": \"string\",\n      \"description\": \"Platform-specific guidelines, character limits, posting best practices, optimal timing, and platform-unique considerations (200-400 words)\"\n    },\n    \"priority\": {\n      \"type\": \"string\",\n      \"enum\": [\"High\", \"Medium\", \"Low\"],\n      \"description\": \"Priority level for this brand asset\"\n    },\n    \"status\": {\n      \"type\": \"string\",\n      \"enum\": [\"Draft\", \"Review\", \"Approved\", \"Active\"],\n      \"description\": \"Current status of the brand asset\"\n    },\n    \"reasoning\": {\n      \"type\": \"string\",\n      \"description\": \"Brief explanation of why these guidelines were chosen based on existing assets, research, and platform requirements (100-200 words)\"\n    },\n    \"consistencyNotes\": {\n      \"type\": \"string\",\n      \"description\": \"How these guidelines align with existing brand assets for brand coherence (100-200 words)\"\n    },\n    \"researchInsights\": {\n      \"type\": \"string\",\n      \"description\": \"Key insights from web research that influenced these guidelines (100-200 words)\"\n    }\n  },\n  \"required\": [\n    \"success\",\n    \"assetName\",\n    \"platform\",\n    \"assetType\",\n    \"assetInformation\",\n    \"brandVoiceGuidelines\",\n    \"approvedHashtags\",\n    \"toneStylePreferences\",\n    \"forbiddenWordsTopics\",\n    \"platformSpecificRules\",\n    \"priority\",\n    \"status\",\n    \"reasoning\",\n    \"consistencyNotes\",\n    \"researchInsights\"\n  ],\n  \"additionalProperties\": false\n}"},"type":"@n8n/n8n-nodes-langchain.outputParserStructured","typeVersion":1.3,"position":[1580,300],"id":"2d613f20-596c-4b76-9661-9b29bbe5aae1","name":"Structured Output Parser"},{"parameters":{"method":"PATCH","url":"=https://baserow.aiautomata.co.za/api/database/rows/table/{{ $json.tableId }}/{{ $json.rowId }}/\n","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"application/json"},{"name":"Authorization","value":"=Token {{ $json.baserowToken }}"},{"name":"Accept","value":"application/json"}]},"sendBody":true,"specifyBody":"json","jsonBody":"={{ $json.baserowPayload }}","options":{}},"id":"542ee3b3-8bf3-4e8c-8051-ef3ce604f4f4","name":"Save to Baserow","type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[2000,80]},{"parameters":{"jsCode":"// ENHANCED PDF PROCESSOR v2 - Advanced PDF Text Extraction\n// Processes PDF files uploaded to the Brand Asset Generator\n// Uses multiple extraction methods with intelligent fallbacks\n\nconst payload = $json;\n\nconsole.log('=== ENHANCED PDF PROCESSOR v2 START ===');\nconsole.log('Processing PDF file for brand asset...');\n\n// Get the original webhook data\nconst webhookData = payload.body;\nconst brandAssetConfig = payload.brandAssetConfig;\nconst fileInfo = payload.fileInfo;\n\nconsole.log(`✅ Processing Asset: ${webhookData.assetName}`);\nconsole.log(`✅ Platform: ${webhookData.platform}`);\nconsole.log(`✅ Asset Type: ${webhookData.assetType}`);\nconsole.log(`✅ File Type: ${fileInfo.type}`);\nconsole.log(`✅ File Name: ${fileInfo.name}`);\nconsole.log(`✅ File URL: ${fileInfo.sourceContent}`);\n\n// Enhanced PDF text extraction function with multiple methods\nasync function extractPDFText(pdfUrl) {\n  try {\n    console.log('🔄 Fetching PDF from URL...');\n    \n    // Fetch the PDF file\n    const response = await fetch(pdfUrl, {\n      method: 'GET',\n      headers: {\n        'User-Agent': 'n8n-pdf-processor/2.0',\n        'Accept': 'application/pdf, */*',\n        'Cache-Control': 'no-cache'\n      }\n    });\n    \n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n    }\n    \n    const contentType = response.headers.get('content-type') || '';\n    if (!contentType.includes('pdf')) {\n      console.log(`⚠️ Warning: Content-Type is ${contentType}, expected PDF`);\n    }\n    \n    const arrayBuffer = await response.arrayBuffer();\n    const pdfData = new Uint8Array(arrayBuffer);\n    \n    console.log(`✅ PDF downloaded: ${pdfData.length} bytes`);\n    \n    // Method 1: Try enhanced text extraction with multiple patterns\n    try {\n      console.log('🔄 Attempting enhanced pattern extraction...');\n      \n      const pdfString = new TextDecoder('latin1').decode(pdfData);\n      \n      let extractedText = '';\n      \n      // Enhanced text extraction patterns\n      const patterns = [\n        // Pattern 1: Text between parentheses (most common)\n        /\\(([^\\)]{3,})\\)/g,\n        // Pattern 2: Text objects with BT/ET markers\n        /BT\\s+(.+?)\\s+ET/gs,\n        // Pattern 3: Text after Tj commands\n        /\\s+([\\w\\s,\\.!\\?-]{5,})\\s+Tj/g,\n        // Pattern 4: String literals\n        /<([^>]{3,})>/g\n      ];\n      \n      const allMatches = new Set();\n      \n      patterns.forEach((pattern, index) => {\n        const matches = [...pdfString.matchAll(pattern)];\n        console.log(`Pattern ${index + 1} found ${matches.length} matches`);\n        \n        matches.forEach(match => {\n          const text = match[1]?.trim();\n          if (text && text.length > 2 && /[a-zA-Z]/.test(text)) {\n            // Clean up the text\n            const cleanText = text\n              .replace(/\\\\[rnt]/g, ' ')  // Replace escape sequences\n              .replace(/\\s+/g, ' ')     // Normalize whitespace\n              .replace(/[\\x00-\\x1F]/g, '') // Remove control characters\n              .trim();\n            \n            if (cleanText.length > 3) {\n              allMatches.add(cleanText);\n            }\n          }\n        });\n      });\n      \n      if (allMatches.size > 0) {\n        extractedText = Array.from(allMatches)\n          .filter(text => text.length > 5)  // Filter very short strings\n          .slice(0, 200)  // Limit to first 200 unique text pieces\n          .join('\\n');\n        \n        return {\n          success: true,\n          text: extractedText,\n          method: 'enhanced_text_extraction',\n          textPieces: allMatches.size,\n          note: 'Text extracted using enhanced pattern matching'\n        };\n      }\n      \n      throw new Error('No readable text patterns found');\n      \n    } catch (enhancedError) {\n      console.log(`⚠️ Enhanced extraction failed: ${enhancedError.message}`);\n      \n      // Method 2: Simple fallback extraction\n      try {\n        console.log('🔄 Attempting simple fallback extraction...');\n        \n        const pdfString = new TextDecoder('utf-8', { fatal: false }).decode(pdfData);\n        \n        // Look for readable text sequences\n        const textMatches = pdfString.match(/[A-Za-z0-9\\s\\.,!\\?-]{10,}/g) || [];\n        const cleanedMatches = textMatches\n          .map(match => match.trim())\n          .filter(text => {\n            // Filter criteria: minimum length, contains letters, not just numbers/symbols\n            return text.length > 8 && \n                   /[a-zA-Z]{3,}/.test(text) && \n                   !text.match(/^[\\d\\s\\.,!\\?-]+$/);\n          })\n          .slice(0, 50); // Limit results\n        \n        if (cleanedMatches.length > 0) {\n          const extractedText = cleanedMatches.join(' ');\n          \n          return {\n            success: true,\n            text: extractedText,\n            method: 'simple_fallback_extraction',\n            note: 'Basic text extraction - may not capture all content'\n          };\n        } else {\n          throw new Error('No readable text sequences found');\n        }\n        \n      } catch (fallbackError) {\n        throw new Error(`All extraction methods failed: ${fallbackError.message}`);\n      }\n    }\n    \n  } catch (error) {\n    console.log(`❌ PDF processing error: ${error.message}`);\n    return {\n      success: false,\n      error: error.message,\n      method: 'failed_extraction'\n    };\n  }\n}\n\n// Main processing logic\nlet extractedText = '';\nlet processingStatus = 'pending';\nlet processingNotes = 'Enhanced PDF text extraction in progress';\nlet processingMethod = 'unknown';\n\n// Check if we have a PDF file to process\nif (fileInfo.type === 'pdf' && fileInfo.sourceContent) {\n  try {\n    console.log('🔄 Starting enhanced PDF text extraction...');\n    \n    const extractionResult = await extractPDFText(fileInfo.sourceContent);\n    \n    if (extractionResult.success) {\n      extractedText = `PDF Document Analysis: ${fileInfo.name}\\n\\n` +\n                     `Asset Information:\\n` +\n                     `- Name: ${webhookData.assetName}\\n` +\n                     `- Platform: ${webhookData.platform}\\n` +\n                     `- Content Type: ${webhookData.contentType}\\n` +\n                     `- Asset Type: ${webhookData.assetType}\\n\\n` +\n                     `User Notes: ${webhookData.notes || 'None provided'}\\n\\n` +\n                     `--- EXTRACTED PDF CONTENT ---\\n\\n` +\n                     extractionResult.text +\n                     `\\n\\n--- END PDF CONTENT ---\\n\\n` +\n                     `Extraction Method: ${extractionResult.method}\\n` +\n                     (extractionResult.textPieces ? `Text Pieces Found: ${extractionResult.textPieces}\\n` : '') +\n                     (extractionResult.note ? `Note: ${extractionResult.note}` : '');\n      \n      processingStatus = 'completed';\n      processingNotes = `Enhanced PDF text extraction successful using ${extractionResult.method}`;\n      processingMethod = extractionResult.method;\n      \n      console.log(`✅ PDF text extracted: ${extractedText.length} characters`);\n      \n      if (extractionResult.textPieces) {\n        console.log(`✅ Found ${extractionResult.textPieces} unique text pieces`);\n      }\n      \n    } else {\n      throw new Error(extractionResult.error);\n    }\n    \n  } catch (error) {\n    console.log(`❌ PDF processing failed: ${error.message}`);\n    \n    // Intelligent error fallback with comprehensive context\n    extractedText = `PDF Processing Analysis: ${fileInfo.name}\\n\\n` +\n                   `Asset Information:\\n` +\n                   `- Name: ${webhookData.assetName}\\n` +\n                   `- Platform: ${webhookData.platform}\\n` +\n                   `- Content Type: ${webhookData.contentType}\\n` +\n                   `- Asset Type: ${webhookData.assetType}\\n\\n` +\n                   `User Notes: ${webhookData.notes || 'None provided'}\\n\\n` +\n                   `--- CONTEXTUAL BRAND ANALYSIS ---\\n\\n` +\n                   `A PDF document titled \\\"${fileInfo.name}\\\" was provided for this brand asset ` +\n                   `but automated text extraction encountered technical limitations. ` +\n                   `However, we can proceed with creating comprehensive brand guidelines ` +\n                   `based on the available context:\\n\\n` +\n                   `BRAND CONTEXT:\\n` +\n                   `- This is a ${webhookData.assetType} asset for ${webhookData.platform}\\n` +\n                   `- Asset Name: \\\"${webhookData.assetName}\\\"\\n` +\n                   `- Content Category: ${webhookData.contentType}\\n` +\n                   (webhookData.notes ? `- Additional Context: ${webhookData.notes}\\n` : '') +\n                   `\\nCREATION GUIDANCE:\\n` +\n                   `Please develop comprehensive brand guidelines that include:\\n` +\n                   `1. Platform-optimized voice and tone for ${webhookData.platform}\\n` +\n                   `2. Content strategy for ${webhookData.assetType} materials\\n` +\n                   `3. Brand consistency standards\\n` +\n                   `4. ${webhookData.platform}-specific best practices\\n` +\n                   `5. Actionable implementation guidelines\\n\\n` +\n                   `The PDF likely contained relevant brand information, style guides, ` +\n                   `or reference materials that should be considered for manual review ` +\n                   `to enhance these automated guidelines.\\n\\n` +\n                   `TECHNICAL NOTE: ${error.message}`;\n    \n    processingStatus = 'completed_with_intelligent_fallback';\n    processingNotes = `PDF extraction failed, using intelligent contextual analysis: ${error.message}`;\n    processingMethod = 'intelligent_contextual_fallback';\n  }\n} else {\n  throw new Error('❌ Invalid PDF file information provided');\n}\n\n// Create processed data structure consistent with other processors\nconst processedData = {\n  // Preserve all original data\n  ...payload,\n  \n  // Processing results\n  processedContent: extractedText,\n  processingStatus: processingStatus,\n  processingType: 'pdf_extraction_v2_enhanced',\n  processingMethod: processingMethod,\n  contentReady: true,\n  processingNotes: processingNotes,\n  \n  // Enhanced content information\n  contentAnalysis: {\n    assetName: webhookData.assetName,\n    platform: webhookData.platform,\n    contentType: webhookData.contentType,\n    assetType: webhookData.assetType,\n    notes: webhookData.notes,\n    contentLength: extractedText.length,\n    hasNotes: !!webhookData.notes && webhookData.notes.trim() !== '',\n    sourceMethod: 'pdf_text_extraction_enhanced_v2',\n    fileName: fileInfo.name,\n    fileType: fileInfo.type,\n    processingMethod: processingMethod,\n    enhancedProcessing: true\n  },\n  \n  // Processing metadata\n  processingTimestamp: new Date().toISOString(),\n  \n  // Ready for AI analysis flags\n  readyForAIAnalysis: true,\n  readyForBrandAssetGeneration: true,\n  \n  // Debug info\n  debugInfo: {\n    ...payload.debugInfo,\n    enhancedPdfProcessingCompleted: true,\n    contentLength: extractedText.length,\n    processingPath: 'pdf_extraction_v2_enhanced_advanced',\n    sourceContentMethod: 'pdf_file_text_extraction_enhanced_v2',\n    hasUserNotes: !!webhookData.notes,\n    fileName: fileInfo.name,\n    fileUrl: fileInfo.sourceContent,\n    processingTimestamp: new Date().toISOString(),\n    processingStatus: processingStatus,\n    processingMethod: processingMethod,\n    enhancedProcessing: true,\n    multipleExtractionMethods: true,\n    intelligentFallback: processingMethod.includes('fallback')\n  }\n};\n\nconsole.log('=== ENHANCED PDF PROCESSING RESULT v2 ===');\nconsole.log(`✅ Extracted text length: ${extractedText.length} characters`);\nconsole.log(`✅ File name: ${fileInfo.name}`);\nconsole.log(`✅ Processing status: ${processingStatus}`);\nconsole.log(`✅ Processing method: ${processingMethod}`);\nconsole.log(`✅ Ready for AI analysis: ${processedData.readyForAIAnalysis}`);\nconsole.log(`✅ Content preview: ${extractedText.substring(0, 300)}...`);\nconsole.log('✅ ENHANCED PDF PROCESSING COMPLETE - READY FOR AI AGENT');\n\nreturn {\n  json: processedData\n};}"},"id":"enhanced-pdf-processor","name":"Enhanced PDF Processor v2","type":"n8n-nodes-base.code","typeVersion":2,"position":[980,-260]},{"parameters":{"databaseId":"={{ $json.body.databaseId }}","tableId":"={{ $json.tableId }}","additionalOptions":{}},"type":"n8n-nodes-base.baserowTool","typeVersion":1,"position":[1280,440],"id":"7dba638e-2f35-4416-8ee0-77b363616a5c","name":"Get Existing Brand Assets","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"method":"POST","url":"https://api.openai.com/v1/chat/completions","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"application/json"}]},"sendBody":true,"specifyBody":"json","jsonBody":"={\n  \"model\": \"gpt-4o-mini\",\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"You are a brand research specialist. Research and provide the latest brand guidelines and best practices for the requested platform and asset type. Focus on actionable, specific insights.\"\n    },\n    {\n      \"role\": \"user\",\n      \"content\": \"Provide comprehensive brand guidelines for {{ $json.platform }} {{ $json.assetType }} content. Cover: 1) Brand voice best practices 2) Platform rules and limits 3) Tone preferences 4) Hashtag strategies 5) Content to avoid 6) 2024-2025 trends. Context: {{ $json.assetName }} - {{ $json.notes }}\"\n    }\n  ],\n  \"max_tokens\": 2000,\n  \"temperature\": 0.3\n}","options":{}},"type":"n8n-nodes-base.httpRequestTool","typeVersion":4.2,"position":[1460,440],"id":"200305f1-6c8d-4283-87e8-acbfdf4f94d5","name":"Web Research Agent","credentials":{"httpHeaderAuth":{"id":"z06CbCGaeEeBPVIt","name":"GPT Image Generator"}}},{"parameters":{"jsCode":"// Format AI Agent output for Baserow - Fixed version without read-only fields\nconsole.log('=== DEBUGGING WORKFLOW DATA ===');\n\n// Get AI Agent output\nlet aiOutput = null;\ntry {\n  const aiAgentData = $('Brand Asset AI Agent').first();\n  console.log('AI Agent data structure:', Object.keys(aiAgentData.json));\n  \n  if (aiAgentData.json.output) {\n    aiOutput = aiAgentData.json.output;\n    console.log('✅ Found AI output data');\n  } else {\n    aiOutput = aiAgentData.json;\n    console.log('✅ Using direct AI data');\n  }\n} catch (error) {\n  console.log('❌ Error getting AI Agent data:', error.message);\n}\n\n// Get field mappings and token from Text Processor (or any earlier node that has them)\nlet fieldMappings = null;\nlet baserowToken = null;\nlet workflowData = {};\n\ntry {\n  const textProcessorData = $('Text Processor v2').first();\n  fieldMappings = textProcessorData.json.fieldMappings;\n  baserowToken = textProcessorData.json.baserowToken;\n  workflowData = {\n    rowId: textProcessorData.json.rowId,\n    tableId: textProcessorData.json.tableId,\n    requestId: textProcessorData.json.requestId,\n    clientId: textProcessorData.json.clientId,\n    baseId: textProcessorData.json.baseId\n  };\n  console.log('✅ Found field mappings and token from Text Processor');\n} catch (error) {\n  console.log('⚠️ Could not get from Text Processor, trying other nodes...');\n  \n  // Try other nodes that might have field mappings and token\n  try {\n    const mergeData = $('Merge Data v2').first();\n    fieldMappings = mergeData.json.fieldMappings;\n    baserowToken = mergeData.json.baserowToken;\n    workflowData = {\n      rowId: mergeData.json.rowId,\n      tableId: mergeData.json.tableId,\n      requestId: mergeData.json.requestId,\n      clientId: mergeData.json.clientId,\n      baseId: mergeData.json.baseId\n    };\n    console.log('✅ Found field mappings and token from Merge Data');\n  } catch (error2) {\n    try {\n      const configData = $('Config Extractor v2').first();\n      fieldMappings = configData.json.fieldMappings;\n      baserowToken = configData.json.baserowToken;\n      workflowData = {\n        rowId: configData.json.rowId,\n        tableId: configData.json.tableId,\n        requestId: configData.json.requestId,\n        clientId: configData.json.clientId,\n        baseId: configData.json.baseId\n      };\n      console.log('✅ Found field mappings and token from Config Extractor');\n    } catch (error3) {\n      console.log('❌ Could not find field mappings and token in any node');\n    }\n  }\n}\n\nconsole.log('AI Output available:', !!aiOutput);\nconsole.log('Field mappings available:', !!fieldMappings);\nconsole.log('Baserow token available:', !!baserowToken);\nconsole.log('Workflow data available:', !!workflowData.rowId);\n\nif (!aiOutput) {\n  throw new Error('Could not find AI Agent output data');\n}\n\nif (!fieldMappings) {\n  throw new Error('Could not find field mappings from any workflow node');\n}\n\nif (!baserowToken) {\n  throw new Error('Could not find Baserow token from any workflow node');\n}\n\n// Create Baserow payload - EXCLUDING read-only fields like lastUpdated\nconst baserowPayload = {\n  [fieldMappings.assetInformation]: aiOutput.assetInformation || '',\n  [fieldMappings.brandVoiceGuidelines]: aiOutput.brandVoiceGuidelines || '',\n  [fieldMappings.approvedHashtags]: aiOutput.approvedHashtags || '',\n  [fieldMappings.toneStylePreferences]: aiOutput.toneStylePreferences || '',\n  [fieldMappings.forbiddenWordsTopics]: aiOutput.forbiddenWordsTopics || '',\n  [fieldMappings.platformSpecificRules]: aiOutput.platformSpecificRules || '',\n  [fieldMappings.status]: aiOutput.status || 'Draft',\n  [fieldMappings.priority]: aiOutput.priority || 'Medium'\n  // REMOVED: lastUpdated field as it's read-only in Baserow\n};\n\nconsole.log('✅ Baserow payload created (excluding read-only fields)');\nconsole.log('✅ Baserow token included');\nconsole.log('Payload field count:', Object.keys(baserowPayload).length);\nconsole.log('Excluded read-only fields: lastUpdated');\nconsole.log('=== END DEBUGGING ===');\n\nreturn {\n  json: {\n    // Include all workflow data needed for the HTTP request\n    ...workflowData,\n    fieldMappings: fieldMappings,\n    baserowToken: baserowToken,\n    baserowPayload: baserowPayload,\n    \n    // AI output for reference\n    aiOutput: aiOutput,\n    \n    // Debug info\n    debugInfo: {\n      aiOutputFound: !!aiOutput,\n      fieldMappingsFound: !!fieldMappings,\n      baserowTokenFound: !!baserowToken,\n      workflowDataFound: !!workflowData.rowId,\n      payloadKeys: Object.keys(baserowPayload),\n      excludedReadOnlyFields: ['lastUpdated']\n    }\n  }\n};\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1740,80],"id":"de509cf6-2168-460f-b6d1-5b084e6c279c","name":"Code"},{"parameters":{"jsCode":"// ENHANCED WORD PROCESSOR v2 - Advanced Word Document Text Extraction\n// Processes Word (.docx) files uploaded to the Brand Asset Generator\n// Uses XML parsing to extract text from Word document structure\n\nconst payload = $json;\n\nconsole.log('=== ENHANCED WORD PROCESSOR v2 START ===');\nconsole.log('Processing Word document for brand asset...');\n\n// Get the original webhook data\nconst webhookData = payload.body;\nconst brandAssetConfig = payload.brandAssetConfig;\nconst fileInfo = payload.fileInfo;\n\nconsole.log(`✅ Processing Asset: ${webhookData.assetName}`);\nconsole.log(`✅ Platform: ${webhookData.platform}`);\nconsole.log(`✅ Asset Type: ${webhookData.assetType}`);\nconsole.log(`✅ File Type: ${fileInfo.type}`);\nconsole.log(`✅ File Name: ${fileInfo.name}`);\nconsole.log(`✅ File URL: ${fileInfo.sourceContent}`);\n\n// Enhanced Word document text extraction function\nasync function extractWordText(wordUrl) {\n  try {\n    console.log('🔄 Fetching Word document from URL...');\n    \n    // Fetch the Word document\n    const response = await fetch(wordUrl, {\n      method: 'GET',\n      headers: {\n        'User-Agent': 'n8n-word-processor/2.0',\n        'Accept': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document, application/msword, */*',\n        'Cache-Control': 'no-cache'\n      }\n    });\n    \n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n    }\n    \n    const contentType = response.headers.get('content-type') || '';\n    console.log(`📄 Content-Type: ${contentType}`);\n    \n    const arrayBuffer = await response.arrayBuffer();\n    const wordData = new Uint8Array(arrayBuffer);\n    \n    console.log(`✅ Word document downloaded: ${wordData.length} bytes`);\n    \n    // Method 1: Try to extract as DOCX (ZIP-based format)\n    try {\n      console.log('🔄 Attempting DOCX extraction (ZIP-based)...');\n      \n      const extractedText = await extractDocxText(wordData);\n      \n      if (extractedText && extractedText.length > 10) {\n        return {\n          success: true,\n          text: extractedText,\n          method: 'docx_xml_extraction',\n          note: 'Text extracted from DOCX XML structure'\n        };\n      }\n      \n      throw new Error('No readable text found in DOCX structure');\n      \n    } catch (docxError) {\n      console.log(`⚠️ DOCX extraction failed: ${docxError.message}`);\n      \n      // Method 2: Try legacy DOC format extraction\n      try {\n        console.log('🔄 Attempting legacy DOC extraction...');\n        \n        const extractedText = await extractDocText(wordData);\n        \n        if (extractedText && extractedText.length > 10) {\n          return {\n            success: true,\n            text: extractedText,\n            method: 'doc_binary_extraction',\n            note: 'Text extracted from legacy DOC format'\n          };\n        }\n        \n        throw new Error('No readable text found in DOC format');\n        \n      } catch (docError) {\n        console.log(`⚠️ DOC extraction failed: ${docError.message}`);\n        \n        // Method 3: Fallback text extraction\n        try {\n          console.log('🔄 Attempting fallback text extraction...');\n          \n          const extractedText = extractTextFallback(wordData);\n          \n          if (extractedText && extractedText.length > 10) {\n            return {\n              success: true,\n              text: extractedText,\n              method: 'fallback_text_extraction',\n              note: 'Basic text extraction from document bytes'\n            };\n          }\n          \n          throw new Error('No readable text found with fallback method');\n          \n        } catch (fallbackError) {\n          throw new Error(`All extraction methods failed: ${fallbackError.message}`);\n        }\n      }\n    }\n    \n  } catch (error) {\n    console.log(`❌ Word document processing error: ${error.message}`);\n    return {\n      success: false,\n      error: error.message,\n      method: 'failed_extraction'\n    };\n  }\n}\n\n// Extract text from DOCX format (ZIP-based XML)\nasync function extractDocxText(wordData) {\n  try {\n    // Convert to string to search for ZIP signatures and XML content\n    const dataString = new TextDecoder('latin1').decode(wordData);\n    \n    // Check if it's a ZIP file (DOCX format)\n    if (!dataString.startsWith('PK')) {\n      throw new Error('Not a valid DOCX file (missing ZIP signature)');\n    }\n    \n    console.log('✅ Detected DOCX format (ZIP-based)');\n    \n    // Simple ZIP parsing to find document.xml\n    // Look for document.xml content in the ZIP\n    const xmlContentRegex = /<w:document[^>]*>.*?<\\/w:document>/gs;\n    const xmlMatch = dataString.match(xmlContentRegex);\n    \n    if (!xmlMatch) {\n      // Try to find any XML content with text\n      const textRegex = /<w:t[^>]*>([^<]+)<\\/w:t>/g;\n      const textMatches = [...dataString.matchAll(textRegex)];\n      \n      if (textMatches.length > 0) {\n        const extractedText = textMatches\n          .map(match => match[1])\n          .filter(text => text && text.trim().length > 0)\n          .join(' ');\n        \n        console.log(`✅ Found ${textMatches.length} text elements`);\n        return extractedText;\n      }\n      \n      throw new Error('No document.xml or text elements found');\n    }\n    \n    // Extract text from XML content\n    const xmlContent = xmlMatch[0];\n    \n    // Extract text from <w:t> elements\n    const textElements = [...xmlContent.matchAll(/<w:t[^>]*>([^<]+)<\\/w:t>/g)];\n    \n    if (textElements.length === 0) {\n      throw new Error('No text elements found in document.xml');\n    }\n    \n    const extractedText = textElements\n      .map(match => match[1])\n      .filter(text => text && text.trim().length > 0)\n      .join(' ')\n      .replace(/\\s+/g, ' ')\n      .trim();\n    \n    console.log(`✅ Extracted text from ${textElements.length} elements`);\n    return extractedText;\n    \n  } catch (error) {\n    throw new Error(`DOCX extraction failed: ${error.message}`);\n  }\n}\n\n// Extract text from legacy DOC format\nasync function extractDocText(wordData) {\n  try {\n    console.log('🔄 Processing legacy DOC format...');\n    \n    const dataString = new TextDecoder('latin1').decode(wordData);\n    \n    // Legacy DOC format text extraction patterns\n    const patterns = [\n      // Text in various DOC structures\n      /[\\x20-\\x7E]{4,}/g,  // ASCII printable characters\n      /[a-zA-Z0-9\\s.,!?;:'\"()-]{10,}/g,  // Common text patterns\n    ];\n    \n    const extractedTexts = new Set();\n    \n    patterns.forEach(pattern => {\n      const matches = [...dataString.matchAll(pattern)];\n      matches.forEach(match => {\n        const text = match[0].trim();\n        if (text.length > 5 && /[a-zA-Z]{3,}/.test(text)) {\n          // Filter out binary data and keep readable text\n          if (!text.match(/[\\x00-\\x08\\x0E-\\x1F\\x7F-\\xFF]{3,}/)) {\n            extractedTexts.add(text);\n          }\n        }\n      });\n    });\n    \n    if (extractedTexts.size === 0) {\n      throw new Error('No readable text found in DOC format');\n    }\n    \n    const result = Array.from(extractedTexts)\n      .filter(text => text.length > 8)\n      .slice(0, 100)  // Limit to prevent too much noise\n      .join(' ')\n      .replace(/\\s+/g, ' ')\n      .trim();\n    \n    console.log(`✅ Extracted text from ${extractedTexts.size} text segments`);\n    return result;\n    \n  } catch (error) {\n    throw new Error(`DOC extraction failed: ${error.message}`);\n  }\n}\n\n// Fallback text extraction\nfunction extractTextFallback(wordData) {\n  try {\n    console.log('🔄 Using fallback text extraction...');\n    \n    // Try UTF-8 first, then Latin1\n    const encodings = ['utf-8', 'latin1'];\n    \n    for (const encoding of encodings) {\n      try {\n        const dataString = new TextDecoder(encoding, { fatal: false }).decode(wordData);\n        \n        // Look for readable text sequences\n        const textMatches = dataString.match(/[a-zA-Z0-9\\s.,!?;:'\"()-]{15,}/g) || [];\n        \n        const cleanedTexts = textMatches\n          .map(text => text.trim())\n          .filter(text => {\n            // Filter criteria\n            return text.length > 10 && \n                   /[a-zA-Z]{5,}/.test(text) && \n                   !text.match(/^[\\d\\s.,!?;:'\"()-]+$/) &&\n                   !text.match(/[\\x00-\\x08\\x0E-\\x1F\\x7F-\\xFF]/);\n          })\n          .slice(0, 50);\n        \n        if (cleanedTexts.length > 0) {\n          const result = cleanedTexts.join(' ').replace(/\\s+/g, ' ').trim();\n          console.log(`✅ Fallback extraction found ${cleanedTexts.length} text segments`);\n          return result;\n        }\n      } catch (encodingError) {\n        console.log(`⚠️ ${encoding} encoding failed: ${encodingError.message}`);\n      }\n    }\n    \n    throw new Error('No readable text found with fallback method');\n    \n  } catch (error) {\n    throw new Error(`Fallback extraction failed: ${error.message}`);\n  }\n}\n\n// Main processing logic\nlet extractedText = '';\nlet processingStatus = 'pending\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[960,-100],"id":"79cf5817-3d3b-4f76-bf49-537bfb4fc8d1","name":"Word Doc Processor"}],"connections":{"Brand Asset Webhook v2":{"main":[[{"node":"Config Extractor v2","type":"main","index":0}]]},"Config Extractor v2":{"main":[[{"node":"Merge Data v2","type":"main","index":0}]]},"Merge Data v2":{"main":[[{"node":"File Type Router v2","type":"main","index":0}]]},"File Type Router v2":{"main":[[{"node":"Enhanced PDF Processor v2","type":"main","index":0}],[{"node":"Word Doc Processor","type":"main","index":0}],[],[],[{"node":"Text Processor v2","type":"main","index":0}],[],[]]},"Text Processor v2":{"main":[[{"node":"Brand Asset AI Agent","type":"main","index":0}]]},"OpenRouter Chat Model3":{"ai_languageModel":[[{"node":"Brand Asset AI Agent","type":"ai_languageModel","index":0}]]},"Brand Asset AI Agent":{"main":[[{"node":"Code","type":"main","index":0}]]},"Simple Memory":{"ai_memory":[[]]},"Structured Output Parser":{"ai_outputParser":[[{"node":"Brand Asset AI Agent","type":"ai_outputParser","index":0}]]},"Save to Baserow":{"main":[[{"node":"Response v2","type":"main","index":0}]]},"Enhanced PDF Processor v2":{"main":[[{"node":"Brand Asset AI Agent","type":"main","index":0}]]},"Get Existing Brand Assets":{"ai_tool":[[{"node":"Brand Asset AI Agent","type":"ai_tool","index":0}]]},"Web Research Agent":{"ai_tool":[[{"node":"Brand Asset AI Agent","type":"ai_tool","index":0}]]},"Code":{"main":[[{"node":"Save to Baserow","type":"main","index":0}]]},"Word Doc Processor":{"main":[[{"node":"Brand Asset AI Agent","type":"main","index":0}]]}},"settings":{"executionOrder":"v1","saveDataErrorExecution":"all","saveDataSuccessExecution":"all","saveManualExecutions":true,"saveExecutionProgress":true},"staticData":null,"meta":null,"pinData":{"Brand Asset Webhook v2":[{"json":{"headers":{"host":"n8n.aiautomata.co.za","user-agent":"node","content-length":"1537","accept":"*/*","accept-encoding":"gzip, br","accept-language":"*","cdn-loop":"cloudflare; loops=1","cf-connecting-ip":"165.73.28.159","cf-ipcountry":"ZA","cf-ray":"97409d748e0273d6-JNB","cf-visitor":"{\"scheme\":\"https\"}","content-type":"application/json","sec-fetch-mode":"cors","x-forwarded-for":"172.68.42.150","x-forwarded-host":"n8n.aiautomata.co.za","x-forwarded-port":"443","x-forwarded-proto":"https","x-forwarded-server":"1dc384f6e279","x-real-ip":"172.68.42.150"},"params":{},"query":{},"body":{"token":"YOUR_BASEROW_API_TOKEN_HERE","databaseId":"176","brandAssets":"728","rowId":8,"tableId":"728","assetName":"Testing new Workbalace agentic ai","platform":"LinkedIn","contentType":"General","assetType":"Brand Voice","fileUrl":"","notes":"Create a Brand asset for Work balance","clientId":"modern-management","clientName":"Modern Management","clientConfig":{"id":"modern-management","name":"Modern Management","baserow":{"token":"2D0QTPo1l1bVWN5MwVkgKUbFZLgVW0Mz","databaseId":"176","tables":{"contentIdeas":"721","socialMediaContent":"712","brandAssets":"728","contentAssets":"","publishingSchedule":"","performanceAnalytics":"","images":"729"}},"branding":{"primaryColor":"#3B82F6","secondaryColor":"#10B981"},"settings":{"maxFileSize":50,"allowedFileTypes":["image/*","video/*","audio/*"],"autoApproval":false},"users":[{"email":"admin@modernmanagement.com","role":"admin"},{"email":"content@modernmanagement.com","role":"creator"}]},"fieldMappings":{"assetName":"field_7197","platform":"field_7155","contentType":"field_7156","assetType":"field_7157","assetInformation":"field_7158","brandVoiceGuidelines":"field_7169","approvedHashtags":"field_7170","toneStylePreferences":"field_7171","forbiddenWordsTopics":"field_7172","platformSpecificRules":"field_7173","file":"field_7159","fileUrl":"field_7160","status":"field_7161","priority":"field_7162","createdDate":"field_7163","lastUpdated":"field_7164","notes":"field_7165"},"uploadedFile":null,"timestamp":"2025-08-24T05:57:55.963Z","requestId":"brand-asset-8-1756015075963"},"webhookUrl":"https://n8n.aiautomata.co.za/webhook/brand-asset-generator","executionMode":"production"}}]},"versionId":"44b1584a-a470-4649-944a-2c7ec189517a","triggerCount":1,"shared":[{"createdAt":"2025-08-23T04:49:21.639Z","updatedAt":"2025-08-23T04:49:21.639Z","role":"workflow:owner","workflowId":"IbjF2mTSPF8oRrSF","projectId":"pRXFeKq9D8e0hAOx"}],"tags":[]},{"createdAt":"2025-09-01T07:50:16.046Z","updatedAt":"2025-09-01T08:06:59.000Z","id":"NtmCNsRcQ4h7tVif","name":"MG Bryanston Facebook Insights (Ready)","active":false,"isArchived":true,"nodes":[],"connections":{},"settings":{"executionOrder":"v1","timezone":"America/New_York","saveDataErrorExecution":"all","saveDataSuccessExecution":"all","saveManualExecutions":true},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"48046fc2-9426-42dd-9bf2-f32985b48d53","triggerCount":0,"shared":[{"createdAt":"2025-09-01T07:50:16.049Z","updatedAt":"2025-09-01T07:50:16.049Z","role":"workflow:owner","workflowId":"NtmCNsRcQ4h7tVif","projectId":"pRXFeKq9D8e0hAOx"}],"tags":[]},{"createdAt":"2025-07-14T11:27:11.474Z","updatedAt":"2025-07-14T15:13:13.000Z","id":"PjPBSG1cKqLPLVbS","name":"create-adset-subflow","active":false,"isArchived":false,"nodes":[{"parameters":{"path":"create-adset","options":{}},"type":"n8n-nodes-base.webhook","typeVersion":2,"position":[60,-380],"id":"5b757bb0-6e41-46dd-94fa-1a562b1d841d","name":"Webhook Trigger1","webhookId":"create-adset-webhook"},{"parameters":{"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[280,-380],"id":"24640132-1f9d-470c-9726-3939f9578a6f","name":"Set Config1"},{"parameters":{"jsCode":"// Extract and validate input parameters\nconst body = $input.first().json.body;\nconst config = $('Set Config1').first().json;\n\n// Validate required parameters\nif (!body.facebook_campaign_id || !body.adset_name || !body.daily_budget) {\n  throw new Error('Missing required parameters: facebook_campaign_id, adset_name, or daily_budget');\n}\n\nif (!body.age_min || !body.age_max || !body.gender) {\n  throw new Error('Missing targeting parameters: age_min, age_max, or gender');\n}\n\n// Validate location targeting - need at least provinces or cities\nif (!body.target_provinces && !body.target_cities) {\n  throw new Error('Missing location targeting: must provide target_provinces or target_cities (or both)');\n}\n\n// Map gender to Facebook API format\nconst genderMapping = {\n  'all': [1, 2], // Both male and female\n  'male': [1],\n  'female': [2]\n};\n\nconst genders = genderMapping[body.gender.toLowerCase()] || [1, 2];\n\n// Build geo_locations object\nconst geoLocations = {\n  countries: [body.target_country?.toUpperCase() || 'ZA'] // Default to South Africa\n};\n\n// Add provinces if provided\nif (body.target_provinces && Array.isArray(body.target_provinces) && body.target_provinces.length > 0) {\n  geoLocations.regions = body.target_provinces.map(province => {\n    // Handle both object format {key: \"123\", name: \"Province\"} and string format\n    if (typeof province === 'object' && province.facebook_location_key) {\n      return {\n        key: province.facebook_location_key,\n        name: province.location_name || province.name\n      };\n    } else if (typeof province === 'object' && province.key) {\n      return province; // Already in correct format\n    } else {\n      throw new Error(`Invalid province format: ${JSON.stringify(province)}. Expected object with facebook_location_key.`);\n    }\n  });\n}\n\n// Add cities if provided\nif (body.target_cities && Array.isArray(body.target_cities) && body.target_cities.length > 0) {\n  geoLocations.cities = body.target_cities.map(city => {\n    // Handle both object format {key: \"123\", name: \"City\"} and string format\n    if (typeof city === 'object' && city.facebook_location_key) {\n      return {\n        key: city.facebook_location_key,\n        name: city.location_name || city.name\n      };\n    } else if (typeof city === 'object' && city.key) {\n      return city; // Already in correct format\n    } else {\n      throw new Error(`Invalid city format: ${JSON.stringify(city)}. Expected object with facebook_location_key.`);\n    }\n  });\n}\n\n// Build targeting object\nconst targeting = {\n  geo_locations: geoLocations,\n  age_min: parseInt(body.age_min),\n  age_max: parseInt(body.age_max),\n  genders: genders\n};\n\n// Add pixel and conversion tracking if provided\nconst adsetData = {\n  name: body.adset_name,\n  campaign_id: body.facebook_campaign_id,\n  daily_budget: parseInt(body.daily_budget),\n  billing_event: 'IMPRESSIONS',\n  optimization_goal: 'LINK_CLICKS', // Default optimization\n  targeting: targeting,\n  status: 'PAUSED', // Start paused\n  ad_account_id: config.FACEBOOK_AD_ACCOUNT_ID\n};\n\n// Handle conversion optimization if pixel is provided\nif (body.pixel_id && body.conversion_event) {\n  adsetData.optimization_goal = 'CONVERSIONS';\n  adsetData.promoted_object = {\n    pixel_id: body.pixel_id,\n    custom_event_type: body.conversion_event.toUpperCase()\n  };\n}\n\n// Log targeting details for debugging\nconsole.log('Built targeting:', JSON.stringify(targeting, null, 2));\nconsole.log('Provinces count:', geoLocations.regions?.length || 0);\nconsole.log('Cities count:', geoLocations.cities?.length || 0);\n\nreturn [{ json: adsetData }];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[500,-380],"id":"f81f644c-7664-4e38-b353-14b9d1043fe5","name":"Validate Input1"},{"parameters":{"method":"POST","url":"=https://graph.facebook.com/v18.0/act_{{ $json.ad_account_id }}/adsets","authentication":"predefinedCredentialType","nodeCredentialType":"facebookGraphApi","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"application/json"}]},"sendBody":true,"bodyParameters":{"parameters":[{"name":"name","value":"={{ $json.name }}"},{"name":"campaign_id","value":"={{ $json.campaign_id }}"},{"name":"daily_budget","value":"={{ $json.daily_budget }}"},{"name":"billing_event","value":"={{ $json.billing_event }}"},{"name":"optimization_goal","value":"={{ $json.optimization_goal }}"},{"name":"targeting","value":"={{ JSON.stringify($json.targeting) }}"},{"name":"status","value":"={{ $json.status }}"},{"name":"promoted_object","value":"={{ $json.promoted_object ? JSON.stringify($json.promoted_object) : '' }}"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[720,-380],"id":"35b84313-b214-4cd6-8a39-24f9f188b91a","name":"Create Facebook AdSet1","credentials":{"facebookGraphApi":{"id":"l4pIP1rC506QwuLu","name":"Facebook Graph account"}},"onError":"continueErrorOutput"},{"parameters":{"jsCode":"// Extract Facebook AdSet ID and prepare response\nconst facebookResponse = $input.first().json;\nconst inputData = $('Validate Input1').first().json;\n\nif (!facebookResponse.id) {\n  throw new Error('Failed to create Facebook AdSet - no ID returned');\n}\n\nreturn [{\n  json: {\n    facebook_adset_id: facebookResponse.id,\n    facebook_campaign_id: inputData.campaign_id,\n    adset_name: inputData.name,\n    daily_budget: inputData.daily_budget,\n    targeting: inputData.targeting,\n    optimization_goal: inputData.optimization_goal,\n    success: true,\n    message: `Successfully created Facebook AdSet: ${facebookResponse.id}`\n  }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[940,-380],"id":"a754daae-1722-4dda-b59f-e867911b367e","name":"Process Response1"},{"parameters":{"respondWith":"json","responseBody":"={\n  \"success\": true,\n  \"facebook_adset_id\": \"{{ $json.facebook_adset_id }}\",\n  \"facebook_campaign_id\": \"{{ $json.facebook_campaign_id }}\",\n  \"message\": \"{{ $json.message }}\",\n  \"targeting_details\": {\n    \"country\": {{ JSON.stringify($json.targeting.geo_locations.countries) }},\n    \"provinces\": {{ JSON.stringify($json.targeting.geo_locations.regions || []) }},\n    \"cities\": {{ JSON.stringify($json.targeting.geo_locations.cities || []) }},\n    \"age_range\": \"{{ $json.targeting.age_min }}-{{ $json.targeting.age_max }}\",\n    \"genders\": {{ JSON.stringify($json.targeting.genders) }},\n    \"optimization\": \"{{ $json.optimization_goal }}\"\n  }\n}","options":{}},"type":"n8n-nodes-base.respondToWebhook","typeVersion":1,"position":[1160,-380],"id":"5180e42e-bdb1-4dfd-9484-49a307dfe241","name":"Success Response1"},{"parameters":{"jsCode":"// Handle errors and prepare error response\nconst error = $input.first().json;\nconst inputData = $('Validate Input1').first()?.json || {};\n\nconst errorMessage = error.message || error.error?.message || 'Unknown error occurred creating AdSet';\n\nconsole.error('AdSet creation failed:', errorMessage);\nconsole.error('Input data was:', JSON.stringify(inputData, null, 2));\n\n// Check if it's a targeting error\nlet detailedError = errorMessage;\nif (errorMessage.includes('targeting') || errorMessage.includes('geo_locations')) {\n  detailedError = `Targeting error: ${errorMessage}. Check province/city location keys, age ranges, and pixel settings.`;\n}\nif (errorMessage.includes('location') || errorMessage.includes('province') || errorMessage.includes('city')) {\n  detailedError = `Location targeting error: ${errorMessage}. Verify that provinces and cities have valid facebook_location_key values.`;\n}\nif (errorMessage.includes('budget')) {\n  detailedError = `Budget error: ${errorMessage}. Ensure daily_budget is in cents and meets minimum requirements.`;\n}\nif (errorMessage.includes('campaign')) {\n  detailedError = `Campaign error: ${errorMessage}. Verify the Facebook campaign ID exists and is accessible.`;\n}\nif (errorMessage.includes('regions') || errorMessage.includes('cities')) {\n  detailedError = `Geographic targeting error: ${errorMessage}. Check that location objects have correct 'key' and 'name' format.`;\n}\n\nreturn [{\n  json: {\n    success: false,\n    error: detailedError,\n    campaign_id: inputData.campaign_id || 'unknown',\n    adset_name: inputData.name || 'unknown'\n  }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[940,-180],"id":"6b430d4d-01dc-43fa-b291-cdacaf1959df","name":"Handle Error1"},{"parameters":{"respondWith":"json","responseBody":"={\n  \"success\": false,\n  \"error\": \"{{ $json.error }}\",\n  \"facebook_campaign_id\": \"{{ $json.campaign_id }}\",\n  \"adset_name\": \"{{ $json.adset_name }}\"\n}","options":{"responseCode":400}},"type":"n8n-nodes-base.respondToWebhook","typeVersion":1,"position":[1160,-180],"id":"d18c9835-bff6-485e-a1cd-9515394e54c0","name":"Error Response1"}],"connections":{"Webhook Trigger1":{"main":[[{"node":"Set Config1","type":"main","index":0}]]},"Set Config1":{"main":[[{"node":"Validate Input1","type":"main","index":0}]]},"Validate Input1":{"main":[[{"node":"Create Facebook AdSet1","type":"main","index":0}]]},"Create Facebook AdSet1":{"main":[[{"node":"Process Response1","type":"main","index":0}],[{"node":"Handle Error1","type":"main","index":0}]]},"Process Response1":{"main":[[{"node":"Success Response1","type":"main","index":0}]]},"Handle Error1":{"main":[[{"node":"Error Response1","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":null,"pinData":{},"versionId":"5f79afb4-d7c7-43ac-86c9-803f2ca304e2","triggerCount":0,"shared":[{"createdAt":"2025-07-14T11:27:11.481Z","updatedAt":"2025-07-14T11:27:11.481Z","role":"workflow:owner","workflowId":"PjPBSG1cKqLPLVbS","projectId":"pRXFeKq9D8e0hAOx"}],"tags":[]},{"createdAt":"2025-09-11T10:19:51.022Z","updatedAt":"2025-09-17T02:30:17.000Z","id":"Q3mNKBzQD77ARCWD","name":"Edit Image Nano Banana Tool","active":false,"isArchived":false,"nodes":[{"parameters":{"workflowInputs":{"values":[{"name":"imageTitle"},{"name":"imagePrompt"},{"name":"imageID"},{"name":"imageUrl"}]}},"type":"n8n-nodes-base.executeWorkflowTrigger","typeVersion":1.1,"position":[48,64],"id":"70030e29-2ef5-46c7-b1ad-11e396e8b139","name":"When Executed by Another Workflow"},{"parameters":{"method":"POST","url":"https://queue.fal.run/fal-ai/nano-banana/edit","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"specifyBody":"json","jsonBody":"={\n  \"prompt\": \"{{ $json.imageTitle }}, {{ $json.imagePrompt }}\",\n  \"image_urls\": [\n    \"{{ $json.imageUrl }}\"\n  ],\n  \"num_images\": 1,\n  \"output_format\": \"jpeg\"\n}","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[528,64],"id":"fd4057f9-e32a-4148-ae55-3925d5b81b1c","name":"Create Image","credentials":{"httpHeaderAuth":{"id":"ir1jYgd60Pw6yEVx","name":"fal.ai Auth account"}}},{"parameters":{"url":"=https://queue.fal.run/fal-ai/nano-banana/requests/{{ $json.request_id }}","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[784,64],"id":"00942619-2e76-439a-bcda-59e71b698b19","name":"Get Result","credentials":{"httpHeaderAuth":{"id":"ir1jYgd60Pw6yEVx","name":"fal.ai Auth account"}},"onError":"continueErrorOutput"},{"parameters":{"assignments":{"assignments":[{"id":"c66c7c13-57ca-4191-9af3-5ab306dfedfc","name":"Response","value":"=The image was created and named \"{{ $json.name }}\". \n\nHere is the link to the image in Baserow: {{ $json.url }}","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[1280,64],"id":"06e3f350-c429-4211-ac2f-b41c89613c4a","name":"Result"},{"parameters":{"url":"={{ $json.images[0].url }}","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[992,64],"id":"1b1454c4-63e9-4dd3-8920-21d9f7aca16b","name":"Download Image"},{"parameters":{"amount":10},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[656,64],"id":"150930d8-7a63-4021-9ac0-4db0dd77ab0b","name":"10 Seconds","webhookId":"caad73e3-58d8-4fbd-a3e9-c42424f2d1ee"},{"parameters":{"content":"## Input","height":224,"width":176,"color":7},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[0,0],"id":"7cb0e84f-195e-4dc0-8d2e-b1392b2b9de6","name":"Sticky Note"},{"parameters":{"content":"## Download File URL","height":224,"width":288,"color":4},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[192,0],"id":"6a7f7bba-9722-4076-b99d-367443d83e45","name":"Sticky Note1"},{"parameters":{"content":"## Create AI Image","height":224,"width":432,"color":5},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[496,0],"id":"9f71fd17-dc24-4bba-9761-9df6d85da9ac","name":"Sticky Note2"},{"parameters":{"content":"## Polling","height":224,"width":192,"color":3},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[736,240],"id":"c669bcc4-c8e8-4a8b-8c7f-c8c34b98cb6c","name":"Sticky Note3"},{"parameters":{"content":"## Output","height":224,"width":464,"color":6},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[944,0],"id":"aa79c258-1a93-4cca-9f94-2d4c7ddc2c01","name":"Sticky Note4"},{"parameters":{},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[784,304],"id":"e470de9b-3ef4-48a2-a285-9eb4baa0bcc0","name":"5 Seconds","webhookId":"5f6bbd1e-a155-48de-b737-a225c6fd7a84"},{"parameters":{"method":"POST","url":"https://baserow.aiautomata.co.za/api/user-files/upload-file/","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"contentType":"multipart-form-data","bodyParameters":{"parameters":[{"parameterType":"formBinaryData","name":"file","inputDataFieldName":"data"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[1152,64],"id":"6ba120fe-4ba2-4658-9afe-fbff6fadbe4d","name":"Upload Nano to Baserow","credentials":{"httpHeaderAuth":{"id":"eLr9WkAowHbRSmCb","name":"Baserow Auth account"}}}],"connections":{"Create Image":{"main":[[{"node":"10 Seconds","type":"main","index":0}]]},"Get Result":{"main":[[{"node":"Download Image","type":"main","index":0}],[{"node":"5 Seconds","type":"main","index":0}]]},"Download Image":{"main":[[{"node":"Upload Nano to Baserow","type":"main","index":0}]]},"10 Seconds":{"main":[[{"node":"Get Result","type":"main","index":0}]]},"When Executed by Another Workflow":{"main":[[{"node":"Create Image","type":"main","index":0}]]},"5 Seconds":{"main":[[{"node":"Get Result","type":"main","index":0}]]},"Upload Nano to Baserow":{"main":[[{"node":"Result","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{"When Executed by Another Workflow":[{"json":{"imageTitle":"Man in Swimsuit with Car - Photorealistic Edit","imagePrompt":"Add a man in his swim suite with the car. Style: Photorealistic.","imageID":"72","imageUrl":"https://baserow.aiautomata.co.za/media/user_files/87r2Z5Itji5iGrtg9tLCv50OhScUeiW8_4801650b78ec818a5d8882a75af423dbbd765ed08ab74a1e4a3ef7c123de7a26.jpg"}}]},"versionId":"6a209a7f-6d59-4bb1-ae20-43231c14d81a","triggerCount":0,"shared":[{"createdAt":"2025-09-11T10:19:51.028Z","updatedAt":"2025-09-11T10:19:51.028Z","role":"workflow:owner","workflowId":"Q3mNKBzQD77ARCWD","projectId":"pRXFeKq9D8e0hAOx"}],"tags":[]},{"createdAt":"2025-09-11T10:19:16.944Z","updatedAt":"2025-09-18T12:19:14.000Z","id":"QNVD8DNkhhOiS1BD","name":"Combined Images Nanobanana","active":false,"isArchived":false,"nodes":[{"parameters":{"workflowInputs":{"values":[{"name":"prompt"},{"name":"image1"},{"name":"image2"},{"name":"imageTitle"}]}},"type":"n8n-nodes-base.executeWorkflowTrigger","typeVersion":1.1,"position":[48,64],"id":"53c02133-38cf-4535-88f6-70c0ab13f8b6","name":"When Executed by Another Workflow"},{"parameters":{"assignments":{"assignments":[{"id":"6831d021-c2d0-42a4-b625-aabfed3d170b","name":"images","value":"=['{{ $json.image1 }}','{{ $json.image2 }}']","type":"array"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[192,64],"id":"4298d551-77c7-491d-b895-dedae1d7cb14","name":"Edit Fields"},{"parameters":{"method":"POST","url":"https://queue.fal.run/fal-ai/nano-banana/edit","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"specifyBody":"json","jsonBody":"={\n  \"prompt\": \"{{ \n  $('When Executed by Another Workflow').item.json.prompt.replace(/\\\"/g, '\\\\\\\"').replace(/(\\r\\n|\\n|\\r)/g, '\\\\n') }}}}\",\n  \"image_urls\": [\n    \"{{ $json.images[0] }}\",\n    \"{{ $json.images[1] }}\"\n  ],\n  \"num_images\": 1,\n  \"output_format\": \"jpeg\"\n}","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[944,64],"id":"4548663e-95fc-4a09-8dde-2e4b4218d42e","name":"Create Image","credentials":{"httpHeaderAuth":{"id":"ir1jYgd60Pw6yEVx","name":"fal.ai Auth account"}}},{"parameters":{"url":"=https://queue.fal.run/fal-ai/nano-banana/requests/{{ $json.request_id }}","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[1200,64],"id":"797044c9-30c6-4923-b848-9a7e1d24f249","name":"Get Result","credentials":{"httpHeaderAuth":{"id":"ir1jYgd60Pw6yEVx","name":"fal.ai Auth account"}},"onError":"continueErrorOutput"},{"parameters":{"assignments":{"assignments":[{"id":"c66c7c13-57ca-4191-9af3-5ab306dfedfc","name":"Response","value":"=The image was created and named \"{{ $json.name }}\". \n\nHere is the link to the image in Google Drive: {{ $json.url }}","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[1664,64],"id":"dbd5ac30-c1e1-47a0-9687-aa4dbf0ab966","name":"Result"},{"parameters":{"url":"={{ $json.images[0].url }}","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[1392,64],"id":"5cfb56d5-7e2a-4c66-bb57-e460c6a04116","name":"Download Image"},{"parameters":{"amount":10},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[1072,64],"id":"ea79ed49-f87c-4b13-b9fb-7e02b510c25e","name":"10 Seconds","webhookId":"caad73e3-58d8-4fbd-a3e9-c42424f2d1ee"},{"parameters":{"content":"## Input","height":224,"width":320,"color":7},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[0,0],"id":"4733df35-381c-495c-b8fd-a1cc37b65668","name":"Sticky Note"},{"parameters":{"content":"## Download File URLs","height":224,"width":544,"color":4},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[336,0],"id":"a874cadf-d6a8-46e4-8b67-d11131ab07c4","name":"Sticky Note1"},{"parameters":{"content":"## Create AI Image","height":224,"width":448,"color":5},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[896,0],"id":"5e898c89-e625-4921-967f-35b2e33625ea","name":"Sticky Note2"},{"parameters":{"content":"## Polling","height":224,"width":192,"color":3},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[1152,240],"id":"42a86de3-29fd-4130-a435-89a5702b63ef","name":"Sticky Note3"},{"parameters":{"content":"## Output","height":224,"width":432,"color":6},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[1360,0],"id":"007130b5-62e1-4170-a8f2-ec4e6aac00d9","name":"Sticky Note4"},{"parameters":{},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[1200,304],"id":"39d71aea-597d-4515-8ce4-1fbd872219ec","name":"5 Seconds","webhookId":"5f6bbd1e-a155-48de-b737-a225c6fd7a84"},{"parameters":{"method":"POST","url":"https://baserow.aiautomata.co.za/api/user-files/upload-file/","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"contentType":"multipart-form-data","bodyParameters":{"parameters":[{"parameterType":"formBinaryData","name":"file","inputDataFieldName":"data"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[1536,64],"id":"56d7ce8d-9f83-4f6c-a347-595db80f40b3","name":"Upload Nano to Baserow","credentials":{"httpHeaderAuth":{"id":"eLr9WkAowHbRSmCb","name":"Baserow Auth account"}}}],"connections":{"When Executed by Another Workflow":{"main":[[{"node":"Edit Fields","type":"main","index":0}]]},"Edit Fields":{"main":[[{"node":"Create Image","type":"main","index":0}]]},"Get Result":{"main":[[{"node":"Download Image","type":"main","index":0}],[{"node":"5 Seconds","type":"main","index":0}]]},"Create Image":{"main":[[{"node":"10 Seconds","type":"main","index":0}]]},"10 Seconds":{"main":[[{"node":"Get Result","type":"main","index":0}]]},"Download Image":{"main":[[{"node":"Upload Nano to Baserow","type":"main","index":0}]]},"5 Seconds":{"main":[[{"node":"Get Result","type":"main","index":0}]]},"Upload Nano to Baserow":{"main":[[{"node":"Result","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{"When Executed by Another Workflow":[{"json":{"prompt":"Photorealistic composite combining image1 and image2 into a single scene with both cars parked side-by-side on the same level surface. Match scale and perspective so both cars appear natural and proportional. Place them next to each other with a small gap about one meter, align wheels and ground contact, ensure consistent lighting, natural soft shadows and realistic reflections on the car bodies, subtle contact shadows beneath tires, neutral daytime lighting with gentle contrast, clear background with slight depth of field so focus remains on the cars, preserve original colors and details from image1 and image2, remove any captions or extra text, no people, no added objects, high-resolution photorealistic result.","image1":"https://baserow.aiautomata.co.za/media/user_files/LnrGRJKxpvAWeKhJBLraj0TAGZ14xGuv_951be67ee7d6523f8a3ae504a414fbbcec7bceea7de519af9f4914edded25420.png","image2":"https://baserow.aiautomata.co.za/media/user_files/g0uXRW8RI15vNyAXDjqyCY9mrFtDuHCg_104d0245cfa0d1247cd5f773cacfa8c34e654799b15ce295d6eadefe72ed5398.png","imageTitle":"Two Cars Parked Side by Side Photorealistic Combine"}}]},"versionId":"c7f14c31-29ec-48c2-a3fe-5f52cbd9b4da","triggerCount":0,"shared":[{"createdAt":"2025-09-11T10:19:16.956Z","updatedAt":"2025-09-11T10:19:16.956Z","role":"workflow:owner","workflowId":"QNVD8DNkhhOiS1BD","projectId":"pRXFeKq9D8e0hAOx"}],"tags":[]},{"createdAt":"2025-05-21T02:32:23.051Z","updatedAt":"2025-05-29T10:55:36.000Z","id":"S3LdS0HZCiLq1Gfk","name":"Short Videos","active":false,"isArchived":false,"nodes":[{"parameters":{"assignments":{"assignments":[{"id":"84924182-8e05-4bc6-b8b6-3863c1be0f06","name":"User Input","value":"={{ $json['The Main Topic'] }}","type":"string"},{"id":"02602696-d3ad-4aeb-9d18-e80c6cf2ec17","name":"Script Duration","value":"={{ $json.Duration }}","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[-1920,340],"id":"f6c5799e-8c94-42e4-8a3b-406122e01751","name":"Set Idea"},{"parameters":{"method":"POST","url":"https://nca.aiautomata.co.za/v1/image/transform/video","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"specifyBody":"json","jsonBody":"={\n    \"image_url\":\"{{ $json.Image[0].url }}\",\n    \"length\": {{ $json.Duration }},\n    \"frame_rate\": 25,\n    \"zoom_speed\": 3,\n    \"id\": \"{{ $json.id }}\"\n}","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-1100,3180],"id":"00ed542b-0ae4-4501-b412-b8208b54112b","name":"Create Clips","credentials":{"httpHeaderAuth":{"id":"XhOG8EmUXSMMk7ct","name":"NCS-Toolkit Auth account"}}},{"parameters":{"method":"POST","url":"https://nca.aiautomata.co.za/v1/video/concatenate","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"specifyBody":"json","jsonBody":"={\n    \"video_urls\": {{ JSON.stringify($json.video_urls) }},\n    \"id\": \"{{ $('Get video').item.json.id }}\"\n}","options":{"timeout":50000}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-860,3660],"id":"ad2deecb-bfd6-45dd-a4f0-8099d77276e9","name":"Combine Clips","credentials":{"httpHeaderAuth":{"id":"XhOG8EmUXSMMk7ct","name":"NCS-Toolkit Auth account"}}},{"parameters":{"fieldsToAggregate":{"fieldToAggregate":[{"fieldToAggregate":"Video Clip URL"}]},"options":{}},"type":"n8n-nodes-base.aggregate","typeVersion":1,"position":[-1300,3660],"id":"ac789e22-403c-4bae-a587-47ceaf130fa2","name":"Aggregate1"},{"parameters":{"content":"## Create clips from images\n","height":320,"width":1400,"color":5},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[-1980,3160],"id":"35582ea5-5bd8-428e-8e0f-0b451d7b86cb","name":"Sticky Note2","disabled":true},{"parameters":{"content":"## Combine clips into 1 video","height":300,"width":1580,"color":5},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[-1980,3560],"id":"bdf6af15-f7cf-497e-955e-caf6e280daa3","name":"Sticky Note3","disabled":true},{"parameters":{"options":{}},"type":"n8n-nodes-base.splitInBatches","typeVersion":3,"position":[-1320,3260],"id":"1abc8e8e-e448-4d62-8554-a35017218405","name":"Loop Over Items3"},{"parameters":{"jsCode":"// Extract the array of URLs\nconst urls = items[0].json[\"Video Clip URL\"] || [];\n\n// Map URLs into the required structure\nconst formattedURLs = urls.map(url => ({ \"video_url\": url }));\n\n// Return the transformed data\nreturn [{\n    json: {\n        \"video_urls\": formattedURLs\n    }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-1080,3660],"id":"335a6f62-4b5d-46a8-aee3-1a4764d5da2b","name":"Video url to array"},{"parameters":{"content":"## Add Captions","height":240,"width":720,"color":5},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[-2020,4320],"id":"6b8c8139-e2ba-45d4-9c8c-14ec2afbdbb4","name":"Sticky Note6"},{"parameters":{"method":"POST","url":"https://nca.aiautomata.co.za/v1/ffmpeg/compose","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"specifyBody":"json","jsonBody":"={\n  \"id\": \"audio-layering\",\n  \"inputs\": [\n    {\n      \"file_url\": \"{{ $json['Raw Video URL'] }}\"\n    },\n    {\n      \"file_url\": \"{{ $json['TTS Audio'][0].url }}\"\n    }\n  ],\n  \"filters\": [\n    {\n      \"filter\": \"[1:a]volume=1[outa]\"\n    }\n  ],\n  \"outputs\": [\n    {\n      \"options\": [\n        {\n          \"option\": \"-map\",\n          \"argument\": \"0:v\"\n        },\n        {\n          \"option\": \"-map\",\n          \"argument\": \"[outa]\"\n        },\n        {\n          \"option\": \"-c:v\",\n          \"argument\": \"copy\"\n        },\n        {\n          \"option\": \"-c:a\",\n          \"argument\": \"aac\"\n        },\n        {\n          \"option\": \"-f\",\n          \"argument\": \"mp4\"\n        }\n      ]\n    }\n  ]\n}\n","options":{"timeout":50000}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-1700,4140],"id":"23250f72-e4f7-4bc5-a373-e24ccb7f4a5d","name":"Combine Clips3","credentials":{"httpHeaderAuth":{"id":"XhOG8EmUXSMMk7ct","name":"NCS-Toolkit Auth account"}}},{"parameters":{"method":"POST","url":"http://host.docker.internal:8080/v1/ffmpeg/compose","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"specifyBody":"json","jsonBody":"={\n    \"id\": \"audio-layering\",\n    \"inputs\": [\n        {\n            \"file_url\": \"{{ $json['Video + Captions URL'] }}\"\n        },\n        {\n            \"file_url\": \"http://localhost:9000/nca-toolkit/music/epic-emotinal-inspirational-207071.mp3\"\n        }\n    ],\n    \"filters\": [\n        {\n            \"filter\": \"[1:a]aloop=loop=-1:size=2G[audio_loop];[0:a]volume=2[audio1];[audio_loop]volume=0.5[audio2];[audio1][audio2]amix=inputs=2:duration=first[outa]\"\n        }\n    ],\n    \"outputs\": [\n        {\n            \"options\": [\n                {\n                    \"option\": \"-map\",\n                    \"argument\": \"0:v\"\n                },\n                {\n                    \"option\": \"-map\",\n                    \"argument\": \"[outa]\"\n                },\n                {\n                    \"option\": \"-c:v\",\n                    \"argument\": \"copy\"\n                },\n                {\n                    \"option\": \"-c:a\",\n                    \"argument\": \"aac\"\n                }\n            ]\n        }\n    ]\n}","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-1700,4660],"id":"80e11326-d1d1-4fbc-b501-d29baf693a82","name":"Add Music","disabled":true},{"parameters":{"content":"## Combine Video & Audio","height":240,"width":720,"color":5},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[-2020,4060],"id":"1e49bcb2-9a8c-4065-8dd2-93d0a3b1d489","name":"Sticky Note7"},{"parameters":{"fieldToSplitOut":"Scenes","options":{}},"type":"n8n-nodes-base.splitOut","typeVersion":1,"position":[-1740,3660],"id":"765acff1-c410-4bca-9f2e-e36d63b30ab9","name":"Split Out1"},{"parameters":{"content":"## Create script, title & description","height":540,"width":2020,"color":5},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[-1980,160],"id":"4320b7d1-2def-4436-a533-e5678daf2251","name":"Sticky Note"},{"parameters":{"method":"=GET","url":"=https://tts.aiautomata.co.za/dev/timestamps/{{ $('Generate TTS').item.json.headers[\"x-timestamps-path\"] }}","options":{"response":{"response":{"fullResponse":true,"responseFormat":"file"}}}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-1900,1140],"id":"70a063b9-6856-4095-9bfc-cda9f829590e","name":"Get Captions"},{"parameters":{"method":"POST","url":"https://tts.aiautomata.co.za/dev/captioned_speech","sendBody":true,"specifyBody":"json","jsonBody":"={\n  \"model\": \"kokoro\",\n  \"input\": {{ JSON.stringify($json.Script) }},\n  \"voice\": \"{{ $json['TTS Voices'] }}\",\n  \"response_format\": \"mp3\",\n  \"download_format\": \"mp3\",\n\"return_timestamps\": true,\n  \"speed\": 1\n}","options":{"response":{"response":{"fullResponse":true}}}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-1740,880],"id":"ab18c46c-f6a6-451e-a2e9-343ea14699b0","name":"Generate TTS"},{"parameters":{"content":"## Generate TTS (Voice Over)\n","height":500,"width":680,"color":5},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[-1980,800],"id":"d5651670-5a56-49e5-ab13-baccbe28f9fe","name":"Sticky Note1"},{"parameters":{"aggregate":"aggregateAllItemData","destinationFieldName":"Segments","options":{}},"type":"n8n-nodes-base.aggregate","typeVersion":1,"position":[-1500,1500],"id":"1223307f-c0dc-4abe-ac6d-d110adc21b2b","name":"Aggregate"},{"parameters":{"fieldToSplitOut":"segments","options":{}},"type":"n8n-nodes-base.splitOut","typeVersion":1,"position":[-840,1500],"id":"9700b752-bed5-4d3c-ab4a-76aefefe2731","name":"Split Out"},{"parameters":{"jsCode":"// Assume the previous node output is available here\nconst inputSegments = $input.first().json.segments; // Accessing segments from the previous output\n\nif (inputSegments.length > 0) {\n    const lastSegment = inputSegments[inputSegments.length - 1].json;\n    \n    // Check if the last segment's duration is less than 2 seconds\n    if (parseFloat(lastSegment.duration) < 2.0) {\n        // Combine the last segment with the previous segment if it exists\n        if (inputSegments.length > 1) {\n            const secondLastSegment = inputSegments[inputSegments.length - 2].json;\n\n            // Update the second last segment's words and duration\n            secondLastSegment.words += ' ' + lastSegment.words;\n            secondLastSegment.duration = (\n                parseFloat(secondLastSegment.duration) +\n                parseFloat(lastSegment.duration)\n            ).toFixed(2); // Update duration\n\n            // Remove the last segment as it has been merged\n            inputSegments.pop();\n        }\n    }\n}\n\n// Return the updated segments\nreturn [{ json: { segments: inputSegments } }];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-1060,1500],"id":"b63fd878-16e7-4023-bb18-1e4cc793f268","name":"Fixer"},{"parameters":{"content":"## Generate scenes & image prompts\n","height":420,"width":2640,"color":5},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[-1980,1360],"id":"e2fbe23d-892a-41e7-903f-fa3402589b07","name":"Sticky Note4"},{"parameters":{"url":"={{ $json['Captions URL'] }}","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-1720,1500],"id":"48b08de9-c8cb-4288-8d0f-91f5665be06e","name":"Get Segment File"},{"parameters":{"jsCode":"// Input from the previous step\nconst splitLength = 5;\nconst inputData = $input.first().json.Segments; // Assuming 'body' is passed from the previous node\n\n// Get the Generative Style value and Script from the first item of Get records1\nconst generativeStyle = $('Get records1').first().json['Generative Style'];\nconst fullScript = $('Get records1').first().json.Script;\n\nconst segments = [];\nlet currentSegment = {\n    id: 0,\n    words: \"\",\n    duration: 0,\n    generativeStyle: generativeStyle, // Add the generative style here\n    fullScript: fullScript // Add the full script here\n};\nlet currentStartTime = -1; // Start before the first word\nlet totalDuration = 0; // Tracking total duration\nlet currentEndTime = 0;\n\n// Define the pause buffer (in seconds)\nconst pauseBuffer = 0.1; // Adjust this value based on your requirements\n\n// Loop through the input data\nfor (const wordObj of inputData) {\n    const { word, start_time, end_time } = wordObj;\n\n    // If this is the first word in a segment, set the start time\n    if (currentStartTime === -1) {\n        currentStartTime = start_time;\n    }\n\n    // Add the word to the current segment\n    currentSegment.words += (currentSegment.words ? ' ' : '') + word;\n\n    // Update the end time\n    currentEndTime = end_time;\n\n    // Keep track of the duration without pauses\n    currentSegment.duration = (currentEndTime - currentStartTime).toFixed(2);\n\n    // Check if we should finalize the current segment (if it exceeds 4 seconds)\n    if (currentSegment.duration >= splitLength) {\n        // Add pause buffer to the segment's duration before pushing it\n        currentSegment.duration = (parseFloat(currentSegment.duration) + pauseBuffer).toFixed(2);\n        \n        // Update total duration for the segment\n        totalDuration += parseFloat(currentSegment.duration);\n\n        // Push the current segment to segments\n        segments.push(currentSegment);\n\n        // Reset for the next segment\n        currentSegment = {\n            id: segments.length,\n            words: \"\",\n            duration: 0,\n            generativeStyle: generativeStyle, // Don't forget to include generativeStyle in the new segment\n            fullScript: fullScript // Include the full script in the new segment\n        };\n        currentStartTime = -1; // Reset the start time\n    }\n}\n\n// Handle any leftover words in the last segment\nif (currentSegment.words) {\n    currentSegment.duration = (currentEndTime - currentStartTime).toFixed(2);\n    // Add pause buffer to the last segment's duration\n    currentSegment.duration = (parseFloat(currentSegment.duration) + pauseBuffer).toFixed(2);\n    \n    totalDuration += parseFloat(currentSegment.duration); // Add last segment to total\n    segments.push(currentSegment);\n}\n\n// Round total duration\nconst roundedTotalDuration = Math.round(totalDuration);\n\n// Calculate total minutes and seconds\nconst totalSeconds = Math.floor(roundedTotalDuration);\nconst minutes = Math.floor(totalSeconds / 60);\nconst seconds = totalSeconds % 60;\n\n// Create a readable format for the total runtime\nconst totalRuntimeString = `${minutes} minute${minutes !== 1 ? 's' : ''}, ${seconds} second${seconds !== 1 ? 's' : ''}`;\n\n// Prepare output with segments, total duration, and total runtime string\nconst output = {\n    segments: segments.map(segment => {\n        return { json: segment };\n    }),\n    totalDuration: roundedTotalDuration,\n    TotalMinutes: totalRuntimeString\n};\n\n// Return the structured output\nreturn [{ json: output }];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-1280,1500],"id":"5f4064ad-2144-4951-af24-e94f6f7d828d","name":"Split into 5s Scenes"},{"parameters":{"content":"## Add BG Music","height":240,"width":720,"color":4},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[-2020,4580],"id":"a7c8e491-6a74-4b26-bdb9-3a50057c9a9e","name":"Sticky Note8","disabled":true},{"parameters":{"method":"POST","url":"https://nca.aiautomata.co.za/v1/video/caption","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"specifyBody":"json","jsonBody":"={\n    \"video_url\": \"{{ $json['Video + Audio URL'] }}\",\n    \"settings\": {\n        \"line_color\": \"#FFFFFF\",\n        \"word_color\": \"#22b525\",\n        \"all_caps\": false,\n        \"max_words_per_line\": 3,\n        \"font_size\": 60,\n        \"bold\": false,\n        \"italic\": false,\n        \"underline\": false,\n        \"strikeout\": false,\n        \"outline_width\": 6,\n        \"shadow_offset\": 8,\n        \"style\": \"highlight\",\n        \"font_family\": \"The Bold Font\",\n        \"position\": \"top_center\"\n    },\n    \"id\": \"{{ $json.id }}\"\n}","options":{"timeout":90000}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-1700,4400],"id":"3b6aa676-81ef-49ad-89e2-b29eae194486","name":"Create Captions","credentials":{"httpHeaderAuth":{"id":"XhOG8EmUXSMMk7ct","name":"NCS-Toolkit Auth account"}}},{"parameters":{"databaseId":168,"tableId":682,"returnAll":true,"additionalOptions":{"filters":{"fields":[{"field":6616,"value":"={{ $json.id }}"}]}}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[-1560,3260],"id":"f1f08dcc-46a1-421c-b4b5-fce2cd1ff200","name":"Baserow4","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"operation":"update","databaseId":168,"tableId":682,"rowId":"={{ $('Loop Over Items3').item.json.id }}","fieldsUi":{"fieldValues":[{"fieldId":6634,"fieldValue":"={{ $json.response }}"}]}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[-880,3240],"id":"7b64b29c-36c4-41fe-ba6b-69d2fcb802be","name":"Baserow5","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"databaseId":168,"tableId":681,"returnAll":true,"additionalOptions":{"filters":{"fields":[{"field":6620,"operator":"empty"}]}}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[-1920,4140],"id":"a8f0c325-c893-4dc2-a9c6-694e668268ee","name":"Baserow11","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"operation":"update","databaseId":168,"tableId":681,"rowId":"={{ $('Baserow11').item.json.id }}","fieldsUi":{"fieldValues":[{"fieldId":6621,"fieldValue":"={{ $json.response[0].file_url }}"}]}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[-1480,4140],"id":"a8c7bf77-36ae-41f1-a31a-9c26d2ecfe30","name":"Baserow12","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"databaseId":168,"tableId":681,"returnAll":true,"additionalOptions":{"filters":{"fields":[{"field":6619,"operator":"empty"},{"field":6630,"operator":"contains","value":"Processing"}]}}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[-1920,4400],"id":"4bbc5d8a-59bc-4ab3-a077-193846390779","name":"Baserow13","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"operation":"update","databaseId":168,"tableId":681,"rowId":"={{ $('Baserow13').item.json.id }}","fieldsUi":{"fieldValues":[{"fieldId":6620,"fieldValue":"={{ $json.response }}"}]}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[-1480,4400],"id":"4ac6275b-5407-4235-9859-f6fc01d8566b","name":"Baserow14","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"databaseId":168,"tableId":681,"returnAll":true,"additionalOptions":{"filters":{"fields":[{"field":6618,"operator":"empty"},{"field":6632,"operator":"contains","value":"Processing"}]}}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[-1920,4660],"id":"a668f972-f6e6-45ae-ba22-19254f1dcb4c","name":"Baserow15","disabled":true},{"parameters":{"formTitle":"Brainer Rotter 5000","formDescription":"Creates Brain Rot","formFields":{"values":[{"fieldLabel":"The Main Topic","fieldType":"textarea","placeholder":"Amazing world of cats","requiredField":true},{"fieldLabel":"Duration","fieldType":"dropdown","fieldOptions":{"values":[{"option":"30 Second"},{"option":"1 Minute"},{"option":"2 Minutes"}]}},{"fieldLabel":"Generative Style","fieldType":"dropdown","fieldOptions":{"values":[{"option":"Lego"},{"option":"Minecraft"},{"option":"Disney Pixar"},{"option":"Hand-Drawn"},{"option":"Chibi"},{"option":"Anime"},{"option":"Hyper-Realistic"},{"option":"Cyberpunk"},{"option":"fantasy"}]}},{"fieldLabel":"Video Type","fieldType":"dropdown","fieldOptions":{"values":[{"option":"From user idea"},{"option":"From transcript"},{"option":"User Script"}]},"requiredField":true},{"fieldLabel":"TTS Voice","fieldType":"dropdown","fieldOptions":{"values":[{"option":"af_alloy"},{"option":"af_aoede"},{"option":"af_bella"},{"option":"af_heart"},{"option":"af_jadzia"},{"option":"af_jessica"},{"option":"af_kore"},{"option":"af_nicole"},{"option":"af_nova"},{"option":"af_river"},{"option":"af_sarah"},{"option":"af_sky"},{"option":"am_adam"},{"option":"am_echo"},{"option":"am_eric"},{"option":"am_fenrir"},{"option":"am_liam"},{"option":"am_michael"},{"option":"am_onyx"},{"option":"am_puck"},{"option":"am_santa"}]},"requiredField":true},{"fieldLabel":"Image Provider","fieldType":"dropdown","fieldOptions":{"values":[{"option":"together.ai"},{"option":"fal.ai"},{"option":"Fluxpro.ai"}]},"requiredField":true}]},"options":{"appendAttribution":false,"ignoreBots":true}},"type":"n8n-nodes-base.formTrigger","typeVersion":2.2,"position":[-4020,1320],"id":"e7b9029b-4cd6-4f89-b4bc-b7b2a0348973","name":"On form submission","webhookId":"3b749a18-39ca-4f86-9f0d-c3de1cf8a05f","disabled":true},{"parameters":{"schemaType":"manual","inputSchema":"{\n  \"type\": \"object\",\n  \"properties\": {\n    \"Title\": {\n      \"type\": \"string\",\n      \"description\": \"Short and engaging title, curiosity-driven.\"\n    },\n    \"Description\": {\n      \"type\": \"string\",\n      \"description\": \"Short description with key hashtags, hook, context, CTA, and hashtags.\"\n    },\n    \"Hook\": {\n      \"type\": \"string\",\n      \"description\": \"Introduction.\"\n    },\n    \"MainScript\": {\n      \"type\": \"string\",\n      \"description\": \"Main script content.\"\n    },\n    \"CTA\": {\n      \"type\": \"string\",\n      \"description\": \"Call to action\"\n    }\n  },\n  \"required\": [\"Title\", \"Description\", \"Intro\", \"MainScript\"]\n}"},"type":"@n8n/n8n-nodes-langchain.outputParserStructured","typeVersion":1.2,"position":[-900,580],"id":"24515051-144b-4eac-8a4f-573a4a0801d2","name":"Structured Output Parser1"},{"parameters":{"jsonSchemaExample":"{\n  \"Prompt\": \"enter prompt here\"\n}"},"type":"@n8n/n8n-nodes-langchain.outputParserStructured","typeVersion":1.2,"position":[-420,1620],"id":"35bc2a55-84a3-499b-a7bf-d3fd1c8ba440","name":"Structured Output Parser2"},{"parameters":{"promptType":"define","text":"=The Topic:\n{{ $json[\"User Input\"] }}\n\nRough Duration:\n{{ $('Set Idea').item.json['Script Duration'] }}","messages":{"messageValues":[{"message":"=Act as a YouTube video scriptwriter who specializes in transforming user-submitted ideas—whether they are story concepts or intriguing facts—into engaging, bite-sized video scripts. The user will also provide a target video length, which you should keep in mind while crafting the content. Your goal is to take these ideas and produce compelling, original content without referencing specific sources or names.\n\nYour script should be engaging, energetic, and easy to follow, turning user concepts into captivating narratives within the specified video length. Use a conversational tone, vivid descriptions, and a strong hook to instantly grab attention. Keep the pacing snappy, ensuring that every second counts.\n\nNEVER add linebreaks or emojis to the hook, main script & CTA\n\n**Output Format:**\n- **Title:** [Catchy, curiosity-driven title based on user idea]  \n- **Description:** [50-150 characters, snappy summary with key hashtags relevant to the user’s topic]  \n- **Hook:** [An attention-grabbing opening line inspired by the user idea]  \n- **MainScript:** [A natural, spoken-style script without line breaks or emojis, tailored to the user-defined video length]  \n- **Call to Action:** [A compelling prompt encouraging viewers to engage, like \"What was your favorite part of this story?\" or \"Want to explore more ideas? Follow for more!\"]\n\nMake sure the MainScript feels seamless and original, as if these insights are being shared firsthand. No direct references to names, specific sources, or the user—just pure, engaging storytelling that keeps viewers hooked."}]}},"type":"@n8n/n8n-nodes-langchain.chainLlm","typeVersion":1.5,"position":[-1480,340],"id":"476b5de3-6366-4829-adcd-93d105eaff91","name":"Script Writier 🧠"},{"parameters":{"promptType":"define","text":"=User Imput:\n{{ $json.text }}","hasOutputParser":true,"messages":{"messageValues":[{"message":"=Take the user input and output in the following JSON Structure, DO NOT change or alter any of the text\n\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"Title\": {\n      \"type\": \"string\",\n      \"description\": \"Short and engaging title, curiosity-driven.\"\n    },\n    \"Description\": {\n      \"type\": \"string\",\n      \"description\": \"Short description with key hashtags, hook, context, CTA, and hashtags.\"\n    },\n    \"Hook\": {\n      \"type\": \"string\",\n      \"description\": \"The hook.\"\n    },\n    \"MainScript\": {\n      \"type\": \"string\",\n      \"description\": \"Main script content.\"\n    },\n    \"CTA\": {\n      \"type\": \"string\",\n      \"description\": \"Call to action\"\n    }\n  },\n  \"required\": [\"Title\", \"Description\", \"Intro\", \"MainScript\"]\n}"}]}},"type":"@n8n/n8n-nodes-langchain.chainLlm","typeVersion":1.5,"position":[-1100,340],"id":"1364b576-f4a7-472e-901b-536fb470cf06","name":"Output Parser 🛠"},{"parameters":{"rules":{"values":[{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"leftValue":"={{ $('On form submission').item.json['Video Type'] }}","rightValue":"From transcript","operator":{"type":"string","operation":"equals"},"id":"67835e1a-7770-4d3e-b9d6-0dac59a5923a"}],"combinator":"and"},"renameOutput":true,"outputKey":"From transcript"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"171a9dfd-59a3-49a4-af28-c284abc85f13","leftValue":"={{ $('On form submission').item.json['Video Type'] }}","rightValue":"From user idea","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"User Idea"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"8ae898da-9db0-450f-9750-63023f6f68ba","leftValue":"={{ $('On form submission').item.json['Video Type'] }}","rightValue":"User Script","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"User Script"}]},"options":{}},"type":"n8n-nodes-base.switch","typeVersion":3.2,"position":[-1700,340],"id":"164712e5-b3fd-44b6-93e1-673f27d9ccda","name":"Switch"},{"parameters":{"promptType":"define","text":"=Heres the full script:\n{{ $json.json.fullScript }}\n\nGenerative style:\n{{ $json.json.generativeStyle.value }}\n\nHere is the current scene:\nScript portion: {{ $json.json.words }}\nScript position: {{ $json.json.id }}","hasOutputParser":true,"messages":{"messageValues":[{"message":"=You are an image prompt generator agent for video production. Your role is to create starting frames for a longer video by transforming script segments into visually descriptive image prompts. Each scene will be generated in a specified artistic style, which must be factored into the prompt to ensure consistency.  \n\nOutput a JSON object containing the prompt for the current script segment that you are presented with:  \n\n```json\n{\n  \"Prompt\": \"enter prompt here\"\n}\n```  \n\n### **IMPORTANT INSTRUCTIONS:**  \n\n- **Always** incorporate the given style into the visual description.  \n- **Never** include text in the images.\n- **Never** exceed 240 characters in your prompt.  \n- **Keep images visually compelling** – Instead of basic or static representations, focus on **dynamic compositions, dramatic angles, striking lighting, immersive textures, and environmental storytelling**.  \n- **Small subjects should have compelling micro-world narratives** – If the subject is small (e.g., a drop of water, a single key, a lone leaf), provide a **rich atmosphere**, interplay of lighting, and framing that enhances storytelling.  \n- **Focus on depth, detail, and artistic impact** rather than excessive complexity.  \n\n\nA well-crafted prompt should now include:  \n\n- **Subject:** The main focus of the image.  \n- **Style:** The artistic style provided for this scene (e.g., Lego, Minecraft, Disney Pixar, Hand-Drawn, Chibi, Anime, Hyper-Realistic, Cyberpunk).  \n- **Composition:** Use **engaging angles** (macro close-ups, over-the-shoulder, dynamic perspectives).  \n- **Lighting:** Prioritize dramatic effects like **backlighting, neon glows, moody shadows, or iridescent reflections** for added immersion. \n- **Micro-World Storytelling:** Ensure even small objects contribute to a **scene with intrigue, interaction, or emotion**.  \n- **Color Palette:** The dominant colors or color scheme.  \n- **Mood/Atmosphere:** The emotional tone of the image.  \n- **Technical Details:** Camera effects like **bokeh, depth of field, contrast**, or lens distortion to make the image feel real.  \n- **Additional Elements:** Small but meaningful details that **enhance interest without overwhelming the scene**.  \n\n\nExample Prompts\n\n- **Style: Hyper-Realistic** – A hyperrealistic macro shot of a single droplet of glue stretching delicately from a cracked porcelain teacup, caught in the moment before it falls. The soft golden glow from a nearby desk lamp refracts through the droplet, revealing tiny swirling textures inside. Dust particles float around, illuminated in the warm evening light.  \n- **Style: Minecraft** – A blocky Minecraft-style cavern glowing with radiant blue crystals embedded in stone. A pixelated adventurer stands at the entrance, silhouetted against eerie, ambient light. Shadows dance across the cave walls, creating intrigue.  \n- **Style: Disney Pixar** – A cozy animated bakery at sunrise, where a little girl with oversized round glasses watches a tray of fresh golden pastries steaming on the counter. Soft beams of morning sunlight filter in, casting a warm, dreamy glow on the checkered tiles.  \n- **Style: Cyberpunk** – A neon-lit cyberpunk alleyway drenched in rain. The headlights of a hoverbike cut through thin mist as a shadowy figure in a metallic trench coat leans against a graffiti-covered wall. Bright neon blues and deep magentas create dramatic contrast.  \n\n"}]}},"type":"@n8n/n8n-nodes-langchain.chainLlm","typeVersion":1.5,"position":[-660,1400],"id":"6fe1aa27-0357-40fb-989b-a863bf01be83","name":"Image Prompter V2 📷"},{"parameters":{"options":{}},"type":"n8n-nodes-base.splitInBatches","typeVersion":3,"position":[-1760,2240],"id":"622d6947-7772-45a5-94c8-bf5b70c4365e","name":"Loop Over Items"},{"parameters":{"content":"## Image Generation - flux/schnell\n","height":1180,"width":2240,"color":5},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[-1980,1840],"id":"471ac217-e7a3-4307-af98-200f6f9f77cd","name":"Sticky Note11"},{"parameters":{"amount":10},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[-240,2440],"id":"bca55019-8f3f-4efd-bec7-b68e78bac731","name":"Wait1","webhookId":"417c1874-053b-4a23-b40b-2378fa533a7f"},{"parameters":{"operation":"update","databaseId":168,"tableId":682,"rowId":"={{ $('Loop Over Items').item.json.id }}","fieldsUi":{"fieldValues":[{"fieldId":6633,"fieldValue":"={{ $json.name }}"}]}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[-460,2440],"id":"84e042fa-9fbd-47ed-a8af-3d29bb46c61e","name":"Baserow21","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"promptType":"define","text":"=The Transcript:\n{{ $json['User Input'] }}","messages":{"messageValues":[{"message":"=Act as a YouTube video scriptwriter who specializes in transforming insights, interesting facts, and key takeaways into engaging, bite-sized video scripts. Your goal is to craft compelling short-form scripts based on the most intriguing ideas from long-form podcast transcripts—presenting them as fresh, original content without referencing sources or names.  \n\nYour script should be engaging, energetic, and easy to follow, turning complex ideas into exciting, digestible narratives. Use a conversational tone, vivid descriptions, and a strong hook to instantly grab attention. Keep the pacing snappy, ensuring every second counts.  \n\nImportant Guidelines:\n- Do NOT use asterisks (*) or emojis. Keep the text clean and formatted naturally.  \n- Do NOT include line breaks within the \"MainScript\" unless necessary for readability. Write in a natural, spoken style as if it’s being delivered by a person.  \n- The script must feel ORIGINAL and conversational, without direct references to specific podcasts, hosts, or episodes.  \n- The Call to Action should remain simple and engaging. Examples: \"What was your favorite insight?\" or \"Want more ideas like this? Follow for more!\"\n\nOutput Format: \n- Title: [Catchy, curiosity-driven title]  \n- Description: [50-150 characters, snappy summary with key hashtags]  \n- Hook: [An attention-grabbing opening line]  \n- MainScript: [A natural, spoken-style script—NO asterisks, NO emojis, NO unnecessary formatting]  \n- Call to Action: [A compelling prompt encouraging viewers to engage]  \n\nMake sure the MainScript feels seamless and engaging, as if these insights are being shared firsthand. Keep everything punchy and to the point, ensuring high retention and engagement.  "}]}},"type":"@n8n/n8n-nodes-langchain.chainLlm","typeVersion":1.5,"position":[-1480,180],"id":"df7c36e4-0f6f-40b2-8e5a-970c1ff1b19a","name":"Long form to Script Writier 🧠"},{"parameters":{"operation":"create","databaseId":168,"tableId":681,"fieldsUi":{"fieldValues":[{"fieldId":6615,"fieldValue":"={{ $('Output Parser 🛠').item.json.output.Title }}"},{"fieldId":6617,"fieldValue":"={{ $('Output Parser 🛠').item.json.output.Description }}"},{"fieldId":6618,"fieldValue":"={{ $json.Script }}"},{"fieldId":6629,"fieldValue":"={{ $('Set Idea').item.json['User Input'] }}"},{"fieldId":6628,"fieldValue":"={{ $('On form submission').item.json['Generative Style'] }}"},{"fieldId":6624,"fieldValue":"={{ $('On form submission').item.json['TTS Voice'] }}"},{"fieldId":6630,"fieldValue":"Processing"},{"fieldId":6631,"fieldValue":"={{ $('On form submission').item.json['Image Provider'] }}"}]}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[-280,340],"id":"a38f38e4-aa2c-42f3-98ea-97b0eb7646cc","name":"Baserow - Create record","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"databaseId":168,"tableId":681,"returnAll":true,"additionalOptions":{"filters":{"fields":[{"field":6622,"operator":"empty"},{"field":6630,"operator":"contains","value":"Processing"}]}}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[-1960,3660],"id":"29160c4e-aca8-49e7-a081-01c8ad834474","name":"Get video","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"databaseId":168,"tableId":682,"additionalOptions":{"filters":{"fields":[{"field":6616,"value":"={{ $json.id }}"}]}}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[-1520,3660],"id":"be1a42f4-1df3-43d4-aaed-ceff8b926612","name":"Get Scenes","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"operation":"update","databaseId":168,"tableId":681,"rowId":"={{ $json.id }}","fieldsUi":{"fieldValues":[{"fieldId":6622,"fieldValue":"={{ $json.response }}"}]}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[-640,3660],"id":"3f45196e-6ebe-45ff-abc5-c40009b1ab04","name":"Baserow","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"method":"POST","url":"https://baserow.aiautomata.co.za/api/user-files/upload-file/","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"contentType":"multipart-form-data","bodyParameters":{"parameters":[{"parameterType":"formBinaryData","name":"file","inputDataFieldName":"data"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-1520,880],"id":"2a8e166c-e20a-4705-bf29-24685f2d6fe2","name":"Upload tts to baserow","credentials":{"httpHeaderAuth":{"id":"eLr9WkAowHbRSmCb","name":"Baserow Auth account"}}},{"parameters":{"databaseId":168,"tableId":681,"returnAll":true,"additionalOptions":{"filters":{"fields":[{"field":6630,"operator":"contains","value":"Processing"}]}}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[-1920,880],"id":"9d081003-d8b7-417c-b9a8-48b3b043e449","name":"Get records","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"databaseId":168,"tableId":681,"returnAll":true,"additionalOptions":{"filters":{"fields":[{"field":6636,"operator":"empty"},{"field":6630,"operator":"contains","value":"Processing"}]}}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[-1940,1500],"id":"ee989c4a-f63b-4fbb-a73f-3ee634f8ac08","name":"Get records1","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"databaseId":168,"tableId":681,"returnAll":true,"additionalOptions":{"filters":{"fields":[{"field":6622,"operator":"empty"},{"field":6630,"operator":"contains","value":"Processing"}]}}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[-1960,3260],"id":"7e58c79a-69ee-4b08-ba8d-3b8c5d61502e","name":"Get video1","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"fieldToSplitOut":"Scenes","options":{}},"type":"n8n-nodes-base.splitOut","typeVersion":1,"position":[-1760,3260],"id":"4b48362f-cb14-423c-a982-3d0d0cf23e8b","name":"Split Out2"},{"parameters":{"operation":"update","databaseId":168,"tableId":681,"rowId":"={{ $('Baserow15').item.json.id }}","fieldsUi":{"fieldValues":[{"fieldId":"={{ 6618 }}","fieldValue":"={{ $json.response[0].file_url }}"},{"fieldId":"={{ 6732 }}","fieldValue":"Done"}]}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[-1480,4660],"id":"d42dae0c-8b62-421d-bab6-774e492bb632","name":"Baserow1","disabled":true},{"parameters":{"model":"openai/gpt-4.1-mini","options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenRouter","typeVersion":1,"position":[-1160,600],"id":"48ea3a5d-1ed7-4bf4-8dbb-1c2297226da8","name":"Open Router - Deepseek v3.1","credentials":{"openRouterApi":{"id":"eni2kFdHGvy7lEd3","name":"OpenRouter account"}}},{"parameters":{"assignments":{"assignments":[{"id":"7cd1dc03-8331-44ba-bda9-848145bab939","name":"Main Script","value":"={{ $json.output.Hook }}{{ $json.output.MainScript }}{{ $json.output.CTA }}","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[-720,340],"id":"54c825a8-7e2c-4aa1-a98a-08d6afacaacf","name":"Combine"},{"parameters":{"assignments":{"assignments":[{"id":"bfd6c0e6-93c2-496a-8f3d-9ebc3061e78f","name":"Script","value":"={{$json['Main Script']\n  .replace(/\\n{2,}/g, \"\")      // Remove multiple newlines\n  .replace(/\\*(.*?)\\*/g, \"$1\") // Remove asterisks around words\n}}\n","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[-500,340],"id":"55a0fbe1-bde2-4f34-86ac-a32e2d15c14f","name":"Format Cleanup"},{"parameters":{"fields":{"values":[{"name":"base64Image","stringValue":"={{ $json.body.data[0].b64_json }}"}]},"options":{}},"id":"a57b9aca-9bf7-4f50-b76a-7f31c6c76f3e","name":"Base64 To String","type":"n8n-nodes-base.set","typeVersion":3.1,"position":[-1120,2440]},{"parameters":{"mode":"jsonToBinary","convertAllData":false,"sourceKey":"base64Image","options":{"dataIsBase64":true,"fileName":"image.png","mimeType":"image/png"}},"id":"2e6161a0-38ab-4225-8708-9502801a519c","name":"Convert String to binary","type":"n8n-nodes-base.moveBinaryData","typeVersion":1,"position":[-900,2440]},{"parameters":{"method":"POST","url":"https://baserow.aiautomata.co.za/api/user-files/upload-file/","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"contentType":"multipart-form-data","bodyParameters":{"parameters":[{"parameterType":"formBinaryData","name":"file","inputDataFieldName":"data"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-680,2440],"id":"8d7e5c15-001d-4914-a50a-9870267c8969","name":"HTTP - Upload To Baserow","credentials":{"httpHeaderAuth":{"id":"eLr9WkAowHbRSmCb","name":"Baserow Auth account"}}},{"parameters":{"method":"POST","url":"https://baserow.aiautomata.co.za/api/user-files/upload-file/","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"contentType":"multipart-form-data","bodyParameters":{"parameters":[{"parameterType":"formBinaryData","name":"file","inputDataFieldName":"data"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-1720,1140],"id":"de44954a-814b-41c0-8907-67c3d56e5146","name":"Upload captions To Baserow","credentials":{"httpHeaderAuth":{"id":"eLr9WkAowHbRSmCb","name":"Baserow Auth account"}}},{"parameters":{"operation":"update","databaseId":168,"tableId":681,"rowId":"={{ $('Get records').item.json.id }}","fieldsUi":{"fieldValues":[{"fieldId":6623,"fieldValue":"={{ $('Upload tts to baserow').item.json.name }}"},{"fieldId":6627,"fieldValue":"={{ $json.url }}"}]}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[-1520,1140],"id":"a98a5de1-586d-483c-8133-5142e6454aaa","name":"Update Record","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"operation":"update","databaseId":168,"tableId":681,"rowId":"={{ $('Get records1').item.json.id }}","fieldsUi":{"fieldValues":[{"fieldId":6636,"fieldValue":"={{ $json.ids }}"}]}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[420,1500],"id":"7afd814a-2e39-402c-ace8-2b6610d8c685","name":"Baserow19","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"jsCode":"// Initialize an array to hold IDs\nconst ids = [];\n\n// Loop over input items\nfor (const item of $input.all()) {\n  // Loop through each 'data' array\n  for (const dataItem of item.json.data) {\n    // Check if 'id' is defined\n    if (dataItem.id) {\n      // Push the ID into the array\n      ids.push(dataItem.id);\n    }\n  }\n}\n\n// Return the array wrapped in an object\nreturn [{ json: { ids } }];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[200,1500],"id":"d2db4242-6f03-4260-a502-e41d03605f47","name":"IDs To Array1"},{"parameters":{"aggregate":"aggregateAllItemData","include":"specifiedFields","fieldsToInclude":"id","options":{}},"type":"n8n-nodes-base.aggregate","typeVersion":1,"position":[-20,1500],"id":"67f22e7c-4514-4c5c-9433-83100a701f20","name":"Aggregate3"},{"parameters":{"operation":"create","databaseId":168,"tableId":682,"fieldsUi":{"fieldValues":[{"fieldId":6626,"fieldValue":"={{ $json.output.Prompt }}"},{"fieldId":6632,"fieldValue":"={{ $('Split Out').item.json.json.duration }}"},{"fieldId":6637,"fieldValue":"={{ $('On form submission').item.json['Image Provider'] }}"}]}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[-240,1500],"id":"1bd628fb-117a-4256-842f-01c23868fe62","name":"Baserow22","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"method":"POST","url":"https://api.together.xyz/v1/images/generations","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"specifyBody":"json","jsonBody":"={\n    \"model\": \"black-forest-labs/FLUX.1-schnell-Free\",\n    \"prompt\": {{ JSON.stringify($json.Prompt) }},\n    \"width\": 576,\n    \"height\": 1024,\n    \"steps\": 4,\n    \"n\": 1,\n    \"response_format\": \"b64_json\"\n   }","options":{"response":{"response":{"fullResponse":true}}}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-1340,2440],"id":"0aec986d-0268-45a9-aef4-948feb9cd099","name":"HTTP - Together.ai","credentials":{"httpHeaderAuth":{"id":"y97zmr8F665tRMyl","name":"Together.ai Auth account"}}},{"parameters":{"rules":{"values":[{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"leftValue":"={{ $('Loop Over Items').item.json['Image Provider'].value }}","rightValue":"fal.ai","operator":{"type":"string","operation":"equals"},"id":"eaf1a214-ae9e-455f-889b-5fb2f010b2a6"}],"combinator":"and"},"renameOutput":true,"outputKey":"fal.ai"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"3e78a869-ccdb-4d17-b4f0-bc61733f6232","leftValue":"={{ $('Loop Over Items').item.json['Image Provider'].value }}","rightValue":"together.ai","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"together.ai"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"18ede95f-0440-4e1b-b55e-48ccbfb32dab","leftValue":"={{ $('Loop Over Items').item.json['Image Provider'].value }}","rightValue":"Fluxpro.ai","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"Fluxpro.ai"}]},"options":{}},"type":"n8n-nodes-base.switch","typeVersion":3.2,"position":[-1560,2120],"id":"bec39717-cb0a-49ee-9040-7e839c386f9e","name":"Switch - Image Provider"},{"parameters":{"databaseId":168,"tableId":682,"returnAll":true,"additionalOptions":{"filters":{"fields":[{"field":6633,"operator":"empty"}]}}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[-1940,2140],"id":"bde02f33-c54d-4607-bd76-549c1e4196e4","name":"Get scenes","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"method":"POST","url":"https://queue.fal.run/fal-ai/flux/schnell","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"bodyParameters":{"parameters":[{"name":"prompt","value":"={{ JSON.stringify($json.Prompt) }}"},{"name":"image_size","value":"portrait_16_9"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-1340,2020],"id":"83805499-f359-425b-97ba-375ee2ee582d","name":"fal.ai - Submit request","disabled":true},{"parameters":{"assignments":{"assignments":[{"id":"6631ecc8-bcf2-43b1-8fa4-63b23795815f","name":"status_url","value":"={{ $json.status_url }}","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[-460,2120],"id":"bf5fe648-6379-4b9b-830a-1ca8ffab33f4","name":"set status_url"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"393f74e8-2678-4e29-9831-bcd043da904b","leftValue":"={{ $json.status }}","rightValue":"COMPLETED","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[-920,2020],"id":"58edd55b-5185-46c8-af01-112142d2569c","name":"If complete","disabled":true},{"parameters":{"method":"POST","url":"http://host.docker.internal:85/api/user-files/upload-file/","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"contentType":"multipart-form-data","bodyParameters":{"parameters":[{"parameterType":"formBinaryData","name":"file","inputDataFieldName":"data"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-240,1940],"id":"4f757f4c-a518-4d56-9804-c3d612a9c863","name":"HTTP - Upload To Baserow1","disabled":true},{"parameters":{},"type":"n8n-nodes-base.noOp","name":"Passthrough","typeVersion":1,"position":[120,2240],"id":"73181628-0876-4253-8040-c8551a7d9f85"},{"parameters":{"content":"## together.ai FREE - Has rate limits so much slower due to batching","height":260,"width":1380},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[-1360,2340],"id":"2497aef2-3810-46de-bbc1-b1785dedb878","name":"Sticky Note5"},{"parameters":{"content":"## fal.ai - Much faster.\n$0.003 - $1 you can run this model approximately 333 times.","height":380,"width":1540,"color":3},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[-1400,1900],"id":"616fa728-269e-4860-bec5-3a6147ae3642","name":"Sticky Note9"},{"parameters":{"url":"={{ $json.status_url }}","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-1120,2020],"id":"8019e403-c3fc-4cbd-9226-4c8674f59b83","name":"HTTP - get status","disabled":true},{"parameters":{"url":"={{ $json.response_url }}","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-680,1920],"id":"d2fc9305-bd7f-4554-83cb-f3c5226a7d06","name":"HTTP - get image url","disabled":true},{"parameters":{"url":"={{ $json.images[0].url }}","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-460,1920],"id":"58597eb2-30e1-4dd4-ae47-d8dbd8126229","name":"HTTP Download Image","disabled":true},{"parameters":{"operation":"update","databaseId":94,"tableId":682,"rowId":"={{ $('Loop Over Items').item.json.id }}","fieldsUi":{"fieldValues":[{"fieldId":6627,"fieldValue":"={{ $json.name }}"}]}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[-40,1940],"id":"737befbe-84f4-48b3-96d8-2ccbcf9e317d","name":"Update Scene record","disabled":true},{"parameters":{"amount":1},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[-680,2100],"id":"952329e6-7cdd-4619-b3f5-537b3655a515","name":"Wait 1s","webhookId":"833a4309-7169-43f7-bfc3-edfe58e50d97"},{"parameters":{"model":"openai/o3-mini","options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenRouter","typeVersion":1,"position":[-680,1620],"id":"c9e7dae2-59c3-47a2-b329-a9d6d56c82cf","name":"Open Router - Deepseek v3.","credentials":{"openRouterApi":{"id":"eni2kFdHGvy7lEd3","name":"OpenRouter account"}}},{"parameters":{"promptType":"define","text":"=The Topic:\n{{ $json[\"User Input\"] }}\n\nRough Duration:\n{{ $('Set Idea').item.json['Script Duration'] }}","messages":{"messageValues":[{"message":"=You are an expert script formatter for YouTube video content. Your role is to take the script provided by the user and ensure it is perfectly formatted and ready for the next step in production. Do not alter the content, tone, or wording of the script in any way. Your sole responsibility is to organize the script into the specified structure, correct any formatting issues, and make sure it is clean, consistent, and professional.\n\nFormatting Instructions:\n\nOrganize the script into the following sections:\n\nTitle: [Title as provided by the user, or clearly marked in the script]\n\nDescription: [Description as provided by the user, or clearly marked in the script]\n\nHook: [Hook as provided by the user, or clearly marked in the script]\n\nMainScript: [Main script content, as provided]\n\nCall to Action: [Call to action as provided by the user, or clearly marked in the script]\n\nEnsure each section is clearly labeled and separated.\n\nRemove any unnecessary line breaks, extra spaces, or inconsistent formatting within each section.\n\nIf any section is missing, leave it blank but include the section header.\n\nDo NOT change, rewrite, or add to the user’s script content in any way.\n\nDo NOT add or remove emojis or line breaks from the script content.\n\nDo NOT reference the user or yourself in the output.\n\nOutput Example:\n\nTitle: [User’s title]\n\nDescription: [User’s description]\n\nHook: [User’s hook]\n\nMainScript: [User’s main script]\n\nCall to Action: [User’s call to action]\n\nYour output should be clean, organized, and ready for the next step in the workflow.\n\nLet me know if you’d like this prompt adjusted for a specific workflow, or if you need a version for a different content format!"}]}},"type":"@n8n/n8n-nodes-langchain.chainLlm","typeVersion":1.5,"position":[-1480,540],"id":"8828d44a-7f7a-489b-8992-19483a5c5bb9","name":"User Script format"},{"parameters":{"content":"## Fluxpro.ai ","height":260,"width":1380},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[-1340,2680],"id":"a948c89f-af91-462a-86f4-c13a5d98745e","name":"Sticky Note10"},{"parameters":{"amount":10},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[220,2800],"id":"58da666b-77aa-421d-a166-0ba5998f2a79","name":"Wait","webhookId":"417c1874-053b-4a23-b40b-2378fa533a7f"},{"parameters":{"operation":"update","databaseId":168,"tableId":682,"rowId":"={{ $('Loop Over Items').item.json.id }}","fieldsUi":{"fieldValues":[{"fieldId":6633,"fieldValue":"={{ $json.name }}"}]}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[0,2800],"id":"c0ae8dc1-5ac5-429d-926b-adb062aefc3d","name":"Baserow23","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"fields":{"values":[{"name":"base64Image","stringValue":"={{ $json.body.data[0].b64_json }}"}]},"options":{}},"id":"624af42e-7e1d-4457-9ca1-720abf6d4ba1","name":"Base64 To String1","type":"n8n-nodes-base.set","typeVersion":3.1,"position":[-520,2800]},{"parameters":{"mode":"jsonToBinary","convertAllData":false,"sourceKey":"base64Image","options":{"dataIsBase64":true,"fileName":"image.png","mimeType":"image/png"}},"id":"07e8ba2b-f8fe-4c11-a0fc-f1d7e07adee3","name":"Convert String to binary1","type":"n8n-nodes-base.moveBinaryData","typeVersion":1,"position":[-340,2800]},{"parameters":{"method":"POST","url":"https://baserow.aiautomata.co.za/api/user-files/upload-file/","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"contentType":"multipart-form-data","bodyParameters":{"parameters":[{"parameterType":"formBinaryData","name":"file","inputDataFieldName":"data"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-180,2700],"id":"e95a1cd2-d00b-420b-93e9-39954943b635","name":"HTTP - Upload To Baserow2","credentials":{"httpHeaderAuth":{"id":"eLr9WkAowHbRSmCb","name":"Baserow Auth account"}}},{"parameters":{"method":"POST","url":"https://api.together.xyz/v1/images/generations","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"specifyBody":"json","jsonBody":"={\n    \"model\": \"black-forest-labs/FLUX.1.1-pro\",\n    \"prompt\": {{ JSON.stringify($json.Prompt) }},\n    \"width\": 576,\n    \"height\": 1024,\n    \"steps\": 4,\n    \"n\": 1,\n    \"response_format\": \"b64_json\"\n   }\n","options":{"response":{"response":{"fullResponse":true}}}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-1960,2740],"id":"09ce4f9f-c9ec-4ed4-ae4f-700bab1f5a41","name":"HTTP - Together.ai1","credentials":{"httpHeaderAuth":{"id":"y97zmr8F665tRMyl","name":"Together.ai Auth account"}}},{"parameters":{"method":"POST","url":"https://api.replicate.com/v1/models/black-forest-labs/flux-1.1-pro-ultra/predictions","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"application/json"}]},"sendBody":true,"specifyBody":"json","jsonBody":"={\n\"input\": {\n\"prompt\": \"{{ $json.text }}\",\n\"seed\": 42,\n\"steps\": 50,\n\"guidance\": 5,\n\"interval\": 1,\n\"aspect_ratio\": \"9:16\",\n\"safety_tolerance\": 3\n\n}\n}\n\n","options":{}},"id":"10b9984a-aa9d-40d5-86f6-58217069fe0b","name":"Start Image Generation1","type":"n8n-nodes-base.httpRequest","typeVersion":4.1,"position":[-1240,2760],"credentials":{"httpHeaderAuth":{"id":"JlfTRouEz1b1K4bJ","name":"Flux Replicate Auth account"}}},{"parameters":{"promptType":"define","text":"=Your task is:\nUpdate prompt that can be used in Flux image generator.\nIf the descriprion is to log you can make it shorter\n\n1. Read the input text provided below.\n2. Extract ONLY the actual descriptive text content that follows each heading and sub-point.\n3. Combine all these extracted pieces of text into a single, continuous block of plain text. Use spaces to separate the different pieces naturally.\n4. REMOVE all original headings (e.g., remove \"**Environment:**\", \"**Style:**\").\n5. REMOVE all formatting markers (e.g., remove the `**` characters, remove `- ` list markers).\n6. The final output must be ONLY this combined plain text string. Do not add any explanations, introductory phrases, or any JSON formatting.\n7. Also make sure that the informtion is not \n\nInput Text: {{ JSON.stringify($json.Prompt) }}\"","messages":{"messageValues":[{"type":"HumanMessagePromptTemplate","message":"="}]}},"type":"@n8n/n8n-nodes-langchain.chainLlm","typeVersion":1.5,"position":[-1620,2760],"id":"d51de1d0-3af5-4ddd-8c51-59fccb1fc25b","name":"Basic LLM Chain"},{"parameters":{"options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenRouter","typeVersion":1,"position":[-1540,2980],"id":"4728f127-3b7a-4a64-b7b4-468a71c230a4","name":"OpenRouter Chat Model","credentials":{"openRouterApi":{"id":"eni2kFdHGvy7lEd3","name":"OpenRouter account"}}},{"parameters":{"amount":30},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[-1080,2760],"id":"ad23f32c-dc84-4ef3-afe9-96c08bbe173d","name":"Wait2","webhookId":"417c1874-053b-4a23-b40b-2378fa533a7f"},{"parameters":{"url":"={{ $json.urls.get }}","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"application/json"}]},"options":{}},"id":"22d8bf44-ff8e-445b-bd0c-5128e7a83b53","name":"Get Image Result1","type":"n8n-nodes-base.httpRequest","typeVersion":4.1,"position":[-840,2760],"credentials":{"httpHeaderAuth":{"id":"JlfTRouEz1b1K4bJ","name":"Flux Replicate Auth account"}}},{"parameters":{"url":"={{ $json.output }}","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-640,2680],"id":"5a1fb676-e80f-4da9-9d62-e23223049667","name":"HTTP Download Image1"},{"parameters":{"formTitle":"Short form Video","formFields":{"values":[{"fieldLabel":"The Main Topic","placeholder":"Your text","requiredField":true},{"fieldLabel":"Duration","fieldType":"dropdown","fieldOptions":{"values":[{"option":"30 Second"},{"option":"1 Minute"},{"option":"2 Minutes"}]}},{"fieldLabel":"Generative Style","fieldType":"dropdown","fieldOptions":{"values":[{"option":"Lego"},{"option":"Minecraft"},{"option":"Disney Pixar"},{"option":"Hand-Drawn"},{"option":"Chibi"},{"option":"Anime"},{"option":"Hyper-Realistic"},{"option":"Cyberpunk"},{"option":"fantasy"}]}},{"fieldLabel":"Video Type","fieldType":"dropdown","fieldOptions":{"values":[{"option":"From user idea"},{"option":"From transcript"},{"option":"From script"}]}}]},"options":{}},"type":"n8n-nodes-base.formTrigger","typeVersion":2.2,"position":[-3060,1900],"id":"8c36a3e5-0bf2-4de3-8519-0d80567f9db7","name":"On form submission1","webhookId":"30b87a3a-cc73-4e30-bd3b-ce03913e320f"}],"connections":{"Set Idea":{"main":[[{"node":"Switch","type":"main","index":0}]]},"Create Clips":{"main":[[{"node":"Baserow5","type":"main","index":0}]]},"Combine Clips":{"main":[[{"node":"Baserow","type":"main","index":0}]]},"Aggregate1":{"main":[[{"node":"Video url to array","type":"main","index":0}]]},"Loop Over Items3":{"main":[[],[{"node":"Create Clips","type":"main","index":0}]]},"Video url to array":{"main":[[{"node":"Combine Clips","type":"main","index":0}]]},"Combine Clips3":{"main":[[{"node":"Baserow12","type":"main","index":0}]]},"Add Music":{"main":[[{"node":"Baserow1","type":"main","index":0}]]},"Split Out1":{"main":[[{"node":"Get Scenes","type":"main","index":0}]]},"Get Captions":{"main":[[{"node":"Upload captions To Baserow","type":"main","index":0}]]},"Generate TTS":{"main":[[{"node":"Upload tts to baserow","type":"main","index":0}]]},"Aggregate":{"main":[[{"node":"Split into 5s Scenes","type":"main","index":0}]]},"Split Out":{"main":[[{"node":"Image Prompter V2 📷","type":"main","index":0}]]},"Fixer":{"main":[[{"node":"Split Out","type":"main","index":0}]]},"Get Segment File":{"main":[[{"node":"Aggregate","type":"main","index":0}]]},"Split into 5s Scenes":{"main":[[{"node":"Fixer","type":"main","index":0}]]},"Create Captions":{"main":[[{"node":"Baserow14","type":"main","index":0}]]},"Baserow4":{"main":[[{"node":"Loop Over Items3","type":"main","index":0}]]},"Baserow5":{"main":[[{"node":"Loop Over Items3","type":"main","index":0}]]},"Baserow11":{"main":[[{"node":"Combine Clips3","type":"main","index":0}]]},"Baserow13":{"main":[[{"node":"Create Captions","type":"main","index":0}]]},"Baserow15":{"main":[[{"node":"Add Music","type":"main","index":0}]]},"On form submission":{"main":[[]]},"Structured Output Parser1":{"ai_outputParser":[[{"node":"Output Parser 🛠","type":"ai_outputParser","index":0}]]},"Structured Output Parser2":{"ai_outputParser":[[{"node":"Image Prompter V2 📷","type":"ai_outputParser","index":0}]]},"Script Writier 🧠":{"main":[[{"node":"Output Parser 🛠","type":"main","index":0}]]},"Output Parser 🛠":{"main":[[{"node":"Combine","type":"main","index":0}]]},"Switch":{"main":[[{"node":"Long form to Script Writier 🧠","type":"main","index":0}],[{"node":"Script Writier 🧠","type":"main","index":0}],[{"node":"User Script format","type":"main","index":0}]]},"Image Prompter V2 📷":{"main":[[{"node":"Baserow22","type":"main","index":0}]]},"Loop Over Items":{"main":[[],[{"node":"Switch - Image Provider","type":"main","index":0}]]},"Wait1":{"main":[[{"node":"Loop Over Items","type":"main","index":0}]]},"Baserow21":{"main":[[{"node":"Wait1","type":"main","index":0}]]},"Long form to Script Writier 🧠":{"main":[[{"node":"Output Parser 🛠","type":"main","index":0}]]},"Get video":{"main":[[{"node":"Split Out1","type":"main","index":0}]]},"Get Scenes":{"main":[[{"node":"Aggregate1","type":"main","index":0}]]},"Upload tts to baserow":{"main":[[{"node":"Get Captions","type":"main","index":0}]]},"Get records":{"main":[[{"node":"Generate TTS","type":"main","index":0}]]},"Get records1":{"main":[[{"node":"Get Segment File","type":"main","index":0}]]},"Get video1":{"main":[[{"node":"Split Out2","type":"main","index":0}]]},"Split Out2":{"main":[[{"node":"Baserow4","type":"main","index":0}]]},"Open Router - Deepseek v3.1":{"ai_languageModel":[[{"node":"Long form to Script Writier 🧠","type":"ai_languageModel","index":0},{"node":"Output Parser 🛠","type":"ai_languageModel","index":0},{"node":"Script Writier 🧠","type":"ai_languageModel","index":0},{"node":"User Script format","type":"ai_languageModel","index":0}]]},"Combine":{"main":[[{"node":"Format Cleanup","type":"main","index":0}]]},"Format Cleanup":{"main":[[{"node":"Baserow - Create record","type":"main","index":0}]]},"Base64 To String":{"main":[[{"node":"Convert String to binary","type":"main","index":0}]]},"Convert String to binary":{"main":[[{"node":"HTTP - Upload To Baserow","type":"main","index":0}]]},"HTTP - Upload To Baserow":{"main":[[{"node":"Baserow21","type":"main","index":0}]]},"Upload captions To Baserow":{"main":[[{"node":"Update Record","type":"main","index":0}]]},"IDs To Array1":{"main":[[{"node":"Baserow19","type":"main","index":0}]]},"Aggregate3":{"main":[[{"node":"IDs To Array1","type":"main","index":0}]]},"Baserow22":{"main":[[{"node":"Aggregate3","type":"main","index":0}]]},"HTTP - Together.ai":{"main":[[{"node":"Base64 To String","type":"main","index":0}]]},"Switch - Image Provider":{"main":[[{"node":"fal.ai - Submit request","type":"main","index":0}],[{"node":"HTTP - Together.ai","type":"main","index":0}],[{"node":"Basic LLM Chain","type":"main","index":0}]]},"Get scenes":{"main":[[{"node":"Loop Over Items","type":"main","index":0}]]},"fal.ai - Submit request":{"main":[[{"node":"HTTP - get status","type":"main","index":0}]]},"set status_url":{"main":[[{"node":"HTTP - get status","type":"main","index":0}]]},"If complete":{"main":[[{"node":"HTTP - get image url","type":"main","index":0}],[{"node":"Wait 1s","type":"main","index":0}]]},"HTTP - Upload To Baserow1":{"main":[[{"node":"Update Scene record","type":"main","index":0}]]},"Passthrough":{"main":[[{"node":"Loop Over Items","type":"main","index":0}]]},"HTTP - get status":{"main":[[{"node":"If complete","type":"main","index":0}]]},"HTTP - get image url":{"main":[[{"node":"HTTP Download Image","type":"main","index":0}]]},"HTTP Download Image":{"main":[[{"node":"HTTP - Upload To Baserow1","type":"main","index":0}]]},"Update Scene record":{"main":[[{"node":"Passthrough","type":"main","index":0}]]},"Wait 1s":{"main":[[{"node":"set status_url","type":"main","index":0}]]},"Open Router - Deepseek v3.":{"ai_languageModel":[[{"node":"Image Prompter V2 📷","type":"ai_languageModel","index":0}]]},"User Script format":{"main":[[{"node":"Output Parser 🛠","type":"main","index":0}]]},"Baserow23":{"main":[[{"node":"Wait","type":"main","index":0}]]},"Base64 To String1":{"main":[[{"node":"Convert String to binary1","type":"main","index":0}]]},"Convert String to binary1":{"main":[[]]},"HTTP - Upload To Baserow2":{"main":[[{"node":"Baserow23","type":"main","index":0}]]},"HTTP - Together.ai1":{"main":[[]]},"Wait":{"main":[[{"node":"Loop Over Items","type":"main","index":0}]]},"Start Image Generation1":{"main":[[{"node":"Wait2","type":"main","index":0}]]},"Basic LLM Chain":{"main":[[{"node":"Start Image Generation1","type":"main","index":0}]]},"OpenRouter Chat Model":{"ai_languageModel":[[{"node":"Basic LLM Chain","type":"ai_languageModel","index":0}]]},"Wait2":{"main":[[{"node":"Get Image Result1","type":"main","index":0}]]},"Get Image Result1":{"main":[[{"node":"HTTP Download Image1","type":"main","index":0}]]},"HTTP Download Image1":{"main":[[{"node":"HTTP - Upload To Baserow2","type":"main","index":0}]]},"On form submission1":{"main":[[{"node":"Set Idea","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":null,"pinData":{},"versionId":"ddbb3023-d0a3-4aec-8280-c464babbbfbb","triggerCount":0,"shared":[{"createdAt":"2025-05-21T02:32:23.090Z","updatedAt":"2025-05-21T02:32:23.090Z","role":"workflow:owner","workflowId":"S3LdS0HZCiLq1Gfk","projectId":"pRXFeKq9D8e0hAOx"}],"tags":[]},{"createdAt":"2025-08-27T01:15:07.699Z","updatedAt":"2025-09-04T10:21:25.000Z","id":"SiBv16l5YK6pVAbN","name":"Email Processor","active":true,"isArchived":false,"nodes":[{"parameters":{"rules":{"values":[{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":1},"conditions":[{"leftValue":"={{ $json.contentSourceType }}","operator":{"type":"string","operation":"equals"},"rightValue":"url","id":"url-condition"}],"combinator":"and"},"renameOutput":true,"outputKey":"url"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":1},"conditions":[{"leftValue":"={{ $json.contentSourceType }}","operator":{"type":"string","operation":"equals"},"rightValue":"text","id":"text-condition"}],"combinator":"and"},"renameOutput":true,"outputKey":"text"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":1},"conditions":[{"leftValue":"={{ $json.contentSourceType }}","operator":{"type":"string","operation":"equals"},"rightValue":"minimal","id":"minimal-condition"}],"combinator":"and"},"renameOutput":true,"outputKey":"minimal"}]},"options":{}},"name":"Content Source Router","typeVersion":3,"id":"013bbe55-d29e-4d0d-aaa1-6333de509c63","position":[80,1440],"type":"n8n-nodes-base.switch"},{"parameters":{"url":"={{ $json.sourceContent }}","sendHeaders":true,"headerParameters":{"parameters":[{"name":"User-Agent","value":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"}]},"options":{"redirect":{"redirect":{"maxRedirects":5}},"timeout":30000}},"name":"Fetch URL Content","typeVersion":4.2,"id":"566a93c8-3aeb-40a5-adee-aa4f657a32e1","position":[320,1340],"type":"n8n-nodes-base.httpRequest"},{"parameters":{"extractionValues":{"values":[{"key":"title","cssSelector":"title"},{"key":"description","cssSelector":"meta[name=\"description\"]","returnValue":"attribute","attribute":"content"},{"key":"main_content","cssSelector":"article, main, .content, .post-content, .entry-content, p"},{"key":"headings","cssSelector":"h1, h2, h3"}]},"options":{}},"name":"Extract HTML Content","typeVersion":1,"id":"9b38e5b9-3aa1-40f2-a8e8-5d2b8221f620","position":[560,1340],"type":"n8n-nodes-base.htmlExtract"},{"parameters":{"jsCode":"// CLEAN URL CONTENT FOR EMAIL PROCESSING\nconst payload = $json;\n\nconsole.log('=== CLEAN URL CONTENT FOR EMAIL ===');\n\n// Get the original email data\nconst originalData = $('Email Data Extractor').first()?.json;\nif (!originalData) {\n  throw new Error('❌ Could not get original email data');\n}\n\n// Extract and clean the web content\nconst extractedData = payload;\n\nlet cleanedContent = '';\n\n// Add title if available\nif (extractedData.title && extractedData.title.trim()) {\n  cleanedContent += `Title: ${extractedData.title.trim()}\\n\\n`;\n}\n\n// Add description if available\nif (extractedData.description && extractedData.description.trim()) {\n  cleanedContent += `Description: ${extractedData.description.trim()}\\n\\n`;\n}\n\n// Add headings if available\nif (extractedData.headings && Array.isArray(extractedData.headings)) {\n  const headings = extractedData.headings.filter(h => h && h.trim()).join('\\n');\n  if (headings) {\n    cleanedContent += `Key Headings:\\n${headings}\\n\\n`;\n  }\n}\n\n// Add main content if available\nif (extractedData.main_content) {\n  let mainContent = '';\n  if (Array.isArray(extractedData.main_content)) {\n    mainContent = extractedData.main_content.filter(p => p && p.trim()).join('\\n\\n');\n  } else {\n    mainContent = extractedData.main_content.trim();\n  }\n  \n  if (mainContent) {\n    cleanedContent += `Main Content:\\n${mainContent}`;\n  }\n}\n\n// Clean up the content\ncleanedContent = cleanedContent\n  .replace(/\\s+/g, ' ')\n  .replace(/\\n\\s*\\n/g, '\\n\\n')\n  .trim();\n\n// Limit content length for email processing\nif (cleanedContent.length > 3000) {\n  cleanedContent = cleanedContent.substring(0, 3000) + '... [content truncated for email]';\n}\n\n// Merge with original email data\nconst processedData = {\n  ...originalData,\n  \n  // Add processed URL content\n  processedUrlContent: cleanedContent || 'No content could be extracted from the URL',\n  sourceContent: cleanedContent || originalData.sourceContent,\n  urlProcessingComplete: true,\n  contentReady: true,\n  \n  // Update processing status\n  processingNotes: `URL content extracted and cleaned. Length: ${cleanedContent.length} characters`,\n  \n  debugInfo: {\n    ...originalData.debugInfo,\n    urlProcessingCompleted: true,\n    extractedContentLength: cleanedContent.length,\n    urlExtractionSuccessful: !!cleanedContent\n  }\n};\n\nconsole.log('✅ URL content processed for email generation');\nconsole.log(`✅ Content length: ${cleanedContent.length} characters`);\n\nreturn {\n  json: processedData\n};"},"name":"Clean URL Content","typeVersion":1,"id":"d9121cf2-576c-4168-a264-d2d4aa78a2b2","position":[800,1340],"type":"n8n-nodes-base.code"},{"parameters":{"jsCode":"// PROCESS TEXT CONTENT FOR EMAIL\nconst payload = $json;\n\nconsole.log('=== PROCESS TEXT CONTENT FOR EMAIL ===');\n\n// Text content is already ready, just mark as processed\nconst processedData = {\n  ...payload,\n  contentReady: true,\n  processingNotes: 'Text content ready for email generation',\n  \n  debugInfo: {\n    ...payload.debugInfo,\n    textProcessingCompleted: true,\n    contentLength: payload.sourceContent?.length || 0\n  }\n};\n\nconsole.log('✅ Text content ready for email generation');\n\nreturn {\n  json: processedData\n};"},"name":"Process Text Content","typeVersion":1,"id":"9d46a362-08a2-4607-afce-0825f4e16610","position":[800,1460],"type":"n8n-nodes-base.code"},{"parameters":{"jsCode":"// PROCESS MINIMAL CONTENT FOR EMAIL\nconst payload = $json;\n\nconsole.log('=== PROCESS MINIMAL CONTENT FOR EMAIL ===');\n\n// For minimal content, we'll rely on hook and CTA\nconst processedData = {\n  ...payload,\n  contentReady: true,\n  processingNotes: 'Minimal content - using hook and CTA for email generation',\n  \n  debugInfo: {\n    ...payload.debugInfo,\n    minimalProcessingCompleted: true,\n    usingHookAndCTAOnly: true\n  }\n};\n\nconsole.log('✅ Minimal content ready for email generation');\n\nreturn {\n  json: processedData\n};"},"name":"Process Minimal Content","typeVersion":1,"id":"917938b8-73ce-416d-b644-00961954af0b","position":[800,1640],"type":"n8n-nodes-base.code"},{"parameters":{"promptType":"define","text":"==You are an expert Email Marketing AI with access to email templates, brand assets, and dynamic image mapping. Create personalized, engaging email content that adapts to any template structure and MUST use the user's actual images.\n\n## CONTEXT\n**Email Details:**\n- Email Name: {{ $json.emailIdeaName }}\n- Email Type: {{ $json.emailType }}\n- Hook: {{ $json.hook }}\n- CTA: {{ $json.cta }}\n- Client: {{ $json.clientName }}\n- Content: {{ $json.sourceContent }}\n\n**Template HTML (Pre-fetched):**\n{{ $json.templateHtml }}\n\n**ORGANIZED USER IMAGES (CRITICAL - USE THESE EXACT URLS):**\n{{ JSON.stringify($json.organizedImages, null, 2) }}\n\n**Available Image Mappings:**\n{{ Object.entries($json.organizedImages || {}).map(([key, img]) => `- ${key}: ${img.imageUrl} (from user's \"${img.position}\")`).join('\\n') }}\n\n## CRITICAL IMAGE REPLACEMENT INSTRUCTIONS\n\n**YOU MUST REPLACE ALL PLACEHOLDER IMAGES WITH USER'S ACTUAL IMAGES:**\n\n1. **Find ALL image src attributes** in the template HTML that contain:\n   - `via.placeholder.com`\n   - `placeholder`\n   - `example.com`\n   - Any generic/demo image URLs\n\n2. **Replace them with organized user images:**\n   - Hero/banner images → Use `promo_hero_banner` or `newsletter_header` from organizedImages\n   - Product/content images → Use `product_1_image`, `product_2_image` from organizedImages\n   - Logo images → Use appropriate user image or keep existing if it's a real logo\n\n3. **Example replacement pattern:**\n\n3. **Map User Images Dynamically**:\n   \n**Process:**\n- Find placeholder image URLs in the template HTML\n- Look up the appropriate real image URL from organizedImages\n- Replace the placeholder with the actual Baserow URL\n- Keep all other img attributes (width, height, alt, style, etc.) the same\n\n\n\n4. **If template has more image slots than user provided:**\n- Use user images for the most important positions first\n- Keep remaining placeholders only if no user image is available\n\n## TASK SEQUENCE\n\n1. **First**: Use the Brand Asset tool to fetch email brand guidelines (search table {{ $json.brandAssetsTableId }} where Platform field contains \"Email\")\n\n2. **Then**: Analyze the template HTML and identify ALL image src attributes\n\n3. **Replace Images**: Go through EVERY image in the template and replace placeholder URLs with actual user image URLs from organizedImages\n\n4. **Generate Content**: Create compelling email content following brand guidelines\n\n5. **Replace Content Placeholders**: Fill in all text/content placeholders with generated content\n\n## ADAPTIVE INSTRUCTIONS\n\n**For Image Mapping (MOST IMPORTANT):**\n- NEVER leave placeholder images (via.placeholder.com) in the final HTML\n- Use the exact URLs from organizedImages: {{ JSON.stringify($json.organizedImages) }}\n- Map intelligently: Header Image → hero sections, Body Images → product/content sections\n- Preserve image dimensions and styling from template\n\n**For Content Generation:**\n- Follow brand guidelines from Brand Asset tool\n- Adapt content style to email type ({{ $json.emailType }})\n- Incorporate user's hook ({{ $json.hook }}) and CTA ({{ $json.cta }}) naturally\n- Generate appropriate content for ALL template placeholders\n\n**For Template Flexibility:**\n- Work with any template structure (promotional, newsletter, welcome, etc.)\n- Identify and replace ALL placeholders in the template\n- Maintain template's visual design and responsive structure\n- Ensure all links, images, and content are properly formatted\n\n## OUTPUT FORMAT\nReturn a JSON object with these fields:\n- success: true\n- emailIdeaName: \"{{ $json.emailIdeaName }}\"\n- emailType: \"{{ $json.emailType }}\"\n- generatedHtml: \"complete HTML with ALL placeholders replaced and ALL user images properly mapped\"\n- subjectLine: \"compelling subject line following brand guidelines\"\n- previewText: \"preview text for email clients\"\n- emailBody: \"main email body text version\"\n- personalizedHook: \"enhanced hook based on brand guidelines\"\n- personalizedCTA: \"enhanced CTA based on brand guidelines\"\n- templateUsed: \"{{ $json.templateData.field_7205 }}\"\n- contentSummary: \"brief summary of generated content and image mapping\"\n- generationNotes: \"notes about content generation, brand compliance, and image mapping decisions\"\n\n**CRITICAL SUCCESS CRITERIA**: \n- NO placeholder images (via.placeholder.com) in final HTML\n- ALL user images from organizedImages must be used in appropriate template positions\n- Final HTML must be complete and ready to send\n- Use Brand Asset tool for brand guidelines compliance\n- The organizedImages object contains the user's actual image URLs that MUST be used\n","hasOutputParser":true,"options":{"systemMessage":"=You are an Email Marketing AI Agent with access to:\n✅ Email template database for structure and design\n✅ Content generation capabilities for personalized messaging\n✅ Email best practices and optimization techniques\n✅ Template placeholder replacement and HTML formatting\n\nYour role is to create compelling, personalized email content that combines user input with professional email templates, ensuring the final output is ready for email marketing platforms.\n\nAlways base email generation on:\n1. Selected email template (for structure and design)\n2. User's specific hook and CTA (for personalization)\n3. Email type requirements (for appropriate messaging)\n4. Content source material (for relevant information)\n5. Email marketing best practices (for effectiveness)\n\nOutput structured JSON with complete HTML email content ready for deployment."}},"id":"6b9be42d-896b-490e-82b9-130a078782e8","name":"Email Generation AI Agent","type":"@n8n/n8n-nodes-langchain.agent","typeVersion":2,"position":[1460,1440]},{"parameters":{"model":"anthropic/claude-3.7-sonnet:thinking","options":{}},"name":"OpenRouter Chat Model","typeVersion":1,"id":"f7641a83-3692-447a-87c7-6b867db40d44","position":[1320,1760],"type":"@n8n/n8n-nodes-langchain.lmChatOpenRouter","credentials":{"openRouterApi":{"id":"eni2kFdHGvy7lEd3","name":"OpenRouter account"}}},{"parameters":{"schemaType":"manual","inputSchema":"{\n  \"type\": \"object\",\n  \"properties\": {\n    \"success\": {\n      \"type\": \"boolean\",\n      \"description\": \"Indicates if the email generation was successful\"\n    },\n    \"emailIdeaName\": {\n      \"type\": \"string\",\n      \"description\": \"The name of the email idea\"\n    },\n    \"emailType\": {\n      \"type\": \"string\",\n      \"description\": \"The type of email (Newsletter, Promotional, Welcome, etc.)\"\n    },\n    \"generatedHtml\": {\n      \"type\": \"string\",\n      \"description\": \"Complete HTML email content with all placeholders replaced\"\n    },\n    \"subjectLine\": {\n      \"type\": \"string\",\n      \"description\": \"Compelling subject line for the email\"\n    },\n    \"previewText\": {\n      \"type\": \"string\",\n      \"description\": \"Preview text that appears in email clients\"\n    },\n    \"emailBody\": {\n      \"type\": \"string\",\n      \"description\": \"Main email body content (text version)\"\n    },\n    \"personalizedHook\": {\n      \"type\": \"string\",\n      \"description\": \"Enhanced version of the user's hook\"\n    },\n    \"personalizedCTA\": {\n      \"type\": \"string\",\n      \"description\": \"Enhanced version of the user's CTA\"\n    },\n    \"templateUsed\": {\n      \"type\": \"string\",\n      \"description\": \"Name of the template that was used\"\n    },\n    \"contentSummary\": {\n      \"type\": \"string\",\n      \"description\": \"Brief summary of the generated email content (100-200 words)\"\n    },\n    \"generationNotes\": {\n      \"type\": \"string\",\n      \"description\": \"Notes about how the content was generated and what was emphasized\"\n    }\n  },\n  \"required\": [\n    \"success\",\n    \"emailIdeaName\",\n    \"emailType\",\n    \"generatedHtml\",\n    \"subjectLine\",\n    \"previewText\",\n    \"emailBody\",\n    \"personalizedHook\",\n    \"personalizedCTA\",\n    \"templateUsed\",\n    \"contentSummary\",\n    \"generationNotes\"\n  ],\n  \"additionalProperties\": false\n}"},"type":"@n8n/n8n-nodes-langchain.outputParserStructured","typeVersion":1.3,"position":[1700,1720],"id":"d2456e70-e2a0-4995-a67a-e4e99ef089d0","name":"Structured Output Parser"},{"parameters":{"jsCode":"// SAVE GENERATED HTML TO BASEROW - SIMPLE VERSION\n// Only updates the HTML field in the existing email idea row\n\nconst aiResponse = $json;\n\nconsole.log('=== SAVE GENERATED HTML TO BASEROW ===');\n\n// Get the original email data\nconst originalData = $('Email Data Extractor').first()?.json;\nif (!originalData) {\n  throw new Error('❌ Could not get original email data for Baserow save');\n}\n\n// Extract AI response from output field\nlet processedAiResponse = null;\n\nif (aiResponse.output && typeof aiResponse.output === 'object') {\n  processedAiResponse = aiResponse.output;\n  console.log('✅ Using AI response from output field');\n} else if (aiResponse.success && aiResponse.generatedHtml) {\n  processedAiResponse = aiResponse;\n  console.log('✅ Using direct AI response');\n} else {\n  throw new Error('❌ Could not find valid AI response');\n}\n\n// Validate AI response has HTML\nif (!processedAiResponse.generatedHtml || processedAiResponse.generatedHtml.trim() === '') {\n  throw new Error('❌ AI response contains empty or missing generated HTML');\n}\n\nconsole.log('✅ AI Response validated successfully');\n\n// SIMPLE CLIENT-SPECIFIC HTML FIELD MAPPING\nconst clientHtmlFields = {\n  'modern-management': 'field_7223',\n  'vs-sport': 'field_8008',\n  // Add more clients as needed - just the HTML field ID\n};\n\n// Get the HTML field for this client\nconst clientId = originalData.clientId;\nconst htmlFieldId = clientHtmlFields[clientId] || 'field_7223'; // Default fallback\n\nconsole.log(`✅ Client: ${clientId}`);\nconsole.log(`✅ HTML Field: ${htmlFieldId}`);\n\n// Build Baserow data - ONLY the HTML field\nconst baserowData = {\n  [htmlFieldId]: processedAiResponse.generatedHtml\n};\n\n// Prepare the data for Baserow API call\nconst saveData = {\n  ...originalData,\n  \n  // Baserow save configuration\n  baserowSaveData: baserowData,\n  baserowUrl: `https://baserow.aiautomata.co.za/api/database/rows/table/${originalData.emailIdeasTableId}/`,\n  baserowToken: originalData.baserowToken,\n  \n  // AI response data\n  aiResponse: processedAiResponse,\n  \n  // Processing flags\n  readyForBaserowSave: true,\n  \n  debugInfo: {\n    ...originalData.debugInfo,\n    baserowSavePreparation: true,\n    fieldsToSave: Object.keys(baserowData),\n    htmlContentLength: processedAiResponse.generatedHtml.length,\n    clientId: clientId,\n    htmlFieldUsed: htmlFieldId,\n    updateType: 'html_only'\n  }\n};\n\nconsole.log('=== BASEROW SAVE PREPARATION (HTML ONLY) ===');\nconsole.log(`✅ Client: ${clientId}`);\nconsole.log(`✅ HTML Field: ${htmlFieldId}`);\nconsole.log(`✅ HTML Content Length: ${processedAiResponse.generatedHtml.length} characters`);\nconsole.log(`✅ Table ID: ${originalData.emailIdeasTableId}`);\nconsole.log(`✅ Record ID: ${originalData.body?.body?.baserow?.recordId}`);\nconsole.log(`✅ Only updating HTML field - no other fields modified`);\nconsole.log('✅ Ready for Baserow API call');\n\nreturn {\n  json: saveData\n};\n"},"name":"Prepare Baserow Save","typeVersion":1,"id":"9daf14b7-4284-4765-a43f-1ef232e44cc0","position":[1940,1440],"type":"n8n-nodes-base.code"},{"parameters":{"method":"PATCH","url":"=https://baserow.aiautomata.co.za/api/database/rows/table/{{ $json.body.tables.emailIdeas.id }}/{{ $json.body.tables.emailIdeas.recordId }}/","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Authorization","value":"=Token {{ $json.body.baserow.token }}"},{"name":"Content-Type","value":"application/json"},{"name":"Accept","value":"application/json"}]},"sendBody":true,"specifyBody":"json","jsonBody":"={{ $json.baserowSaveData }}","options":{}},"name":"Save to Baserow","typeVersion":4.2,"id":"77fca5ca-005f-460d-bedf-9a624c4ed5ad","position":[2180,1440],"type":"n8n-nodes-base.httpRequest"},{"parameters":{"jsCode":"// SUCCESS RESPONSE GENERATOR\n// Creates the final success response for the email processing workflow\n\nconst baserowResponse = $json;\n\nconsole.log('=== SUCCESS RESPONSE GENERATION ===');\n\n// Get the original data and AI response\nconst originalData = $('Email Data Extractor').first()?.json;\nconst prepareData = $('Prepare Baserow Save').first()?.json;\n\nif (!originalData || !prepareData) {\n  throw new Error('❌ Could not get required data for response generation');\n}\n\nconst aiResponse = prepareData.aiResponse;\n\n// Extract the new record ID from Baserow response\nconst newRecordId = baserowResponse.id;\n\nif (!newRecordId) {\n  console.log('⚠️ No record ID in Baserow response, but continuing...');\n}\n\n// Create success response\nconst successResponse = {\n  success: true,\n  message: 'Email generated and saved successfully',\n  \n  // Email details\n  emailIdeaName: aiResponse.emailIdeaName,\n  emailType: aiResponse.emailType,\n  \n  // Generated content\n  generatedHtml: aiResponse.generatedHtml,\n  subjectLine: aiResponse.subjectLine,\n  previewText: aiResponse.previewText,\n  \n  // Baserow information\n  recordId: newRecordId,\n  tableId: originalData.emailIdeasTableId,\n  baseId: originalData.baseId,\n  \n  // Template information\n  templateUsed: aiResponse.templateUsed,\n  templateId: originalData.selectedTemplateId,\n  \n  // Processing metadata\n  processingTimestamp: new Date().toISOString(),\n  clientId: originalData.clientId,\n  clientName: originalData.clientName,\n  \n  // Content summary\n  contentSummary: aiResponse.contentSummary,\n  generationNotes: aiResponse.generationNotes,\n  \n  // Debug information\n  debugInfo: {\n    workflowCompleted: true,\n    htmlContentLength: aiResponse.generatedHtml.length,\n    baserowSaveSuccessful: !!newRecordId,\n    processingPath: originalData.contentSourceType,\n    templateFetched: true,\n    aiGenerationSuccessful: true\n  }\n};\n\nconsole.log('=== WORKFLOW COMPLETION SUMMARY ===');\nconsole.log(`✅ Email Generated: ${aiResponse.emailIdeaName}`);\nconsole.log(`✅ HTML Content: ${aiResponse.generatedHtml.length} characters`);\nconsole.log(`✅ Baserow Record: ${newRecordId || 'ID not available'}`);\nconsole.log(`✅ Template Used: ${aiResponse.templateUsed}`);\nconsole.log(`✅ Subject Line: ${aiResponse.subjectLine}`);\nconsole.log('✅ EMAIL PROCESSING WORKFLOW COMPLETE');\n\nreturn {\n  json: successResponse\n};"},"name":"Success Response","typeVersion":1,"id":"1a0f8711-b3fa-411e-99ee-e60618132233","position":[2420,1440],"type":"n8n-nodes-base.code"},{"parameters":{"jsCode":"// ERROR HANDLER\n// Handles errors and creates appropriate error responses\n\nconst errorData = $json;\n\nconsole.log('=== ERROR HANDLER ACTIVATED ===');\nconsole.log('Error data:', errorData);\n\n// Try to get original email data for context\nlet originalData = {};\ntry {\n  originalData = $('Email Data Extractor').first()?.json || {};\n} catch (e) {\n  console.log('Could not get original data in error handler');\n}\n\n// Create error response\nconst errorResponse = {\n  success: false,\n  error: true,\n  message: 'Email processing failed',\n  \n  // Error details\n  errorMessage: errorData.error?.message || errorData.message || 'Unknown error occurred',\n  errorType: 'email_processing_error',\n  \n  // Context information\n  emailIdeaName: originalData.emailIdeaName || 'Unknown',\n  clientId: originalData.clientId || 'Unknown',\n  processingStep: 'error_handler',\n  \n  // Timestamp\n  errorTimestamp: new Date().toISOString(),\n  \n  // Debug information\n  debugInfo: {\n    errorHandlerActivated: true,\n    originalDataAvailable: !!originalData.emailIdeaName,\n    errorSource: 'email_processing_workflow'\n  }\n};\n\nconsole.log('❌ Error response created:', errorResponse.errorMessage);\n\nreturn {\n  json: errorResponse\n};"},"name":"Error Handler","typeVersion":1,"id":"416ab0a9-2c42-4bac-a636-0c12cd060179","position":[2420,1640],"type":"n8n-nodes-base.code"},{"parameters":{"respondWith":"json","responseBody":"={{ $json }}","options":{}},"id":"bdca292c-c271-405d-9594-b8836488f84a","name":"Webhook Response","type":"n8n-nodes-base.respondToWebhook","position":[2660,1440],"typeVersion":1},{"parameters":{"httpMethod":"POST","path":"email-processor","responseMode":"responseNode","options":{}},"type":"n8n-nodes-base.webhook","typeVersion":2,"position":[-400,1440],"id":"b6262b5f-b7ad-4e4d-9d5e-32f78bcf1250","name":"Email Processor Webhook","webhookId":"email-processor-webhook-id"},{"parameters":{"jsCode":"// EMAIL DATA EXTRACTOR & VALIDATOR\n// Extracts and validates email idea data from webhook payload\n\nconst payload = $json;\n\nconsole.log('=== EMAIL DATA EXTRACTOR START ===');\nconsole.log('Processing email idea payload...');\n\n// FULL PAYLOAD DEBUG - Let's see exactly what we're getting\nconsole.log('=== FULL PAYLOAD DEBUG ===');\nconsole.log('Payload type:', typeof payload);\nconsole.log('Payload keys:', Object.keys(payload));\nconsole.log('Full payload structure:', JSON.stringify(payload, null, 2));\n\n// Extract email idea data from payload - try all possible locations\nlet emailIdea = null;\nlet dataSource = '';\n\n// Method 1: Direct emailIdea at root\nif (payload.emailIdea) {\n  emailIdea = payload.emailIdea;\n  dataSource = 'root_emailIdea';\n  console.log('✅ Found emailIdea at root level');\n}\n// Method 2: In body.emailIdea\nelse if (payload.body && payload.body.emailIdea) {\n  emailIdea = payload.body.emailIdea;\n  dataSource = 'body_emailIdea';\n  console.log('✅ Found emailIdea in payload.body.emailIdea');\n}\n// Method 3: The entire payload is the emailIdea\nelse if (payload.emailIdeaName) {\n  emailIdea = payload;\n  dataSource = 'root_direct';\n  console.log('✅ Using entire payload as emailIdea (has emailIdeaName at root)');\n}\n// Method 4: The body contains emailIdeaName directly\nelse if (payload.body && payload.body.emailIdeaName) {\n  emailIdea = payload.body;\n  dataSource = 'body_direct';\n  console.log('✅ Using payload.body as emailIdea (has emailIdeaName)');\n}\n\n// If still not found, let's examine what we have\nif (!emailIdea) {\n  console.log('❌ DETAILED PAYLOAD ANALYSIS:');\n  console.log('- Payload is array:', Array.isArray(payload));\n  console.log('- Payload keys:', Object.keys(payload));\n  \n  if (payload.body) {\n    console.log('- Body exists, type:', typeof payload.body);\n    console.log('- Body keys:', Object.keys(payload.body));\n    console.log('- Body content preview:', JSON.stringify(payload.body).substring(0, 500));\n  }\n  \n  // Check if there's any object with emailIdeaName anywhere\n  const findEmailIdea = (obj, path = '') => {\n    if (typeof obj !== 'object' || obj === null) return null;\n    \n    if (obj.emailIdeaName) {\n      console.log(`- Found emailIdeaName at path: ${path}`);\n      return obj;\n    }\n    \n    for (const [key, value] of Object.entries(obj)) {\n      const found = findEmailIdea(value, path ? `${path}.${key}` : key);\n      if (found) return found;\n    }\n    return null;\n  };\n  \n  const foundEmailIdea = findEmailIdea(payload);\n  if (foundEmailIdea) {\n    emailIdea = foundEmailIdea;\n    dataSource = 'deep_search';\n    console.log('✅ Found emailIdea through deep search');\n  } else {\n    throw new Error('❌ No emailIdea found in payload. Check payload structure and logs above.');\n  }\n}\n\nconsole.log(`Email Idea found via: ${dataSource}`);\nconsole.log('Email Idea Keys:', Object.keys(emailIdea));\n\n// Validate required fields\nconst requiredFields = ['emailIdeaName', 'emailType', 'hook', 'cta'];\nconst missingFields = requiredFields.filter(field => !emailIdea[field] || emailIdea[field].trim() === '');\n\nif (missingFields.length > 0) {\n  console.log('❌ Missing fields check:');\n  requiredFields.forEach(field => {\n    console.log(`- ${field}: ${emailIdea[field] || 'MISSING'}`);\n  });\n  throw new Error(`❌ Missing required fields: ${missingFields.join(', ')}`);\n}\n\n// Extract template information\nconst selectedTemplateId = emailIdea.selectedTemplateId || emailIdea.templates?.[0] || '1';\nconst selectedTemplateName = emailIdea.selectedTemplateName || 'Default Template';\n\n// Extract content sources\nconst emailTextIdea = emailIdea.emailTextIdea || '';\nconst emailUrlIdea = emailIdea.emailUrlIdea || '';\n\n// Determine content source type\nlet contentSourceType = 'text';\nlet sourceContent = emailTextIdea;\n\nif (emailUrlIdea && emailUrlIdea.trim() !== '') {\n  contentSourceType = 'url';\n  sourceContent = emailUrlIdea;\n  console.log('🔗 URL content source detected:', emailUrlIdea);\n} else if (emailTextIdea && emailTextIdea.trim() !== '') {\n  contentSourceType = 'text';\n  sourceContent = emailTextIdea;\n  console.log('📝 Text content source detected');\n} else {\n  contentSourceType = 'minimal';\n  sourceContent = `${emailIdea.hook} - ${emailIdea.cta}`;\n  console.log('⚠️ Minimal content - using hook and CTA only');\n}\n\n// Extract client and database info from various possible locations\nconst getNestedValue = (obj, paths) => {\n  for (const path of paths) {\n    const keys = path.split('.');\n    let value = obj;\n    for (const key of keys) {\n      value = value?.[key];\n      if (value === undefined) break;\n    }\n    if (value !== undefined) return value;\n  }\n  return undefined;\n};\n\nconst clientId = getNestedValue(payload, ['body.client_id', 'body.clientId', 'client_id', 'clientId']);\nconst clientName = getNestedValue(payload, ['body.client.name', 'client.name']) || 'Unknown Client';\nconst baseId = getNestedValue(payload, ['body.base_id', 'base_id']);\nconst emailIdeasTableId = getNestedValue(payload, ['body.table_id', 'body.tables.emailIdeas.id', 'table_id', 'tables.emailIdeas.id']) || '730';\nconst baserowToken = getNestedValue(payload, ['body.baserow.token', 'baserow.token']);\nconst templatesTableId = getNestedValue(payload, ['body.tables.templates.id', 'tables.templates.id']) || '731';\nconst brandAssetsTableId = getNestedValue(payload, ['body.tables.brandAssets.id', 'tables.brandAssets.id']) || '728';\n\n// Create processed email data\nconst processedEmailData = {\n  // Preserve original payload\n  ...payload,\n\n  // Add this to the processedEmailData object\n  brandAssetsTableId: brandAssetsTableId,\n  \n  // Email idea details\n  emailIdeaName: emailIdea.emailIdeaName,\n  emailType: emailIdea.emailType,\n  hook: emailIdea.hook,\n  cta: emailIdea.cta,\n  status: emailIdea.status || 'Draft',\n  \n  // Template information\n  selectedTemplateId: selectedTemplateId,\n  selectedTemplateName: selectedTemplateName,\n  templatesTableId: templatesTableId,\n  \n  // Content sources\n  emailTextIdea: emailTextIdea,\n  emailUrlIdea: emailUrlIdea,\n  contentSourceType: contentSourceType,\n  sourceContent: sourceContent,\n  \n  // Client and database info\n  clientId: clientId,\n  clientName: clientName,\n  baseId: baseId,\n  emailIdeasTableId: emailIdeasTableId,\n  baserowToken: baserowToken,\n  \n  // Processing flags\n  dataExtracted: true,\n  validationPassed: true,\n  readyForProcessing: true,\n  needsUrlProcessing: contentSourceType === 'url',\n  \n  // Metadata\n  processingTimestamp: new Date().toISOString(),\n  \n  // Debug info\n  debugInfo: {\n    extractionMethod: 'email_data_extractor_v3',\n    contentSourceType: contentSourceType,\n    hasTextContent: !!emailTextIdea,\n    hasUrlContent: !!emailUrlIdea,\n    templateId: selectedTemplateId,\n    validationPassed: true,\n    requiredFieldsPresent: requiredFields.every(field => emailIdea[field]),\n    dataSource: dataSource,\n    clientId: clientId,\n    baseId: baseId,\n    baserowToken: !!baserowToken\n  }\n};\n\nconsole.log('=== EMAIL DATA EXTRACTION SUMMARY ===');\nconsole.log(`✅ Email Name: ${emailIdea.emailIdeaName}`);\nconsole.log(`✅ Email Type: ${emailIdea.emailType}`);\nconsole.log(`✅ Hook: ${emailIdea.hook}`);\nconsole.log(`✅ CTA: ${emailIdea.cta}`);\nconsole.log(`✅ Template ID: ${selectedTemplateId}`);\nconsole.log(`✅ Content Source: ${contentSourceType}`);\nconsole.log(`✅ Client: ${processedEmailData.clientName} (${clientId})`);\nconsole.log(`✅ Base ID: ${baseId}`);\nconsole.log(`✅ Baserow Token: ${baserowToken ? 'Present' : 'Missing'}`);\nconsole.log(`✅ Data Source: ${dataSource}`);\nconsole.log(`✅ Ready for AI processing: ${processedEmailData.readyForProcessing}`);\nconsole.log('=== EMAIL DATA EXTRACTION COMPLETE ===');\n\nreturn {\n  json: processedEmailData\n};\n"},"id":"97517d49-7d1b-45d0-b718-68966fc01a6d","name":"Email Data Extractor","type":"n8n-nodes-base.code","position":[-180,1560],"typeVersion":2},{"parameters":{"databaseId":"={{ $('Email Data Extractor').item.json.body.body.baserow.databaseId }}","tableId":"={{ $json.brandAssetsTableId }}","additionalOptions":{}},"type":"n8n-nodes-base.baserowTool","typeVersion":1,"position":[1560,1800],"id":"22fe0236-e877-42d5-a624-8d880033b3c1","name":"Brand Asset","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"url":"=https://baserow.aiautomata.co.za/api/database/rows/table/{{ $json.templatesTableId }}/{{ $json.selectedTemplateId }}/","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Authorization","value":"=Token {{ $json.baserowToken }}"},{"name":"Content-Type","value":"application/json"}]},"options":{}},"name":"Get Template","typeVersion":4.2,"id":"e9f7aa58-5f37-4276-b463-e3c41beec00f","position":[1040,1440],"type":"n8n-nodes-base.httpRequest"},{"parameters":{"jsCode":"// ORGANIZE IMAGES FOR EMAIL TEMPLATE\n// Maps user-selected images to template placeholders\n\nconst payload = $json;\n\nconsole.log('=== ORGANIZE IMAGES START ===');\n\n// Get the original email data with images\nconst originalData = $('Email Data Extractor').first()?.json;\nif (!originalData) {\n  throw new Error('❌ Could not get original email data');\n}\n\n// Get the template data\nconst templateData = payload;\nconsole.log('Template ID:', templateData.id);\nconsole.log('Template Name:', templateData.field_7205);\n\n// CORRECTED: Extract image slots from the right location\nconst imageSlots = originalData.body?.emailIdea?.imageSlots || [];\nconsole.log(`Found ${imageSlots.length} image slots:`, imageSlots.map(img => `${img.position}: ${img.finalUrl || img.imageUrl}`));\n\n// Template-specific image mapping for different email types\nconst templateImageMappings = {\n  'promotional': {\n    'Hero Image': 'promo_hero_banner',\n    'Header Image': 'promo_hero_banner', // Alternative name\n    'Body Image 1': 'product_1_image', \n    'Body Image 2': 'product_2_image',\n    'Promo Image 1': 'product_3_image',\n    'CTA Image': 'cta_image',\n    'Footer Image': 'footer_logo'\n  },\n  'newsletter': {\n    'Hero Image': 'newsletter_header',\n    'Header Image': 'newsletter_header',\n    'Body Image 1': 'article_image_1',\n    'Body Image 2': 'article_image_2'\n  },\n  'welcome': {\n    'Hero Image': 'welcome_banner',\n    'Header Image': 'welcome_banner',\n    'Body Image 1': 'feature_image_1',\n    'Body Image 2': 'feature_image_2'\n  }\n};\n\n// Determine template type from template name\nconst templateName = templateData.field_7205?.toLowerCase() || 'promotional';\nlet templateType = 'promotional'; // default\n\nif (templateName.includes('newsletter')) {\n  templateType = 'newsletter';\n} else if (templateName.includes('welcome') || templateName.includes('onboarding')) {\n  templateType = 'welcome';\n}\n\nconsole.log(`Template type detected: ${templateType}`);\n\n// Get the mapping for this template type\nconst imageMapping = templateImageMappings[templateType] || templateImageMappings['promotional'];\n\n// Index user images by their position\nconst imagesByPosition = {};\nimageSlots.forEach(image => {\n  imagesByPosition[image.position] = {\n    imageId: image.imageId,\n    imageUrl: image.finalUrl || image.imageUrl,\n    position: image.position\n  };\n});\n\nconsole.log('Available user images:', Object.keys(imagesByPosition));\nconsole.log('User image details:', imagesByPosition);\n\n// Smart mapping - use available images for appropriate placeholders\nconst organizedImages = {};\n\n// Direct mapping first - use exact position matches\nObject.entries(imageMapping).forEach(([position, placeholder]) => {\n  if (imagesByPosition[position]) {\n    organizedImages[placeholder] = imagesByPosition[position];\n    console.log(`✅ Direct mapped \"${position}\" → \"${placeholder}\":`, imagesByPosition[position].imageUrl);\n  }\n});\n\n// Smart mapping for remaining images\nconst usedPositions = Object.keys(organizedImages).map(key => organizedImages[key].position);\nconst remainingImages = Object.values(imagesByPosition).filter(img => !usedPositions.includes(img.position));\nconst remainingPlaceholders = ['promo_hero_banner', 'product_1_image', 'product_2_image', 'product_3_image', 'cta_image'].filter(p => !organizedImages[p]);\n\nconsole.log('Remaining images:', remainingImages.map(img => img.position));\nconsole.log('Remaining placeholders:', remainingPlaceholders);\n\n// Fill remaining placeholders with remaining images\nremainingImages.forEach((image, index) => {\n  if (remainingPlaceholders[index]) {\n    organizedImages[remainingPlaceholders[index]] = image;\n    console.log(`🔧 Smart mapped \"${image.position}\" → \"${remainingPlaceholders[index]}\":`, image.imageUrl);\n  }\n});\n\n// CRITICAL: Only add fallbacks if absolutely no user images are available\nif (Object.keys(organizedImages).length === 0) {\n  console.log('⚠️ No user images available, using fallbacks');\n  \n  const fallbackImages = {\n    promo_hero_banner: 'https://via.placeholder.com/600x300?text=Promotional+Banner',\n    product_1_image: 'https://via.placeholder.com/260x180?text=Product+1',\n    product_2_image: 'https://via.placeholder.com/260x180?text=Product+2'\n  };\n  \n  // Add fallbacks for missing images\n  Object.entries(fallbackImages).forEach(([placeholder, url]) => {\n    organizedImages[placeholder] = {\n      imageId: 'fallback',\n      imageUrl: url,\n      position: placeholder,\n      isFallback: true\n    };\n    console.log(`🔧 Added fallback for \"${placeholder}\": ${url}`);\n  });\n} else {\n  console.log('✅ Using user images, no fallbacks needed');\n}\n\n// Create the processed data with organized images\nconst processedData = {\n  // Preserve all original data\n  ...originalData,\n  \n  // Add template data\n  templateData: templateData,\n  templateHtml: templateData.field_7208, // The actual HTML template\n  templateName: templateData.field_7205,\n  templateType: templateType,\n  \n  // Organized images ready for AI agent\n  organizedImages: organizedImages,\n  imageMapping: imageMapping,\n  \n  // Image summary for AI\n  imageSummary: {\n    totalUserImages: imageSlots.length,\n    mappedImages: Object.keys(organizedImages).length,\n    availablePositions: Object.keys(imagesByPosition),\n    templatePlaceholders: Object.values(imageMapping),\n    userImagesUsed: Object.values(organizedImages).filter(img => !img.isFallback).length,\n    fallbacksUsed: Object.values(organizedImages).filter(img => img.isFallback).length\n  },\n  \n  // Processing flags\n  imagesOrganized: true,\n  templateReady: true,\n  readyForAI: true,\n  \n  // Debug info\n  debugInfo: {\n    ...originalData.debugInfo,\n    imagesOrganized: true,\n    templateType: templateType,\n    imagesMapped: Object.keys(organizedImages).length,\n    templateHtmlLength: templateData.field_7208?.length || 0,\n    userImagesProvided: imageSlots.length,\n    actualUserImagesUsed: Object.values(organizedImages).filter(img => !img.isFallback).length,\n    processingTimestamp: new Date().toISOString()\n  }\n};\n\nconsole.log('=== ORGANIZE IMAGES SUMMARY ===');\nconsole.log(`✅ Template: ${templateData.field_7205} (${templateType})`);\nconsole.log(`✅ Template HTML: ${templateData.field_7208?.length || 0} characters`);\nconsole.log(`✅ User images provided: ${imageSlots.length}`);\nconsole.log(`✅ Images organized: ${Object.keys(organizedImages).length}`);\nconsole.log(`✅ User images used: ${Object.values(organizedImages).filter(img => !img.isFallback).length}`);\nconsole.log(`✅ Fallbacks used: ${Object.values(organizedImages).filter(img => img.isFallback).length}`);\nconsole.log(`✅ Final image mappings:`);\nObject.entries(organizedImages).forEach(([placeholder, image]) => {\n  console.log(`   - ${placeholder}: ${image.position} → ${image.imageUrl} ${image.isFallback ? '(fallback)' : '(user image)'}`);\n});\nconsole.log(`✅ Ready for AI Agent with complete template + images`);\nconsole.log('=== ORGANIZE IMAGES COMPLETE ===');\n\nreturn {\n  json: processedData\n};\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1260,1440],"id":"99e900cf-394e-498d-976d-1eb931752b89","name":"Organize Images"}],"connections":{"Content Source Router":{"main":[[{"node":"Fetch URL Content","type":"main","index":0}],[{"node":"Process Text Content","type":"main","index":0}],[{"node":"Process Minimal Content","type":"main","index":0}]]},"Fetch URL Content":{"main":[[{"node":"Extract HTML Content","type":"main","index":0}]]},"Extract HTML Content":{"main":[[{"node":"Clean URL Content","type":"main","index":0}]]},"Clean URL Content":{"main":[[{"node":"Get Template","type":"main","index":0}]]},"Process Text Content":{"main":[[{"node":"Get Template","type":"main","index":0}]]},"Process Minimal Content":{"main":[[{"node":"Get Template","type":"main","index":0}]]},"Email Generation AI Agent":{"main":[[{"node":"Prepare Baserow Save","type":"main","index":0}]]},"Prepare Baserow Save":{"main":[[{"node":"Save to Baserow","type":"main","index":0}]]},"Save to Baserow":{"main":[[{"node":"Success Response","type":"main","index":0}]]},"Success Response":{"main":[[{"node":"Webhook Response","type":"main","index":0}]]},"Error Handler":{"main":[[]]},"OpenRouter Chat Model":{"ai_languageModel":[[{"node":"Email Generation AI Agent","type":"ai_languageModel","index":0}]]},"Structured Output Parser":{"ai_outputParser":[[{"node":"Email Generation AI Agent","type":"ai_outputParser","index":0}]]},"Email Processor Webhook":{"main":[[{"node":"Email Data Extractor","type":"main","index":0}]]},"Email Data Extractor":{"main":[[{"node":"Content Source Router","type":"main","index":0}]]},"Brand Asset":{"ai_tool":[[{"node":"Email Generation AI Agent","type":"ai_tool","index":0}]]},"Get Template":{"main":[[{"node":"Organize Images","type":"main","index":0}]]},"Organize Images":{"main":[[{"node":"Email Generation AI Agent","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":null,"pinData":{"Email Processor Webhook":[{"json":{"headers":{"host":"n8n.aiautomata.co.za","user-agent":"node","content-length":"2787","accept":"*/*","accept-encoding":"gzip, br","accept-language":"*","cdn-loop":"cloudflare; loops=1","cf-connecting-ip":"197.185.153.248","cf-ipcountry":"ZA","cf-ray":"979c2b9d1e088698-JNB","cf-visitor":"{\"scheme\":\"https\"}","content-type":"application/json","sec-fetch-mode":"cors","x-forwarded-for":"172.68.140.156","x-forwarded-host":"n8n.aiautomata.co.za","x-forwarded-port":"443","x-forwarded-proto":"https","x-forwarded-server":"1dc384f6e279","x-real-ip":"172.68.140.156"},"params":{},"query":{},"body":{"client_id":"modern-management","base_id":"176","table_id":"730","event":"email_idea_generation","timestamp":"2025-09-04T08:38:23.763Z","clientId":"modern-management","client":{"name":"Modern Management","id":"modern-management"},"tables":{"emailIdeas":{"id":"730","recordId":"50"},"templates":{"id":"731"}},"baserow":{"databaseId":"176","token":"SXe0k6Btm7i28uZP5mp8hr5KPBoWsiE1","tableId":"730","recordId":"50"},"emailIdea":{"emailIdeaName":"10.37 Testing images","emailType":"Promotional Emails","hook":"Johan","cta":"Koos","emailTextIdea":"Testing mail images","emailUrlIdea":"","status":"Draft","templates":[2],"selectedTemplateId":"2","selectedTemplateName":"Promotional Emails","contentSource":"text","useUrlAsCta":false,"useVideoInEmail":false,"imageSlots":[{"position":"Hero Image","imageId":"67","imageUrl":"https://baserow.aiautomata.co.za/media/user_files/g0uXRW8RI15vNyAXDjqyCY9mrFtDuHCg_104d0245cfa0d1247cd5f773cacfa8c34e654799b15ce295d6eadefe72ed5398.png","finalUrl":"https://baserow.aiautomata.co.za/media/user_files/g0uXRW8RI15vNyAXDjqyCY9mrFtDuHCg_104d0245cfa0d1247cd5f773cacfa8c34e654799b15ce295d6eadefe72ed5398.png"},{"position":"Body Image 1","imageId":"68","imageUrl":"https://baserow.aiautomata.co.za/media/user_files/LnrGRJKxpvAWeKhJBLraj0TAGZ14xGuv_951be67ee7d6523f8a3ae504a414fbbcec7bceea7de519af9f4914edded25420.png","finalUrl":"https://baserow.aiautomata.co.za/media/user_files/LnrGRJKxpvAWeKhJBLraj0TAGZ14xGuv_951be67ee7d6523f8a3ae504a414fbbcec7bceea7de519af9f4914edded25420.png"},{"position":"Body Image 2","imageId":"69","imageUrl":"https://baserow.aiautomata.co.za/media/user_files/g0uXRW8RI15vNyAXDjqyCY9mrFtDuHCg_104d0245cfa0d1247cd5f773cacfa8c34e654799b15ce295d6eadefe72ed5398.png","finalUrl":"https://baserow.aiautomata.co.za/media/user_files/g0uXRW8RI15vNyAXDjqyCY9mrFtDuHCg_104d0245cfa0d1247cd5f773cacfa8c34e654799b15ce295d6eadefe72ed5398.png"},{"position":"Promo Image 1","imageId":"70","imageUrl":"https://baserow.aiautomata.co.za/media/user_files/pvao1EzGnFSLoaQfxcJWv8JaSQ0IU0wA_19ae4c5a3c92d2fc1fe2d3d70e6ed602ef93267dae532cfdf0eaeb7b64b7e01e.png","finalUrl":"https://baserow.aiautomata.co.za/media/user_files/pvao1EzGnFSLoaQfxcJWv8JaSQ0IU0wA_19ae4c5a3c92d2fc1fe2d3d70e6ed602ef93267dae532cfdf0eaeb7b64b7e01e.png"},{"position":"CTA Image","imageId":"71","imageUrl":"https://baserow.aiautomata.co.za/media/user_files/chXKPA7293wUnfXUp2LO22rwbOqQovmR_8bf26abc91ca63df8b6a89ce88e1622a8cde24bcb254228e7126d6a59af395cb.png","finalUrl":"https://baserow.aiautomata.co.za/media/user_files/chXKPA7293wUnfXUp2LO22rwbOqQovmR_8bf26abc91ca63df8b6a89ce88e1622a8cde24bcb254228e7126d6a59af395cb.png"}],"voiceFiles":[],"videoFiles":[]},"metadata":{"createdAt":"2025-09-04T08:38:23.763Z","source":"content-engine-app","version":"1.0","contentType":"email_idea"}},"webhookUrl":"https://n8n.aiautomata.co.za/webhook/email-processor","executionMode":"production"}}]},"versionId":"5c9071b9-2c19-435d-8f17-7a1f62c89de2","triggerCount":1,"shared":[{"createdAt":"2025-08-27T01:15:07.710Z","updatedAt":"2025-08-27T01:15:07.710Z","role":"workflow:owner","workflowId":"SiBv16l5YK6pVAbN","projectId":"pRXFeKq9D8e0hAOx"}],"tags":[]},{"createdAt":"2025-09-01T07:28:53.315Z","updatedAt":"2025-09-01T08:06:29.000Z","id":"So2XGcHq5wKUgYLK","name":"Facebook Page & Ads Insights to Baserow (Fixed)","active":false,"isArchived":true,"nodes":[],"connections":{},"settings":{"executionOrder":"v1","timezone":"America/New_York","saveDataErrorExecution":"all","saveDataSuccessExecution":"all","saveManualExecutions":true},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"1f951f0d-5513-42f9-bf72-2806c1e108f7","triggerCount":0,"shared":[{"createdAt":"2025-09-01T07:28:53.318Z","updatedAt":"2025-09-01T07:28:53.318Z","role":"workflow:owner","workflowId":"So2XGcHq5wKUgYLK","projectId":"pRXFeKq9D8e0hAOx"}],"tags":[]},{"createdAt":"2025-09-04T09:56:52.434Z","updatedAt":"2025-09-22T08:04:50.000Z","id":"TITEFT14w1nrEOGQ","name":"Blog","active":false,"isArchived":false,"nodes":[{"parameters":{"rule":{"interval":[{"field":"cronExpression","expression":"0 8 * * 4"}]}},"type":"n8n-nodes-base.scheduleTrigger","typeVersion":1.2,"position":[-4336,192],"id":"70d4f57e-2f56-4df8-9ff4-13a518986b4c","name":"Schedule Trigger"},{"parameters":{"method":"POST","url":"https://api.perplexity.ai/chat/completions","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"specifyBody":"json","jsonBody":"={\n  \"model\": \"sonar-pro\",\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"Act as a professional news researcher who is capable of finding detailed summaries about a news topic from highly reputable sources.\"\n    },\n    {\n      \"role\": \"user\",\n      \"content\": \" Research the following topic and return everything you can find: '{{ $('Choosing Topic').item.json.message.content }}' \"\n    }\n  ]\n}\n","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-3120,192],"id":"fb9e58a1-a5a1-4178-a7ea-c5ed604f6c36","name":"Research"},{"parameters":{"assignments":{"assignments":[{"id":"23b8e8c4-9191-415a-9661-1b60d413528a","name":"research","value":"={{ $json.choices[0].message.content.replaceAll(\"[1]\", \" - source: \" +$json.citations[0]).replaceAll(\"[2]\",\" - source:\" +$json.citations[1]).replaceAll(\"[3]\",\" - source: \" +$json.citations[2]).replaceAll(\"[4]\",\" - source: \"+$json.citations[3]).replaceAll(\"[5]\",\" - source: \"+$json.citations[4]).replaceAll(\"[6]\",\" - source: \"+$json.citations[5]).replaceAll(\"[7]\",\" - source: \"+$json.citations[6]).replaceAll(\"[8]\",\" - source: \"+$json.citations[7]).replaceAll(\"[9]\",\" - source: \"+$json.citations[8]).replaceAll(\"[10]\",\" - source: \"+$json.citations[9]) }}","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[-2896,192],"id":"e5e0f887-3491-4e16-b873-52fa54395718","name":"Fix Links"},{"parameters":{"aggregate":"aggregateAllItemData","destinationFieldName":"previous-posts","options":{}},"type":"n8n-nodes-base.aggregate","typeVersion":1,"position":[-2000,192],"id":"2983d33a-506b-488e-8e2c-daf58510cb3c","name":"Aggregate"},{"parameters":{"documentId":{"__rl":true,"value":"1t-J2x22lsG6TpktQLBkwaS-ewuJI2WQvB-g4vQspbYU","mode":"list","cachedResultName":"Completed Keywords","cachedResultUrl":"https://docs.google.com/spreadsheets/d/1t-J2x22lsG6TpktQLBkwaS-ewuJI2WQvB-g4vQspbYU/edit?usp=drivesdk"},"sheetName":{"__rl":true,"value":"gid=0","mode":"list","cachedResultName":"Sheet1","cachedResultUrl":"https://docs.google.com/spreadsheets/d/1t-J2x22lsG6TpktQLBkwaS-ewuJI2WQvB-g4vQspbYU/edit#gid=0"},"options":{}},"type":"n8n-nodes-base.googleSheets","typeVersion":4.5,"position":[-2176,192],"id":"a0f0a478-b15d-4fd8-aaa8-82d0a4e5121b","name":"Previous Posts"},{"parameters":{"modelId":{"__rl":true,"value":"o1-mini-2024-09-12","mode":"list","cachedResultName":"O1-MINI-2024-09-12"},"messages":{"values":[{"content":"=You are part of a team that creats world class blog posts. \n\nYou are in charge of internal linking between blog posts. \n\nFor each new blog post that comes across your desk, your job is to look through previously posted blogs and make atleast 5 internal links. \n\nTo choose the best internal linking opportunities you must: \n\n- Read the previous blog post summaries and look through their keywords. If there is a match where the previous blog post is highly relevant, then this is an internal linking opportunity. \n\n- Do not link if it is not highly relevant. Only make a link if it makes sense and adds value for the reader. \n\nOnce you've found the best linking opportunities, you must update the blog post with the internal links. To do this you must: \n\n- Add the link of the previous blog post at the relevant section of the new blog post. Drop the URL at the place which makes most sense. Later we will hyperlink the URL to the word in the blog post which it is placed next to. So your placing is very important. \n\nMake sure to not delete any existing URLs or change anything about the blog post provided to you. You must only add new internal linking URLs and output the revised blog post. \n\nYour output must be the blog post given to you plus the new urls. Don't remove any info. \n\nDon't return the previous blog posts. Only return the current blog post with the internal links added.\n\nCurrent blog Post: \n{{ $('Copywriter').item.json.message.content }}\n\nPrevious Blog Posts: \n{{ $json['previous-posts'].toJsonString().split() }}\n\n"}]},"options":{}},"type":"@n8n/n8n-nodes-langchain.openAi","typeVersion":1.8,"position":[-1824,192],"id":"295cdaea-68d3-49c0-9a5f-271d0228cc4c","name":"Add internal links"},{"parameters":{"modelId":{"__rl":true,"value":"gpt-4o-mini","mode":"list","cachedResultName":"GPT-4O-MINI"},"messages":{"values":[{"content":"=Create a slug for the following blog post: \n{{ $('Add internal links').item.json.message.content }}\n\nA slug in a blog post is the part of the URL that comes after the domain name and identifies a specific page. It is typically a short, descriptive phrase that summarizes the content of the post, making it easier for users and search engines to understand what the page is about. For example, in the URL www.example.com/intelligent-agents, the slug is intelligent-agents. A good slug is concise, contains relevant keywords, and avoids unnecessary words to improve readability and SEO. \n\nThe slug must be 4 or 5 words max and must include the primary keyword of the blog post which is {{ $('Choosing Topic').item.json.message.content }}\n\nYour output must be the slug and nothing else so that I can copy and paste your output and put it at the end of my blog post URL to post it right away. "}]},"options":{}},"type":"@n8n/n8n-nodes-langchain.openAi","typeVersion":1.8,"position":[-1136,192],"id":"905aa76c-ddcc-42b8-a606-2f128cc7c88a","name":"Slug"},{"parameters":{"modelId":{"__rl":true,"value":"gpt-4o-2024-11-20","mode":"list","cachedResultName":"GPT-4O-2024-11-20"},"messages":{"values":[{"content":"=Extract the blog post title from the following blog post: \n{{ $('Add internal links').item.json.message.content }}\n\n\n\nThe blog post title must include the primary keyword '{{ $('Choosing Topic').item.json.message.content }}' and must inform the users right away of what they can expect from reading the blog post. \n\n- Don't put the output in \"\". The output should just text with no markdown or formatting. \n\nYour output must only be the blog post title and nothing else. "}]},"options":{}},"type":"@n8n/n8n-nodes-langchain.openAi","typeVersion":1.8,"position":[-848,192],"id":"d282be3a-c61a-4fba-bd16-9f22b0cb618f","name":"Title"},{"parameters":{"modelId":{"__rl":true,"value":"gpt-4o-2024-11-20","mode":"list","cachedResultName":"GPT-4O-2024-11-20"},"messages":{"values":[{"content":"=Create a good meta description for the following blog post: \n\n{{ $('Add internal links').item.json.message.content }}\n\nA good meta description for a blog post that is SEO-optimized should:\n- Be Concise: Stick to 150-160 characters to ensure the full description displays in search results. \n- Include Keywords: Incorporate primary keywords naturally to improve visibility and relevance to search queries.\n\nPrimary keyword = {{ $('Choosing Topic').item.json.message.content }}\n\n\n- Provide Value: Clearly describe what the reader will learn or gain by clicking the link. \n\n- Be Engaging: Use persuasive language, such as action verbs or a question, to encourage clicks. \n\n- Align with Content: Ensure the description accurately reflects the blog post to meet user expectations and reduce bounce rates. \n\nYour output must only be the meta description and nothing else. \n"}]},"options":{}},"type":"@n8n/n8n-nodes-langchain.openAi","typeVersion":1.8,"position":[-544,192],"id":"ba93663e-f271-49aa-a477-d99845e7704d","name":"Meta description"},{"parameters":{"modelId":{"__rl":true,"value":"o1-preview","mode":"list","cachedResultName":"O1-PREVIEW"},"messages":{"values":[{"content":"=DO NOT OUTPUT ANYTHING OTHER THAN THE CODE. I want you to follow the layout of the template as a guide to generate the WordPress code for a blog post. Here are the rules to follow:\n\nThe blog post should have a title, estimated reading time, key takeaways, table of contents, body, and FAQ in this order.\nMake it engaging by using italics, dot points, quotes, bold, spaces, and sometimes new lines. Never use emojis.\nThe blog post will have some URLs referenced next to certain keyphrases to show where the info came from. You must hyperlink the keyphrase with the provided URL so that the reader can click on the referenced URL. It is critical you get this right.\nWrap the entire content in a container <div> with inline CSS that sets the text color to white (#ffffff), uses a legible font such as Arial, sans-serif, and sets line-height to 1.6.\nEnsure that all non-heading text elements (e.g., paragraphs, list items) have an inline style or embedded style that sets their font size to 20px and color to white (#ffffff) using !important to override theme styles.\nHyperlinks, points in the table of contents, and FAQ questions must be styled in blue (#00c2ff).\nAll headings and subheadings should have an underline implemented via a bottom border in blue (#00c2ff) with appropriate padding.\nPlace a double break (<br><br>) between each section to improve readability.\nDo not output any extra text or mention code tags like HTML''' around the output; just output the HTML code.\nBlog post: \n\n{{ $json.message.content }}\n\nHere's an example of a well formatted output:\n\n<div style=\"color: #ffffff; font-family: Arial, sans-serif; line-height: 1.6;\"> <style> p, .wp-block-paragraph, ul.wp-block-list, li { color: #ffffff !important; font-size: 20px !important; } a { color: #00c2ff !important; } </style> <h1 id=\"h-devin-ai-the-hype-and-reality-of-an-ai-software-engineer\" class=\"wp-block-heading\" style=\"border-bottom: 2px solid #00c2ff; padding-bottom: 5px;\">Devin AI: The Hype and Reality of an AI Software Engineer</h1> <br><br> <p class=\"estimated-reading-time\" style=\"color: #ffffff; font-size: 20px !important;\">Estimated reading time: 5 minutes</p> <br><br> <h2 id=\"h-key-takeaways\" class=\"wp-block-heading\" style=\"border-bottom: 2px solid #00c2ff; padding-bottom: 5px;\"><strong>Key Takeaways</strong></h2> <br><br> <ul class=\"wp-block-list\"> <li><mark style=\"background-color: #ffd966;\"><strong>Devin AI</strong></mark> claims to be the world's first fully autonomous AI software engineer.</li> <br><br> <li>Initial demos and claims have generated significant <mark style=\"background-color: #ffff00;\">hype</mark> and interest.</li> <br><br> <li>Critics argue some capabilities may be exaggerated or misleading.</li> <br><br> <li>Real-world testing reveals both <em>strengths</em> and <em>limitations</em>.</li> <br><br> <li>The true impact on software engineering remains to be seen.</li> </ul> <br><br> <div class=\"wp-block-yoast-seo-table-of-contents yoast-table-of-contents\"> <h2 style=\"color: #ffffff; border-bottom: 2px solid #00c2ff; padding-bottom: 5px;\">Table of contents</h2> <br><br> <ul> <li><a href=\"#h-devin-ai-the-hype-and-reality-of-an-ai-software-engineer\" data-level=\"1\">Devin AI: The Hype and Reality of an AI Software Engineer</a></li> <br><br> <li><a href=\"#h-key-takeaways\" data-level=\"2\">Key Takeaways</a></li> <br><br> <li><a href=\"#h-what-is-devin-ai\" data-level=\"2\">What is Devin AI?</a></li> <br><br> <li><a href=\"#h-the-hype-around-devin-ai\" data-level=\"2\">The Hype Around Devin AI</a></li> <br><br> <li><a href=\"#h-putting-devin-to-the-test\" data-level=\"2\">Putting Devin to the Test</a></li> <br><br> <li><a href=\"#h-the-reality-check\" data-level=\"2\">The Reality Check</a></li> <br><br> <li><a href=\"#h-the-future-of-ai-in-software-development\" data-level=\"2\">The Future of AI in Software Development</a></li> <br><br> <li><a href=\"#h-frequently-asked-questions\" data-level=\"2\">Frequently Asked Questions</a></li> </ul> </div> <br><br> <p>Devin AI has burst onto the tech scene, promising to revolutionize software development as we know it. But does this AI-powered coding assistant live up to the hype? Let's dive into what Devin AI really is, what it can do, and what developers are saying after putting it to the test.</p> <br><br> <!-- Rest of blog post content goes here --> </div>\n"}]},"options":{}},"type":"@n8n/n8n-nodes-langchain.openAi","typeVersion":1.8,"position":[-1440,192],"id":"3bd16b66-e360-43f3-8e2d-13f6ca46382a","name":"HTML version"},{"parameters":{"url":"https://serpapi.com/search?engine=google_images","authentication":"genericCredentialType","genericAuthType":"httpQueryAuth","sendQuery":true,"queryParameters":{"parameters":[{"name":"q","value":"={{ $('Choosing Topic').item.json.message.content }}"},{"name":"gl","value":"us"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-208,192],"id":"edc9264d-7c16-4e93-a0b3-2a876f0a69b4","name":"Image Covers"},{"parameters":{"assignments":{"assignments":[{"id":"1f0541df-05ab-4e3d-a5d8-3904579fc8a9","name":"image-url","value":"={{ $json.images_results[1].original }}","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[-64,192],"id":"33bb506a-8d19-4348-8c3d-757542b8224e","name":"Edit Fields"},{"parameters":{"title":"={{ $('Title').item.json.message.content }}","additionalFields":{"authorId":2,"content":"=<img src=\"{{ $json['image-url'] }}\" alt=\"Cover Image\">\n{{ $('HTML version').item.json.message.content }}}","slug":"={{ $('Slug').item.json.message.content }}","status":"draft","commentStatus":"closed","sticky":false,"categories":[280],"tags":[281],"postTemplate":{"values":{}}}},"type":"n8n-nodes-base.wordpress","typeVersion":1,"position":[192,192],"id":"c028ea76-5a09-43c0-933e-e639cc6b5033","name":"Wordpress"},{"parameters":{"operation":"append","documentId":{"__rl":true,"value":"1t-J2x22lsG6TpktQLBkwaS-ewuJI2WQvB-g4vQspbYU","mode":"list","cachedResultName":"Completed Keywords","cachedResultUrl":"https://docs.google.com/spreadsheets/d/1t-J2x22lsG6TpktQLBkwaS-ewuJI2WQvB-g4vQspbYU/edit?usp=drivesdk"},"sheetName":{"__rl":true,"value":"gid=0","mode":"list","cachedResultName":"Sheet1","cachedResultUrl":"https://docs.google.com/spreadsheets/d/1t-J2x22lsG6TpktQLBkwaS-ewuJI2WQvB-g4vQspbYU/edit#gid=0"},"columns":{"mappingMode":"defineBelow","value":{"Blog Title ":"={{ $('Title').item.json.message.content }}","Keywords":"={{ $('Choosing Topic').item.json.message.content }}","Summary ":"={{ $('Meta description').item.json.message.content }}","URL":"=https://YourURL.com/{{ $('Slug').item.json.message.content }}"},"matchingColumns":[],"schema":[{"id":"Blog Title ","displayName":"Blog Title ","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true},{"id":"Keywords","displayName":"Keywords","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true},{"id":"Summary ","displayName":"Summary ","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true},{"id":"URL","displayName":"URL","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false}],"attemptToConvertTypes":false,"convertFieldsToString":false},"options":{}},"type":"n8n-nodes-base.googleSheets","typeVersion":4.5,"position":[464,192],"id":"14ac038a-0792-428b-b1fb-97d36742ad1f","name":"Google Sheets"},{"parameters":{"url":"https://serpapi.com/search?engine=google_trends","authentication":"genericCredentialType","genericAuthType":"httpQueryAuth","sendQuery":true,"queryParameters":{"parameters":[{"name":"q","value":"=[YOUR QUERY]"},{"name":"geo","value":"US"},{"name":"hl","value":"en"},{"name":"date","value":"={{ $now.minus({ days: 3 }).format('yyyy-MM-dd') }} {{ $now.format('yyyy-MM-dd') }}"},{"name":"data_type","value":"RELATED_QUERIES"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-4144,192],"id":"7766700f-78a8-414b-b4cf-d65170bc2182","name":"Trends"},{"parameters":{"mode":"raw","jsonOutput":"={\n  \"most-trending\": {\n\n    \"#1\": { \n\n      \"query\":\"{{ $json.related_queries.rising[0].query }}\",\n      \"score\":\"{{ $json.related_queries.rising[0].extracted_value }}\"\n\n    },\n\n\n    \"#2\": { \n\n      \"query\":\"{{ $json.related_queries.rising[1].query }}\",\n      \"score\":\"{{ $json.related_queries.rising[1].extracted_value }}\"\n\n    }\n  }\n}","options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[-3968,192],"id":"e5a531c7-dc6a-4463-abfb-fc448c0d323b","name":"2 Most Trending"},{"parameters":{"jsCode":"// Get the top array from your JSON\nconst topItems = $('Trends').first().json.related_queries.top;\n\n// Filter the items to only include those with extracted_value > 30\nconst filtered = topItems.filter(item => item.extracted_value > 30);\n\n// Map the filtered items to their query values and join them with commas\nconst resultString = filtered.map(item => item.query).join(', ');\n\n// Return the result in a new JSON property\nreturn [{ json: { result: resultString } }];\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-3744,192],"id":"12825f33-a051-4ba9-8b5c-716fd403f5ec","name":"High search volume keywords"},{"parameters":{"modelId":{"__rl":true,"value":"deepseek/deepseek-r1","mode":"id"},"messages":{"values":[{"content":"=You are part of a team that creates world class blog posts. Your job is to choose the topic for each blog post. \n\nThe blog posts are posted on the website of a [COMPANY NAME + DESCRIPTION + PRODUCTS + TARGET MARKET]. The blog posts are mainly posted as part of an SEO campaign to get [COMPANY NAME] to rank high for its products and services.\n\nIn this instance, you are given a list of 2 keywords which have been trending the most on Google news search over the past few days. \n\nYour job is to pick one which you think would make for the most relevant blog post with the best SEO outcomes for the client. \n\nThe keywords have two attributes: \n\n1. query: This attribute determines the search query that users have been searching for which is trending. \n\n2. value: This attribute determines what percentage increase the keyword has seen compared to previous periods (i.e. the increase in search volume). \n\nYou must choose one out of the taking into consideration both the relevance of the keyword for [COMPANY NAME's] SEO efforts and the comparative trendiness determined by the value attribute. \n\nOutput the keyword you decided to post a blog on and nothing else. Don't explain your reasoning. Just output the keyword. \n\nThis instance: \n\nKeyword 1:\n{{ $('2 Most Trending').item.json['most-trending']['#1'].toJsonString() }} \n\nKeyword2: \n{{ $('2 Most Trending').item.json['most-trending']['#2'].toJsonString() }} "}]},"options":{}},"type":"@n8n/n8n-nodes-langchain.openAi","typeVersion":1.8,"position":[-3520,192],"id":"21b0d15a-a2cc-4385-8a21-7c5f89cbca09","name":"Choosing Topic"},{"parameters":{"modelId":{"__rl":true,"value":"anthropic/claude-3.5-sonnet","mode":"id"},"messages":{"values":[{"content":"=You are part of a team that creates world class blog posts for SEO purposes. \n\nEvery week your team posts one blog post on the most trending news in this week of AI. As the copywriter for the blogs, you are provided with the folling information: \n\n- Query: The topic of this weeks blog post. This is the most trending news in the space.\n\n- Other keywords: This is a list of some high search volume keywords in the AI space. The goal is to include some of these into the blog post naturally. This is only optional and dependant on the natural dependancy of this weeks topic to the blog post. Include any of the keywords in the blog, if you can do so naturally without changing the meaning of the blog post.  \n\n\n- Research findings: This is research found from very reputable resources in relation to the topic of the post. Your blog post must be based off this research.\n\n\nGiven the said info, you must write the blog post.\n \nThe blog post must: \n\n- Place the query in the blog title, H1 header and early in the introduction. \n\n- Include all detail in research findings. When including the research points, make sure to also include their source URL so that the copywriter can use them as hyperlinks. (source url for each statement is given in the research findings next to the text)\n\n- Be very detailed. \n\n- Be using tone similar to that of a reporter, invoking curiosity and excitement and thrill in the readers.\n\n- Flow naturally and make sense. \n\n- Be at minimum 1500 to 2000 words long. \n\n- Be suitable for a year 5 reading level. \n\nMake sure to create the entire blog post draft in your first output. Don't stop or cut it short. \n\nYour output must be the blog post and nothing else.\n\nHere are the details of your next blog post project: \n\nQuery: \n{{ $('Choosing Topic').item.json.message.content }}\n\nDetailed Research: \n{{ $json.research }}\n\nWrite the blog post.\n"}]},"options":{}},"type":"@n8n/n8n-nodes-langchain.openAi","typeVersion":1.8,"position":[-2688,192],"id":"9dc40629-081c-4540-a5de-53f05f48add0","name":"Copywriter","credentials":{"openAiApi":{"id":"MaSTde2xxBu2ZRiy","name":"OpenAi account"}}},{"parameters":{"content":"## Find Trend\n\n","height":240,"width":400},"type":"n8n-nodes-base.stickyNote","position":[-4224,112],"typeVersion":1,"id":"a6b1b6aa-b194-4e72-ae14-f75afd7ea4fd","name":"Sticky Note"},{"parameters":{"content":"## High Volume Keywords\n\n","height":240,"width":200},"type":"n8n-nodes-base.stickyNote","position":[-3776,112],"typeVersion":1,"id":"5d4f1bb1-0d50-4fb6-9dea-9bb3f59bf0fb","name":"Sticky Note1"},{"parameters":{"content":"## Choosing Blog Topic\n\n\n","height":240,"width":340},"type":"n8n-nodes-base.stickyNote","position":[-3536,112],"typeVersion":1,"id":"11427ded-937f-41c8-9358-07831bae67dd","name":"Sticky Note2"},{"parameters":{"content":"## Research\n\n\n","height":240,"width":460},"type":"n8n-nodes-base.stickyNote","position":[-3184,112],"typeVersion":1,"id":"b4e9001c-e2d7-4d53-8326-20799dc10ea7","name":"Sticky Note3"},{"parameters":{"content":"## Write Post\n\n\n","height":240,"width":360},"type":"n8n-nodes-base.stickyNote","position":[-2704,112],"typeVersion":1,"id":"adc59f4e-4947-4fa8-bef1-27eb6f03ab01","name":"Sticky Note4"},{"parameters":{"content":"## Internal Links\n\n\n","height":240,"width":800},"type":"n8n-nodes-base.stickyNote","position":[-2304,112],"typeVersion":1,"id":"f6780728-9ec5-41ab-b4a1-f6c354bb5a4b","name":"Sticky Note5"},{"parameters":{"content":"## Prepare to Post\n\n\n","height":240,"width":1220},"type":"n8n-nodes-base.stickyNote","position":[-1488,112],"typeVersion":1,"id":"12678cc2-5e78-4453-be98-6a6f56566dd8","name":"Sticky Note6"},{"parameters":{"content":"## Find Cover Image\n\n\n","height":240,"width":320},"type":"n8n-nodes-base.stickyNote","position":[-240,112],"typeVersion":1,"id":"a3e59095-e1c5-4010-acc8-b4b47c4c928d","name":"Sticky Note7"},{"parameters":{"content":"## Post on Wordpress\n\n\n","height":240},"type":"n8n-nodes-base.stickyNote","position":[144,112],"typeVersion":1,"id":"88193112-ec6b-456a-85ca-fd4db28b2bb4","name":"Sticky Note8"},{"parameters":{"content":"## Add to Other Blogs\n\n\n","height":240},"type":"n8n-nodes-base.stickyNote","position":[400,112],"typeVersion":1,"id":"a4531c31-2a6e-4703-b95f-4d56bb5d836a","name":"Sticky Note9"},{"parameters":{"content":"# Trend SEO Post","height":80,"width":420,"color":4},"type":"n8n-nodes-base.stickyNote","position":[-4304,-224],"typeVersion":1,"id":"e41e9b0b-0723-402b-9cff-7f29f0871bfb","name":"Sticky Note10"},{"parameters":{"documentId":{"__rl":true,"value":"1Wpiz6U3jaYLaRE-TNK4PNtuZj4fd5i56bymfx_oc5to","mode":"list","cachedResultName":"Keywords - NEW","cachedResultUrl":"https://docs.google.com/spreadsheets/d/1Wpiz6U3jaYLaRE-TNK4PNtuZj4fd5i56bymfx_oc5to/edit?usp=drivesdk"},"sheetName":{"__rl":true,"value":"gid=0","mode":"list","cachedResultName":"Pillar Post #1 Name ","cachedResultUrl":"https://docs.google.com/spreadsheets/d/1Wpiz6U3jaYLaRE-TNK4PNtuZj4fd5i56bymfx_oc5to/edit#gid=0"},"filtersUI":{"values":[{"lookupColumn":"Completed","lookupValue":"No"}]},"options":{"returnFirstMatch":true}},"type":"n8n-nodes-base.googleSheets","typeVersion":4.5,"position":[-3888,1024],"id":"907e6357-f2f4-472b-a9f5-0e78ed3d4dff","name":"Grab New Cluster"},{"parameters":{"modelId":{"__rl":true,"value":"openai/o1-mini","mode":"id"},"messages":{"values":[{"content":"=You are part of a team that creates world class blog posts. \n\nFor each new blog post project, you are provided with a list of keywords and search intent. \n\n- Keywords: The keywords are to what the blog post is meant to rank for. They are scattered throughout the blog and define the topic of the blog post. \n\n- Search intent: The search intent recognises the intent of the user when searching up the keyword which defines be the theme of the blog post, so they click on our blog to satisfy their search. \n\n- Primary keyword: Out of the keywords, there is one keyword known as the primary keyword. The primary keyword will go in the title and first few sentences. It is important that the topic of the blog post is related to the primary keyword so that you can place it into the title and introduction naturally. \n\nGiven a list of keywords and search intent, your job is to understand the goal of th e blog post, identify the thought process behind the flow of the blog post and come up with a preliminary plan for the post. \n\nYour output must: \n\n- Recognise the discussion points of the blog post.\n\n- Be in dot point format.\n\nYou must ensure that the plan created satisfies the search intent and revolves directly around the given keywords. \n\nWhen making the plan keep in mind that all keywords must be used in the final blog post. \n\nThe final goal of the project is to create a high quality, high value, highly relevant blog post that will satisfy the users search intent and give them everything they need to know about the topic. \n\nA new project just came across your desk with below keywords and search intent:\n\nKeywords: \n{{ $json.Keywords }}\n\nSearch intent: \n{{ $json.Intent }}\n\nPrimary keyword: \n{{ $json['Primary Keyword'] }}\n\nCreate the preliminary plan."}]},"options":{}},"type":"@n8n/n8n-nodes-langchain.openAi","typeVersion":1.8,"position":[-3664,1024],"id":"71c3a43a-c836-4448-9d9f-3ef8fd492faf","name":"Preliminary Plan"},{"parameters":{"modelId":{"__rl":true,"value":"o1-preview","mode":"list","cachedResultName":"O1-PREVIEW"},"messages":{"values":[{"content":"=You are part of a team that creates world class blog posts. \n\nFor each new blog post project, you are provided with a list of keywords, a primary keyword, search intent, research findings and a preliminary blog post plan. Here's a definition of each of the inputs: \n\n- Keywords: These are the keywordswhich the blog post is meant to rank for on SEO. They should be scattered throughout the blog post intelligently to help with SEO. \n\n- Search intent: The search intent recognises the intent of the user when searching up the keyword. Our goal is to optimise the blog post to be highly relevant and valuable to the user, as such the search intent should be satisfied within the blog post. \n\n- Research findings: This is research found from very reputable resources in relation to the blog post. You must intelligently use this research to make your blog post more reputable. \n\n- Preliminary plan: Very basic plan set out by your colleague to kick off the blog post. \n\n- Primary keyword: Out of the keywords, there is one keyword known as the primary keyword. The primary keyword is the keyword which has the highest SEO importance and as such must go in the title and first few sentences of the blog post. It is important that the blog post is highly relevant to the primary keyword, so that it could be placed naturally into the title and introduction sections. \n\n\nGiven the said info, you must create a detailed plan for the blog post. \n \nYour output must: \n\n- Include a plan for the blog post.\n\n- Be in dot point format. \n\n- In each part of the blog post, you must mention which keywords should be placed. \n\nHere are the other things you must consider: \n\n- All keywords must be placed inside the blog post. For each section, mention which keywords to include. The keyword placement must feel natural and must make sense. \n\n- You must include all research points in the blog post. When including the research points, make sure to also include their source URL so that the copywriter can use them as hyperlinks. \n\n- You must ensure that the plan created satisfies the search intent and revolves directly around the given keywords. \n\n- Your plan must be very detailed. \n\n- Keep in mind the copywriter that will use your plan to write the blog post is not an expert in the topic of the blog post. So you should give them all the detail required so they can just turn it into nicely formatted paragraphs. So your plan should include all technical detail regarding each point to be in the blog post. For example instead of saying \"define X\", you must have \"define X as ...\". \n\n- The plan you create must have a flow that makes sense. \n\n- You must ensure the bog post will be highly detailed and satisfy the most important concepts regarding the topic. \n\nA new project has just came across your desk with below details:\n\nKeywords: \n{{ $('Grab New Cluster').item.json.Keywords }} \n\nSearch intent: \n{{ $('Grab New Cluster').item.json.Intent }}\n\nPreliminary plan: \n{{ $('Preliminary Plan').item.json.message.content }}\n\nResearch findings: \n{{ $json.research }}\n\nPrimary keyword: \n{{ $('Grab New Cluster').item.json['Primary Keyword'] }}\n\nCreate the detailed plan. \n\nYour output must only be the plan and nothing else. \n"}]},"options":{}},"type":"@n8n/n8n-nodes-langchain.openAi","typeVersion":1.8,"position":[-2944,864],"id":"4990fb55-9104-4289-bf91-026c99c467d9","name":"Create plan"},{"parameters":{"modelId":{"__rl":true,"value":"anthropic/claude-3.5-sonnet:beta","mode":"id"},"messages":{"values":[{"content":"=You are part of a team that creates world class blog posts. \n\nYou are the teams best copywriter and are responsible for writing out the actual blog post. \n\nFor each new blog post project you are provided with a detailed plan and research findings. \n\nYour job is to create the blog post by closely following the detailed plan. \n\nThe blog post you create must: \n\n- Follow the plan bit by bit. \n\n- Use short paragraphs. \n\n- Use bullet points and subheadings with keywords where appropriate.  \n\n- Not have any fluff. The content of the blog must be value dense and direct. \n\n- Be very detailed. \n\n- Include the keywords mentioned in each section within that section. \n\n- Use the research as advised by the plan. Make sure to include the link associated with each point you extract from the research at the end of that section in the form of a URL.  \n\n- Place the primary keyword in the blog title, H1 header and early in the introduction. \n\n- Place one keyword for each section in the heading of that section. \n\n-  When possible pepper synonyms of the keywords throughout each section. \n\n- When possible use Latent Semantic Indexing (LSI) keywords and related terms to enhance context (e.g., “robotic process automation” for RPA). \n\n- Be at minimum 2000 to 2500 words long. \n\n- Be suitable for a year 5 reading level. \n\nMake sure to create the entire blog post draft in your first output. Don't stop or cut it short. \n\nHere are the details of your next blog post project: \n\nDetailed Plan: \n{{ $json.message.content }}\n\nDetailed Research: \n{{ $('Fix Links1').item.json.research }}\n\n\nWrite the blog post."}]},"options":{}},"type":"@n8n/n8n-nodes-langchain.openAi","typeVersion":1.8,"position":[-2640,864],"id":"953c6b69-6c56-4acc-9041-2384b42d9ba5","name":"Write Blog"},{"parameters":{"operation":"update","documentId":{"__rl":true,"value":"1yz2ekTV_aJk2X2C0e3QU3t4Th-_dZdbaOCVWTHIjBg8","mode":"list","cachedResultName":"Keywords","cachedResultUrl":"https://docs.google.com/spreadsheets/d/1yz2ekTV_aJk2X2C0e3QU3t4Th-_dZdbaOCVWTHIjBg8/edit?usp=drivesdk"},"sheetName":{"__rl":true,"value":"gid=0","mode":"list","cachedResultName":"AI Agents","cachedResultUrl":"https://docs.google.com/spreadsheets/d/1yz2ekTV_aJk2X2C0e3QU3t4Th-_dZdbaOCVWTHIjBg8/edit#gid=0"},"columns":{"mappingMode":"defineBelow","value":{"Primary Keyword":"={{ $('Grab New Cluster').last().json['Primary Keyword'] }}","Completed":"Yes"},"matchingColumns":["Primary Keyword"],"schema":[{"id":"Cluster","displayName":"Cluster","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true},{"id":"Intent","displayName":"Intent","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true},{"id":"Keywords","displayName":"Keywords","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true},{"id":"Primary Keyword","displayName":"Primary Keyword","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false},{"id":"Completed","displayName":"Completed","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true},{"id":"row_number","displayName":"row_number","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"readOnly":true,"removed":true}],"attemptToConvertTypes":false,"convertFieldsToString":false},"options":{}},"type":"n8n-nodes-base.googleSheets","typeVersion":4.5,"position":[192,1088],"id":"111d237b-363b-4702-a99c-9b43a61ad80d","name":"Check as completed on Sheets"},{"parameters":{"content":"## Get Image\n\n\n\n \n \n","height":240,"width":360},"type":"n8n-nodes-base.stickyNote","position":[-496,1008],"typeVersion":1,"id":"2ee8b395-9a08-43a2-ab06-bed38e64394e","name":"Sticky Note11"},{"parameters":{"content":"## Post\n\n\n\n\n \n \n","height":240,"width":220},"type":"n8n-nodes-base.stickyNote","position":[-144,1008],"typeVersion":1,"id":"1e8e281d-6d05-4d96-aeb3-a685ba6d41b3","name":"Sticky Note12"},{"parameters":{"content":"## Completion\n\n\n\n\n\n \n \n","height":240,"width":480},"type":"n8n-nodes-base.stickyNote","position":[112,1008],"typeVersion":1,"id":"881d9ba9-1763-4923-ad6a-dd6ba591b26a","name":"Sticky Note13"},{"parameters":{"content":"# CLUSTER SEO POST\n\n \n \n","height":100,"width":500,"color":4},"type":"n8n-nodes-base.stickyNote","position":[-4208,528],"typeVersion":1,"id":"237c1136-7ef3-4317-8deb-5defc95b66f7","name":"Sticky Note14"},{"parameters":{"rule":{"interval":[{"field":"cronExpression","expression":"2 1 * * 2"}]}},"type":"n8n-nodes-base.scheduleTrigger","typeVersion":1.2,"position":[-4096,1024],"id":"2287151f-3cea-4891-b4f5-ee433048d03d","name":"Schedule Trigger1"},{"parameters":{"assignments":{"assignments":[{"id":"23b8e8c4-9191-415a-9661-1b60d413528a","name":"research","value":"={{ $json.choices[0].message.content.replaceAll(\"[1]\", \" - source: \" +$json.citations[0]).replaceAll(\"[2]\",\" source:\" +$json.citations[1]).replaceAll(\"[3]\",\" - source: \" +$json.citations[2]).replaceAll(\"[4]\",\" - source: \"+$json.citations[3]).replaceAll(\"[5]\",\" - source: \"+$json.citations[4]).replaceAll(\"[6]\",\" - source: \"+$json.citations[5]).replaceAll(\"[7]\",\" - source: \"+$json.citations[6]).replaceAll(\"[8]\",\" - source: \"+$json.citations[7]).replaceAll(\"[9]\",\" - source: \"+$json.citations[8]).replaceAll(\"[10]\",\" - source: \"+$json.citations[9]) }}","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[-3136,1024],"id":"47f36bd2-be11-4d6d-bc3b-c1a106360a89","name":"Fix Links1"},{"parameters":{"aggregate":"aggregateAllItemData","destinationFieldName":"previous-posts","options":{}},"type":"n8n-nodes-base.aggregate","typeVersion":1,"position":[-2160,1088],"id":"67856ede-a085-4399-b142-3206b5e73cc1","name":"Aggregate1"},{"parameters":{"documentId":{"__rl":true,"value":"1t-J2x22lsG6TpktQLBkwaS-ewuJI2WQvB-g4vQspbYU","mode":"list","cachedResultName":"Completed Keywords","cachedResultUrl":"https://docs.google.com/spreadsheets/d/1t-J2x22lsG6TpktQLBkwaS-ewuJI2WQvB-g4vQspbYU/edit?usp=drivesdk"},"sheetName":{"__rl":true,"value":"gid=0","mode":"list","cachedResultName":"Sheet1","cachedResultUrl":"https://docs.google.com/spreadsheets/d/1t-J2x22lsG6TpktQLBkwaS-ewuJI2WQvB-g4vQspbYU/edit#gid=0"},"options":{}},"type":"n8n-nodes-base.googleSheets","typeVersion":4.5,"position":[-2320,1088],"id":"2ae750ef-cbf2-4c45-adb2-556faf195e8e","name":"Previous Posts1"},{"parameters":{"modelId":{"__rl":true,"value":"o1-mini-2024-09-12","mode":"list","cachedResultName":"O1-MINI-2024-09-12"},"messages":{"values":[{"content":"=You are part of a team that creates world class blog posts. \n\nYou are in charge of internal linking between blog posts. \n\nFor each new blog post that comes across your desk, your job is to look through previously posted blogs and make atleast 5 internal links. \n\nTo choose the best internal linking opportunities you must: \n\n- Read the previous blog post summaries and look through their keywords. If there is a match where the previous blog post is highly relevant, then this is an internal linking opportunity. \n\n- Do not link if it is not highly relevant. Only make a link if it makes sense and adds value for the reader. \n\nOnce you've found the best linking opportunities, you must update the blog post with the internal links. To do this you must: \n\n- Add the link of the previous blog post at the relevant section of the new blog post. Drop the URL at the place which makes most sense. Later we will hyperlink the URL to the word in the blog post which it is placed next to. So your placing is very important. \n\nMake sure to not delete any existing URLs or change anything about the blog post provided to you. You must only add new internal linking URLs and output the revised blog post. \n\nYour output must be the blog post given to you plus the new urls. Don't remove any info. \n\nDon't return the previous blog posts. Only return the current blog post with the internal links added.\n\nCurrent blog Post: \n{{ $('Write Blog').last().json.message.content }}\n\nPrevious Blog Posts: \n{{ $json['previous-posts'].toJsonString().split() }}\n\n"}]},"options":{}},"type":"@n8n/n8n-nodes-langchain.openAi","typeVersion":1.8,"position":[-2048,928],"id":"7d50514a-50bf-407d-a713-013aafab51f7","name":"Add internal links1"},{"parameters":{"modelId":{"__rl":true,"value":"gpt-4o-mini","mode":"list","cachedResultName":"GPT-4O-MINI"},"messages":{"values":[{"content":"=Create a slug for the following blog post: \n{{ $('Add internal links1').item.json.message.content }}\n\nA slug in a blog post is the part of the URL that comes after the domain name and identifies a specific page. It is typically a short, descriptive phrase that summarizes the content of the post, making it easier for users and search engines to understand what the page is about. For example, in the URL www.example.com/intelligent-agents, the slug is intelligent-agents. A good slug is concise, contains relevant keywords, and avoids unnecessary words to improve readability and SEO. \n\nThe slug must be 4 or 5 words max and must include the primary keyword of the blog post which is {{ $('Grab New Cluster').last().json['Primary Keyword'] }}.\n\nYour output must be the slug and nothing else so that I can copy and paste your output and put it at the end of my blog post URL to post it right away. "}]},"options":{}},"type":"@n8n/n8n-nodes-langchain.openAi","typeVersion":1.8,"position":[-1376,1088],"id":"15859987-f502-4638-bdf4-7f19d1ac2e75","name":"Slug1"},{"parameters":{"modelId":{"__rl":true,"value":"gpt-4o-2024-11-20","mode":"list","cachedResultName":"GPT-4O-2024-11-20"},"messages":{"values":[{"content":"=Extract the blog post title from the following blog post: \n{{ $('Add internal links1').item.json.message.content }}\n\n\n\nThe blog post title must include the primary keyword {{ $('Grab New Cluster').last().json['Primary Keyword'] }} and must inform the users right away of what they can expect from reading the blog post. \n\n- Don't put the output in \"\". The output should just text with no markdown or formatting. \n\nYour output must only be the blog post title and nothing else. "}]},"options":{}},"type":"@n8n/n8n-nodes-langchain.openAi","typeVersion":1.8,"position":[-1088,1088],"id":"e6125c96-12da-4600-9412-91f5d716da4b","name":"Title1"},{"parameters":{"modelId":{"__rl":true,"value":"gpt-4o-2024-11-20","mode":"list","cachedResultName":"GPT-4O-2024-11-20"},"messages":{"values":[{"content":"=Create a good meta description for the following blog post: \n\n{{ $('Add internal links1').item.json.message.content }}\n\nA good meta description for a blog post that is SEO-optimized should:\n- Be Concise: Stick to 150-160 characters to ensure the full description displays in search results. \n- Include Keywords: Incorporate primary keywords naturally to improve visibility and relevance to search queries.\n\nPrimary keyword = {{ $('Grab New Cluster').last().json['Primary Keyword'] }}\n\nMore keywords to include if possible = [{{ $('Grab New Cluster').last().json.Keywords }}]\n\n- Provide Value: Clearly describe what the reader will learn or gain by clicking the link. \n\n- Be Engaging: Use persuasive language, such as action verbs or a question, to encourage clicks. \n\n- Align with Content: Ensure the description accurately reflects the blog post to meet user expectations and reduce bounce rates. \n\nYour output must only be the meta description and nothing else. \n"}]},"options":{}},"type":"@n8n/n8n-nodes-langchain.openAi","typeVersion":1.8,"position":[-784,1088],"id":"a162c452-17ba-4d50-bee1-1f02a6d18529","name":"Meta description1"},{"parameters":{"modelId":{"__rl":true,"value":"o1-preview","mode":"list","cachedResultName":"O1-PREVIEW"},"messages":{"values":[{"content":"=DO NOT OUTPUT ANYTHING OTHER THAN THE CODE. I want you to follow the layout of the template as a guide to generate the WordPress code for a blog post. Here are the rules to follow:\n\nThe blog post should have a title, estimated reading time, key takeaways, table of contents, body, and FAQ in this order.\nMake it engaging by using italics, dot points, quotes, bold, spaces, and sometimes new lines. Never use emojis.\nThe blog post will have some URLs referenced next to certain keyphrases to show where the info came from. You must hyperlink the keyphrase with the provided URL so that the reader can click on the referenced URL. It is critical you get this right.\nWrap the entire content in a container <div> with inline CSS that sets the text color to white (#ffffff), uses a legible font such as Arial, sans-serif, and sets line-height to 1.6.\nEnsure that all non-heading text elements (e.g., paragraphs, list items) have an inline style or embedded style that sets their font size to 20px and color to white (#ffffff) using !important to override theme styles.\nHyperlinks, points in the table of contents, and FAQ questions must be styled in blue (#00c2ff).\nAll headings and subheadings should have an underline implemented via a bottom border in blue (#00c2ff) with appropriate padding.\nPlace a double break (<br><br>) between each section to improve readability.\nDo not output any extra text or mention code tags like HTML''' around the output; just output the HTML code.\nBlog post: \n\n{{ $json.message.content }}\n\nHere's an example of a well formatted output:\n\n<div style=\"color: #ffffff; font-family: Arial, sans-serif; line-height: 1.6;\"> <style> p, .wp-block-paragraph, ul.wp-block-list, li { color: #ffffff !important; font-size: 20px !important; } a { color: #00c2ff !important; } </style> <h1 id=\"h-devin-ai-the-hype-and-reality-of-an-ai-software-engineer\" class=\"wp-block-heading\" style=\"border-bottom: 2px solid #00c2ff; padding-bottom: 5px;\">Devin AI: The Hype and Reality of an AI Software Engineer</h1> <br><br> <p class=\"estimated-reading-time\" style=\"color: #ffffff; font-size: 20px !important;\">Estimated reading time: 5 minutes</p> <br><br> <h2 id=\"h-key-takeaways\" class=\"wp-block-heading\" style=\"border-bottom: 2px solid #00c2ff; padding-bottom: 5px;\"><strong>Key Takeaways</strong></h2> <br><br> <ul class=\"wp-block-list\"> <li><mark style=\"background-color: #ffd966;\"><strong>Devin AI</strong></mark> claims to be the world's first fully autonomous AI software engineer.</li> <br><br> <li>Initial demos and claims have generated significant <mark style=\"background-color: #ffff00;\">hype</mark> and interest.</li> <br><br> <li>Critics argue some capabilities may be exaggerated or misleading.</li> <br><br> <li>Real-world testing reveals both <em>strengths</em> and <em>limitations</em>.</li> <br><br> <li>The true impact on software engineering remains to be seen.</li> </ul> <br><br> <div class=\"wp-block-yoast-seo-table-of-contents yoast-table-of-contents\"> <h2 style=\"color: #ffffff; border-bottom: 2px solid #00c2ff; padding-bottom: 5px;\">Table of contents</h2> <br><br> <ul> <li><a href=\"#h-devin-ai-the-hype-and-reality-of-an-ai-software-engineer\" data-level=\"1\">Devin AI: The Hype and Reality of an AI Software Engineer</a></li> <br><br> <li><a href=\"#h-key-takeaways\" data-level=\"2\">Key Takeaways</a></li> <br><br> <li><a href=\"#h-what-is-devin-ai\" data-level=\"2\">What is Devin AI?</a></li> <br><br> <li><a href=\"#h-the-hype-around-devin-ai\" data-level=\"2\">The Hype Around Devin AI</a></li> <br><br> <li><a href=\"#h-putting-devin-to-the-test\" data-level=\"2\">Putting Devin to the Test</a></li> <br><br> <li><a href=\"#h-the-reality-check\" data-level=\"2\">The Reality Check</a></li> <br><br> <li><a href=\"#h-the-future-of-ai-in-software-development\" data-level=\"2\">The Future of AI in Software Development</a></li> <br><br> <li><a href=\"#h-frequently-asked-questions\" data-level=\"2\">Frequently Asked Questions</a></li> </ul> </div> <br><br> <p>Devin AI has burst onto the tech scene, promising to revolutionize software development as we know it. But does this AI-powered coding assistant live up to the hype? Let's dive into what Devin AI really is, what it can do, and what developers are saying after putting it to the test.</p> <br><br> <!-- Rest of blog post content goes here --> </div>\n"}]},"options":{}},"type":"@n8n/n8n-nodes-langchain.openAi","typeVersion":1.8,"position":[-1696,928],"id":"58dbb11e-e627-4704-b744-82d133574aa1","name":"HTML version1"},{"parameters":{"url":"https://serpapi.com/search?engine=google_images","authentication":"genericCredentialType","genericAuthType":"httpQueryAuth","sendQuery":true,"queryParameters":{"parameters":[{"name":"q","value":"={{ $('Title1').item.json.message.content }}"},{"name":"gl","value":"us"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-448,1088],"id":"d03fca96-20fd-475b-93d4-f2877ea65336","name":"Image Covers1"},{"parameters":{"assignments":{"assignments":[{"id":"1f0541df-05ab-4e3d-a5d8-3904579fc8a9","name":"image-url","value":"={{ $json.images_results[1].original }}","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[-288,1088],"id":"c79d69ab-338f-467e-9a59-9377b7c6ea4f","name":"Edit Fields1"},{"parameters":{"operation":"append","documentId":{"__rl":true,"value":"1t-J2x22lsG6TpktQLBkwaS-ewuJI2WQvB-g4vQspbYU","mode":"list","cachedResultName":"Completed Keywords","cachedResultUrl":"https://docs.google.com/spreadsheets/d/1t-J2x22lsG6TpktQLBkwaS-ewuJI2WQvB-g4vQspbYU/edit?usp=drivesdk"},"sheetName":{"__rl":true,"value":"gid=0","mode":"list","cachedResultName":"Sheet1","cachedResultUrl":"https://docs.google.com/spreadsheets/d/1t-J2x22lsG6TpktQLBkwaS-ewuJI2WQvB-g4vQspbYU/edit#gid=0"},"columns":{"mappingMode":"defineBelow","value":{"Blog Title ":"={{ $('Title1').item.json.message.content }}","Keywords":"={{ $('Grab New Cluster').last().json.Keywords }}","Summary ":"={{ $('Meta description1').item.json.message.content }}","URL":"=https://YourURL/{{ $('Slug1').item.json.message.content }}"},"matchingColumns":[],"schema":[{"id":"Blog Title ","displayName":"Blog Title ","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true},{"id":"Keywords","displayName":"Keywords","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true},{"id":"Summary ","displayName":"Summary ","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true},{"id":"URL","displayName":"URL","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true}],"attemptToConvertTypes":false,"convertFieldsToString":false},"options":{}},"type":"n8n-nodes-base.googleSheets","typeVersion":4.5,"position":[384,1088],"id":"36e76819-9e9c-441c-b049-49140b761e07","name":"Google Sheets1"},{"parameters":{"content":"## Schedule a trigger\n \n","height":240,"width":260},"type":"n8n-nodes-base.stickyNote","position":[-4176,928],"typeVersion":1,"id":"084378e7-ca02-4f04-a392-bb5149c6a406","name":"Sticky Note15"},{"parameters":{"content":"## New Post Info\n \n","height":240},"type":"n8n-nodes-base.stickyNote","position":[-3920,928],"typeVersion":1,"id":"c3010642-7183-44a8-9b6b-0da2d55cb09e","name":"Sticky Note16"},{"parameters":{"content":"## Preliminary Post Plan \n \n","height":240,"width":300},"type":"n8n-nodes-base.stickyNote","position":[-3680,928],"typeVersion":1,"id":"55d76faf-e313-4fb3-9c46-5d9bc5bf16b4","name":"Sticky Note17"},{"parameters":{"content":"## Research\n \n \n","height":240,"width":180},"type":"n8n-nodes-base.stickyNote","position":[-3376,928],"typeVersion":1,"id":"7f57feed-8a2d-4000-b17c-a014f9ba8f59","name":"Sticky Note18"},{"parameters":{"content":"## Post Plan \n \n","height":240,"width":300},"type":"n8n-nodes-base.stickyNote","position":[-2960,784],"typeVersion":1,"id":"89e87b0d-344c-462e-a960-e4f25a0ce67f","name":"Sticky Note19"},{"parameters":{"content":"## Writing Blog\n \n \n","height":240,"width":300},"type":"n8n-nodes-base.stickyNote","position":[-2656,784],"typeVersion":1,"id":"8e66167d-91b7-4b02-b56c-e6718bd228b8","name":"Sticky Note20"},{"parameters":{"method":"POST","url":"https://api.perplexity.ai/chat/completions","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"specifyBody":"json","jsonBody":"={\n  \"model\": \"sonar-pro\",\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"Act as a professional news researcher who is capable of finding detailed summaries about a news topic from highly reputable sources.\"\n    },\n    {\n      \"role\": \"user\",\n      \"content\": \"{{ $json.message.content.split(/\\n+/).join(' ').replaceAll('\"', ' ') }}\"\n    }\n  ]\n}\n","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-3344,1024],"id":"1a17b979-9b42-42bf-80f2-7bd8fd5adf62","name":"Research1","credentials":{"httpHeaderAuth":{"id":"y97zmr8F665tRMyl","name":"Together.ai Auth account"}}},{"parameters":{"content":"## Internal Links\n \n \n","height":240,"width":300},"type":"n8n-nodes-base.stickyNote","position":[-2064,848],"typeVersion":1,"id":"88ce18b9-22d4-4b59-99e6-b11da9a957ba","name":"Sticky Note21"},{"parameters":{"content":"## HTML\n\n \n \n","height":240,"width":340},"type":"n8n-nodes-base.stickyNote","position":[-1760,848],"typeVersion":1,"id":"43501011-c20c-4c3d-89b9-9533d888b32a","name":"Sticky Note22"},{"parameters":{"content":"## Slug\n\n\n \n \n","height":240,"width":320},"type":"n8n-nodes-base.stickyNote","position":[-1424,1008],"typeVersion":1,"id":"7161aae0-5459-4ee2-82bf-d6c13f432087","name":"Sticky Note23"},{"parameters":{"content":"## Post Title\n\n\n \n \n","height":240,"width":300},"type":"n8n-nodes-base.stickyNote","position":[-1104,1008],"typeVersion":1,"id":"fff4d199-e023-4b60-ad2e-ee13a603f96c","name":"Sticky Note24"},{"parameters":{"content":"## Meta Description\n\n\n \n \n","height":240,"width":300},"type":"n8n-nodes-base.stickyNote","position":[-800,1008],"typeVersion":1,"id":"61cf5a40-fea0-4f8e-b4ca-a171a3d9d97c","name":"Sticky Note25"},{"parameters":{"title":"={{ $('Title1').item.json.message.content }}","additionalFields":{"authorId":2,"content":"=<img src=\"{{ $json['image-url'] }}\" alt=\"Cover Image\">\n{{ $('HTML version1').item.json.message.content }}","slug":"={{ $('Slug1').item.json.message.content }}","status":"draft","commentStatus":"closed","sticky":false,"categories":[280],"tags":[281],"postTemplate":{"values":{}}}},"type":"n8n-nodes-base.wordpress","typeVersion":1,"position":[-64,1088],"id":"25b14eb4-c2ab-4456-ae02-7a19880fc15b","name":"Wordpress1"},{"parameters":{"url":"https://stockfeed.cmscloud.co.za/cms/publishedStock/jac04","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-2400,1600],"id":"9b01e783-605c-4225-9463-6f95169ff26c","name":"HTTP Request"},{"parameters":{"httpMethod":"POST","path":"9c054bb1-4446-4502-be98-ffd3c8ca1f2d","options":{}},"type":"n8n-nodes-base.webhook","typeVersion":2,"position":[-2544,2640],"id":"f54e5e5e-d3a2-4ba2-a971-4a3d62b24beb","name":"Webhook","webhookId":"9c054bb1-4446-4502-be98-ffd3c8ca1f2d"},{"parameters":{"toolDescription":"Tavily SERP Results Tool","method":"POST","url":"https://api.tavily.com/search","sendBody":true,"parametersBody":{"values":[{"name":"api_key","valueProvider":"fieldValue","value":"add your api key"},{"name":"query","valueProvider":"fieldValue","value":"={{ $json.Keyword }}"}]}},"type":"@n8n/n8n-nodes-langchain.toolHttpRequest","typeVersion":1.1,"position":[-1664,2864],"id":"21319c38-fb63-4a64-99d2-5b0ecf3e8013","name":"Tavily search results"},{"parameters":{"model":"claude-3-5-sonnet-20241022","options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatAnthropic","typeVersion":1.2,"position":[-1888,2864],"id":"6b73385c-9365-49ab-8456-ecbeaf3b8de2","name":"Anthropic Chat Model"},{"parameters":{"base":{"__rl":true,"value":"appuvbLPrnVBj88Eb","mode":"list","cachedResultName":"WebXco D4SEO KW Research New 011925","cachedResultUrl":"https://airtable.com/appuvbLPrnVBj88Eb"},"table":{"__rl":true,"value":"tblVTpv8JG5lZRiF2","mode":"list","cachedResultName":"Article Writer","cachedResultUrl":"https://airtable.com/appuvbLPrnVBj88Eb/tblVTpv8JG5lZRiF2"},"id":"={{ $json.query.recordID }}","options":{}},"type":"n8n-nodes-base.airtable","typeVersion":2.1,"position":[-2320,2640],"id":"04402478-9b57-45ed-ba42-242febc2de06","name":"Airtable Get Article Data"},{"parameters":{"assignments":{"assignments":[{"id":"3cc01dbf-7718-49ae-a463-c0e848a78cc6","name":"id","value":"={{ $json.id }}","type":"string"},{"id":"7dbd7d60-2454-47ee-b02a-3ffddd588009","name":"Title","value":"={{ $json.Title }}","type":"string"},{"id":"bf205dfc-ce10-40fe-b868-0bebd4de3d33","name":"Description","value":"={{ $json.Description }}","type":"string"},{"id":"ccce37af-f230-4d5d-bf74-9e69d965be08","name":"Keyword","value":"={{ $json.Keyword }}","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[-2096,2640],"id":"f892fa59-2a4e-4ddd-9eca-032366268dba","name":"Set Airtable Fields for Agents"},{"parameters":{"assignments":{"assignments":[{"id":"7e444c83-3d2b-4bd3-a23b-6fb5ca68e670","name":"writing_style","value":"={{ $json.output.parseJson().writing_style }}","type":"string"},{"id":"e16b5d65-587d-49d8-af5d-4ff1930633a8","name":"writing_tone","value":"={{ $json.output.parseJson().writing_tone }}","type":"string"},{"id":"ab756373-0186-454a-8e98-d5a5f96cba87","name":"search_intent","value":"={{ $json.output.parseJson().search_intent }}","type":"string"},{"id":"a14b7657-038a-4b08-911d-314336261a0c","name":"hidden_insight","value":"={{ $json.output.parseJson().hidden_insight }}","type":"string"},{"id":"19ef4221-5a5d-4321-8a07-4e04f5dcaf44","name":"target_audience","value":"={{ $json.output.parseJson().target_audience }}","type":"string"},{"id":"0ab17e84-4a2e-4df3-b0a3-91e9ce26cb72","name":"article_goal","value":"={{ $json.output.parseJson().goal_of_article }}","type":"string"},{"id":"84e7f6a4-48b2-43b2-92cc-7e0337311661","name":"semantic_analysis","value":"={{ $json.output.parseJson().semantic_analysis }}","type":"string"},{"id":"5e943a46-bb03-438d-b6da-2a6ec414f5af","name":"keywords","value":"={{ $json.output.parseJson().keywords }}","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[-1488,2640],"id":"8b0a02b7-60a9-4fbf-a8ce-64afa70f436a","name":"Set KWs and Insights fields"},{"parameters":{"promptType":"define","text":"=Revise the blog post title. Consider:\nPrimary Keyword: {{ $('Set Airtable Fields for Agents').item.json.Keyword }}\nWorking title: {{ $('Set Airtable Fields for Agents').item.json.Title }}\nSearch intent: {{ $('Set KWs and Insights fields').item.json.search_intent }}\nSemantic analysis: {{ $('Set KWs and Insights fields').item.json.semantic_analysis }}\nSecondary keywords: {{ $('Set KWs and Insights fields').item.json.keywords }}\nWriting style: {{ $('Set KWs and Insights fields').item.json.writing_style }}\nWriting tone: {{ $('Set KWs and Insights fields').item.json.writing_tone }}\nArticle goal: {{ $('Set KWs and Insights fields').item.json.article_goal }}\n\n\nOutput only JSON\nIMPORTANT: Do not add extra spaces, extra characters or include any additional text.\n","options":{"systemMessage":"You are an expert in crafting highly engaging, SEO-optimized article titles that drive clicks and rank well in search engines. \n\nYour goal is to refine the **initial working title** into a **clear, compelling, and search-friendly title** that aligns with:\n- **Primary and Secondary Keywords** → Ensure relevance for search engines.\n- **Search Intent** → Match the intent behind the keyword (informational, transactional, navigational, or commercial).\n- **Common Subtopics & Related Questions** → Reflect what users want to learn.\n- **Writing Style & Tone** → Ensure consistency with the article's voice.\n- **Click-Worthiness** → Make the title engaging and appealing for readers.\n\n### **Your Task:**\n1. **Analyze the given input data**, including the working title, primary keyword, and supporting data.\n2. **Refine the title** to be more **SEO-friendly, engaging, and aligned with search intent**.\n3. **Incorporate relevant keywords naturally**, without keyword stuffing.\n4. **Ensure clarity and readability**—avoid overly complex or vague titles.\n5. **Return only the final refined title as a plain text string.**\n\n---\n### **Title Guidelines:**\n- Keep it **between 50-60 characters** (ideal for SEO).\n- Use **power words** or numbers when appropriate (e.g., \"10 Proven Ways,\" \"Ultimate Guide\").\n- Avoid unnecessary words or fluff.\n- Ensure it **reads naturally** and **appeals to human curiosity**.\n\n---\n### **Example Inputs & Outputs:**\n\n#### **Example 1**\n**Working Title:** \"Understanding AI Automation for Businesses\"  \n**Primary Keyword:** \"AI automation for small businesses\"  \n**Search Intent:** Informational  \n**Refined Title Output:** **AI Automation for Small Businesses: How to Save Time & Boost Revenue**\n\n---\n#### **Example 2**\n**Working Title:** \"The Best Winter Gear for Cyclists\"  \n**Primary Keyword:** \"best winter gear for cyclists\"  \n**Search Intent:** Commercial  \n**Refined Title Output:** **Best Winter Cycling Gear: Stay Warm & Ride Safely in Cold Weather**\n\n---\n### **Output Format:**\nReturn the refined title in standard JSON. Do not include triple ''' or extra line breaks or spaces.\n"}},"type":"@n8n/n8n-nodes-langchain.agent","typeVersion":1.7,"position":[-976,2640],"id":"3093953e-5730-45a2-958e-9abf67e06b5d","name":"Refine the Title"},{"parameters":{"assignments":{"assignments":[{"id":"eafbe44d-f811-4660-9f89-0ebe61febdcc","name":"key_takeaways","value":"={{ $json.output }}","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[224,2640],"id":"5eed61ad-034a-4459-bfb0-0cda6e712535","name":"Set Key Takeaways"},{"parameters":{"promptType":"define","text":"=Create Key Takeaways using:\n\n- **Title**: {{ $('Sets New Title Field').item.json.new_title }}\nPrimary Keyword: {{ $('Set Airtable Fields for Agents').item.json.Keyword }}\nTitle: {{ $('Set Airtable Fields for Agents').item.json.Title }}\nHidden Insight: {{ $json.fields['Hidden Insight'] }}\nSearch intent: {{ $('Set KWs and Insights fields').item.json.search_intent }}\nSemantic analysis: {{ $('Set KWs and Insights fields').item.json.semantic_analysis }}\nSecondary keywords: {{ $('Set KWs and Insights fields').item.json.keywords }}\nWriting style: {{ $('Set KWs and Insights fields').item.json.writing_style }}\nWriting tone: {{ $('Set KWs and Insights fields').item.json.writing_tone }}\nArticle goal: {{ $('Set KWs and Insights fields').item.json.article_goal }}\n\n\n\n","options":{"systemMessage":"You are an expert content strategist specializing in crafting structured, insightful, and engaging **key takeaways** for articles. Your goal is to summarize the most important information while ensuring the takeaways are **concise, impactful, and easy to digest**.\n\n### **Your Task:**\n1. **Generate an introductory paragraph** that sets up the key takeaways and provides context for the reader.\n2. **Extract the most valuable takeaways** from the provided data:\n   - **Key concepts** covered in the article.\n   - **Relevant semantic subtopics** that align with the topic.\n   - **Hidden insights** (if applicable) that add unique value.\n3. **Format each takeaway in Markdown** as:\n[Action-driven bolded heading]: Concise explanation inline.\n- The **bolded heading** should be **engaging and impactful** (not generic).  \n- The **explanation should be concise and inline with the heading**.  \n- **No section headers, extra spaces, or dividers**.  \n4. **Ensure takeaways provide substantial knowledge** but are not overwhelming:\n- If the **hidden insight** adds value, incorporate it as a **dedicated takeaway** or **enhance an existing one**.\n- If the **hidden insight does not fit naturally**, exclude it.\n5. **Write an outro paragraph** that smoothly leads into the main body of the article.\n\n### **Formatting & Style Guidelines**\n✅ **Use Markdown for formatting**  \n✅ **Bullet points with inline bolded headings**  \n✅ **No extra section headers, dividers, or spaces**  \n✅ **Use engaging, action-driven takeaway headers** (e.g., \"Beyond fixed rules: AI adapts in real time\" instead of \"A paradigm shift from traditional automation\")  \n✅ **Ensure takeaways are concise yet informative**  \n\n### **Example Inputs & Outputs**\n---\n#### **Input Example**\n**Article Title:** `\"AI Automation for Small Businesses: How to Save Time & Boost Revenue\"`  \n**Primary Keyword:** `\"AI automation for small businesses\"`  \n**Hidden Insight:** `\"Most AI automation content focuses on efficiency, but a major benefit is reducing decision fatigue.\"`  \n**Common Subtopics:** `[\"What is AI automation?\", \"How small businesses can use AI\", \"Best AI tools for automation\"]`\n\n---\n#### **Output Example**\n```markdown\nAI automation is transforming small businesses by optimizing workflows, improving efficiency, and enhancing decision-making. Below are the key takeaways highlighting its potential.\n\n- **AI enables true autonomy through adaptive learning:** Unlike traditional systems, AI learns and evolves over time, reducing human supervision by refining its decision-making processes independently.  \n- **Beyond fixed rules: AI adapts in real time:** Traditional AI follows static rules, whereas AI-driven automation dynamically adjusts to changing environments, solving complex, unsupervised tasks.  \n- **AI agents optimize complex workflows effortlessly:** These intelligent systems manage intricate processes with greater efficiency, improving operations like customer support, supply chain management, and fraud detection.  \n- **Seamless integration into business operations:** AI integrates with existing systems like CRMs and ERP platforms, allowing businesses to modernize workflows without overhauling infrastructure.  \n- **Scalability without added complexity:** AI systems manage process complexity and expand capabilities, enabling businesses to scale efficiently without requiring proportional increases in resources.  \n- **AI minimizes decision fatigue, maximizing human focus:** By handling routine and complex decisions autonomously, AI reduces cognitive load on human teams, allowing them to focus on high-value tasks.  \n- **AI ensures resilience through continuous optimization:** Through machine learning, AI refines its models over time, ensuring consistent performance even in dynamic and unpredictable environments.  \n- **AI innovation transforming industries:** Sectors like manufacturing, healthcare, and finance leverage AI for predictive maintenance, personalized care, and risk assessment.  \n\nAI-driven automation offers a new frontier for workflow innovation by replacing static rule-based automation with intelligent, adaptive systems. In the sections ahead, we’ll explore its core components, industry applications, and strategies for seamless business integration.\n\nOutput Format:\nReturn the final takeaways in Markdown format, structured as:\n\nIntro paragraph\nBullet points with inline bolded headings and concise explanations\nOutro paragraph\n\n"}},"type":"@n8n/n8n-nodes-langchain.agent","typeVersion":1.7,"position":[-176,2640],"id":"098710a4-842c-4637-8b7a-c6c3eef6d256","name":"Key Takeaways AI Agent"},{"parameters":{"assignments":{"assignments":[{"id":"fe43bcff-a163-4cac-aca8-cf97241b834b","name":"introduction","value":"={{ $json.output }}","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[784,2640],"id":"9a5a18a8-9756-49fb-9b5b-a759ba6effe3","name":"Set Introduction Field"},{"parameters":{"promptType":"define","text":"=Generate a detailed outline for a blog post with the following details:\n\n- **Title**: {{ $('Sets New Title Field').item.json.new_title }}\n- **Key Takeaways**: {{ $('Set Key Takeaways').item.json.key_takeaways }}\n- **Introduction**: {{ $json.introduction }}\nPrimary Keyword: {{ $('Set Airtable Fields for Agents').item.json.Keyword }}\nTitle: {{ $('Set Airtable Fields for Agents').item.json.Title }}\nSearch intent: {{ $('Set KWs and Insights fields').item.json.search_intent }}\nSemantic analysis: {{ $('Set KWs and Insights fields').item.json.semantic_analysis }}\nSecondary keywords: {{ $('Set KWs and Insights fields').item.json.keywords }}\nWriting style: {{ $('Set KWs and Insights fields').item.json.writing_style }}\nWriting tone: {{ $('Set KWs and Insights fields').item.json.writing_tone }}\nArticle goal: {{ $('Set KWs and Insights fields').item.json.article_goal }}\n\nFormatting Instructions:\n\nOutput must be in Markdown format and structured correctly.\nDo NOT add any commentary, explanations, or extra text about what the agent did.\nDo NOT include dividers (---), line breaks (\\n), or unnecessary whitespace.\nOnly return the required Markdown content—nothing more.\n","options":{"systemMessage":"You are an expert content strategist specializing in structuring articles for clarity, engagement, and SEO effectiveness. Your goal is to generate a **detailed, logical outline** that ensures a smooth reading experience and maximizes content relevance.\n\n### **Your Task:**\n1. **Analyze the provided inputs**, including the article title, primary keyword, key takeaways, semantic analysis, secondary keywords, and hidden insights (if applicable).\n2. **Generate an optimized outline** by:\n   - Structuring the article with a **clear hierarchy of sections**.\n   - Aligning with **SEO best practices** and **user intent**.\n   - Ensuring **logical progression** from start to finish.\n   - Incorporating **hidden insights** if they enhance the content.\n   - **Using secondary keywords and semantic elements (common subtopics & related questions) naturally in headings/subheadings** for SEO.\n3. **Ensure the outline includes:**\n   - **Main sections covering key aspects of the topic**\n   - **Logical sub-sections** that break down complex ideas\n4. **The article title, introduction, and conclusion should be used as references but NOT included in the outline.**\n5. **Format the output in Markdown**:\n   - Use `##` for main sections.\n   - Use `###` for subsections.\n   - Avoid unnecessary headings—keep sections focused and purposeful.\n\n### **Formatting & Style Guidelines**\n✅ **Use Markdown formatting.**  \n✅ **Ensure a logical, structured progression from start to finish.**  \n✅ **Incorporate hidden insights if they enhance the outline.**  \n✅ **Use secondary keywords and semantic elements naturally in headings.**  \n✅ **Exclude the article title, introduction, and conclusion from the final outline.**  \n✅ **Use concise but descriptive section explanations.**  \n\n### **Example Inputs & Outputs**\n---\n#### **Input Example**\n**Article Title:** `\"AI Automation for Small Businesses: How to Save Time & Boost Revenue\"`  \n**Primary Keyword:** `\"AI automation for small businesses\"`  \n**Secondary Keywords:** `[\"AI workflow automation\", \"small business AI tools\", \"automating business operations\"]`  \n**Key Takeaways:** `[\"AI automation reduces decision fatigue.\", \"It improves operational efficiency and workflow management.\", \"Small businesses can implement AI affordably.\"]`  \n**Hidden Insight:** `\"Most discussions on AI automation focus on efficiency, but its real impact is on business adaptability—helping companies pivot faster in changing markets.\"`  \n**Semantic Analysis:**  \n- **Common Subtopics:** `[\"What is AI automation?\", \"How small businesses can use AI\", \"Best AI tools for automation\"]`  \n- **Related Questions:** `[\"What are the best AI automation tools for small businesses?\", \"How does AI improve small business efficiency?\"]`  \n\n---\n#### **Output Example** markdown\n## What is AI Automation?  \n### Understanding AI-powered business automation *(Secondary Keyword Applied)*  \n- Definition of AI automation and its key components.  \n- How AI-powered automation differs from traditional workflow automation.  \n\n### Why small businesses need AI workflow automation *(Semantic & SEO Applied)*  \n- How AI helps small businesses optimize time and improve operations.  \n- Examples of industries benefiting from AI-driven efficiency.  \n\n## Key Benefits of AI in Small Business Operations  \n### Reducing decision fatigue in business owners *(Key Takeaway Applied)*  \n- How AI automation minimizes repetitive decision-making.  \n- Freeing up business owners to focus on strategy and innovation.  \n\n### Boosting efficiency with small business AI tools *(Secondary Keyword Applied)*  \n- The role of AI in automating workflows, customer interactions, and task management.  \n- How automation tools improve productivity.  \n\n### Improving business adaptability with AI *(Hidden Insight Applied)*  \n- How AI enables businesses to pivot quickly in response to market changes.  \n- Case studies on AI-driven adaptability.  \n\n## Implementing AI for Small Business Growth  \n### Choosing the best AI automation tools *(Semantic & SEO Applied)*  \n- Factors to consider when selecting AI-powered solutions.  \n- Overview of top AI tools for small businesses.  \n\n### Automating business operations without disrupting workflows *(Secondary Keyword Applied)*  \n- Best practices for integrating AI seamlessly into existing processes.  \n- How to ensure a smooth transition without disrupting operations.  \n\n\n"}},"type":"@n8n/n8n-nodes-langchain.agent","typeVersion":1.7,"position":[-2528,3248],"id":"cbf615e2-6aa4-4ea7-8dfc-65f6042c8cef","name":"Outline Agent"},{"parameters":{"model":"gpt-4o-2024-11-20","options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenAi","typeVersion":1.1,"position":[-2560,3424],"id":"bddb21f1-215a-4b7e-a933-0a1186478c65","name":"OpenAI Chat Model"},{"parameters":{"assignments":{"assignments":[{"id":"5b6a40be-b640-4caf-a531-50a45df07be8","name":"outline","value":"={{ $json.output }}","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[-2160,3248],"id":"a5a1e423-52ae-4907-b6fa-51e971f9e103","name":"Set Outline Fields"},{"parameters":{"promptType":"define","text":"={{ $json.output }}","options":{"systemMessage":"You are an AI writing agent responsible for generating only the main body of an article based on a structured prompt. Your writing must be well-formatted in Markdown, insightful, logically structured, and engaging for the target audience.\n\nGuidelines\n✅ Follow the provided prompt exactly. Ensure adherence to the user-provided outline and structure.\n✅ Format the article in Markdown using:\n\nH2 (##) for main sections\nH3 (###) for subsections\nBullet points (-), numbered lists (1. 2. 3.), and bold formatting (**bold text**) where necessary.\n✅ Ensure smooth transitions between sections.\nEnd sections with a transition sentence that leads into the next topic.\nAvoid abrupt shifts—maintain logical flow.\n✅ Enhance depth with real-world case studies.\nProvide measurable outcomes (e.g., \"A 20% efficiency gain led to $5M in annual savings\").\nDetail implementation challenges, solutions, and business results.\n✅ Balance readability with a mix of paragraphs & lists.\nUse bullet points sparingly—convert them into mini-paragraphs where needed.\nLists should highlight key takeaways, not dominate sections.\n✅ Ensure keyword optimization.\nNaturally integrate primary and secondary keywords within the article.\nAvoid overuse—prioritize readability over keyword stuffing.\n✅ Fact-driven & logically structured.\nAvoid redundant explanations—each section should introduce new insights.\nEnsure distinctions between related topics (e.g., “Managing Complexity” should not repeat “Adaptive Learning”).\n✅ No introduction or conclusion.\nFocus only on the main body sections based on the structured prompt.\n"}},"type":"@n8n/n8n-nodes-langchain.agent","typeVersion":1.7,"position":[-1520,3248],"id":"707c0615-3805-450e-b362-1f485f859e8c","name":"Content Writer Agent"},{"parameters":{"promptType":"define","text":"=Write an engaging introduction for a blog post with the following details:\n\n- **Title**: {{ $('Sets New Title Field').item.json.new_title }}\n- **Key Takeaways**: {{ $json.key_takeaways }} \nPrimary Keyword: {{ $('Set Airtable Fields for Agents').item.json.Keyword }}\nTitle: {{ $('Set Airtable Fields for Agents').item.json.Title }}\nSearch intent: {{ $('Set KWs and Insights fields').item.json.search_intent }}\nSemantic analysis: {{ $('Set KWs and Insights fields').item.json.semantic_analysis }}\nSecondary keywords: {{ $('Set KWs and Insights fields').item.json.keywords }}\nWriting style: {{ $('Set KWs and Insights fields').item.json.writing_style }}\nWriting tone: {{ $('Set KWs and Insights fields').item.json.writing_tone }}\nArticle goal: {{ $('Set KWs and Insights fields').item.json.article_goal }}\n\n\nThe introduction should:\n- Hook the reader with a surprising fact, question, or statement.\n- Explain why the topic matters and how it benefits the reader.\n- Transition naturally into the body of the article.\n- Use keywords naturally but sparingly.\n\nExample Introduction:\nImagine having an extra pair of hands to handle your business's repetitive tasks while you focus on the big picture—growing your company. It might sound like a luxury, but AI agents are making it a reality for small businesses everywhere.\n\nSmall business owners often juggle countless responsibilities, from managing operations to engaging customers. AI agents provide a way to streamline routine tasks, improve productivity, and even elevate customer experiences, all while saving time and resources.\n\nThis article dives into how AI agents can transform your business, helping you scale operations, save time, and stay competitive. Whether you’re seeking efficiency or growth, you’ll discover how this powerful technology can work for you.\n\nFormatting Instructions:\n\nOutput must be in Markdown format and structured correctly.\nDo NOT add any commentary, explanations, or extra text about what the agent did.\nDo NOT include dividers (---), line breaks (\\n), or unnecessary whitespace.\nOnly return the required Markdown content—nothing more.","options":{"systemMessage":"You are an expert content writer specializing in crafting compelling introductions for articles. Your goal is to **hook the reader, set expectations, and establish relevance** while maintaining clarity and engagement.\n\n### **Your Task:**\n1. **Analyze the provided inputs**, including the article title, primary keyword, key takeaways, and target audience.\n2. **Write a compelling introduction** that:\n   - **Opens with a direct, concise statement** that immediately presents the topic.\n   - **Avoids generic phrases** like *\"In today’s fast-paced world...\"* or *\"Businesses are constantly evolving...\"*.\n   - **Clearly states the article’s purpose** and what the reader will learn.\n   - **Flows naturally into the main body** without being overly long.\n3. **Match the article’s writing style and tone** to ensure consistency.\n4. **Incorporate the primary keyword naturally** for SEO without forcing it.\n5. **Ensure readability and engagement**:\n   - Keep the introduction concise (2-3 short paragraphs).\n   - Avoid fluff—make every sentence valuable.\n   - **Use streamlined transition sentences** (e.g., *\"Let’s explore how...\"* instead of *\"In this article, we will explore...\"*).\n\n### **Formatting & Style Guidelines**\n✅ **Use Markdown formatting.**  \n✅ **Start with a direct, engaging opening sentence.**  \n✅ **Avoid generic phrases or overused business clichés.**  \n✅ **Keep it concise yet informative (2-3 short paragraphs).**  \n✅ **Ensure a smooth transition into the main body.**  \n✅ **Maintain a natural, compelling flow that matches the writing tone & style.**  \n\n### **Example Inputs & Outputs**\n---\n#### **Input Example**\n**Article Title:** `\"AI Automation for Small Businesses: How to Save Time & Boost Revenue\"`  \n**Primary Keyword:** `\"AI automation for small businesses\"`  \n**Key Takeaways:** `[\"AI automation reduces decision fatigue.\", \"It improves operational efficiency and workflow management.\", \"Small businesses can implement AI affordably.\"]`  \n**Writing Style:** `\"Engaging and storytelling\"`  \n**Writing Tone:** `\"Friendly and conversational\"`  \n\n---\n#### **Output Example** markdown\nTraditional automation is falling behind in today’s fast-moving business world. Enter agentic AI automation—a transformative technology that redefines efficiency and decision-making by enabling systems to think, learn, and act autonomously. Unlike static rule-based systems, these intelligent automation solutions continuously adapt and optimize without constant human intervention.  \n\nFor businesses, this means more than just convenience; it’s the promise of streamlined operations, scalable solutions, and reduced cognitive load for teams. From managing intricate workflows to integrating seamlessly with existing tools, agentic AI bridges the gap between innovation and practicality.  \n\nLet’s explore how agentic AI is revolutionizing industries, boosting productivity, and setting a new benchmark for intelligent automation.  \n"}},"type":"@n8n/n8n-nodes-langchain.agent","typeVersion":1.7,"position":[448,2640],"id":"1bcedd95-5183-47b8-9e2d-469d39d3e420","name":"Introduction Agent"},{"parameters":{"model":"gpt-4o-2024-11-20","options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenAi","typeVersion":1.1,"position":[-944,3424],"id":"5e040473-47ff-4203-a678-2bf9293dcc90","name":"OpenAI Chat Model2"},{"parameters":{"promptType":"define","text":"=Assemble the article from the following components into a single cohesive output formatted in Markdown:\n\n- **Key Takeaways**: {{ $('Set Key Takeaways').item.json.key_takeaways }}\n- **Introduction**: {{ $('Introduction Agent').item.json.output }}\n- **Main Content**: {{ $('Edit Fields3').item.json['main body'] }}\n- **Conclusion**: {{ $json.conclusion }}\n\n### Output Format:\n- Use `##` for main section headings like Key Takeaways, Introduction, and Conclusion.\n- Use `##` for primary headings (H2s) in the main content.\n- Use `###` for subheadings (H3s) under those primary headings.\n- Format lists as bulleted lists using `-`.\n- Write paragraphs in plain text, separated by line breaks.\n\nExample Output:\n\n## Key Takeaways\n- AI automation reduces costs and improves efficiency for SMBs.\n- Examples show how AI streamlines workflows and enhances customer service.\n- Step-by-step advice helps SMBs adopt AI effectively.\n\n## Introduction\nAI automation is a transformative tool for small businesses, offering improved efficiency, cost reduction, and scalability.\n\n## How Intelligent Process Automation Works\nIntelligent process automation (IPA) isn’t just about speed—it’s about working smarter.\n\n### Reducing Manual Work and Process Errors with Automation\nAutomating manual tasks like payroll processing slashes error rates by up to 90%.\n\n### Boosting Process Efficiency Across Business Functions\nFrom HR to sales, IPA ensures consistency and efficiency.\n\n## Conclusion\nAI automation is a pathway to transforming how small businesses operate and grow. By streamlining workflows, enhancing customer experiences, and enabling smarter decision-making, AI empowers businesses to achieve more with less effort.\n\n\n","options":{"systemMessage":"You are an expert content assembler. Your task is to take separate elements of an article—key takeaways, introduction, main content (including subheadings), and conclusion—and assemble them into a single cohesive output. The final output should be formatted in Markdown for a CMS blog post field.\n\nGuidelines:\n\n1. Use `##` for section headings (Key Takeaways, Introduction, and Conclusion).\n2. Use `##` for primary headings (H2s) from the main content.\n3. Use `###` for subheadings (H3s) under those primary headings.\n4. Write paragraphs as plain text, separated by line breaks.\n5. Ensure the output is clean and properly formatted in Markdown without unnecessary placeholders like \"Main Content.\"\n6. Do not include triple backticks (''') or any additional spaces or text outside of the conclusion itself.\nEnsure clean and structured formatting without unnecessary dividers or extra line breaks.\n\n\n\n"}},"type":"@n8n/n8n-nodes-langchain.agent","typeVersion":1.7,"position":[-304,3248],"id":"1db3dff3-6205-4a00-9edf-c3935af650f4","name":"Article Assembly Agent"},{"parameters":{"model":"gpt-4o-2024-11-20","options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenAi","typeVersion":1.1,"position":[-336,3424],"id":"338e2171-9c4e-4add-ac79-4dd6bf17aab3","name":"OpenAI Chat Model3"},{"parameters":{"resource":"folder","name":"={{ $('Sets New Title Field').item.json.new_title }}","driveId":{"__rl":true,"mode":"list","value":"My Drive"},"folderId":{"__rl":true,"value":"17umi6Ludb1XqqtxqqZn9bRJxOCkdwz8z","mode":"id"},"options":{}},"type":"n8n-nodes-base.googleDrive","typeVersion":3,"position":[-2576,3712],"id":"335f357d-81c8-4001-9593-503dde089901","name":"Create Article Folder"},{"parameters":{"operation":"share","fileId":{"__rl":true,"value":"={{ $json.documentId }}","mode":"id"},"permissionsUi":{"permissionsValues":{"role":"writer","type":"anyone"}},"options":{}},"type":"n8n-nodes-base.googleDrive","typeVersion":3,"position":[-704,3712],"id":"17baf11a-434d-4fbd-9408-1fdee4a1346b","name":"Google Drive"},{"parameters":{"operation":"update","base":{"__rl":true,"value":"appuvbLPrnVBj88Eb","mode":"list","cachedResultName":"WebXco D4SEO KW Research New 011925","cachedResultUrl":"https://airtable.com/appuvbLPrnVBj88Eb"},"table":{"__rl":true,"value":"tblVTpv8JG5lZRiF2","mode":"list","cachedResultName":"Article Writer","cachedResultUrl":"https://airtable.com/appuvbLPrnVBj88Eb/tblVTpv8JG5lZRiF2"},"columns":{"mappingMode":"defineBelow","value":{"id":"={{ $('Airtable Get Article Data').item.json.id }}","Google Doc URL":"={{ $json.url }}"},"matchingColumns":["id"],"schema":[{"id":"id","displayName":"id","required":false,"defaultMatch":true,"display":true,"type":"string","readOnly":true,"removed":false},{"id":"Title","displayName":"Title","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Description","displayName":"Description","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Create Article","displayName":"Create Article","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"options","options":[{"name":"Write Article","value":"Write Article"},{"name":"Keep","value":"Keep"}],"readOnly":false,"removed":false},{"id":"Keyword","displayName":"Keyword","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Primary Keyword","displayName":"Primary Keyword","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Category","displayName":"Category","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Google Doc URL","displayName":"Google Doc URL","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Writing Style","displayName":"Writing Style","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Tone","displayName":"Tone","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Target Audience","displayName":"Target Audience","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Goal of Article","displayName":"Goal of Article","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Title Options","displayName":"Title Options","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"options","options":[{"name":"Original Title","value":"Original Title"}],"readOnly":false,"removed":false}],"attemptToConvertTypes":false,"convertFieldsToString":false},"options":{}},"type":"n8n-nodes-base.airtable","typeVersion":2.1,"position":[-288,3712],"id":"b46f712f-bac5-458f-9378-c14709d306b5","name":"Airtable"},{"parameters":{"promptType":"define","text":"=Use the given:\nTitle: {{ $json.Title }}\nDescription: {{ $json.Description }}\nAnd the Tavily SERP Results tool to perform research for the primary keyword, {{ $('Airtable Get Article Data').item.json.Keyword }}. \n\nFormat your response as a JSON object:\nIMPORTANT: Do not include extra text, introduction messages, line breaks \\n, or any additional characters.\nJSON Output\n{\n  \"search_intent\": \"<string: informational | transactional | navigational | commercial>\",\n  \"writing_style\": \"<string: concise and professional | engaging and storytelling | data-driven and technical | etc.>\",\n  \"writing_tone\": \"<string: friendly and conversational | formal and authoritative | persuasive and compelling | etc.>\",\n  \"hidden_insight\": \"<string: unique insight if found, otherwise 'No significant insights detected beyond existing content trends.'>\",\n  \"target_audience\": \"<string: who this article is for, e.g., small business owners, tech enthusiasts, marketers, etc.>\",\n  \"goal_of_article\": \"<string: main objective of the article based on search results and insights>\",\n  \"semantic_analysis\": {\n    \"common_subtopics\": [\n      \"<string: subtopic 1>\",\n      \"<string: subtopic 2>\",\n      \"<string: subtopic 3>\"\n    ],\n    \"related_questions\": [\n      \"<string: question 1>\",\n      \"<string: question 2>\",\n      \"<string: question 3>\"\n    ]\n  },\n  \"keywords\": {\n    \"primary_keyword\": \"<string: main focus keyword>\",\n    \"secondary_keywords\": [\n      \"<string: related keyword 1>\",\n      \"<string: related keyword 2>\",\n      \"<string: related keyword 3>\"\n    ],\n    \"semantic_keywords\": [\n      \"<string: semantic keyword 1>\",\n      \"<string: semantic keyword 2>\",\n      \"<string: semantic keyword 3>\"\n    ],\n    \"long_tail_keywords\": [\n      \"<string: long-tail keyword 1>\",\n      \"<string: long-tail keyword 2>\",\n      \"<string: long-tail keyword 3>\"\n    ]\n  }\n}\n\n\nExample JSON Output with Hidden Insight\n{\n  \"search_intent\": \"informational\",\n  \"writing_style\": \"engaging and storytelling\",\n  \"writing_tone\": \"friendly and conversational\",\n  \"hidden_insight\": \"Most content focuses on efficiency and cost savings, but small business owners struggle with decision fatigue. AI automation is not just a time-saver—it helps reduce stress by eliminating repetitive decisions.\",\n  \"target_audience\": \"small business owners, solopreneurs, and startup founders\",\n  \"goal_of_article\": \"Educate small business owners on how AI automation reduces decision fatigue while increasing efficiency and revenue.\",\n  \"semantic_analysis\": {\n    \"common_subtopics\": [\n      \"What is AI automation?\",\n      \"How small businesses can use AI\",\n      \"Best AI tools for business automation\",\n      \"Cost vs. benefit analysis of AI automation\"\n    ],\n    \"related_questions\": [\n      \"How does AI reduce decision fatigue?\",\n      \"What’s the easiest way for small businesses to start using AI?\",\n      \"Is AI automation worth the cost for small businesses?\"\n    ]\n  },\n  \"keywords\": {\n    \"primary_keyword\": \"AI automation for small businesses\",\n    \"secondary_keywords\": [\n      \"AI-powered automation tools\",\n      \"best AI software for small businesses\",\n      \"workflow automation for entrepreneurs\"\n    ],\n    \"semantic_keywords\": [\n      \"business process automation\",\n      \"machine learning in small business\",\n      \"how AI helps efficiency\"\n    ],\n    \"long_tail_keywords\": [\n      \"how can AI help small businesses save time?\",\n      \"best AI automation tools for startups\",\n      \"AI vs manual workflow optimization\"\n    ]\n  }\n}\n\n\nExample JSON Output No Hidden Insight\n{\n  \"search_intent\": \"commercial\",\n  \"writing_style\": \"concise and professional\",\n  \"writing_tone\": \"informative and trustworthy\",\n  \"hidden_insight\": \"No significant insights detected beyond existing content trends.\",\n  \"target_audience\": \"cycling enthusiasts, winter sport athletes, and outdoor adventurers\",\n  \"goal_of_article\": \"Provide an in-depth comparison of the best winter cycling gear and help cyclists choose the right products based on weather conditions.\",\n  \"semantic_analysis\": {\n    \"common_subtopics\": [\n      \"What to look for in winter cycling gear\",\n      \"Top-rated winter cycling jackets and gloves\",\n      \"How to layer clothing for winter rides\",\n      \"Cycling safety tips for cold-weather conditions\"\n    ],\n    \"related_questions\": [\n      \"What is the warmest winter cycling jacket?\",\n      \"Are insulated cycling gloves worth it?\",\n      \"How do I stay warm on long winter bike rides?\"\n    ]\n  },\n  \"keywords\": {\n    \"primary_keyword\": \"best winter gear for cyclists\",\n    \"secondary_keywords\": [\n      \"winter cycling jackets\",\n      \"best gloves for cold weather cycling\",\n      \"waterproof cycling gear\"\n    ],\n    \"semantic_keywords\": [\n      \"insulated bike clothing\",\n      \"cold-weather cycling apparel\",\n      \"bike safety in winter\"\n    ],\n    \"long_tail_keywords\": [\n      \"how to choose winter cycling gloves?\",\n      \"best winter cycling gear for long-distance rides\",\n      \"how to keep hands warm while biking in winter\"\n    ]\n  }\n}\n\n","options":{"systemMessage":"You are an advanced AI content strategist trained to analyze search results and generate precise writing guidelines for an SEO-optimized blog post. Your goal is to ensure that the article aligns with **search intent**, **semantic relevance**, and **audience expectations** while also uncovering **hidden insights** that may provide a unique angle.\n\n### **Your Task:**\nYou will be given:\n- A **working title**\n- An **article description**\n- A **primary keyword**\n- A **set of search results** (retrieved via the Tavily search results tool)\n\nYour job is to analyze the data and generate **optimized writing guidelines** with the following structured JSON output:\n\n### **1️⃣ Search Intent Detection**  \nDetermine whether the primary intent of the keyword is:  \n- **informational** (learning about a topic)  \n- **transactional** (considering a purchase or service)  \n- **navigational** (finding a specific brand/website)  \n- **commercial** (comparing options before making a decision)  \n\n### **2️⃣ Writing Style & Tone**  \n- Identify the best **writing style** based on search results (e.g., “concise and professional,” “engaging and storytelling,” “data-driven and technical,” etc.).  \n- Identify the **appropriate tone** (e.g., “friendly and conversational,” “formal and authoritative,” “persuasive and compelling,” etc.).  \n\n### **3️⃣ Hidden Insight Extraction**  \n- Analyze **patterns in competitor content** to identify **an insight that is not immediately obvious** but could provide a unique angle.  \n- If no meaningful insight is found, return `\"hidden_insight\": \"No significant insights detected beyond existing content trends.\"`  \n- If an insight is found, clearly explain it.  \n- **Do NOT modify writing style or tone based on the insight**—insights should be separate observations, not tone/style adjustments.  \n\n### **4️⃣ Semantic Analysis (Content Structuring)**  \n- Extract the **common subtopics** frequently covered in top-ranking pages.  \n- Identify **related questions** users ask.  \n\n### **5️⃣ Keyword Extraction**  \n- Categorize keywords based on **how they should be used** later in the workflow.  \n- Format them as follows:  \n  - **Primary Keyword** → The main topic focus.  \n  - **Secondary Keywords** → Variations of the primary keyword that should be used naturally in the content.  \n  - **Semantic Keywords** → Contextually related terms that improve topic relevance.  \n  - **Long-Tail Keywords** → Natural search queries and phrases that match user questions.  \n\n### **Format your response strictly in valid JSON.**\n\n"}},"type":"@n8n/n8n-nodes-langchain.agent","typeVersion":1.7,"position":[-1856,2640],"id":"1d3535a5-cd79-43e2-93a4-e233fc9dfed5","name":"SERPs, Writing, KWs, Insights"},{"parameters":{"operation":"update","base":{"__rl":true,"value":"appuvbLPrnVBj88Eb","mode":"list","cachedResultName":"WebXco D4SEO KW Research New 011925","cachedResultUrl":"https://airtable.com/appuvbLPrnVBj88Eb"},"table":{"__rl":true,"value":"tblVTpv8JG5lZRiF2","mode":"list","cachedResultName":"Article Writer","cachedResultUrl":"https://airtable.com/appuvbLPrnVBj88Eb/tblVTpv8JG5lZRiF2"},"columns":{"mappingMode":"defineBelow","value":{"Writing Style":"={{ $json.writing_style }}","Tone":"={{ $json.writing_tone }}","Goal of Article":"={{ $json.article_goal }}","Target Audience":"={{ $json.target_audience }}","Search Intent":"={{ $json.search_intent }}","Hidden Insight":"={{ $json.hidden_insight }}","Semantic Analysis":"={{ $json.semantic_analysis }}","Keyword":"={{ $('Set Airtable Fields for Agents').item.json.Keyword }}","Keywords":"={{ $json.keywords }}"},"matchingColumns":["Keyword"],"schema":[{"id":"id","displayName":"id","required":false,"defaultMatch":true,"display":true,"type":"string","readOnly":true,"removed":true},{"id":"Title","displayName":"Title","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Final Title","displayName":"Final Title","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Description","displayName":"Description","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Create Article","displayName":"Create Article","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"options","options":[{"name":"Write Article","value":"Write Article"},{"name":"Keep","value":"Keep"}],"readOnly":false,"removed":false},{"id":"Keyword","displayName":"Keyword","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Primary Keyword","displayName":"Primary Keyword","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Category","displayName":"Category","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Google Doc URL","displayName":"Google Doc URL","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Writing Style","displayName":"Writing Style","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Tone","displayName":"Tone","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Target Audience","displayName":"Target Audience","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Goal of Article","displayName":"Goal of Article","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Search Intent","displayName":"Search Intent","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Hidden Insight","displayName":"Hidden Insight","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Semantic Analysis","displayName":"Semantic Analysis","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Keywords","displayName":"Keywords","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false}],"attemptToConvertTypes":false,"convertFieldsToString":false},"options":{}},"type":"n8n-nodes-base.airtable","typeVersion":2.1,"position":[-1264,2640],"id":"aecbb04b-31cc-40da-8f53-2211ee8aacbb","name":"Update Article Writer table"},{"parameters":{"assignments":{"assignments":[{"id":"438738d8-d610-47e3-9ddf-efcfb97d3701","name":"new_title","value":"={{ $json.output.parseJson().refined_title }}","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[-624,2640],"id":"56c37e6d-31a9-4e65-ac8f-67eb7514ab09","name":"Sets New Title Field"},{"parameters":{"operation":"update","base":{"__rl":true,"value":"appuvbLPrnVBj88Eb","mode":"list","cachedResultName":"WebXco D4SEO KW Research New 011925","cachedResultUrl":"https://airtable.com/appuvbLPrnVBj88Eb"},"table":{"__rl":true,"value":"tblVTpv8JG5lZRiF2","mode":"list","cachedResultName":"Article Writer","cachedResultUrl":"https://airtable.com/appuvbLPrnVBj88Eb/tblVTpv8JG5lZRiF2"},"columns":{"mappingMode":"defineBelow","value":{"Writing Style":"={{ $json.writing_style }}","Tone":"={{ $json.writing_tone }}","Goal of Article":"={{ $json.article_goal }}","Target Audience":"={{ $json.target_audience }}","Search Intent":"={{ $json.search_intent }}","Hidden Insight":"={{ $json.hidden_insight }}","Semantic Analysis":"={{ $json.semantic_analysis }}","Keyword":"={{ $('Set Airtable Fields for Agents').item.json.Keyword }}","Keywords":"={{ $json.keywords }}","Final Title":"={{ $json.new_title }}"},"matchingColumns":["Keyword"],"schema":[{"id":"id","displayName":"id","required":false,"defaultMatch":true,"display":true,"type":"string","readOnly":true,"removed":true},{"id":"Title","displayName":"Title","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Final Title","displayName":"Final Title","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Description","displayName":"Description","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Create Article","displayName":"Create Article","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"options","options":[{"name":"Write Article","value":"Write Article"},{"name":"Keep","value":"Keep"}],"readOnly":false,"removed":false},{"id":"Keyword","displayName":"Keyword","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Primary Keyword","displayName":"Primary Keyword","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Category","displayName":"Category","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Google Doc URL","displayName":"Google Doc URL","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Writing Style","displayName":"Writing Style","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Tone","displayName":"Tone","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Target Audience","displayName":"Target Audience","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Goal of Article","displayName":"Goal of Article","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Search Intent","displayName":"Search Intent","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Hidden Insight","displayName":"Hidden Insight","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Semantic Analysis","displayName":"Semantic Analysis","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Keywords","displayName":"Keywords","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false}],"attemptToConvertTypes":false,"convertFieldsToString":false},"options":{}},"type":"n8n-nodes-base.airtable","typeVersion":2.1,"position":[-400,2640],"id":"976f92df-b25f-411c-af3c-2284d949c424","name":"Update Article Title"},{"parameters":{"model":"gpt-4o-2024-11-20","options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenAi","typeVersion":1.1,"position":[-1040,2848],"id":"49bcdb2f-8004-4abc-bb81-c6b4cf2641a5","name":"Open AI"},{"parameters":{"model":"gpt-4o-2024-11-20","options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenAi","typeVersion":1.1,"position":[-208,2848],"id":"14ab12ac-3c77-48c1-8adc-620974a589d2","name":"OpenAI Key Takeaways"},{"parameters":{"model":"gpt-4o-2024-11-20","options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenAi","typeVersion":1.1,"position":[400,2832],"id":"cc77a477-8edc-44f2-a8f1-2eb48114f49f","name":"OpenAI"},{"parameters":{"promptType":"define","text":"=Create a comprehensive, SEO-optimized prompt for an AI article writer using the data below.\n\nPrimary Keyword: {{ $('Set Airtable Fields for Agents').item.json.Keyword }}\nTitle: {{ $('Set Airtable Fields for Agents').item.json.Title }}\nHidden insight: {{ $('Set KWs and Insights fields').item.json.hidden_insight }}\nSearch intent: {{ $('Set KWs and Insights fields').item.json.search_intent }}\nSemantic analysis: {{ $('Set KWs and Insights fields').item.json.semantic_analysis }}\nSecondary keywords: {{ $('Set KWs and Insights fields').item.json.keywords }}\nWriting style: {{ $('Set KWs and Insights fields').item.json.writing_style }}\nWriting tone: {{ $('Set KWs and Insights fields').item.json.writing_tone }}\nArticle goal: {{ $('Set KWs and Insights fields').item.json.article_goal }}\nOutline: {{ $json.outline }}","options":{"systemMessage":"Your Role & Task\nYou are an AI prompt engineering specialist with expertise in crafting structured, SEO-optimized, and adaptable writing prompts.\nYour job is to generate a concise yet effective prompt that will guide an AI writing agent in producing a high-quality, well-structured article body based on the provided inputs.\n\nPrompt Requirements\nYour generated prompt should:\n✅ Guide the AI writing agent to write only the main body sections—the introduction, key takeaways, and conclusion are handled separately.\n✅ Follow the article’s outline as a guiding framework, ensuring natural flow and logical transitions between sections.\n✅ Encourage informative, engaging, and well-structured writing, tailored to the topic and audience.\n✅ Incorporate SEO best practices naturally, ensuring primary and secondary keywords are used in relevant sections without forced placement.\n✅ Evaluate the relevance of hidden insights—if useful, include them as a core argument or supporting detail; if not, leave them out.\n✅ Use semantic analysis, related questions, and common subtopics to strengthen content depth.\n✅ Ensure flexibility—allow the AI writing agent to expand on ideas, incorporate examples, and maintain logical coherence.\n\nExample Inputs & Outputs\nExample Inputs\nTitle: \"The Best Fishing Destinations in North America\"\nPrimary Keyword: \"best fishing destinations\"\nSecondary Keywords: \"top fishing spots, fishing in North America, best places for fishing\"\nSearch Intent: \"Informational\"\nWriting Style: \"Engaging and expert-driven\"\nWriting Tone: \"Conversational yet authoritative\"\nArticle Goal: \"Provide anglers with a comprehensive guide to the best fishing destinations, key factors to consider, and seasonal variations.\"\nSemantic Analysis (Common Subtopics & Related Questions):\n{\n  \"common_subtopics\": [\n    \"Freshwater vs. saltwater fishing: Key differences\",\n    \"Best fishing seasons for different regions\",\n    \"Gear recommendations based on fishing style\"\n  ],\n  \"related_questions\": [\n    \"What are the best fishing spots in North America?\",\n    \"Where can I find great deep-sea fishing locations?\",\n    \"What’s the best time of year to go fishing?\"\n  ]\n}\nHidden Insight (if applicable): \"Many top-ranked fishing destinations have conservation programs that impact seasonal availability, which most travel guides overlook.\"\nOutline:\n## Best Freshwater Fishing Spots  \nExploring the top lakes and rivers for freshwater fishing.  \n\n## Best Deep-Sea Fishing Destinations  \nHighlighting prime locations for saltwater and offshore fishing.  \n\n## Seasonal Considerations  \nHow different seasons affect fishing opportunities.  \n\n## Essential Gear & Preparation Tips  \nWhat to bring for a successful fishing trip.  \n\nxample Output (Generated Writing Prompt for the AI Writing Agent)\nWriting Prompt: The Best Fishing Destinations in North America\nObjective:\nCraft a well-structured, SEO-optimized, and engaging article body focusing on fishing destinations in North America. The article should provide actionable insights, expert recommendations, and real-world considerations to help anglers choose the best locations.\n\nTarget Audience:\nRecreational and professional anglers looking for detailed guidance on fishing locations, seasonal factors, and essential gear.\n\nGuidelines for the AI Writing Agent\n1. Follow the Outline for Logical Structure & Expansion\nUse the provided outline as a structural blueprint, ensuring smooth transitions between sections.\nExpand each section with relevant insights, expert opinions, and practical examples rather than merely summarizing.\nDO NOT include an introduction or conclusion—focus strictly on main body sections.\n2. Natural Integration of Keywords (SEO-Optimized)\nPrimary Keyword: \"{{Primary Keyword}}\" should appear organically in relevant sections.\nSecondary Keywords: \"{{Secondary Keywords}}\" should be integrated contextually to enhance SEO without overuse.\nLong-Tail & Semantic Keywords: Use these strategically in discussions, answering key questions where applicable.\nAvoid forced keyword placement—prioritize readability and clarity.\n3. Adapt Writing Style & Tone Based on Topic\nFor technical/business content: Maintain a formal, authoritative, and data-driven approach.\nFor consumer, lifestyle, or travel content: Use an engaging, expert-guide tone with practical insights.\nEnsure clear, well-researched content that suits the target audience.\n4. Expand on Semantic Insights & Related Questions\nAddress common subtopics where relevant, such as:\nDefining key concepts to establish clarity.\nComparing approaches, tools, or strategies for deeper understanding.\nExploring industry-specific challenges & solutions where applicable.\nIntegrate related questions naturally—e.g., \"What are the best fishing spots in North America?\" or \"How does AI automation impact business efficiency?\"\n5. Use Hidden Insights Only If Relevant\nEvaluate whether the hidden insight adds value to the article.\nIf applicable, incorporate it as a key supporting argument to enrich the content.\nIf not relevant, omit it rather than forcing inclusion.\n6. Provide Real-World Applications & Actionable Advice\nOffer examples, case studies, or industry applications to enhance reader engagement.\nProvide actionable steps where applicable (e.g., how to implement AI tools, how to choose the right fishing destination, best practices for content marketing).\n7. Formatting for Readability & Engagement\nUse subheadings, bullet points, and short paragraphs for easy scanning.\nInclude lists, tips, or expert recommendations where useful.\nEnsure logical section transitions while maintaining engagement.\n8. No Introduction or Conclusion—Only Write Main Body Sections\nDO NOT include an introduction or conclusion—focus strictly on the main body content as structured in the outline.\n\n"}},"type":"@n8n/n8n-nodes-langchain.agent","typeVersion":1.7,"position":[-1936,3248],"id":"ca8b2df7-0892-4845-9f50-d86d6c9cbac2","name":"Main Body Prompt Writer"},{"parameters":{"model":{"__rl":true,"value":"gpt-4o-2024-11-20","mode":"list","cachedResultName":"gpt-4o-2024-11-20"},"options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenAi","typeVersion":1.2,"position":[-1984,3472],"id":"e57370a1-9f39-40bc-aea1-7fb5fb4ef994","name":"OpenAI Chat Model1"},{"parameters":{"promptType":"define","text":"=Use the main body content of an article to write a conclusion. Output markdown format.\n\nMain Body\n{{ $json['main body'] }}","options":{"systemMessage":"You are an expert writing assistant specializing in crafting concise, insightful, and impactful conclusions for articles across various topics. Your goal is to summarize the key takeaways, reinforce the article’s value, and leave the reader with a lasting impression.\n\nGuidelines for Generating the Conclusion:\n\n✅ Summarize Key Takeaways Without Repetition\n\nIdentify the most essential points from the article without repeating entire sentences from the main body.\n\nHighlight core insights, trends, or findings in a concise manner.\n\n✅ Reinforce the Article’s Value & Relevance\n\nEmphasize why the information matters in the broader context of the topic.\n\nAlign with the article’s purpose—whether it’s to educate, inform, persuade, or provide solutions.\n\n✅ Deliver a Strong Final Thought\n\nEnd with a compelling, forward-looking, or actionable statement.\n\nConsider:\n\nA thought-provoking question\n\nA call to action (if relevant)\n\nA statement on future implications or ongoing developments\n\nAvoid generic phrases (e.g., “This is just the beginning” or “The future looks bright”).\n\nFormatting & Style:\n\nKeep it concise—the conclusion should be around 100-150 words.\n\nUse clear, authoritative, and engaging language.\n\nAdapt tone and style to match the article (technical, business, educational, etc.).\n\nInput:\n\nThe main body of the article (excluding introduction & key takeaways)\n\nThe article's title (for context)\n\nOutput:A well-structured conclusion that effectively summarizes key points, reinforces relevance, and ends with a compelling thought.\n\nExample Conclusion for a Business Article\n\n(Title: \"The Rise of Agentic AI in Workflow Automation\")\n\nAs businesses seek greater efficiency and adaptability, agentic AI automation is emerging as a transformative force in workflow management. By reducing cognitive load, managing complexity, and enabling continuous improvement, these systems empower organizations to operate with unprecedented precision and scalability.\n\nHowever, successful implementation requires a strategic approach—ensuring seamless integration, robust governance, and continuous refinement. Organizations that embrace this shift will gain a significant competitive edge, optimizing operations while driving innovation.\n\nFor businesses evaluating their automation strategies, the key question is no longer if agentic AI will play a role—but how soon they will adopt it to stay ahead in a rapidly evolving digital landscape.\n\nExample Conclusion for a Consumer Guide\n\n(Title: \"How to Choose the Best Electric Bike for Your Needs\")\n\nChoosing the right electric bike depends on your lifestyle, terrain, and riding preferences. Whether you need a powerful e-bike for commuting or a lightweight model for weekend adventures, understanding motor types, battery life, and key features ensures a smarter purchase.\n\nBy evaluating your specific needs and budget, you can invest in an e-bike that enhances both convenience and sustainability. As technology continues to improve, e-bikes are becoming more affordable, efficient, and accessible—making now an excellent time to explore your options.\n\nBefore making a final decision, test ride different models, compare specifications, and consider long-term factors like maintenance and warranty coverage. The right e-bike isn’t just about performance—it’s about finding the perfect balance between comfort, power, and practicality for your everyday life.\n\nOutput Requirements\nFormat the output in Markdown using ## for the conclusion heading.\nDo not include triple backticks (''') or any additional spaces or text outside of the conclusion itself.\nEnsure clean and structured formatting without unnecessary dividers or extra line breaks."}},"type":"@n8n/n8n-nodes-langchain.agent","typeVersion":1.7,"position":[-880,3248],"id":"35ec0e09-c82e-4882-8d4d-39d20bc8f229","name":"AI Agent Conclusion Writer"},{"parameters":{"assignments":{"assignments":[{"id":"7e24bb1b-7f69-4a4b-a414-d4acf444313e","name":"conclusion","value":"={{ $json.output }}","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[-528,3248],"id":"042d2e90-2ab9-4398-8070-b63b71f4a2b3","name":"Set Conclusion"},{"parameters":{"model":{"__rl":true,"value":"gpt-4o-2024-11-20","mode":"list","cachedResultName":"gpt-4o-2024-11-20"},"options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenAi","typeVersion":1.2,"position":[32,3472],"id":"bf0eb13a-8837-43bb-9059-cb45e1ceefbc","name":"OpenAI Chat Model4"},{"parameters":{"model":{"__rl":true,"value":"gpt-4o-2024-11-20","mode":"list","cachedResultName":"gpt-4o-2024-11-20"},"options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenAi","typeVersion":1.2,"position":[-1504,3472],"id":"41b6292c-2dac-4c3b-b575-daf65f1371af","name":"OpenAI Chat Model5"},{"parameters":{"promptType":"define","text":"=Perform the final edit on:\n {{ $json.output }}","options":{"systemMessage":"You are an expert SEO-optimized content final editor.\n\nYour task is to enhance and expand the provided article to near-perfect quality (9.5+/10) while maintaining clarity, logical flow, and readability. The final article should be well-structured, engaging, and adaptable to any topic, including (but not limited to) business, healthcare, technology, education, finance, environmental science, legal, consumer guides, and marketing.\n\n✅ General Refinement Guidelines\n1️⃣ Expand, Don’t Cut\nPreserve all valuable content while adding depth where necessary.\nDo not shorten or remove sections unless redundant or unclear.\nIf something feels incomplete, expand rather than delete it.\n2️⃣ Strengthen Section Transitions for Seamless Flow\nEnsure smooth transitions between sections by adding brief lead-ins before introducing a new concept.\nEach section should naturally build on the previous one—avoiding abrupt shifts.\nImplementation:\nIf a new section introduces a major topic, insert a transition sentence summarizing why the previous section matters.\nExample:\nBefore (Abrupt Shift):\n\"While automation improves efficiency, its true power emerges when integrated with existing systems.\"\nAfter (Smoother Transition):\n\"Efficiency gains are only part of the equation—true business impact comes from seamlessly integrating automation with existing workflows to ensure sustainable improvements.\"\n✅ Ensures smoother flow between ideas.\n\n3️⃣ Diversify Real-World Applications Across More Industries\nDo NOT over-focus on one industry or domain (e.g., AI, tech, or automation).\nWhere applicable, ensure varied examples in fields like:\nHealthcare (diagnostic automation, patient management)\nFinance (risk assessment, fraud detection, portfolio management)\nEducation (personalized learning, curriculum adaptation)\nLegal (contract automation, compliance monitoring)\nMarketing (data-driven campaigns, customer behavior analysis)\nRetail & E-commerce (inventory optimization, demand forecasting)\nConsumer Behavior (product recommendations, pricing strategies)\nEnvironmental Science (climate impact modeling, resource allocation)\nImplementation:\nIf the article lacks industry diversity, add 1–2 additional sector applications.\nExample:\nBefore (Too Narrow):\n\"Predictive analytics is transforming logistics and finance.\"\nAfter (Expanded with More Fields):\n\"Predictive analytics is transforming industries beyond logistics and finance. In healthcare, it enhances diagnostic accuracy; in education, it customizes learning paths; in marketing, it optimizes ad spend by predicting customer behavior.\"\n✅ Expands article relevance to a broader audience.\n\n4️⃣ Strengthen the Conclusion with a Future-Focused Perspective\nAvoid generic wrap-ups—end with a compelling strategic takeaway or challenge.\nEnsure future trends, competitive implications, and thought-provoking insights are included.\nImplementation:\nInstead of simply summarizing, pose a challenge or future opportunity.\nExample:\nBefore (Weak Ending):\n\"The question remains: How will businesses use this technology to redefine operations? The time to act is now.\"\nAfter (More Forward-Thinking):\n\"Looking ahead, businesses that embrace adaptable strategies and data-driven decision-making will lead in an increasingly competitive landscape. Whether through emerging technologies, customer-first innovation, or operational agility, the next era of success will belong to those who can not just adapt—but anticipate change. The real question isn’t if you’ll adopt these advancements—but how effectively you’ll use them to gain a competitive edge.\"\n✅ Leaves the reader with a clear action step or thought-provoking challenge.\n\n\n5️⃣ Expand Instead of Reduce Content\nDO NOT cut content unless it is redundant or weakens clarity.\nIf a section feels too brief or lacks depth, expand it by:\nProviding real-world examples\nAdding practical applications\nElaborating on key insights\nStrengthening data-backed statements\nExample Fix:\nBefore (Overly brief):\n\"Sustainable practices benefit businesses.\"\nAfter (More informative & engaging):\n\"Sustainable practices provide both environmental and financial advantages. Businesses that invest in renewable energy, reduce waste, and optimize resource consumption see long-term cost savings and increased brand loyalty.\"\n\n6. Do not add any commentary on what improvements you made. Just output the refined article.\n7. Do not add dividing lines between sections (\"---\") or any extra spacing or line breaks.\n\nMake every article a 9.5+/10 by refining structure, depth, and industry relevance while keeping it universally applicable across topics."}},"type":"@n8n/n8n-nodes-langchain.agent","typeVersion":1.7,"position":[64,3248],"id":"010d57b7-ef81-4d9c-b8cd-7e36728baea0","name":"Final Edit Agent"},{"parameters":{"assignments":{"assignments":[{"id":"4d5ae86e-7aec-4a4c-9256-7042d2e32497","name":"final_article","value":"={{ $json.output }}","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[432,3248],"id":"da9147e0-33cc-4620-8af9-002131e7e574","name":"Final Article"},{"parameters":{"folderId":"={{ $json.id }}","title":"={{ $('Sets New Title Field').item.json.new_title }}"},"type":"n8n-nodes-base.googleDocs","typeVersion":2,"position":[-2368,3712],"id":"d6c65081-cf41-4c42-97dc-93a1eb52ef00","name":"Create Doc Filename is title"},{"parameters":{"operation":"update","documentURL":"={{ $json.id }}","actionsUi":{"actionFields":[{"action":"insert","text":"={{ $('Final Article').item.json.final_article }}"}]}},"type":"n8n-nodes-base.googleDocs","typeVersion":2,"position":[-2144,3712],"id":"19a390b2-bf9f-4dfe-a9f7-c184a0e1fc61","name":"Add Final Article"},{"parameters":{"operation":"update","documentURL":"={{ $('Add Final Article').item.json.documentId }}","actionsUi":{"actionFields":[{"action":"insert","text":"=\n{{ $json.message.content }}"}]}},"type":"n8n-nodes-base.googleDocs","typeVersion":2,"position":[-1536,3712],"id":"4364e9b5-08e2-4d9b-b468-018adc085b95","name":"Add Meta Description"},{"parameters":{"modelId":{"__rl":true,"value":"gpt-4o-mini","mode":"list","cachedResultName":"GPT-4O-MINI"},"messages":{"values":[{"content":"You are an AI-powered Image Prompt Generator. Your task is to generate a detailed, visually engaging image prompt for an AI image-generation model. The image should serve as the featured image for the article, representing its key themes and attracting user attention.\n\nGuidelines:\n✅ Visual Representation of the Article:\n\nThe image should capture the essence of the topic in a compelling, high-quality way.\nAvoid overly generic imagery—ensure the image aligns with the article's subject matter and industry (e.g., AI automation, business processes, workflow management, etc.).\n✅ Descriptive Detail for Image Generation:\n\nUse rich visual descriptions that include:\nScene setting (e.g., futuristic cityscape, high-tech office, dynamic team collaboration).\nElements & objects (e.g., digital interfaces, robots, data visualizations, business professionals).\nMood & lighting (e.g., cinematic lighting, energetic atmosphere, professional and modern tone).\nPerspective (e.g., wide-angle, close-up, action shot, aerial view).\n✅ Consistency & Formatting:\n\nOutput must be in Markdown format with an ## Image Prompt heading.\nEnd the image prompt with --ar 16:9 to specify the 16:9 aspect ratio for better compatibility.\nExamples:\nBefore (Weak Example):\n\"An image of AI and business automation.\" ❌ Too vague, lacks engagement.\n\nAfter (Optimized Example):## Image Prompt  \nA futuristic digital workspace with AI-powered automation interfaces, holographic data charts, and robotic assistants collaborating with business professionals. The environment is sleek and modern, illuminated by ambient blue neon lighting, symbolizing innovation and efficiency. --ar 16:9  \n","role":"system"},{"content":"=Generate an AI image prompt that visually represents the following article. Ensure the description is detailed, engaging, and optimized for an eye-catching featured image.\n\n {{ $('Final Article').item.json.final_article }}\n\n## Image Prompt  \n[Your detailed AI image prompt here] --ar 16:9\n"}]},"options":{}},"type":"@n8n/n8n-nodes-langchain.openAi","typeVersion":1.8,"position":[-1328,3712],"id":"e64de5d4-0e11-4282-8274-1579fe8f76b6","name":"OpenAI Image Prompt"},{"parameters":{"modelId":{"__rl":true,"value":"gpt-4o-2024-11-20","mode":"list","cachedResultName":"GPT-4O-2024-11-20"},"messages":{"values":[{"content":"You are an SEO-optimized Meta Description Generator. Your task is to generate a compelling, keyword-rich meta description for the provided article. The description should be concise, engaging, and optimized for search engines while accurately summarizing the article’s core value.\n\nGuidelines:\n✅ Length: Keep the meta description between 150–160 characters to ensure full visibility in search results.\n✅ Keyword Optimization: Incorporate primary and secondary keywords naturally, focusing on high-impact phrases relevant to the article.\n✅ Engagement & Clarity:\n\nWrite in an active voice with a clear and compelling hook.\nSummarize the key benefit of the article—why should someone read it?\nAvoid vague statements—be specific about what the article covers.\n✅ Call to Action (Optional, but Preferred): Where possible, include a soft CTA to encourage clicks (e.g., “Discover how…”, “Learn the best strategies…”).\n✅ Formatting:\nUse Markdown format with an ## Meta Description heading.\nNo extra spacing or unnecessary formatting—the output should be clean and ready to use.\nExamples:\nBefore (Weak Example):\n\"This article discusses agentic AI and how it can be used in businesses.\" ❌ Too vague, lacks engagement.\n\nAfter (Optimized Example):\n## Meta Description  \nUnlock the power of agentic AI automation! Learn how businesses enhance efficiency, decision-making, and scalability with self-evolving AI-driven workflows.\n","role":"system"},{"content":"=Generate an SEO-optimized meta description for the following article. Ensure it is concise (150-160 characters), engaging, and includes high-impact keywords.\n{{ $('Final Article').item.json.final_article }}\nFormat the output in Markdown as follows:"}]},"options":{}},"type":"@n8n/n8n-nodes-langchain.openAi","typeVersion":1.8,"position":[-1920,3712],"id":"ceac0342-3f14-40dd-8c36-21f965d600a0","name":"OpenAI Meta"},{"parameters":{"operation":"update","documentURL":"={{ $('Add Meta Description').item.json.documentId }}","actionsUi":{"actionFields":[{"action":"insert","text":"=\n{{ $json.message.content }}"}]}},"type":"n8n-nodes-base.googleDocs","typeVersion":2,"position":[-944,3712],"id":"a7591eca-1360-4e33-a299-26be342d775f","name":"Add Image Prompt"},{"parameters":{"content":"## Good Opportunity for Human in the loop\nCreate 5 titles and have the human pick one.","width":420,"color":3},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[-5008,2208],"id":"46874e96-77b6-49c2-afcd-8b9e160f4746","name":"Sticky Note26"},{"parameters":{"assignments":{"assignments":[{"id":"b5d2b743-090c-4432-a7e7-c25b2e4bd76f","name":"url","value":"=https://docs.google.com/document/d/{{ $('Add Final Article').item.json.documentId }}/edit","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[-496,3712],"id":"1df94dc5-9df1-491a-8e8e-3b31cf73bbc8","name":"Edit Fields2"},{"parameters":{"assignments":{"assignments":[{"id":"7c282be5-3020-44b9-bf77-61639e3dd763","name":"main body","value":"={{ $json.output }}","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[-1120,3248],"id":"5cc2a6aa-b058-4769-83b5-30cd40d3df7a","name":"Edit Fields3"},{"parameters":{"content":"## Get Working Title, Description, Keywords from Airtable Article Writer\n\nGet's this data for use in the first agent that creates the writing style, tone, target audience/persona and goal.\n\nTriggered by status field in the Article Writer table. Create Article = Write Article","height":480,"width":660},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[-2576,2400],"id":"8497da11-e9ad-4b37-8346-4eac7a6f37e2","name":"Sticky Note27"},{"parameters":{"content":"## Dynamic Writing Guidelines and Hidden Insights\nBased on real-world search results and competitor analysis, ensuring that your AI-generated articles align with user intent better than static SEO methods.\n\nUses working title, description (both from keyword categorization), and top 5 search results to generate writing style and tone, goal of the article, hidden insights from AI analysis, semantic insights and keywords. All for use throughout the workflow. ","height":600,"width":780},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[-1904,2400],"id":"28419a31-8060-4cdd-914a-d8a5350d30ed","name":"Sticky Note28"},{"parameters":{"content":"## Refine the Working Title - Set New Title in Airtable\nUses all the input and generated info to create an SEO optimized title.\n\nThe airtable record is updated.","height":600,"width":800},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[-1056,2400],"id":"e4871f10-d955-4e95-8ba1-57316620e59c","name":"Sticky Note29"},{"parameters":{"content":"## Create Key Takeaways with Intro, bullet points, and Outro\n\nBrings in hidden insights if applicable which will drive the outline and main body content.","height":600,"width":600},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[-240,2400],"id":"2e2c9d26-4c03-43e7-8347-92dfd7b77609","name":"Sticky Note30"},{"parameters":{"content":"## Revisit prompts to make sure they work for different types of topics. AI Automation vs Mountain Bike Suspensions","width":420,"color":3},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[-4768,1904],"id":"7c01c123-5b18-4e5f-aaf8-4066efdf580b","name":"Sticky Note31"},{"parameters":{"content":"## Create Engaging Introduction\n","height":600,"width":600},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[384,2400],"id":"477d74df-cb4a-469a-a5b8-284bded84d9a","name":"Sticky Note32"},{"parameters":{"content":"## Create Outline\n\n","height":540,"width":560},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[-2576,3040],"id":"d934cc08-b9ae-4965-b90e-7b3aa1a62aec","name":"Sticky Note33"},{"parameters":{"content":"## Create Main Body Prompt\n","height":540,"width":400},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[-2000,3040],"id":"8a30c234-f6eb-4d6d-b2b6-8649e42fe836","name":"Sticky Note34"},{"parameters":{"content":"## Write Main Body\n","height":540,"width":600},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[-1584,3040],"id":"fb87adc3-06d7-4ccc-95bd-aa50b1200010","name":"Sticky Note35"},{"parameters":{"content":"## Write Conclusion\n","height":540,"width":560},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[-960,3040],"id":"21fe1bc5-c8cb-46a1-8c6c-9251e10740ee","name":"Sticky Note36"},{"parameters":{"content":"## Assemble Entire Article\n","height":540,"width":380},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[-384,3040],"id":"725c437d-d60a-4428-96e8-2f9d085483e1","name":"Sticky Note37"},{"parameters":{"content":"## Perform Final Editor and Quality Check","height":540,"width":560},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[32,3040],"id":"7561f3c6-7f4c-4a91-9466-9552144ecc90","name":"Sticky Note38"},{"parameters":{"content":"## Add Your Tavily API key","height":200,"color":3},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[-1728,2800],"id":"a356ae47-d276-4089-b544-cd54238fae70","name":"Sticky Note39"},{"parameters":{"content":"# Set up\n## Copy this Airtable base: [KW Research Content Ideation](https://airtable.com/apphzhR0wI16xjJJs/shrsojqqzGpgMJq9y)\n**Important: There is a copy base button in the top left of the base. Please copy this base. Do not request access.**\n## Watch this video for the workflow breakdown\nhttps://youtu.be/jdyO1l8Hokk\n## Adjust the Airtable Trigger\nModify the automation script to include your n8n webhook url. Here is the script in case it does not copy.\nlet params = input.config();\nlet recordID = params.recordID;\nlet n8nWebhookURL = params.n8nWebhookURL\nconst webhook = (n8nWebhookURL + \"?recordID=\" + recordID);\nconsole.log(webhook);\nawait fetch(webhook, {\n    method: 'POST'\n});\n### Set script input variables\nName: recordID\nValue: Airtable record ID\n\nName: n8nWebhookURL\nValue: Your n8n webhook url\n\n## Add Your Credentials and Make Connections\nAdd your credentials and make connections for Tavily, Google Drive, Google Docs, and the LLM model you want to use with the AI Agents.\n\n","height":860,"width":560,"color":3},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[-5264,2464],"id":"d4ba2046-3c0f-461d-acce-4f293f9c51c4","name":"Sticky Note40"}],"connections":{"Schedule Trigger":{"main":[[{"node":"Trends","type":"main","index":0}]]},"Research":{"main":[[{"node":"Fix Links","type":"main","index":0}]]},"Fix Links":{"main":[[{"node":"Copywriter","type":"main","index":0}]]},"Previous Posts":{"main":[[{"node":"Aggregate","type":"main","index":0}]]},"Aggregate":{"main":[[{"node":"Add internal links","type":"main","index":0}]]},"Add internal links":{"main":[[{"node":"HTML version","type":"main","index":0}]]},"Slug":{"main":[[{"node":"Title","type":"main","index":0}]]},"Title":{"main":[[{"node":"Meta description","type":"main","index":0}]]},"HTML version":{"main":[[{"node":"Slug","type":"main","index":0}]]},"Meta description":{"main":[[{"node":"Image Covers","type":"main","index":0}]]},"Image Covers":{"main":[[{"node":"Edit Fields","type":"main","index":0}]]},"Edit Fields":{"main":[[{"node":"Wordpress","type":"main","index":0}]]},"Wordpress":{"main":[[{"node":"Google Sheets","type":"main","index":0}]]},"Trends":{"main":[[{"node":"2 Most Trending","type":"main","index":0}]]},"2 Most Trending":{"main":[[{"node":"High search volume keywords","type":"main","index":0}]]},"High search volume keywords":{"main":[[{"node":"Choosing Topic","type":"main","index":0}]]},"Choosing Topic":{"main":[[{"node":"Research","type":"main","index":0}]]},"Copywriter":{"main":[[{"node":"Previous Posts","type":"main","index":0}]]},"Grab New Cluster":{"main":[[{"node":"Preliminary Plan","type":"main","index":0}]]},"Preliminary Plan":{"main":[[{"node":"Research1","type":"main","index":0}]]},"Create plan":{"main":[[{"node":"Write Blog","type":"main","index":0}]]},"Write Blog":{"main":[[{"node":"Previous Posts1","type":"main","index":0}]]},"Check as completed on Sheets":{"main":[[{"node":"Google Sheets1","type":"main","index":0}]]},"Schedule Trigger1":{"main":[[{"node":"Grab New Cluster","type":"main","index":0}]]},"Fix Links1":{"main":[[{"node":"Create plan","type":"main","index":0}]]},"Aggregate1":{"main":[[{"node":"Add internal links1","type":"main","index":0}]]},"Previous Posts1":{"main":[[{"node":"Aggregate1","type":"main","index":0}]]},"Add internal links1":{"main":[[{"node":"HTML version1","type":"main","index":0}]]},"Slug1":{"main":[[{"node":"Title1","type":"main","index":0}]]},"Title1":{"main":[[{"node":"Meta description1","type":"main","index":0}]]},"Meta description1":{"main":[[{"node":"Image Covers1","type":"main","index":0}]]},"HTML version1":{"main":[[{"node":"Slug1","type":"main","index":0}]]},"Image Covers1":{"main":[[{"node":"Edit Fields1","type":"main","index":0}]]},"Edit Fields1":{"main":[[{"node":"Wordpress1","type":"main","index":0}]]},"Research1":{"main":[[{"node":"Fix Links1","type":"main","index":0}]]},"Wordpress1":{"main":[[{"node":"Check as completed on Sheets","type":"main","index":0}]]},"Webhook":{"main":[[{"node":"Airtable Get Article Data","type":"main","index":0}]]},"Tavily search results":{"ai_tool":[[{"node":"SERPs, Writing, KWs, Insights","type":"ai_tool","index":0}]]},"Anthropic Chat Model":{"ai_languageModel":[[{"node":"SERPs, Writing, KWs, Insights","type":"ai_languageModel","index":0}]]},"Airtable Get Article Data":{"main":[[{"node":"Set Airtable Fields for Agents","type":"main","index":0}]]},"Set Airtable Fields for Agents":{"main":[[{"node":"SERPs, Writing, KWs, Insights","type":"main","index":0}]]},"Set KWs and Insights fields":{"main":[[{"node":"Update Article Writer table","type":"main","index":0}]]},"Refine the Title":{"main":[[{"node":"Sets New Title Field","type":"main","index":0}]]},"Key Takeaways AI Agent":{"main":[[{"node":"Set Key Takeaways","type":"main","index":0}]]},"Set Key Takeaways":{"main":[[{"node":"Introduction Agent","type":"main","index":0}]]},"Set Introduction Field":{"main":[[{"node":"Outline Agent","type":"main","index":0}]]},"OpenAI Chat Model":{"ai_languageModel":[[{"node":"Outline Agent","type":"ai_languageModel","index":0}]]},"Outline Agent":{"main":[[{"node":"Set Outline Fields","type":"main","index":0}]]},"Set Outline Fields":{"main":[[{"node":"Main Body Prompt Writer","type":"main","index":0}]]},"Content Writer Agent":{"main":[[{"node":"Edit Fields3","type":"main","index":0}]]},"Introduction Agent":{"main":[[{"node":"Set Introduction Field","type":"main","index":0}]]},"OpenAI Chat Model2":{"ai_languageModel":[[{"node":"AI Agent Conclusion Writer","type":"ai_languageModel","index":0}]]},"OpenAI Chat Model3":{"ai_languageModel":[[{"node":"Article Assembly Agent","type":"ai_languageModel","index":0}]]},"Article Assembly Agent":{"main":[[{"node":"Final Edit Agent","type":"main","index":0}]]},"Create Article Folder":{"main":[[{"node":"Create Doc Filename is title","type":"main","index":0}]]},"Google Drive":{"main":[[{"node":"Edit Fields2","type":"main","index":0}]]},"SERPs, Writing, KWs, Insights":{"main":[[{"node":"Set KWs and Insights fields","type":"main","index":0}]]},"Update Article Writer table":{"main":[[{"node":"Refine the Title","type":"main","index":0}]]},"Sets New Title Field":{"main":[[{"node":"Update Article Title","type":"main","index":0}]]},"Update Article Title":{"main":[[{"node":"Key Takeaways AI Agent","type":"main","index":0}]]},"Open AI":{"ai_languageModel":[[{"node":"Refine the Title","type":"ai_languageModel","index":0}]]},"OpenAI Key Takeaways":{"ai_languageModel":[[{"node":"Key Takeaways AI Agent","type":"ai_languageModel","index":0}]]},"OpenAI":{"ai_languageModel":[[{"node":"Introduction Agent","type":"ai_languageModel","index":0}]]},"OpenAI Chat Model1":{"ai_languageModel":[[{"node":"Main Body Prompt Writer","type":"ai_languageModel","index":0}]]},"Main Body Prompt Writer":{"main":[[{"node":"Content Writer Agent","type":"main","index":0}]]},"AI Agent Conclusion Writer":{"main":[[{"node":"Set Conclusion","type":"main","index":0}]]},"Set Conclusion":{"main":[[{"node":"Article Assembly Agent","type":"main","index":0}]]},"OpenAI Chat Model4":{"ai_languageModel":[[{"node":"Final Edit Agent","type":"ai_languageModel","index":0}]]},"OpenAI Chat Model5":{"ai_languageModel":[[{"node":"Content Writer Agent","type":"ai_languageModel","index":0}]]},"Final Edit Agent":{"main":[[{"node":"Final Article","type":"main","index":0}]]},"Final Article":{"main":[[{"node":"Create Article Folder","type":"main","index":0}]]},"Create Doc Filename is title":{"main":[[{"node":"Add Final Article","type":"main","index":0}]]},"Add Final Article":{"main":[[{"node":"OpenAI Meta","type":"main","index":0}]]},"Add Meta Description":{"main":[[{"node":"OpenAI Image Prompt","type":"main","index":0}]]},"OpenAI Image Prompt":{"main":[[{"node":"Add Image Prompt","type":"main","index":0}]]},"OpenAI Meta":{"main":[[{"node":"Add Meta Description","type":"main","index":0}]]},"Add Image Prompt":{"main":[[{"node":"Google Drive","type":"main","index":0}]]},"Edit Fields2":{"main":[[{"node":"Airtable","type":"main","index":0}]]},"Edit Fields3":{"main":[[{"node":"AI Agent Conclusion Writer","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"c46824bb-6d65-44d0-9c5b-4563b848bf04","triggerCount":0,"shared":[{"createdAt":"2025-09-04T09:56:52.440Z","updatedAt":"2025-09-04T09:56:52.440Z","role":"workflow:owner","workflowId":"TITEFT14w1nrEOGQ","projectId":"pRXFeKq9D8e0hAOx"}],"tags":[{"createdAt":"2025-09-05T10:50:13.699Z","updatedAt":"2025-09-05T10:50:13.699Z","id":"dW7xXLFSMe5wzO8F","name":"marketing-automation"},{"createdAt":"2025-09-12T03:18:37.688Z","updatedAt":"2025-09-12T03:18:37.688Z","id":"kPaYWJCT72YqY6Uw","name":"Content Creation"}]},{"createdAt":"2025-06-05T10:54:32.269Z","updatedAt":"2025-06-05T10:54:32.269Z","id":"VH2PswEfBeXt5R0w","name":"Posting to social media","active":false,"isArchived":false,"nodes":[],"connections":{},"settings":{"executionOrder":"v1"},"staticData":null,"meta":null,"pinData":{},"versionId":"ab3cddaa-e120-48d8-8106-17ac4f849421","triggerCount":0,"shared":[{"createdAt":"2025-06-05T10:54:32.284Z","updatedAt":"2025-06-05T10:54:32.284Z","role":"workflow:owner","workflowId":"VH2PswEfBeXt5R0w","projectId":"pRXFeKq9D8e0hAOx"}],"tags":[]},{"createdAt":"2025-06-30T12:31:08.135Z","updatedAt":"2025-06-30T14:48:51.000Z","id":"XcCoyUfiwfkY87NO","name":"Office image gen","active":true,"isArchived":false,"nodes":[{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"59a5a112-6e31-4318-9d20-5fb58912ba2d","leftValue":"={{ $json.hasImageUrl }}","rightValue":true,"operator":{"type":"boolean","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[-600,1080],"id":"ed392b31-b510-4f1e-9070-ea83638d1f8c","name":"Has Image URL?"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"has-uploaded-image","leftValue":"={{ $json.hasUploadedImage }}","rightValue":true,"operator":{"type":"boolean","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[-360,1100],"id":"88552b45-88f5-40b1-955d-649dd74f891f","name":"Has Uploaded Image?"},{"parameters":{"jsCode":"// Process uploaded image from form\nconst item = $input.all()[0];\n\n// Debug: Log available binary keys\nconsole.log('Available binary keys:', Object.keys(item.binary || {}));\n\n// Check for uploaded image in binary data\nlet binaryData = null;\nlet binaryKey = null;\n\nif (item.binary) {\n  // Try different possible key names for uploaded files\n  const possibleKeys = [\n    'Upload Image',\n    'upload-image',\n    'uploadImage',\n    'file',\n    'data'\n  ];\n  \n  for (const key of possibleKeys) {\n    if (item.binary[key]) {\n      binaryData = item.binary[key];\n      binaryKey = key;\n      break;\n    }\n  }\n  \n  // If none found, try the first available key\n  if (!binaryData) {\n    const keys = Object.keys(item.binary);\n    if (keys.length > 0) {\n      binaryKey = keys[0];\n      binaryData = item.binary[binaryKey];\n    }\n  }\n}\n\nif (!binaryData) {\n  throw new Error(`No image uploaded. Available binary keys: ${Object.keys(item.binary || {}).join(', ')}`);\n}\n\nconsole.log(`Using binary key: ${binaryKey}`);\n\n// Pass through the binary data and form data\nreturn [{\n  json: item.json,\n  binary: {\n    data: binaryData\n  }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-180,1220],"id":"2d9ae963-708f-46c0-81c6-9efdd96516b9","name":"Process Upload"},{"parameters":{"jsCode":"// Extract data from form submission\nconst formData = $json;\n\n// Map form fields to workflow data\nconst recordData = {\n  imageFocus: formData['Image Focus'] || '',\n  style: formData['Style'] || '',\n  imageName: formData['Image Name'] || '',\n  imageUrl: formData['Image URL'] || '',\n  sceneDescription: formData['Describe the Scene'] || '',\n  backgroundDescription: formData['Describe the Background'] || '',\n  imageCaption: formData['Image Caption'] || '',\n  imageSize: formData['Image Size'] || '1024x1024',\n  uploadedImage: formData['Upload Image'] || null\n};\n\n// Create enhanced image prompt based on form data\nlet imagePrompt = '';\n\n// Build comprehensive prompt from form fields\nif (recordData.imageFocus) {\n  imagePrompt = `Image Focus: ${recordData.imageFocus}\\n`;\n}\nif (recordData.sceneDescription) {\n  imagePrompt += `Image Scene: ${recordData.sceneDescription}\\n`;\n}\nif (recordData.backgroundDescription) {\n  imagePrompt += `Image Background Description: ${recordData.backgroundDescription}\\n`;\n}\nif (recordData.imageCaption) {\n  imagePrompt += `Image Caption: ${recordData.imageCaption}\\n`;\n}\n\n// Fallback if no structured data provided\nif (!imagePrompt) {\n  imagePrompt = `Create a professional image with the following requirements:\\n  Main subject: ${recordData.imageFocus}\\n  Style: ${recordData.style}\\n  Size: ${recordData.imageSize}`;\n}\n\nreturn [{\n  json: {\n    ...recordData,\n    imagePrompt: imagePrompt,\n    hasUploadedImage: !!recordData.uploadedImage,\n    hasImageUrl: !!recordData.imageUrl,\n    imageStyle: recordData.imageUrl // Keep for backwards compatibility\n  }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-780,1100],"id":"9b8f2ec3-18e9-4b69-8408-65503b3525a2","name":"Process Data1"},{"parameters":{"method":"POST","url":"https://api.openai.com/v1/images/generations","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"bodyParameters":{"parameters":[{"name":"prompt","value":"={{ $json.output }}"},{"name":"model","value":"gpt-image-1"},{"name":"size","value":"={{ $('Process Data1').item.json.imageSize }}"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[260,940],"id":"4569fac9-a771-40a1-92c8-a6c4555b1b6f","name":"HTTP Request4","credentials":{"httpHeaderAuth":{"id":"z06CbCGaeEeBPVIt","name":"GPT Image Generator"}}},{"parameters":{"method":"POST","url":"https://api.imgbb.com/1/upload","sendBody":true,"contentType":"multipart-form-data","bodyParameters":{"parameters":[{"name":"key","value":"906d52e8dfd22db6e234f01e2707bf41"},{"parameterType":"formBinaryData","name":"image","inputDataFieldName":"data"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[700,940],"id":"81dcdd4e-b2b3-4d40-ae0d-67262241a37f","name":"HTTP Request5"},{"parameters":{"operation":"toBinary","sourceProperty":"data[0].b64_json","options":{}},"type":"n8n-nodes-base.convertToFile","typeVersion":1.1,"position":[480,940],"id":"1aed0d69-974d-4f40-ac30-58b27be4d90d","name":"Convert to File1"},{"parameters":{"promptType":"define","text":"={{ $('Process Data1').item.json.imagePrompt }}","options":{"systemMessage":"You are an expert image prompt creator. Create a detailed, professional image generation prompt based on the user's requirements. Focus on visual clarity, professional photography terminology, and specific details about composition, lighting, and style."}},"type":"@n8n/n8n-nodes-langchain.agent","typeVersion":1.9,"position":[-120,840],"id":"1509a9b1-73f4-4815-b469-c77aa8822f66","name":"AI Agent1"},{"parameters":{"options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenRouter","typeVersion":1,"position":[120,1140],"id":"54d96a4b-f215-4c6b-8bab-267e256d129a","name":"OpenRouter Chat Model1","credentials":{"openRouterApi":{"id":"eni2kFdHGvy7lEd3","name":"OpenRouter account"}}},{"parameters":{"operation":"toBinary","sourceProperty":"data[0].b64_json","options":{}},"type":"n8n-nodes-base.convertToFile","typeVersion":1.1,"position":[540,1460],"id":"dba7d664-29aa-4757-86ba-97ad760389d5","name":"Convert to File3"},{"parameters":{"method":"POST","url":"https://api.openai.com/v1/images/edits","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"contentType":"multipart-form-data","bodyParameters":{"parameters":[{"parameterType":"formBinaryData","name":"image","inputDataFieldName":"data"},{"name":"prompt","value":"=Create a new image based on the reference image provided with these specifications:\n\nImage Focus: [{{ $('Generate Product Script1').item.json.output.imagefocus }}]\nScene Description: [{{ $('Generate Product Script1').item.json.output.imagescene }}]\nBackground Description: [{{ $('Generate Product Script1').item.json.output.imagebackground }}]\nDesired Caption: [{{ $('Generate Product Script1').item.json.output.imagecaption }}]\n\nGenerate a hyper-realistic, professional studio photography image that:\n- Maintains clean, minimalistic, and elegant visual style\n- Highlights the main subject with sharp detail and perfect lighting\n- Uses backgrounds that complement but do not overpower the subject\n- Includes professional studio lighting with soft shadows\n- Emphasizes realism, texture, and color accuracy\n- Maintains a high-end, premium look and feel"},{"name":"model","value":"gpt-image-1"},{"name":"size","value":"={{ $('Process Data1').item.json.imageSize }}"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[320,1460],"id":"7735edfe-5b96-4e61-9caf-c77a7ddc8fde","name":"Create Image","credentials":{"httpHeaderAuth":{"id":"z06CbCGaeEeBPVIt","name":"GPT Image Generator"}}},{"parameters":{"url":"={{ $('Process Data1').item.json.imageUrl }}","options":{"response":{"response":{"responseFormat":"file"}}}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[140,1460],"id":"2888ed15-fd8d-4afa-bd36-c110bab0a202","name":"HTTP Request6"},{"parameters":{"method":"POST","url":"https://api.imgbb.com/1/upload","sendBody":true,"contentType":"multipart-form-data","bodyParameters":{"parameters":[{"name":"key","value":"906d52e8dfd22db6e234f01e2707bf41"},{"parameterType":"formBinaryData","name":"image","inputDataFieldName":"data"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[740,1460],"id":"2569b834-b4c7-4f19-90c9-59f3f50a512a","name":"HTTP Request7"},{"parameters":{"jsonSchemaExample":"{\n  \"imagefocus\": \"string\",\n  \"imagescene\": \"string\",\n  \"imagebackground\": \"string\",\n  \"imagecaption\": \"string\"\n}"},"type":"@n8n/n8n-nodes-langchain.outputParserStructured","typeVersion":1.2,"position":[120,1760],"id":"af64bb23-b272-4657-81d0-ce25b7510ead","name":"Script Output Parser1"},{"parameters":{"promptType":"define","text":"={{ $('Process Data1').item.json.imagePrompt }}","hasOutputParser":true,"messages":{"messageValues":[{"message":"You are an expert in converting markdown format into json format. \n\nImportant:\n- Do not change the text that is provided to you, only convert it. \n- Keep the caption the same, don't change IT!\n\nYour task is to take a structured image description and convert to json.\n\nINPUT FORMAT: You'll receive a description with sections like:\n- Image Focus: [main subject]\n- Image Scene: [setting and action] \n- Image Background Description: [environment details]\n- Image Caption: [text overlay]\n\nOUTPUT FORMAT: \nReturn a JSON object with:\n\n**imagefocus**: main subject\n**imagescene**: setting and action \n**imagebackground**: environment details\n**imagecaption**: text overlay\n\nFocus on:\n- Clear, specific visual descriptions\n- Professional photography terminology\n- Detailed scene composition\n- Lighting and atmosphere details\n- Exact positioning and elements\n\nConvert the structured input into one flowing, detailed prompt. Image Caption max length is 8 words."}]}},"type":"@n8n/n8n-nodes-langchain.chainLlm","typeVersion":1.5,"position":[-220,1540],"id":"afd6e4d1-1765-48ab-a943-3b0c18c876f7","name":"Generate Product Script1"},{"parameters":{"path":"319c7c9e-1bd1-42df-a0ee-8c4140de9bad","formTitle":"Image generator","formDescription":"Create image for your campaign","formFields":{"values":[{"fieldLabel":"Image Focus","fieldType":"textarea","placeholder":"Blue MG HS must be in the picture","requiredField":true},{"fieldLabel":"Style","fieldType":"dropdown","fieldOptions":{"values":[{"option":"Photo Realism"},{"option":"Cartoon"},{"option":"Meme"}]}},{"fieldLabel":"Image Name","requiredField":true},{"fieldLabel":"Image URL"},{"fieldLabel":"Describe the Scene"},{"fieldLabel":"Describe the Background"},{"fieldLabel":"Image Caption"},{"fieldLabel":"Upload Image","fieldType":"file","multipleFiles":false},{"fieldLabel":"Image Size","fieldType":"dropdown","fieldOptions":{"values":[{"option":"1536x1024"},{"option":"1024x1536"},{"option":"1024x1024"}]}}]},"responseMode":"responseNode","options":{}},"id":"7b5b0bbe-c0be-4c85-816d-692d4e0de35d","name":"Image Generator1","type":"n8n-nodes-base.formTrigger","position":[-1020,1100],"webhookId":"319c7c9e-1bd1-42df-a0ee-8c4140de9bad","typeVersion":2.1},{"parameters":{"respondWith":"text","responseBody":"=<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>AiDa-AI-Automations</title>\n    <style>\n        body {\n            font-family: 'Open Sans', Tahoma, Geneva, Verdana, sans-serif;\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            justify-content: center;\n            min-height: 100vh;\n            background-color: #121212;\n            color: #e0e0e0;\n        }\n        .container {\n            margin-top: 2em;\n            width: 90%;\n            max-width: 670px;\n            text-align: center;\n            background: #1e1e1e;\n            padding: 24px;\n            border-radius: 12px;\n            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.3);\n            margin-bottom: 24px;\n        }\n        .image-container {\n            margin-bottom: 20px;\n        }\n        .image-container img {\n            max-width: 100%;\n            height: auto;\n            border-radius: 12px;\n            border: 2px solid #333;\n        }\n        .style-text {\n            font-size: 18px;\n            margin-bottom: 20px;\n            color: #bbb;\n        }\n        .cta {\n            display: block;\n            width: 100%;\n            margin: 20px 0 0;\n            padding: 18px 0;\n            border: none;\n            border-radius: 6px;\n            text-decoration: none;\n            color: #fff;\n            background-color: #1C9985;\n            font-size: 18px;\n            font-weight: 400;\n            cursor: pointer;\n            transition: all 0.3s ease;\n        }\n        .cta:hover {\n            background-color: #20B69E;\n            transform: translateY(-2px);\n            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\n        }\n        .download-btn {\n            display: block;\n            width: 100%;\n            margin: 10px 0 0;\n            padding: 18px 0;\n            border: none;\n            border-radius: 6px;\n            text-decoration: none;\n            color: #fff;\n            background-color: #4A6EB3;\n            font-size: 18px;\n            font-weight: 400;\n            cursor: pointer;\n            transition: all 0.3s ease;\n        }\n        .download-btn:hover {\n            background-color: #5A83CC;\n            transform: translateY(-2px);\n            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\n        }\n        .recent-renders {\n            display: flex;\n            justify-content: space-between;\n            flex-wrap: wrap;\n            gap: 16px;\n            margin-top: 24px;\n            max-width: 670px;\n        }\n        .recent-render img {\n            width: 100%;\n            max-width: 180px;\n            height: auto;\n            border-radius: 8px;\n            border: 2px solid #333;\n        }\n        .recent-render {\n            flex: 1;\n            max-width: 200px;\n            background-color: #2c2c2c;\n            padding: 10px;\n            border-radius: 10px;\n            margin-bottom: 3rem;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"image-container\">\n            <img src=\"{{ $json.data.url }}\" alt=\"Generated Image\" id=\"generatedImage\" />\n        </div>\n        <div class=\"style-text\">Image: {{ $('Process Data1').item.json.imageName }}</div>\n        <a href=\"https://aiautomations.co.za\" class=\"cta\">Created By Johan Dercksen</a>\n        <a href=\"{{ $json.data.url }}\" download=\"generated-image.jpg\" class=\"download-btn\">Download Image</a>\n    </div>\n    \n    <div class=\"recent-renders\">\n       <div class=\"recent-render\">\n        <img src=\"https://ransrzuluezigrkxjxgv.supabase.co/storage/v1/object/linekedimages/work.jpg\" alt=\"Recent Render 1\">\n       </div>\n       <div class=\"recent-render\">\n        <img src=\"https://ransrzuluezigrkxjxgv.supabase.co/storage/v1/object/linekedimages/work.jpg\" alt=\"Recent Render 2\">\n       </div>\n       <div class=\"recent-render\">\n        <img src=\"https://ransrzuluezigrkxjxgv.supabase.co/storage/v1/object/linekedimages/work.jpg\" alt=\"Recent Render 3\">\n       </div>\n       <div class=\"recent-render\">\n        <img src=\"https://ransrzuluezigrkxjxgv.supabase.co/storage/v1/object/linekedimages/work.jpg\" alt=\"Recent Render 4\">\n       </div>\n    </div>\n</body>\n</html>","options":{}},"id":"8aa0e052-97bc-4ae9-aea5-efa9411b4c2f","name":"Serve webpage1","type":"n8n-nodes-base.respondToWebhook","position":[1160,1080],"typeVersion":1.1}],"connections":{"Has Image URL?":{"main":[[{"node":"Generate Product Script1","type":"main","index":0}],[{"node":"Has Uploaded Image?","type":"main","index":0}]]},"Has Uploaded Image?":{"main":[[{"node":"Process Upload","type":"main","index":0}],[{"node":"AI Agent1","type":"main","index":0}]]},"Process Upload":{"main":[[{"node":"Generate Product Script1","type":"main","index":0}]]},"Process Data1":{"main":[[{"node":"Has Image URL?","type":"main","index":0}]]},"HTTP Request4":{"main":[[{"node":"Convert to File1","type":"main","index":0}]]},"HTTP Request5":{"main":[[{"node":"Serve webpage1","type":"main","index":0}]]},"Convert to File1":{"main":[[{"node":"HTTP Request5","type":"main","index":0}]]},"AI Agent1":{"main":[[{"node":"HTTP Request4","type":"main","index":0}]]},"OpenRouter Chat Model1":{"ai_languageModel":[[{"node":"AI Agent1","type":"ai_languageModel","index":0},{"node":"Generate Product Script1","type":"ai_languageModel","index":0}]]},"Convert to File3":{"main":[[{"node":"HTTP Request7","type":"main","index":0}]]},"Create Image":{"main":[[{"node":"Convert to File3","type":"main","index":0}]]},"HTTP Request6":{"main":[[{"node":"Create Image","type":"main","index":0}]]},"HTTP Request7":{"main":[[{"node":"Serve webpage1","type":"main","index":0}]]},"Script Output Parser1":{"ai_outputParser":[[{"node":"Generate Product Script1","type":"ai_outputParser","index":0}]]},"Generate Product Script1":{"main":[[{"node":"HTTP Request6","type":"main","index":0}]]},"Image Generator1":{"main":[[{"node":"Process Data1","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":null,"pinData":{},"versionId":"4c295e79-c47d-4bba-bde4-a45be3e49465","triggerCount":1,"shared":[{"createdAt":"2025-06-30T12:31:08.148Z","updatedAt":"2025-06-30T12:31:08.148Z","role":"workflow:owner","workflowId":"XcCoyUfiwfkY87NO","projectId":"pRXFeKq9D8e0hAOx"}],"tags":[]},{"createdAt":"2025-07-30T03:23:29.108Z","updatedAt":"2025-07-30T06:21:58.733Z","id":"XlgAibh4uqd5XmOA","name":"Social Media Processor","active":false,"isArchived":true,"nodes":[{"name":"Social Media Webhook","typeVersion":2,"id":"webhook-trigger","position":[240,300],"type":"n8n-nodes-base.webhook","parameters":{"httpMethod":"POST","path":"social-media-processor","responseMode":"responseNode"}},{"name":"Process Content Source","typeVersion":2,"id":"process-source","position":[460,300],"type":"n8n-nodes-base.code","parameters":{"jsCode":"// Enhanced Social Media Content Processor\n// Extract and process the routed content data + platform detection\n\nconst payload = $json;\nconsole.log('Received payload:', JSON.stringify(payload, null, 2));\n\n// Extract the core data\nconst clientId = payload.client_id || payload.clientId;\nconst ideaId = payload.idea_id || payload.ideaId;\nconst title = payload.title;\nconst priority = payload.priority;\nconst originalIdeaType = payload.original_idea_type;\n\n// Extract content from query object if it exists\nconst queryData = payload.query || {};\n\n// Extract platform information\nconst platform = queryData.platform || payload.platform || 'Facebook'; // default to Facebook\n\n// Determine information source and extract content\nlet informationSource = 'text_idea'; // default\nlet sourceContent = '';\n\n// Check for different content sources in the payload\nif (queryData.content || queryData.description || queryData.text) {\n  informationSource = 'text_idea';\n  sourceContent = queryData.content || queryData.description || queryData.text || title;\n} else if (queryData.url) {\n  informationSource = 'url';\n  sourceContent = queryData.url;\n} else if (queryData.voice_file || queryData.audio) {\n  informationSource = 'voice';\n  sourceContent = queryData.voice_file || queryData.audio;\n} else if (queryData.image_file || queryData.image) {\n  informationSource = 'image';\n  sourceContent = queryData.image_file || queryData.image;\n} else if (queryData.video_file || queryData.video) {\n  informationSource = 'video_upload';\n  sourceContent = queryData.video_file || queryData.video;\n} else {\n  // Fallback to title if no other content found\n  sourceContent = title || 'No content provided';\n}\n\n// Process based on information source\nlet processedContent = '';\nlet processingType = '';\nlet nextAction = '';\n\nswitch (informationSource) {\n  case 'voice':\n    processedContent = `Voice file to transcribe: ${sourceContent}`;\n    processingType = 'voice_transcription';\n    nextAction = 'transcribe_audio';\n    break;\n  case 'url':\n    processedContent = `URL to extract content from: ${sourceContent}`;\n    processingType = 'url_extraction';\n    nextAction = 'extract_url_content';\n    break;\n  case 'image':\n    processedContent = `Image to analyze: ${sourceContent}`;\n    processingType = 'image_analysis';\n    nextAction = 'analyze_image';\n    break;\n  case 'video_upload':\n    processedContent = `Video to analyze: ${sourceContent}`;\n    processingType = 'video_analysis';\n    nextAction = 'analyze_video';\n    break;\n  case 'text_idea':\n  default:\n    processedContent = sourceContent;\n    processingType = 'direct_text';\n    nextAction = 'generate_social_content';\n    break;\n}\n\n// Prepare the response with structured data\nreturn {\n  json: {\n    success: true,\n    message: 'Social media content processing started',\n    \n    // Original routing data\n    client_id: clientId,\n    idea_id: ideaId,\n    title: title,\n    priority: priority,\n    original_idea_type: originalIdeaType,\n    platform: platform,\n    \n    // Processing data\n    information_source: informationSource,\n    source_content: sourceContent,\n    processed_content: processedContent,\n    processing_type: processingType,\n    next_action: nextAction,\n    \n    // Metadata\n    processed_at: new Date().toISOString(),\n    processor: 'Social Media Processor',\n    \n    // Full payload for debugging\n    debug_payload: payload\n  }\n};"}},{"name":"Response","typeVersion":1,"id":"response-node","position":[680,300],"type":"n8n-nodes-base.respondToWebhook","parameters":{"respondWith":"json","responseBody":"={{ $json }}"}}],"connections":{"Social Media Webhook":{"main":[[{"type":"main","node":"Process Content Source","index":0}]]},"Process Content Source":{"main":[[{"type":"main","node":"Response","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":null,"pinData":null,"versionId":"88ab7a1f-2106-473c-9b61-e469cd9b7f27","triggerCount":0,"shared":[{"createdAt":"2025-07-30T03:23:29.114Z","updatedAt":"2025-07-30T03:23:29.114Z","role":"workflow:owner","workflowId":"XlgAibh4uqd5XmOA","projectId":"pRXFeKq9D8e0hAOx"}],"tags":[]},{"createdAt":"2025-05-30T03:09:56.555Z","updatedAt":"2025-07-10T10:28:36.000Z","id":"ZBAlHrBJK7TNUVJl","name":"Video generation","active":false,"isArchived":false,"nodes":[{"parameters":{"content":"## Stage 10\n## Add Captions","height":240,"width":420,"color":5},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[3280,5600],"id":"6ac80729-8681-496b-8e7d-70b64a4fe260","name":"Sticky Note6"},{"parameters":{"method":"POST","url":"https://nca.aiautomata.co.za/v1/video/caption","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"specifyBody":"json","jsonBody":"={\n    \"video_url\": \"{{ $json['Video + Voice + Music'] }}\",\n    \"settings\": {\n        \"line_color\": \"#FFFFFF\",\n        \"word_color\": \"#22b525\",\n        \"all_caps\": false,\n        \"max_words_per_line\": 3,\n        \"font_size\": 60,\n        \"bold\": false,\n        \"italic\": false,\n        \"underline\": false,\n        \"strikeout\": false,\n        \"outline_width\": 6,\n        \"shadow_offset\": 8,\n        \"style\": \"highlight\",\n        \"font_family\": \"The Bold Font\",\n        \"position\": \"bottom_center\"\n    },\n    \"id\": \"{{ $json.id }}\"\n}","options":{"timeout":90000}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[4260,5660],"id":"f1d2e9cc-c5f6-4fb7-bb48-4a172baaa6a4","name":"Create Captions","credentials":{"httpHeaderAuth":{"id":"XhOG8EmUXSMMk7ct","name":"NCS-Toolkit Auth account"}}},{"parameters":{"databaseId":171,"tableId":695,"returnAll":true,"additionalOptions":{"filters":{"fields":[{"field":6755,"operator":"empty"},{"field":6728,"operator":"contains","value":"Complete"},{"field":6725,"operator":"contains","value":"Approved"}]}}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[4040,5660],"id":"76ae7b8a-dc0f-4581-b2d7-51ee28d5445d","name":"Baserow13","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"operation":"update","databaseId":171,"tableId":695,"rowId":"={{ $('Baserow13').item.json.id }}","fieldsUi":{"fieldValues":[{"fieldId":6758,"fieldValue":"={{ $json.response }}"},{"fieldId":6725,"fieldValue":"Done"},{"fieldId":6726,"fieldValue":"Done"},{"fieldId":6727,"fieldValue":"Done"},{"fieldId":6754,"fieldValue":"Done"},{"fieldId":6728,"fieldValue":"Done"}]}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[4480,5660],"id":"9fe3901d-09e0-4627-873e-af2f9ec49558","name":"Baserow14","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"databaseId":171,"tableId":695,"returnAll":true,"additionalOptions":{"filters":{"fields":[{"field":6725,"operator":"contains","value":"=Draft"}]}}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[3800,-780],"id":"5ee1672e-a69b-4c87-8b8c-0463d07373b1","name":"Get Draft Campaigns","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"promptType":"define","text":"=Campaign Details:\nCompany: {{ $json['Company Name'] }}\nProduct/Service: {{ $json['Product/Service Name'] }}\nType: {{ $json['Product Type'] }}\nIndustry: {{ $json['Industry'] }}\nDescription: {{ $json['Description'] }}\nKey Features: {{ $json['Key Features/Benefits'] }}\nTarget Audience: {{ $json['Target Audience'] }}\nCall to Action: {{ $json['Call to Action'] }}\nVideo Duration: {{ $json['Video Duration'] }}","hasOutputParser":true,"messages":{"messageValues":[{"message":"=You are an expert product video scriptwriter specializing in creating compelling, iPhone-style product videos. Your goal is to transform product information into engaging scripts that drive conversions.\n\n**Your Task:**\nCreate a professional video script that follows the iPhone-style approach: sleek, premium, focused on benefits, and visually driven.\n\n**Script Structure:**\n1. **Hook** (2-3 seconds): Attention-grabbing opening that immediately showcases the product's main benefit\n2. **Product Introduction** : Brief, compelling introduction of the product\n3. **Key Features** (varies by duration): Highlight 2-4 most important features/benefits\n4. **Social Proof/Credibility** : Brief credibility statement if applicable\n5. **Call to Action** : Clear, compelling CTA\n\n**Style Guidelines:**\n- Write in present tense, active voice\n- Use confident, premium language\n- Focus on benefits, not just features\n- Keep sentences short and punchy\n- Avoid technical jargon unless necessary\n- Make it conversational yet professional\n- Ensure the script fits the specified duration\n\n**Output Format:**\nReturn a JSON object with:\n- **hook**: The opening hook\n- **introduction**: Product introduction\n- **features**: Array of key feature highlights\n- **credibility**: Social proof/credibility statement (if applicable)\n- **cta**: Call to action\n- **fullScript**: Complete script as one flowing narrative\n- **estimatedDuration**: Estimated duration in seconds"}]}},"type":"@n8n/n8n-nodes-langchain.chainLlm","typeVersion":1.5,"position":[3980,-780],"id":"6d73b92d-b049-4119-a9fa-7145476e6a99","name":"Generate Product Script"},{"parameters":{"options":{"temperature":0.7}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenRouter","typeVersion":1,"position":[4000,-600],"id":"f2e2e222-c26d-4271-8e03-d8efedd3ded2","name":"OpenRouter - GPT-4.1 Mini","credentials":{"openRouterApi":{"id":"eni2kFdHGvy7lEd3","name":"OpenRouter account"}}},{"parameters":{"jsonSchemaExample":"{\n  \"hook\": \"string\",\n  \"introduction\": \"string\",\n  \"features\": [\"string\"],\n  \"credibility\": \"string\",\n  \"cta\": \"string\",\n  \"fullScript\": \"string\",\n  \"estimatedDuration\": \"number\"\n}"},"type":"@n8n/n8n-nodes-langchain.outputParserStructured","typeVersion":1.2,"position":[4160,-600],"id":"406fdaa2-f5e8-48bd-aa2f-72d08556a75a","name":"Script Output Parser"},{"parameters":{"operation":"update","databaseId":171,"tableId":695,"rowId":"={{ $('Get Draft Campaigns').item.json.id }}","fieldsUi":{"fieldValues":[{"fieldId":6721,"fieldValue":"={{ $json.output.fullScript }}"},{"fieldId":6725,"fieldValue":"Ready for Review"},{"fieldId":6728,"fieldValue":"Assembling"}]}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[4380,-780],"id":"224a3400-9a2a-4585-9ef8-80dbc2f55254","name":"Update Campaign Script","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"content":"## Stage 1: Script Generation\n\nThis workflow:\n1. Finds campaigns with Script Status = 'Draft'\n2. Generates professional iPhone-style product scripts\n3. Updates the campaign and sets status to 'Ready for Review'","height":200,"width":400,"color":5},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[3180,-820],"id":"ac399aa0-3c5f-463a-a478-91876504750b","name":"Workflow Description"},{"parameters":{"amount":30},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[3640,-780],"id":"2c1739de-4afc-42d2-b87a-e324173e714e","name":"Schedule Every 30s","webhookId":"a93cda62-7b5c-4363-95fe-67d85347f736"},{"parameters":{"databaseId":171,"tableId":695,"returnAll":true,"additionalOptions":{"filters":{"fields":[{"field":6725,"operator":"contains","value":"Approved"},{"field":6726,"operator":"contains","value":"Generating"}]}}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[3820,40],"id":"ce4e5129-7e31-487c-af3a-d2c0dd3a1144","name":"Get Approved Campaigns","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"promptType":"define","text":"=Campaign Details:\nCompany: {{ $('Get Approved Campaigns').item.json['Company Name'] }}\nProduct/Service: {{ $('Get Approved Campaigns').item.json['Product/Service Name'] }}\nIndustry: {{ $('Get Approved Campaigns').item.json.Industry }}\nTarget Audience: {{ $('Get Approved Campaigns').item.json['Target Audience'] }}\nVideo Duration: {{ $('Get Approved Campaigns').item.json['Video Duration'].value }}\nBrand Colors: {{ $('Get Approved Campaigns').item.json['Brand Colors'] }}\n\nHeres the full script:\n{{ $json.json.fullScript }}\n\nGenerative style:\n{{ $json.json.generativeStyle.value }}\n\nHere is the current scene:\nScript portion: {{ $json.json.words }}\nScript position: {{ $json.json.id }}\n**Scene duration: {{ $json.json.duration }} seconds**","hasOutputParser":true,"messages":{"messageValues":[{"message":"=You are an image prompt generator specializing in iPhone-style product videos. Your task is to create a compelling image prompt for a single 5-second video scene based on the script segment provided.\n\n**Your Goal:**\nGenerate one premium, Apple-style image prompt that will serve as the starting frame for this specific scene segment.\n\n**Scene Context:**\n- This is part of a {{ $('Get Approved Campaigns').item.json['Video Duration'].value }} video\n- Current scene position: {{ $json.json.id }} \n- Scene duration: ~5 seconds\n- Generative style: {{ $json.json.generativeStyle.value }}\n\n**Image Prompt Guidelines:**\n- Write prompts for iPhone-style product photography in the specified generative style\n- Use professional lighting (studio lighting, dramatic shadows, clean backgrounds)\n- Specify camera angles (macro, wide, 45-degree, overhead)\n- Include premium materials and the brand colors when relevant\n- Keep backgrounds minimal and clean\n- Focus on the specific action/content in this script segment\n- Never include text in images\n- Keep prompts under 240 characters\n\n**Output JSON Format:**\n{\n  \"imagePrompt\": \"detailed image description here\",\n  \"sceneType\": \"Product Hero Shot/Feature Highlight/Lifestyle Shot/Detail Shot/CTA\", \n  \"description\": \"brief scene description\",\n  \"duration\": {{ $json.json.duration }},\n  \"scriptSegment\": \"{{ $json.json.words }}\"\n}"}]}},"type":"@n8n/n8n-nodes-langchain.chainLlm","typeVersion":1.5,"position":[3820,280],"id":"4cc2e17b-3e8e-40e5-af0b-37dec97edfb5","name":"Generate Scene Plan"},{"parameters":{"jsonSchemaExample":"{\n  \"scenes\": [\n    {\n      \"number\": 1,\n      \"type\": \"string\",\n      \"duration\": 2,\n      \"description\": \"string\",\n      \"imagePrompt\": \"string\",\n      \"scriptSegment\": \"string\"\n    }\n  ],\n  \"totalScenes\": 6,\n  \"estimatedDuration\": 30\n}"},"type":"@n8n/n8n-nodes-langchain.outputParserStructured","typeVersion":1.2,"position":[3980,520],"id":"f55c1eb9-885d-464d-a7cf-9ad3047fffba","name":"Scene Output Parser"},{"parameters":{"fieldToSplitOut":"output.scenes","options":{}},"type":"n8n-nodes-base.splitOut","typeVersion":1,"position":[4200,280],"id":"228ab084-2b13-462d-8a23-028b8ff82178","name":"Split Scenes"},{"parameters":{"options":{}},"type":"n8n-nodes-base.splitInBatches","typeVersion":3,"position":[5240,560],"id":"05285e8e-06d7-48c3-b77f-f3270d38f5de","name":"Process Scenes in Batches"},{"parameters":{"method":"POST","url":"https://api.freepik.com/v1/ai/mystic","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"application/json"},{"name":"Accept","value":"application/json"}]},"sendBody":true,"specifyBody":"json","jsonBody":"={\n  \"prompt\": {{ JSON.stringify($json[\"Image Prompt\"]) }},\n  \"style_reference\": \"{{ $('Convert to Base64 String1').item.json.base64_String }}\",\n  \"adherence\": 50,\n  \"hdr\": 60,\n  \"resolution\": \"1k\",\n  \"aspect_ratio\": \"social_story_9_16\",\n  \"model\": \"realism\",\n  \"creative_detailing\": 60,\n  \"engine\": \"magnific_sharpy\",\n  \"fixed_generation\": false,\n  \"filter_nsfw\": false\n}","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[5440,660],"id":"21fbd0b0-937d-47a3-ae23-ad8edf2069f3","name":"Generate Image","credentials":{"httpHeaderAuth":{"id":"MnFk2IHNTKhV11ec","name":"FreePik Header Auth"}}},{"parameters":{"amount":25},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[5600,660],"id":"07003315-30d4-46e3-8745-065a55a8b9cd","name":"Wait for Generation","webhookId":"d1756ff6-91d6-4607-86bb-1343b56c6f36"},{"parameters":{"url":"=https://api.freepik.com/v1/ai/mystic/{{ $json.data.task_id }}","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[5760,600],"id":"29e39ade-9529-4e99-811d-8fce7e3d97ae","name":"Check Generation Status","credentials":{"httpHeaderAuth":{"id":"MnFk2IHNTKhV11ec","name":"FreePik Header Auth"}}},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"completion-check","leftValue":"={{ $json.data.status }}","rightValue":"COMPLETED","operator":{"type":"string","operation":"contains"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[5920,660],"id":"616f6b5d-2a17-40aa-a934-3b8def3bc687","name":"Check If Complete"},{"parameters":{"method":"POST","url":"https://baserow.aiautomata.co.za/api/user-files/upload-file/","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"contentType":"multipart-form-data","bodyParameters":{"parameters":[{"parameterType":"formBinaryData","name":"file","inputDataFieldName":"data"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[6320,660],"id":"5a9f4bf0-bf02-418b-9f1c-9ce2243168a7","name":"Upload to Baserow","credentials":{"httpHeaderAuth":{"id":"eLr9WkAowHbRSmCb","name":"Baserow Auth account"}}},{"parameters":{"operation":"update","databaseId":171,"tableId":690,"rowId":"={{ $('Process Scenes in Batches').item.json['Scene ID'] }}","fieldsUi":{"fieldValues":[{"fieldId":6685,"fieldValue":"={{ $json.name }}"},{"fieldId":6687,"fieldValue":"={{ $('Download Image1').item.json.data.generated[0] }}"}]}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[6520,660],"id":"cdf4dac3-db43-453e-8407-236704980035","name":"Update Scene with Image","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"operation":"update","databaseId":171,"tableId":695,"rowId":"={{ $('Get Approved Campaigns1').item.json.id }}","fieldsUi":{"fieldValues":[{"fieldId":6726,"fieldValue":"Images Ready for Review"},{"fieldId":6728,"fieldValue":"Assembling"}]}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[5440,500],"id":"b4dd0e5e-50e8-40e0-9068-4eb67983ac15","name":"Update Campaign Status","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"amount":30},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[3640,140],"id":"be6beb1c-7c5e-46c7-a58d-779774433812","name":"Schedule Every 30s1","webhookId":"5da29836-4930-4c6b-b712-bc0b39c498a4"},{"parameters":{"options":{"temperature":0.6}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenRouter","typeVersion":1,"position":[3820,500],"id":"7f0b2475-c049-4f42-adc8-ff979cbcd716","name":"OpenRouter - GPT-4.1 Mini1","credentials":{"openRouterApi":{"id":"eni2kFdHGvy7lEd3","name":"OpenRouter account"}}},{"parameters":{"operation":"create","databaseId":171,"tableId":690,"fieldsUi":{"fieldValues":[{"fieldId":6680,"fieldValue":"={{ $json.description }}"},{"fieldId":6681,"fieldValue":"={{ $json.imagePrompt }}"},{"fieldId":6730,"fieldValue":"={{ $('Get Approved Campaigns').item.json.id }}"},{"fieldId":6739,"fieldValue":"={{ $json.duration }}"},{"fieldId":6740,"fieldValue":"={{ $json.scriptSegment }}"}]}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[4400,280],"id":"4e7bc383-fe64-4cf4-a617-9f54a3f4e506","name":"Create Scene Records1","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"url":"={{ $json.data.generated[0] }}","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[6140,660],"id":"caeeb213-3698-4cde-a2f7-e758c5b0c840","name":"Download Image1"},{"parameters":{"content":"## Stage 3: Scene Planning\n\nThis workflow:\n1. Finds campaigns with Script Status = 'Approved'\n2. Breaks script into iPhone-style scenes\n3. Generates professional product images\n4. Updates Images Status to 'Ready for Review'","height":280,"width":400,"color":5},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[3180,40],"id":"962452a9-083c-4e07-afa5-d6c9825fd46f","name":"Workflow Description1"},{"parameters":{"databaseId":171,"tableId":695,"returnAll":true,"additionalOptions":{"filters":{"fields":[{"field":6726,"value":"Approved as Images"},{"field":6727,"value":"Generating"}]}}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[9140,-660],"id":"4da20de5-fd34-4e2a-bb3b-645dd5098d86","name":"Get Campaigns Ready for Music","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"promptType":"define","text":"=Campaign Details:\nCompany: {{ $json['Company Name'] }}\nProduct/Service: {{ $json['Product/Service Name'] }}\nIndustry: {{ $json['Industry'] }}\nTarget Audience: {{ $json['Target Audience'] }}\nVideo Duration: {{ $json['Video Duration'] }}\nExisting Music Prompt: {{ $json['Music Prompt'] || 'None provided' }}","hasOutputParser":true,"messages":{"messageValues":[{"message":"=You are a professional music director specializing in commercial and product video soundtracks. Your task is to create a detailed music prompt that will generate the perfect soundtrack for this promotional video.\n\n**Your Goal:**\nCreate a music prompt that will result in professional, brand-appropriate background music that enhances the product video without overwhelming the message.\n\n**Music Style Guidelines by Industry:**\n- **Technology/Apps**: Modern, upbeat, electronic elements, innovation-focused\n- **Health/Medical**: Calm, trustworthy, gentle, reassuring\n- **Finance/Business**: Professional, confident, sophisticated, corporate\n- **Consumer Products**: Energetic, friendly, accessible, lifestyle-oriented\n- **Luxury/Premium**: Elegant, sophisticated, minimal, premium feel\n- **Food/Beverage**: Warm, inviting, fresh, appetizing\n- **Automotive**: Powerful, dynamic, adventurous, premium\n- **Fashion/Beauty**: Stylish, contemporary, confident, aspirational\n\n**Duration-Based Structure:**\n- **10s**: Simple, impactful, memorable hook\n- **30s**: Intro → Build → Peak → Resolve\n- **1min**: Intro → Verse → Chorus → Bridge → Outro\n- **2min**: Full song structure with multiple sections\n\n**Technical Specifications:**\n- Tempo should match video energy (60-80 BPM calm, 80-120 BPM moderate, 120+ BPM energetic)\n- Key should evoke appropriate emotions (Major = positive, Minor = serious/luxury)\n- Instrumentation should match brand personality\n- Mix should leave space for voiceover (sidechained compression)\n\n**Output Format:**\nCreate a detailed music prompt that includes:\n- Genre and style\n- Tempo and key\n- Instrumentation\n- Mood and energy level\n- Song structure for the duration\n- Any specific production techniques\n\n**JSON Output:**\n{\n  \"musicPrompt\": \"Detailed music generation prompt\",\n  \"genre\": \"Primary genre\",\n  \"tempo\": \"BPM range\",\n  \"mood\": \"Primary mood\",\n  \"duration\": \"Video duration\",\n  \"reasoning\": \"Why this music fits the brand and product\"\n}"}]}},"type":"@n8n/n8n-nodes-langchain.chainLlm","typeVersion":1.5,"position":[9560,-660],"id":"f062d4cb-f484-46a7-b97d-21ad2c4777ff","name":"Generate Music Prompt"},{"parameters":{"jsonSchemaExample":"{\n  \"musicPrompt\": \"string\",\n  \"genre\": \"string\",\n  \"tempo\": \"string\",\n  \"mood\": \"string\",\n  \"duration\": \"string\",\n  \"reasoning\": \"string\"\n}"},"type":"@n8n/n8n-nodes-langchain.outputParserStructured","typeVersion":1.2,"position":[9760,-480],"id":"ca8f638f-1dce-4042-9be5-a0db98e2bbb7","name":"Music Prompt Parser"},{"parameters":{"operation":"update","databaseId":171,"tableId":695,"rowId":"={{ $('Get Campaigns Ready for Music').item.json.id }}","fieldsUi":{"fieldValues":[{"fieldId":6722,"fieldValue":"={{ $json.output.musicPrompt }}"}]}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[9980,-660],"id":"86a18915-f6fe-4cb0-bf72-d5ae24be8290","name":"Update Music Prompt","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"method":"POST","url":"https://studio-api.suno.ai/api/external/generate/","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"application/json"}]},"sendBody":true,"specifyBody":"json","jsonBody":"={\n  \"topic\": {{ JSON.stringify($json.output.musicPrompt) }},\n  \"tags\": \"{{ $json.output.genre }}, instrumental, commercial, background music\",\n  \"title\": \"{{ $('Get Campaigns Ready for Music').item.json['Product/Service Name'] }} - Background Music\",\n  \"make_instrumental\": true,\n  \"model\": \"chirp-v3\",\n  \"wait_audio\": false\n}","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[10200,-660],"id":"b6a14b0c-84d1-46c5-8097-d8406c6c22a7","name":"Generate Music with Suno","credentials":{"httpHeaderAuth":{"id":"y97zmr8F665tRMyl","name":"Together.ai Auth account"}}},{"parameters":{"amount":60},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[10420,-660],"id":"e9cba2e5-1409-4173-aaf1-9b53a9c77c78","name":"Wait for Music Generation","webhookId":"38fd9667-ae0b-44ff-9ea7-b4a4ff981c89"},{"parameters":{"url":"=https://studio-api.suno.ai/api/external/clips/?ids={{ $json.clips[0].id }}","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[10640,-660],"id":"80a56b4a-070f-4c23-b6fd-d70068ce15fb","name":"Check Music Generation Status","credentials":{"httpHeaderAuth":{"id":"y97zmr8F665tRMyl","name":"Together.ai Auth account"}}},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"loose","version":2},"conditions":[{"id":"completion-check","leftValue":"={{ $json[0].status }}","rightValue":"complete","operator":{"type":"string","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[10860,-660],"id":"fe53c6c4-dd69-4936-b9d7-a39c84a3988e","name":"Check If Music Complete"},{"parameters":{"url":"={{ $json[0].audio_url }}","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[11080,-720],"id":"11039bf0-ce56-4610-b4ab-7e16740e7a75","name":"Download Music File"},{"parameters":{"method":"POST","url":"https://baserow.aiautomata.co.za/api/user-files/upload-file/","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"contentType":"multipart-form-data","bodyParameters":{"parameters":[{"parameterType":"formBinaryData","name":"file","inputDataFieldName":"data"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[11300,-720],"id":"67c559b9-b4dd-41f4-a9be-94585d0f607e","name":"Upload Music to Baserow","credentials":{"httpHeaderAuth":{"id":"eLr9WkAowHbRSmCb","name":"Baserow Auth account"}}},{"parameters":{"operation":"create","databaseId":171,"tableId":692,"fieldsUi":{"fieldValues":[{"fieldId":6694,"fieldValue":"={{ $json.name }}"},{"fieldId":6695,"fieldValue":"={{ $('Generate Music Prompt').item.json.output.musicPrompt }}"},{"fieldId":6741,"fieldValue":"{{ $('Generate Music Prompt').item.json.output.genre }}"},{"fieldId":6742,"fieldValue":"{{ $('Generate Music Prompt').item.json.output.tempo }}"},{"fieldId":6743,"fieldValue":"{{ $('Generate Music Prompt').item.json.output.mood }}"}]}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[11520,-720],"id":"505b9324-7967-42d3-b7ff-190180c24734","name":"Create Music Library Record","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"operation":"update","databaseId":171,"tableId":695,"rowId":"={{ $('Get Campaigns Ready for Music').item.json.id }}","fieldsUi":{"fieldValues":[{"fieldId":6731,"fieldValue":"={{ $json.id }}"},{"fieldId":6727,"fieldValue":"Ready for Review"}]}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[11740,-660],"id":"5a90ee3a-fc5f-47b8-8dd9-5a9dae4613e8","name":"Link Music to Campaign","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"content":"## Alternative: Use Existing Music Library\n\nIf you prefer to use curated music instead of generating new tracks:\n\n1. Replace Suno API call with music library search\n2. Use AI to match existing tracks to campaign requirements\n3. Link best matching track to campaign\n\nThis could be faster and more cost-effective for high-volume production.","height":270,"width":350,"color":3},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[10200,-460],"id":"a0d72cb6-751d-460d-97b2-352fdd2ef721","name":"Alternative Approach"},{"parameters":{"amount":30},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[8960,-660],"id":"c3b73b0d-3ce7-4c97-a6d1-e9c22ab92431","name":"Schedule Every 30s2","webhookId":"9da4f260-51a7-4dd5-8f7b-42507ef464fe"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"condition1","leftValue":"={{ $json.length }}","rightValue":0,"operator":{"type":"number","operation":"gt"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[9360,-660],"id":"14ef7353-4719-4aa8-95ec-17929e0bc9e7","name":"Check If Campaigns Exist2"},{"parameters":{"options":{"temperature":0.7}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenRouter","typeVersion":1,"position":[9540,-480],"id":"8611077f-e308-4406-8510-6d8e81662b9d","name":"OpenRouter - GPT-4.1 Mini2","credentials":{"openRouterApi":{"id":"eni2kFdHGvy7lEd3","name":"OpenRouter account"}}},{"parameters":{"content":"## Stage 3: Music Generation\n\nThis workflow:\n1. Finds campaigns with Images Status = 'Approved as Images'\n2. Generates or refines music prompts based on brand/industry\n3. Creates instrumental background music with Suno AI\n4. Uploads music to the Music Library\n5. Links music to campaign and sets Music Status to 'Ready for Review'","height":200,"width":400,"color":5},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[9140,-880],"id":"afd21a48-3249-446c-8e89-d3cce26d0ea1","name":"Workflow Description2"},{"parameters":{"amount":30},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[3660,2980],"id":"8987c88b-afcb-45e8-8301-89defe6996a7","name":"Schedule Every 30s3","webhookId":"082c2ab7-ca99-45ae-936d-8b14bab53526"},{"parameters":{"content":"## Stage 6A: Image-to-Video Conversion\n\nThis workflow:\n1. Finds campaigns with Images Status = 'Convert to Video'\n2. Gets all scenes with images but no video clips\n3. Generates intelligent animation prompts for each scene type\n4. Converts images to video clips using fal.ai\n5. Updates scenes with video clips\n6. Sets Final Status to 'Assembling' when all scenes are complete","height":440,"width":400,"color":5},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[3240,2760],"id":"b1823fcf-5647-4e83-b1e8-9b1ddbb7aa29","name":"Workflow Description3"},{"parameters":{},"type":"n8n-nodes-base.manualTrigger","typeVersion":1,"position":[3320,1340],"id":"3fc3aaab-cea0-4b2e-bd01-5d44a9492b1a","name":"When clicking ‘Test workflow’"},{"parameters":{"jsonSchemaExample":"{\n  \"Music_prompts\": [\n    \"Orchestral, playful pizzicato strings, light percussion, bouncing rhythm\",\n    \"Orchestral classical, staccato violins, playful xylophone, upbeat tempo\",\n    \"Classical, ethereal harp, delicate strings, lilting woodwinds, morning atmosphere\",\n    \"... (7 more prompts) ...\"\n  ]\n}\n"},"type":"@n8n/n8n-nodes-langchain.outputParserStructured","typeVersion":1.2,"position":[7280,4000],"id":"6ceb6ec5-8be9-4f32-930f-5d7325248560","name":"Structured Output Parser5"},{"parameters":{"options":{"temperature":0.6}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenRouter","typeVersion":1,"position":[7040,4160],"id":"6f03b80a-d7a5-4134-b797-08140dd581d8","name":"OpenRouter Chat Model5","credentials":{"openRouterApi":{"id":"eni2kFdHGvy7lEd3","name":"OpenRouter account"}}},{"parameters":{"promptType":"define","text":"=go","hasOutputParser":true,"options":{"systemMessage":"=You are an AI music generation assistant designed to support the creation of background music for promotional videos featuring products, services, and brand launches. Your task is to generate **10 unique music prompts** using only **music-related language**.\n\nEach prompt must:\n* Be suitable for professional, commercial, and brand-focused video content\n* Use dynamic, expressive musical descriptors (e.g., instrument types, rhythms, moods, energy levels)\n* Focus on styles like corporate, upbeat, elegant, modern, cinematic, or inspirational\n* Match commercial video aesthetics (think Apple, Nike, luxury brands)\n* Avoid non-musical language, explanations, or context\n* Be rich enough to guide an AI music generation tool\n* Create emotional connection and drive engagement\n\n**Style Guidelines by Industry:**\n* Technology/Apps: Modern electronic, synthesized, innovative, clean production\n* Automotive: Powerful, dynamic, driving rhythms, bold instrumentation\n* Luxury/Fashion: Sophisticated, minimal, elegant, premium feel\n* Food/Beverage: Warm, inviting, organic, fresh energy\n* Health/Fitness: Energetic, motivational, uplifting, strong beats\n* Finance/Business: Professional, confident, trustworthy, sophisticated\n* Consumer Products: Friendly, accessible, upbeat, lifestyle-oriented\n\nYour output should always follow this **JSON format**:\n\n{\n  \"Music_prompts\": [\n    \"Modern electronic, crisp synthesizers, driving beat, corporate confidence, polished production\",\n    \"Cinematic orchestral, soaring strings, bold brass, triumphant energy, inspiring crescendo\",\n    \"Minimalist piano, subtle strings, elegant atmosphere, luxury brand sophistication\",\n    \"... (7 more prompts) ...\"\n  ]\n}\n\nGenerate only the JSON object—do not include any additional commentary or formatting outside the JSON.\n\n"}},"type":"@n8n/n8n-nodes-langchain.agent","typeVersion":1.8,"position":[7060,3820],"id":"26eaf1be-af08-47ee-b4bd-5c04d25b6e8b","name":"Generate Music Promps"},{"parameters":{"fieldToSplitOut":"output.Music_prompts","options":{}},"type":"n8n-nodes-base.splitOut","typeVersion":1,"position":[7460,3820],"id":"1c7bfa2a-b08e-4260-a7b6-8c38f42bc4ef","name":"Split Prompts"},{"parameters":{"operation":"create","databaseId":171,"tableId":692,"fieldsUi":{"fieldValues":[{"fieldId":6695,"fieldValue":"={{ $json['output.Music_prompts'] }}"}]}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[7720,3820],"id":"7f0d8030-009b-4b03-9801-46f57436370d","name":"Add New Music Prompt","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"content":"## Music Prompt Generator (10 new)\n","height":440,"width":1320,"color":4},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[6840,3700],"id":"2e67c5b8-ac3e-479c-8ac7-cfcec9e85393","name":"Sticky Note11"},{"parameters":{"databaseId":171,"tableId":692,"returnAll":true,"additionalOptions":{}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[4360,4500],"id":"a9ab623e-8517-4fed-b6f6-285b1845b3f0","name":"Get Music Library","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"aggregate":"aggregateAllItemData","include":"specifiedFields","fieldsToInclude":"Audio ID, Description, Music Style, Tempo, Mood","options":{}},"type":"n8n-nodes-base.aggregate","typeVersion":1,"position":[4580,4500],"id":"f2231757-85a3-47a4-a2db-815026940065","name":"Aggregate Music Library"},{"parameters":{"promptType":"define","text":"=Campaign Details:\nCompany: {{ $('Get Campaigns Ready for Music1').item.json['Company Name'] }}\nProduct/Service: {{ $('Get Campaigns Ready for Music1').item.json['Product/Service Name'] }}\nIndustry: {{ $('Get Campaigns Ready for Music1').item.json['Industry'] }}\nTarget Audience: {{ $('Get Campaigns Ready for Music1').item.json['Target Audience'] }}\nVideo Duration: {{ $('Get Campaigns Ready for Music1').item.json['Video Duration'] }}\nExisting Music Prompt: {{ $('Get Campaigns Ready for Music1').item.json['Music Prompt'] || 'None provided' }}\n\nAvailable Music Library:\n{{ $json.data.toJsonString() }}","hasOutputParser":true,"messages":{"messageValues":[{"message":"=You are a professional music director specializing in commercial and product video soundtracks. Your task is to select the most appropriate music track from the existing music library for this promotional video campaign.\n\n**Your Goal:**\nAnalyze the campaign details and select the music track that best matches the brand, industry, target audience, and video duration from the provided music library.\n\n**Selection Criteria by Industry:**\n- **Technology/Apps**: Modern, upbeat, electronic elements, innovation-focused\n- **Health/Medical**: Calm, trustworthy, gentle, reassuring\n- **Finance/Business**: Professional, confident, sophisticated, corporate\n- **Consumer Products**: Energetic, friendly, accessible, lifestyle-oriented\n- **Luxury/Premium**: Elegant, sophisticated, minimal, premium feel\n- **Food/Beverage**: Warm, inviting, fresh, appetizing\n- **Automotive**: Powerful, dynamic, adventurous, premium\n- **Fashion/Beauty**: Stylish, contemporary, confident, aspirational\n\n**Matching Process:**\n1. **Industry Alignment**: Match music style to industry requirements\n2. **Mood Compatibility**: Ensure the mood fits the brand personality\n3. **Tempo Appropriateness**: Consider video duration and energy level needed\n4. **Target Audience**: Select music that resonates with the intended audience\n5. **Brand Fit**: Choose music that enhances the brand message\n\n**Decision Factors:**\n- Music Style should complement the industry\n- Tempo should match the video energy and duration\n- Mood should align with brand personality\n- Description should indicate suitability for commercial use\n\n**JSON Output:**\n{\n  \"selectedMusicId\": \"Audio ID of the best matching track\",\n  \"musicTitle\": \"Description of the selected track\",\n  \"musicStyle\": \"Style of the selected music\",\n  \"tempo\": \"Tempo of the selected track\",\n  \"mood\": \"Mood of the selected track\",\n  \"reasoning\": \"Detailed explanation of why this track is the best match for this campaign, including how it aligns with industry, brand, and audience\",\n  \"alternativeOptions\": [\"Audio ID of second choice\", \"Audio ID of third choice\"]\n}"}]}},"type":"@n8n/n8n-nodes-langchain.chainLlm","typeVersion":1.5,"position":[4800,4500],"id":"66f7a57a-d4af-49c6-a066-3d4432d2a846","name":"AI Music Selector"},{"parameters":{"jsonSchemaExample":"{\n  \"selectedMusicId\": \"string\",\n  \"musicTitle\": \"string\",\n  \"musicStyle\": \"string\",\n  \"tempo\": \"string\",\n  \"mood\": \"string\",\n  \"reasoning\": \"string\",\n  \"alternativeOptions\": [\"string\"]\n}"},"type":"@n8n/n8n-nodes-langchain.outputParserStructured","typeVersion":1.2,"position":[5200,4680],"id":"ccc3c5b8-9329-478d-9a76-521c7ddd3d97","name":"Music Selection Parser"},{"parameters":{"operation":"update","databaseId":171,"tableId":695,"rowId":"={{ $('Get Campaigns Ready for Music1').item.json.id }}","fieldsUi":{"fieldValues":[{"fieldId":6722,"fieldValue":"={{ $json.output.reasoning }}"},{"fieldId":6731,"fieldValue":"={{ $json.output.selectedMusicId }}"},{"fieldId":6727,"fieldValue":"Ready for Review"}]}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[5240,4500],"id":"705783bf-8f33-418c-b772-0b555ac23c42","name":"Link Selected Music to Campaign","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"content":"## Benefits of Music Library Selection\n\n✅ **Faster**: No generation wait time\n✅ **Cost-effective**: No Suno API costs\n✅ **Quality controlled**: Pre-approved tracks\n✅ **Consistent branding**: Curated library\n✅ **Instant results**: Immediate selection\n✅ **Alternative options**: AI provides backup choices\n\n**AI Selection considers:**\n• Industry alignment\n• Brand personality\n• Target audience\n• Video duration\n• Mood compatibility","height":280,"width":350,"color":3},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[7860,1400],"id":"43bf97fd-fd9f-4e74-b0f2-e093b96a8d0a","name":"Benefits of Library Selection"},{"parameters":{"amount":30},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[3740,4500],"id":"77753101-6c9d-49fc-8e67-bd51638bbdeb","name":"Schedule Every 30s5","webhookId":"9da4f260-51a7-4dd5-8f7b-42507ef464fe"},{"parameters":{"databaseId":171,"tableId":695,"returnAll":true,"additionalOptions":{"filters":{"fields":[{"field":6725,"operator":"contains","value":"Approved"},{"field":6727,"operator":"contains","value":"Generating"}]}}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[3920,4500],"id":"10b32dc4-5655-45e1-8a5a-8bd31ea3ff2f","name":"Get Campaigns Ready for Music1","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"condition1","leftValue":"={{ $json.id }}","rightValue":0,"operator":{"type":"number","operation":"gt"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[4140,4500],"id":"99079f23-dfa7-4822-8a80-8293d75be07a","name":"Check If Campaigns Exist5"},{"parameters":{"options":{"temperature":0.3}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenRouter","typeVersion":1,"position":[4660,4680],"id":"58ff0ccb-15db-4070-add8-9e6a3a721fd8","name":"OpenRouter - GPT-4.1 Mini5","credentials":{"openRouterApi":{"id":"eni2kFdHGvy7lEd3","name":"OpenRouter account"}}},{"parameters":{"amount":30},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[3620,-400],"id":"adb829a4-7b14-4c50-88ce-0b24586bf49e","name":"Schedule Every 30s6","webhookId":"70376776-8af9-4ec8-8582-73be13a2b72f"},{"parameters":{"databaseId":171,"tableId":695,"returnAll":true,"additionalOptions":{"filters":{"fields":[{"field":6728,"operator":"contains","value":"Assembling"},{"field":6725,"operator":"contains","value":"Approved"}]}}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[3800,-480],"id":"d7df4605-586f-4ebf-9cde-ecac2d4f198c","name":"Get Campaigns Ready for Assembly1","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"method":"POST","url":"https://tts.aiautomata.co.za/dev/captioned_speech","sendBody":true,"specifyBody":"json","jsonBody":"={\n  \"model\": \"kokoro\",\n  \"input\": {{ JSON.stringify($json.Script) }},\n  \"voice\": \"{{ $json['TTS Voice'].value }}\",\n  \"response_format\": \"mp3\",\n  \"download_format\": \"mp3\",\n  \"return_timestamps\": true,\n  \"speed\": 1\n}","options":{"response":{"response":{"fullResponse":true}}}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[3980,-480],"id":"664515b2-1a8d-4e05-a4b3-a93232c31607","name":"Generate Voiceover1"},{"parameters":{"method":"POST","url":"https://baserow.aiautomata.co.za/api/user-files/upload-file/","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"contentType":"multipart-form-data","bodyParameters":{"parameters":[{"parameterType":"formBinaryData","name":"file","inputDataFieldName":"data"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[4180,-480],"id":"3c25dbdb-16a6-42a3-b68c-0d70f44cca88","name":"Upload Voiceover to Baserow1","credentials":{"httpHeaderAuth":{"id":"eLr9WkAowHbRSmCb","name":"Baserow Auth account"}}},{"parameters":{"content":"## Stage 2: Voiceover Generation\n\nThis workflow:\n1. Finds campaigns with Final Status = 'Assembling'\n2. Generates professional voiceover from script using Kokoro TTS\n3. Uploads voiceover to Baserow\n4. Updates Final Status to 'Voice Generated'\n\nNext: Stage 5B will pick up campaigns with 'Voice Generated' status","height":320,"width":400,"color":5},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[3180,-500],"id":"d4890428-07bb-4014-8cd1-4522313a4e24","name":"Workflow Description6"},{"parameters":{"databaseId":171,"tableId":695,"returnAll":true,"additionalOptions":{"filters":{"fields":[{"field":6728,"operator":"contains","value":"Assembling"},{"field":6725,"operator":"contains","value":"Approved"}]}}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[3960,5180],"id":"89a0e53d-f317-47bd-9dd2-316e20802a7e","name":"Get Campaigns with Voice Ready","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"amount":30},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[3780,5180],"id":"417a8a6b-645e-44cc-9608-576246515292","name":"Schedule Every 30s7","webhookId":"20d639c6-60d7-4c02-b436-66cf0c759b03"},{"parameters":{"method":"POST","url":"https://nca.aiautomata.co.za/v1/ffmpeg/compose","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"specifyBody":"json","jsonBody":"={\n  \"id\": \"audio-layering\",\n  \"inputs\": [\n    {\n      \"file_url\": \"{{ $json.url }}\"\n    },\n    {\n      \"file_url\": \"{{ $('Get Campaigns with Voice Ready').item.json['TTS Audio'][0].url }}\"\n    }\n  ],\n  \"filters\": [\n    {\n      \"filter\": \"[1:a]volume=1[outa]\"\n    }\n  ],\n  \"outputs\": [\n    {\n      \"options\": [\n        {\n          \"option\": \"-map\",\n          \"argument\": \"0:v\"\n        },\n        {\n          \"option\": \"-map\",\n          \"argument\": \"[outa]\"\n        },\n        {\n          \"option\": \"-c:v\",\n          \"argument\": \"copy\"\n        },\n        {\n          \"option\": \"-c:a\",\n          \"argument\": \"aac\"\n        },\n        {\n          \"option\": \"-f\",\n          \"argument\": \"mp4\"\n        }\n      ]\n    }\n  ]\n}\n","options":{"timeout":180000}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[4640,5180],"id":"b642054c-77fa-4592-809e-8e515cd78036","name":"Add Voiceover to Video1","credentials":{"httpHeaderAuth":{"id":"XhOG8EmUXSMMk7ct","name":"NCS-Toolkit Auth account"}}},{"parameters":{"databaseId":171,"tableId":692,"returnAll":true,"additionalOptions":{"filters":{"fields":[{"field":6693,"operator":"contains","value":"={{ $('Get Campaigns with Voice Ready').item.json['Music Library'][0].id }}"}]}}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[4820,5180],"id":"9ae2b5d1-8291-4dc8-8bc6-83c811df5b36","name":"Get Campaign Music1","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"method":"POST","url":"https://nca.aiautomata.co.za/v1/ffmpeg/compose","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"specifyBody":"json","jsonBody":"={\n  \"id\": \"audio-layering-over-original\",\n  \"inputs\": [\n    {\n      \"file_url\": \"{{ $('Add Voiceover to Video1').item.json.response[0].file_url }}\"\n    },\n    {\n      \"file_url\": \"{{ $json['Audio File'][0].url }}\"\n    }\n  ],\n  \"filters\": [\n    {\n      \"filter\": \"[1:a]volume=0.1[a1];[0:a][a1]amix=inputs=2:duration=shortest[outa]\"\n    }\n  ],\n  \"outputs\": [\n    {\n      \"options\": [\n        {\n          \"option\": \"-map\",\n          \"argument\": \"0:v\"\n        },\n        {\n          \"option\": \"-map\",\n          \"argument\": \"[outa]\"\n        },\n        {\n          \"option\": \"-c:v\",\n          \"argument\": \"copy\"\n        },\n        {\n          \"option\": \"-c:a\",\n          \"argument\": \"aac\"\n        },\n        {\n          \"option\": \"-shortest\"\n        }\n      ]\n    }\n  ]\n}\n","options":{"timeout":180000}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[5000,5180],"id":"987541dd-90eb-430d-b1bd-2371295b7ac7","name":"Add Background Music1","credentials":{"httpHeaderAuth":{"id":"XhOG8EmUXSMMk7ct","name":"NCS-Toolkit Auth account"}}},{"parameters":{"operation":"update","databaseId":171,"tableId":695,"rowId":"={{ $('Get Campaigns with Voice Ready').item.json.id }}","fieldsUi":{"fieldValues":[{"fieldId":6728,"fieldValue":"Ready for Review"},{"fieldId":6756,"fieldValue":"={{ $json.url }}"}]}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[5560,5180],"id":"44204e2e-c740-4dbd-a018-7cc6525e6d9d","name":"Update Campaign Status2","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"content":"## Stage 9: Video Assembly & Audio Mixing\n\nThis workflow:\n1. Finds campaigns with Final Status = 'Voice Generated'\n2. Concatenates all video clips in correct order\n3. Adds voiceover with proper audio mixing\n4. Adds background music with ducking\n5. Updates Final Status to 'Audio Mixed'\n\nNext: Stage 5C will add branding and finalize","height":400,"width":420,"color":5},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[3280,5040],"id":"7c71bf17-6737-4699-a97f-483bf3df95e6","name":"Workflow Description7"},{"parameters":{"databaseId":171,"tableId":695,"returnAll":true,"additionalOptions":{"filters":{"fields":[{"field":6728,"operator":"contains","value":"Assembling"}]}}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[3380,6680],"id":"d5c150cb-6b5b-45a9-8d58-0ef476a15a79","name":"Get Campaigns with Audio Mixed","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"has-brand-assets","leftValue":"={{ $json['Brand Assets'] && $json['Brand Assets'].length > 0 }}","rightValue":true,"operator":{"type":"boolean","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[3820,6680],"id":"a7288304-2716-4af5-9251-a470fc19f544","name":"Check If Brand Assets Exist"},{"parameters":{"url":"={{ $json.response[0].file_url }}","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[4260,6580],"id":"ffcc6dfa-85a1-4163-a433-c6832cbe1dd1","name":"Download Branded Video"},{"parameters":{"method":"POST","url":"https://baserow.aiautomata.co.za/api/user-files/upload-file/","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"contentType":"multipart-form-data","bodyParameters":{"parameters":[{"parameterType":"formBinaryData","name":"file","inputDataFieldName":"data"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[4480,6580],"id":"8f04299e-ad24-483d-a9ef-65170046e40e","name":"Upload Branded Video to Baserow","credentials":{"httpHeaderAuth":{"id":"eLr9WkAowHbRSmCb","name":"Baserow Auth account"}}},{"parameters":{"aggregate":"aggregateAllItemData","destinationFieldName":"mergedData","options":{}},"type":"n8n-nodes-base.aggregate","typeVersion":1,"position":[4260,6780],"id":"7a0947a6-2d28-407d-a43f-dafee86ebdc8","name":"Merge Paths"},{"parameters":{"content":"## Conditional Branding\n\n• If Brand Assets uploaded → Add watermark\n• If no Brand Assets → Skip branding\n• Both paths merge for final description generation\n• Handles campaigns with or without branding needs","height":260,"width":300,"color":3},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[3760,7080],"id":"a28219f3-1207-45e9-9ae6-e3361c445495","name":"Conditional Branding Logic"},{"parameters":{"amount":30},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[3200,6680],"id":"baf947c8-fff4-4e16-a41b-a9a650e225c6","name":"Schedule Every 30s8","webhookId":"776a52eb-bd8b-412e-9980-0997f3930d29"},{"parameters":{"method":"POST","url":"https://nca.aiautomata.co.za/v1/video/branding","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"specifyBody":"json","jsonBody":"={\n    \"video_url\": \"{{ $json['Video + Captions URL'] }}\",\n    \"logo_url\": \"{{ $json['Brand Assets'][0].url }}\",\n    \"position\": \"bottom-right\",\n    \"size\": \"small\",\n    \"opacity\": 0.8,\n    \"margin\": 20,\n    \"id\": \"branding-{{ $json.id }}\"\n}","options":{"timeout":180000}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[4040,6580],"id":"a17f4a69-c35b-49fa-b611-36f2ee23f325","name":"Add Branding/Watermark1","credentials":{"httpHeaderAuth":{"id":"XhOG8EmUXSMMk7ct","name":"NCS-Toolkit Auth account"}}},{"parameters":{"promptType":"define","text":"=Campaign Details:\nCompany: {{ $json['Company Name'] }}\nProduct: {{ $json['Product/Service Name'] }}\nDescription: {{ $json['Description'] }}\nKey Features: {{ $json['Key Features/Benefits'] }}\nTarget Audience: {{ $json['Target Audience'] }}\nCall to Action: {{ $json['Call to Action'] }}","hasOutputParser":true,"messages":{"messageValues":[{"message":"=You are a video marketing specialist who creates compelling video descriptions and thumbnails for promotional content. Your task is to generate a professional video description that will be used across social media platforms and video hosting sites.\n\n**Your Goal:**\nCreate a description that drives engagement, clearly communicates the value proposition, and includes relevant keywords for discoverability.\n\n**Description Structure:**\n1. **Hook** (1-2 sentences): Attention-grabbing opening that highlights the main benefit\n2. **Product Overview** (2-3 sentences): What it is and why it matters\n3. **Key Benefits** (3-4 bullet points): Most compelling features/benefits\n4. **Social Proof** (1 sentence): Brief credibility statement if applicable\n5. **Call to Action** (1-2 sentences): Clear next steps for viewers\n6. **Hashtags** (5-10 relevant hashtags): Mix of branded, industry, and trending tags\n\n**Style Guidelines:**\n- Use conversational, engaging tone\n- Focus on benefits over features\n- Include emotional triggers\n- Keep paragraphs short for mobile readability\n- Use action verbs and power words\n- Include relevant keywords naturally\n\n**Platform Optimization:**\n- Length: 125-250 words (optimal for most platforms)\n- Include emojis strategically for visual appeal\n- Front-load the most important information\n- End with strong call-to-action\n\n**JSON Output Format:**\n{\n  \"videoDescription\": \"Complete video description with hook, overview, benefits, CTA, and hashtags\",\n  \"shortDescription\": \"Condensed version for character-limited platforms (under 100 words)\",\n  \"hashtags\": [\"#hashtag1\", \"#hashtag2\", \"#hashtag3\"],\n  \"keyKeywords\": [\"keyword1\", \"keyword2\", \"keyword3\"],\n  \"thumbnailConcept\": \"Description of compelling thumbnail concept that would grab attention\"\n}"}]}},"type":"@n8n/n8n-nodes-langchain.chainLlm","typeVersion":1.5,"position":[4700,6740],"id":"3cdaa610-77e0-4585-936f-437f665978ac","name":"Generate Video Description1"},{"parameters":{"options":{"temperature":0.7}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenRouter","typeVersion":1,"position":[4700,7020],"id":"724cf846-6b35-4a6f-bf42-8665f1e8d294","name":"OpenRouter - GPT-4.1 Mini6","credentials":{"openRouterApi":{"id":"eni2kFdHGvy7lEd3","name":"OpenRouter account"}}},{"parameters":{"jsonSchemaExample":"{\n  \"videoDescription\": \"string\",\n  \"shortDescription\": \"string\",\n  \"hashtags\": [\"string\"],\n  \"keyKeywords\": [\"string\"],\n  \"thumbnailConcept\": \"string\"\n}"},"type":"@n8n/n8n-nodes-langchain.outputParserStructured","typeVersion":1.2,"position":[4880,7040],"id":"b2c48117-0381-4e14-b9a5-eed9d4894a27","name":"Description Parser1"},{"parameters":{"operation":"update","databaseId":171,"tableId":695,"rowId":"={{ $('Get Campaigns with Audio Mixed').item.json.id }}","fieldsUi":{"fieldValues":[{"fieldId":6735,"fieldValue":"={{ $('Upload Branded Video to Baserow').item.json.name || $('Get Campaigns with Audio Mixed').item.json['Final Video'][0].url }}"},{"fieldId":6723,"fieldValue":"={{ $json.output.videoDescription }}"},{"fieldId":6728,"fieldValue":"Ready for Review"}]}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[5120,6740],"id":"a09175a4-dd1a-49bf-b305-4835e5f8e0c6","name":"Update Campaign Complete1","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"content":"## Stage 5C: Final Branding & Completion\n\nThis workflow:\n1. Finds campaigns with Final Status = 'Audio Mixed'\n2. Checks if Brand Assets exist\n3. If yes: Adds branding/watermark to video\n4. If no: Skips branding step\n5. Generates compelling video description and metadata\n6. Updates Final Status to 'Ready for Review'\n\nThis completes the entire video production pipeline!","height":380,"width":400,"color":5},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[3260,6340],"id":"b2244eb5-5430-4603-8cb9-a909334cf89e","name":"Workflow Description8"},{"parameters":{"databaseId":171,"tableId":690,"returnAll":true,"additionalOptions":{"filters":{"fields":[{"field":6679,"value":"={{ $json.id }}"},{"field":6683,"operator":"empty"}]}}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[4320,2260],"id":"2db2a39d-5998-4966-a06d-66ffd376ad48","name":"Get Scenes Without Animation Prompts","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"amount":30},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[3700,2260],"id":"686b7930-575e-4e9c-a4b9-5ced37b7c652","name":"Schedule Every 30s9","webhookId":"c5f48d83-93cf-40fb-a52a-4db517a0108a"},{"parameters":{"databaseId":171,"tableId":695,"returnAll":true,"additionalOptions":{"filters":{"fields":[{"field":6726,"operator":"contains","value":"Convert to Video"},{"field":6725,"operator":"contains","value":"Approved"}]}}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[3880,2260],"id":"c0d898c9-7e90-4e18-ad61-bcbc5335bd75","name":"Get Campaigns Ready for Video1","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"batchSize":5,"options":{}},"type":"n8n-nodes-base.splitInBatches","typeVersion":3,"position":[4540,2260],"id":"e5054b21-da75-4a9b-8a97-bf825848a4ef","name":"Process Scenes in Batches2"},{"parameters":{"promptType":"define","text":"=Scene Details:\nDescription: {{ $json['Description'] }}\nScene Type: {{ $json['Scene Type'] }}\nDuration: {{ $json['Duration'] || '3' }} seconds\nScript Segment: {{ $json['Script Segment'] }}","hasOutputParser":true,"messages":{"messageValues":[{"message":"=You are a motion graphics director specializing in iPhone-style product videos. Your task is to create animation prompts that will convert static product images into compelling video clips.\n\n**Your Goal:**\nGenerate animation prompts that create smooth, professional camera movements and effects suitable for premium product videos.\n\n**Animation Types by Scene Type:**\n\n**Logo Intro:**\n- Gentle fade in with subtle scale animation\n- Soft glow or particle effects\n- Minimal, elegant entrance\n\n**Product Hero Shot:**\n- Slow 360° rotation to show all angles\n- Gentle floating/levitation effect\n- Smooth zoom in to highlight details\n- Professional studio lighting changes\n\n**Feature Highlight:**\n- Close-up zoom to specific feature area\n- Highlight glow or pulse on key elements\n- Smooth pan across the feature\n- Detail reveal animation\n\n**Lifestyle Shot:**\n- Natural environmental movement (gentle breeze, ambient motion)\n- Subtle parallax between foreground/background\n- Organic, lived-in feeling\n\n**Detail Shot:**\n- Macro zoom into specific areas\n- Highlight important textures or materials\n- Smooth focus pulling\n\n**Call to Action:**\n- Attention-grabbing but not overwhelming\n- Button hover effects or gentle pulsing\n- Clean, direct presentation\n\n**Technical Guidelines:**\n- Keep movements smooth and professional\n- Avoid jerky or fast motions\n- Maintain premium, Apple-style aesthetics\n- Ensure animations loop seamlessly if needed\n- Consider the duration (shorter = simpler animation)\n- Make sure prompts are compatible with fal.ai image-to-video\n\n**Output JSON Format:**\n{\n  \"animationPrompt\": \"Detailed animation description for fal.ai\",\n  \"cameraMovement\": \"Primary camera movement type\",\n  \"effectType\": \"Main visual effect\",\n  \"intensity\": \"low/medium/high\",\n  \"reasoning\": \"Why this animation fits the scene\"\n}"}]}},"type":"@n8n/n8n-nodes-langchain.chainLlm","typeVersion":1.5,"position":[4780,2340],"id":"cf7f7019-879a-477a-b1ee-365aeb44d147","name":"Generate Animation Prompt1"},{"parameters":{"options":{"temperature":0.6}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenRouter","typeVersion":1,"position":[4680,2600],"id":"b67b4405-8fe8-401a-9d88-e71c97e61e82","name":"OpenRouter - GPT-4.1 Mini7","credentials":{"openRouterApi":{"id":"eni2kFdHGvy7lEd3","name":"OpenRouter account"}}},{"parameters":{"jsonSchemaExample":"{\n  \"animationPrompt\": \"string\",\n  \"cameraMovement\": \"string\",\n  \"effectType\": \"string\",\n  \"intensity\": \"string\",\n  \"reasoning\": \"string\"\n}"},"type":"@n8n/n8n-nodes-langchain.outputParserStructured","typeVersion":1.2,"position":[5040,2600],"id":"e94e382d-330e-4742-ab2a-98c3131ca6e9","name":"Animation Parser1"},{"parameters":{"operation":"update","databaseId":171,"tableId":690,"rowId":"={{ $('Process Scenes in Batches2').item.json.id }}","fieldsUi":{"fieldValues":[{"fieldId":6683,"fieldValue":"={{ $json.output.animationPrompt }}"}]}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[5240,2340],"id":"b86d10f6-b53a-4040-a918-eea4f46d371d","name":"Update Animation Prompt1","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"operation":"update","databaseId":171,"tableId":695,"rowId":"={{ $('Get Campaigns Ready for Video1').item.json.id }}","fieldsUi":{"fieldValues":[{"fieldId":6726,"fieldValue":"Animation Prompts Ready"},{"fieldId":6728,"fieldValue":"Assembling"}]}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[4780,2160],"id":"4c5ab21f-45c3-409a-a247-460a135a6363","name":"Update Campaign Status3","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"content":"## Stage 5: Animation Prompt Generation\n\nThis workflow:\n1. Finds campaigns with Images Status = 'Convert to Video'\n2. Gets scenes with images but no animation prompts\n3. Generates intelligent animation prompts for each scene type\n4. Updates scenes with animation prompts\n5. Sets Images Status to 'Animation Prompts Ready' when complete\n\nNext: Stage 4B will convert images to videos using these prompts","height":220,"width":400,"color":5},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[3240,2200],"id":"1b8f9ef9-e1b9-4c22-9a6f-d3528f015dfc","name":"Workflow Description9"},{"parameters":{"fieldToSplitOut":"[\"Scenes\"]","options":{}},"type":"n8n-nodes-base.splitOut","typeVersion":1,"position":[4100,2260],"id":"210105f2-0f42-4635-b9dd-6020f22c3e30","name":"Split Out Scenes "},{"parameters":{"operation":"update","databaseId":171,"tableId":695,"rowId":"={{ $('Get Approved Campaigns').item.json.id }}","fieldsUi":{"fieldValues":[{"fieldId":6726,"fieldValue":"Image Prompts Ready"},{"fieldId":6728,"fieldValue":"Assembling"}]}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[5260,280],"id":"415be1c0-6a7c-4f6a-bb8c-b4a6f202702f","name":"Update Campaign Status4","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"databaseId":171,"tableId":690,"returnAll":true,"additionalOptions":{"filters":{"fields":[{"field":6679,"value":"={{ $json.id }}"},{"field":6685,"operator":"empty"}]}}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[4520,1200],"id":"37cd6be2-9820-4b70-83d3-2f2fa5914f54","name":"Get Scenes5","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"operation":"get","databaseId":171,"tableId":696,"rowId":"={{ $json['Image Styles'][0].id }}"},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[4300,740],"id":"ef0130a4-e2ce-41aa-950d-6a4238ca2541","name":"Get Style By ID1","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"url":"={{ $json['style reference'][0].url }}","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[4520,740],"id":"45ca9f31-77fb-4eb4-a015-76e790433c75","name":"Download Image3"},{"parameters":{"operation":"binaryToPropery","destinationKey":"base64_String","options":{}},"type":"n8n-nodes-base.extractFromFile","typeVersion":1,"position":[4780,740],"id":"b054ba72-f05d-40db-9868-8197e594606b","name":"Convert to Base64 String1"},{"parameters":{"fieldToSplitOut":"[\"Scenes\"]","options":{}},"type":"n8n-nodes-base.splitOut","typeVersion":1,"position":[4240,1200],"id":"054505fc-b29c-4447-a9b4-b0fe3709a221","name":"Split Out Scenes 3"},{"parameters":{"amount":30},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[3660,680],"id":"80ea11f3-c2cf-47d8-b9ca-b9a9e4a80c27","name":"Schedule Every 30s10","webhookId":"5da29836-4930-4c6b-b712-bc0b39c498a4"},{"parameters":{"databaseId":171,"tableId":695,"returnAll":true,"additionalOptions":{"filters":{"fields":[{"field":6725,"operator":"contains","value":"Approved"},{"field":6726,"operator":"contains","value":"Image Prompt Approved"}]}}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[3760,960],"id":"06245aed-e6d2-4c9c-83e0-b5b4d4897ce6","name":"Get Approved Campaigns1","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"397a3250-abd5-4577-b39e-9bd0a4fd816f","leftValue":"={{ $json['Image Styles'][0].id }}","rightValue":"","operator":{"type":"number","operation":"notEmpty","singleValue":true}}],"combinator":"or"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[4060,800],"id":"a4f45efa-dadf-48cd-925f-0e4b37627907","name":"If"},{"parameters":{"databaseId":171,"tableId":690,"returnAll":true,"additionalOptions":{"filters":{"fields":[{"field":6679,"value":"={{ $json.id }}"},{"field":6685,"operator":"empty"}]}}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[4720,980],"id":"dbeeaee4-bbf8-44d4-9c6c-b51f4c3f4e81","name":"Get Scenes6","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"fieldToSplitOut":"[\"Scenes\"]","options":{}},"type":"n8n-nodes-base.splitOut","typeVersion":1,"position":[4480,980],"id":"7652ce95-2780-4a9a-a0f0-e93c08dfe022","name":"Split Out Scenes 5"},{"parameters":{"databaseId":171,"tableId":695,"returnAll":true,"additionalOptions":{"filters":{"fields":[{"field":6726,"operator":"contains","value":"Image Prompt Approved"}]}}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[4300,980],"id":"8c35dd89-9490-43c8-b225-0c0df1f86d15","name":"Get Image prompt1","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"method":"=GET","url":"=https://tts.aiautomata.co.za/dev/timestamps/{{ $('Generate Voiceover1').item.json.headers[\"x-timestamps-path\"] }}","options":{"response":{"response":{"fullResponse":true,"responseFormat":"file"}}}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[3820,-240],"id":"eaa7a932-e2bf-46f5-b1e2-2129515b84b0","name":"Get Captions1"},{"parameters":{"method":"POST","url":"https://baserow.aiautomata.co.za/api/user-files/upload-file/","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"contentType":"multipart-form-data","bodyParameters":{"parameters":[{"parameterType":"formBinaryData","name":"file","inputDataFieldName":"data"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[4000,-240],"id":"b82c0cae-da2b-4fa1-a24d-037ddc5c45cd","name":"Upload captions To Baserow1","credentials":{"httpHeaderAuth":{"id":"eLr9WkAowHbRSmCb","name":"Baserow Auth account"}}},{"parameters":{"operation":"update","databaseId":171,"tableId":695,"rowId":"={{ $('Get Campaigns Ready for Assembly1').item.json.id }}","fieldsUi":{"fieldValues":[{"fieldId":6751,"fieldValue":"={{ $('Upload Voiceover to Baserow1').item.json.name }}"},{"fieldId":6752,"fieldValue":"={{ $json.url }}"}]}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[4220,-240],"id":"286037c5-71a9-4c30-9bdb-7d4a9afae231","name":"Update Record2","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"fieldsToAggregate":{"fieldToAggregate":[{"fieldToAggregate":"External Video URL"}]},"options":{}},"type":"n8n-nodes-base.aggregate","typeVersion":1,"position":[4580,4120],"id":"9ce15ada-f5f7-4f74-b5c0-857af3b565fe","name":"Aggregate1"},{"parameters":{"fieldToSplitOut":"Scenes","options":{}},"type":"n8n-nodes-base.splitOut","typeVersion":1,"position":[4140,4120],"id":"06ae2e4a-071b-4422-8820-1432161d7359","name":"Split Out1"},{"parameters":{"operation":"update","databaseId":171,"tableId":695,"rowId":"={{ $json.id }}","fieldsUi":{"fieldValues":[{"fieldId":6753,"fieldValue":"={{ $json.response }}"}]}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[5240,4120],"id":"159acc1e-3b30-4a48-8520-106eceba063f","name":"Baserow","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"method":"POST","url":"https://nca.aiautomata.co.za/v1/video/concatenate","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"specifyBody":"json","jsonBody":"={\n    \"video_urls\": {{ JSON.stringify($json.video_urls) }},\n    \"id\": \"{{ $('Get video1').item.json.id }}\"\n}","options":{"timeout":50000}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[5020,4120],"id":"f1171cc9-9041-4d93-9fa7-b41429bfb1bb","name":"Combine Clips1","credentials":{"httpHeaderAuth":{"id":"XhOG8EmUXSMMk7ct","name":"NCS-Toolkit Auth account"}}},{"parameters":{"content":"## Stage 7\n## Combine clips into 1 video","height":300,"width":400,"color":5},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[3280,4000],"id":"e629e14f-c8bd-4592-bef2-56fb6f184f3d","name":"Sticky Note10","disabled":true},{"parameters":{"jsCode":"// Extract the array of URLs\nconst urls = items[0].json[\"External Video URL\"] || [];\n\n// Map URLs into the required structure\nconst formattedURLs = urls.map(url => ({ \"video_url\": url }));\n\n// Return the transformed data\nreturn [{\n    json: {\n        \"video_urls\": formattedURLs\n    }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[4800,4120],"id":"0c8f62b9-2238-4551-8171-19cf179ff846","name":"Video url to array1"},{"parameters":{"databaseId":171,"tableId":695,"returnAll":true,"additionalOptions":{"filters":{"fields":[{"field":6753,"operator":"empty"},{"field":6754,"operator":"contains","value":"Combine Video Clips"},{"field":6725,"operator":"contains","value":"Approved"}]}}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[3920,4120],"id":"de19a8c5-b129-45e7-bd3b-69b5c2098c5b","name":"Get video1","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"databaseId":171,"tableId":690,"additionalOptions":{"filters":{"fields":[{"field":6679,"value":"={{ $json.id }}"}]}}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[4360,4120],"id":"ca95817a-7167-4ab4-a61c-897d857ddd28","name":"Get Scenes1","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"url":"={{ $json['Raw Video URL'] }}","options":{"response":{"response":{"responseFormat":"file"}}}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[4200,5180],"id":"b1d59281-1880-41e6-b631-8dc28ab40666","name":"HTTP Request"},{"parameters":{"method":"POST","url":"https://baserow.aiautomata.co.za/api/user-files/upload-file/","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"contentType":"multipart-form-data","bodyParameters":{"parameters":[{"parameterType":"formBinaryData","name":"file","inputDataFieldName":"data"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[4400,5180],"id":"e6a80d6a-299a-4292-9322-3187aaf3308c","name":"Upload Video to Baserow1","credentials":{"httpHeaderAuth":{"id":"eLr9WkAowHbRSmCb","name":"Baserow Auth account"}}},{"parameters":{"url":"={{ $json.response[0].file_url }}","options":{"response":{"response":{"responseFormat":"file"}}}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[5180,5180],"id":"5a3e69c9-cb0b-4d21-9307-261be769abcc","name":"HTTP Request1"},{"parameters":{"method":"POST","url":"https://baserow.aiautomata.co.za/api/user-files/upload-file/","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"contentType":"multipart-form-data","bodyParameters":{"parameters":[{"parameterType":"formBinaryData","name":"file","inputDataFieldName":"data"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[5360,5180],"id":"9e548b26-41af-4803-9fcf-9d06900acdee","name":"Upload Video to Baserow2","credentials":{"httpHeaderAuth":{"id":"eLr9WkAowHbRSmCb","name":"Baserow Auth account"}}},{"parameters":{"aggregate":"aggregateAllItemData","destinationFieldName":"Segments","options":{}},"type":"n8n-nodes-base.aggregate","typeVersion":1,"position":[4200,40],"id":"270255b8-6dc5-4a2c-8c47-b26be7214b46","name":"Aggregate5"},{"parameters":{"fieldToSplitOut":"segments","options":{}},"type":"n8n-nodes-base.splitOut","typeVersion":1,"position":[4800,40],"id":"f5f71be9-3130-4125-af4b-973b893c8fff","name":"Split Out2"},{"parameters":{"jsCode":"// Assume the previous node output is available here\nconst inputSegments = $input.first().json.segments; // Accessing segments from the previous output\n\nif (inputSegments.length > 0) {\n    const lastSegment = inputSegments[inputSegments.length - 1].json;\n    \n    // Check if the last segment's duration is less than 2 seconds\n    if (parseFloat(lastSegment.duration) < 2.0) {\n        // Combine the last segment with the previous segment if it exists\n        if (inputSegments.length > 1) {\n            const secondLastSegment = inputSegments[inputSegments.length - 2].json;\n\n            // Update the second last segment's words and duration\n            secondLastSegment.words += ' ' + lastSegment.words;\n            secondLastSegment.duration = (\n                parseFloat(secondLastSegment.duration) +\n                parseFloat(lastSegment.duration)\n            ).toFixed(2); // Update duration\n\n            // Remove the last segment as it has been merged\n            inputSegments.pop();\n        }\n    }\n}\n\n// Return the updated segments\nreturn [{ json: { segments: inputSegments } }];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[4600,40],"id":"fe5d8ee0-8320-4d9b-ae48-537b98312a52","name":"Fixer1"},{"parameters":{"url":"={{ $json['Captions URL'] }}","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[4000,40],"id":"5ca6a16e-bd17-427c-8236-96081ea0bcc6","name":"Get Segment File1"},{"parameters":{"jsCode":"// Input from the previous step\nconst splitLength = 5;\nconst inputData = $input.first().json.Segments; // Assuming 'body' is passed from the previous node\n\n// Get the Generative Style value and Script from the first item of Get records1\nconst generativeStyle = $('Get Approved Campaigns').first().json['Generative Style'];\nconst fullScript = $('Get Approved Campaigns').first().json.Script;\n\nconst segments = [];\nlet currentSegment = {\n    id: 0,\n    words: \"\",\n    duration: 0,\n    generativeStyle: generativeStyle, // Add the generative style here\n    fullScript: fullScript // Add the full script here\n};\nlet currentStartTime = -1; // Start before the first word\nlet totalDuration = 0; // Tracking total duration\nlet currentEndTime = 0;\n\n// Define the pause buffer (in seconds)\nconst pauseBuffer = 0.1; // Adjust this value based on your requirements\n\n// Loop through the input data\nfor (const wordObj of inputData) {\n    const { word, start_time, end_time } = wordObj;\n\n    // If this is the first word in a segment, set the start time\n    if (currentStartTime === -1) {\n        currentStartTime = start_time;\n    }\n\n    // Add the word to the current segment\n    currentSegment.words += (currentSegment.words ? ' ' : '') + word;\n\n    // Update the end time\n    currentEndTime = end_time;\n\n    // Keep track of the duration without pauses\n    currentSegment.duration = (currentEndTime - currentStartTime).toFixed(2);\n\n    // Check if we should finalize the current segment (if it exceeds 4 seconds)\n    if (currentSegment.duration >= splitLength) {\n        // Add pause buffer to the segment's duration before pushing it\n        currentSegment.duration = (parseFloat(currentSegment.duration) + pauseBuffer).toFixed(2);\n        \n        // Update total duration for the segment\n        totalDuration += parseFloat(currentSegment.duration);\n\n        // Push the current segment to segments\n        segments.push(currentSegment);\n\n        // Reset for the next segment\n        currentSegment = {\n            id: segments.length,\n            words: \"\",\n            duration: 0,\n            generativeStyle: generativeStyle, // Don't forget to include generativeStyle in the new segment\n            fullScript: fullScript // Include the full script in the new segment\n        };\n        currentStartTime = -1; // Reset the start time\n    }\n}\n\n// Handle any leftover words in the last segment\nif (currentSegment.words) {\n    currentSegment.duration = (currentEndTime - currentStartTime).toFixed(2);\n    // Add pause buffer to the last segment's duration\n    currentSegment.duration = (parseFloat(currentSegment.duration) + pauseBuffer).toFixed(2);\n    \n    totalDuration += parseFloat(currentSegment.duration); // Add last segment to total\n    segments.push(currentSegment);\n}\n\n// Round total duration\nconst roundedTotalDuration = Math.round(totalDuration);\n\n// Calculate total minutes and seconds\nconst totalSeconds = Math.floor(roundedTotalDuration);\nconst minutes = Math.floor(totalSeconds / 60);\nconst seconds = totalSeconds % 60;\n\n// Create a readable format for the total runtime\nconst totalRuntimeString = `${minutes} minute${minutes !== 1 ? 's' : ''}, ${seconds} second${seconds !== 1 ? 's' : ''}`;\n\n// Prepare output with segments, total duration, and total runtime string\nconst output = {\n    segments: segments.map(segment => {\n        return { json: segment };\n    }),\n    totalDuration: roundedTotalDuration,\n    TotalMinutes: totalRuntimeString\n};\n\n// Return the structured output\nreturn [{ json: output }];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[4400,40],"id":"a3dbc8dc-8234-4f94-8cef-7b849b3e4a22","name":"Split into 5s Scenes1"},{"parameters":{"jsCode":"// Initialize an array to hold IDs\nconst ids = [];\n\n// Loop over input items\nfor (const item of $input.all()) {\n  // Loop through each 'data' array\n  for (const dataItem of item.json.data) {\n    // Check if 'id' is defined\n    if (dataItem.id) {\n      // Push the ID into the array\n      ids.push(dataItem.id);\n    }\n  }\n}\n\n// Return the array wrapped in an object\nreturn [{ json: { ids } }];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[4800,280],"id":"43b955d3-3c45-4d83-b168-f9e6fb2e6e99","name":"IDs To Array"},{"parameters":{"aggregate":"aggregateAllItemData","include":"specifiedFields","fieldsToInclude":"id","options":{}},"type":"n8n-nodes-base.aggregate","typeVersion":1,"position":[4600,280],"id":"5fdd5e46-a51e-425f-b41e-055c5dcecaee","name":"Aggregate6"},{"parameters":{"operation":"update","databaseId":171,"tableId":695,"rowId":"={{ $('Get Approved Campaigns').item.json.id }}","fieldsUi":{"fieldValues":[{"fieldId":6729,"fieldValue":"={{ $json.ids }}"}]}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[5040,280],"id":"730714f2-4e39-4638-aaef-aba373ff03bd","name":"Baserow20","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"content":"## Section 4 - Generate Scene Images","height":400,"width":440,"color":5},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[3200,780],"id":"3ad5f22b-278b-4efa-8b0c-ef4cadabcdc8","name":"Sticky Note12"},{"parameters":{"options":{}},"type":"n8n-nodes-base.splitInBatches","typeVersion":3,"position":[5240,1000],"id":"d83de01d-ddf1-435a-99c2-0d0dedf581c7","name":"Process Scenes in Batches3"},{"parameters":{"method":"POST","url":"https://api.freepik.com/v1/ai/mystic","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"application/json"},{"name":"Accept","value":"application/json"}]},"sendBody":true,"specifyBody":"json","jsonBody":"={\n  \"prompt\": {{ JSON.stringify($json['Image Prompt']) }},\n  \"style\": \"iPhone product photography, professional studio lighting, clean minimal background\",\n  \"resolution\": \"1k\",\n  \"aspect_ratio\": \"social_story_9_16\",\n  \"model\": \"realism\",\n  \"creative_detailing\": 70,\n  \"engine\": \"magnific_sharpy\",\n  \"fixed_generation\": false,\n  \"filter_nsfw\": false\n}","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[5440,1100],"id":"890c443b-aaec-495c-83c2-376488a8cb5b","name":"Generate Image1","credentials":{"httpHeaderAuth":{"id":"MnFk2IHNTKhV11ec","name":"FreePik Header Auth"}}},{"parameters":{"amount":25},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[5600,1100],"id":"379e0d26-ce12-4649-9c2b-53dbee4f5121","name":"Wait for Generation1","webhookId":"d1756ff6-91d6-4607-86bb-1343b56c6f36"},{"parameters":{"url":"=https://api.freepik.com/v1/ai/mystic/{{ $json.data.task_id }}","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[5760,1040],"id":"3917a0b9-2c1f-4ebb-b14b-283e8d27b354","name":"Check Generation Status1","credentials":{"httpHeaderAuth":{"id":"MnFk2IHNTKhV11ec","name":"FreePik Header Auth"}}},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"completion-check","leftValue":"={{ $json.data.status }}","rightValue":"COMPLETED","operator":{"type":"string","operation":"contains"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[5920,1100],"id":"5926ea71-1bec-4eba-9dae-a9db470fdcd3","name":"Check If Complete1"},{"parameters":{"method":"POST","url":"https://baserow.aiautomata.co.za/api/user-files/upload-file/","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"contentType":"multipart-form-data","bodyParameters":{"parameters":[{"parameterType":"formBinaryData","name":"file","inputDataFieldName":"data"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[6320,1100],"id":"b5d4380c-b806-4764-b301-0774a7eaf186","name":"Upload to Baserow1","credentials":{"httpHeaderAuth":{"id":"eLr9WkAowHbRSmCb","name":"Baserow Auth account"}}},{"parameters":{"operation":"update","databaseId":171,"tableId":690,"rowId":"={{ $('Get Scenes5').item.json.id }}","fieldsUi":{"fieldValues":[{"fieldId":6685,"fieldValue":"={{ $json.name }}"},{"fieldId":6687,"fieldValue":"={{ $('Download Image4').item.json.data.generated[0] }}"}]}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[6520,1100],"id":"3ed4a2a2-72c2-49a8-9e4b-3e18ee67bc3d","name":"Update Scene with Image1","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"operation":"update","databaseId":171,"tableId":695,"rowId":"={{ $('Get Approved Campaigns1').item.json.id }}","fieldsUi":{"fieldValues":[{"fieldId":6726,"fieldValue":"Images Ready for Review"},{"fieldId":6728,"fieldValue":"Assembling"}]}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[5440,900],"id":"b7556563-01c1-4088-b57f-f72845218934","name":"Update Campaign Status1","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"url":"={{ $json.data.generated[0] }}","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[6140,1100],"id":"cd8abd99-94b0-415c-b269-1f7e3a9d65a8","name":"Download Image4"},{"parameters":{"aggregate":"aggregateAllItemData","destinationFieldName":"completedScenes","options":{}},"type":"n8n-nodes-base.aggregate","typeVersion":1,"position":[4920,2880],"id":"8fe2c5eb-c02e-4b5c-ac32-e508360b7fc8","name":"Aggregate Completed Videos"},{"parameters":{"databaseId":171,"tableId":690,"returnAll":true,"additionalOptions":{"filters":{"fields":[{"field":6679,"value":"={{ $json.id }}"},{"field":6685,"operator":"not_empty"},{"field":6686,"operator":"empty"}]}}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[4260,2980],"id":"e53c5d32-5c17-4452-8cbd-fad88a37dfa1","name":"Get Scenes Ready for Video","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"databaseId":171,"tableId":695,"returnAll":true,"additionalOptions":{"filters":{"fields":[{"field":6754,"operator":"contains","value":"Convert to Video"},{"field":6725,"operator":"contains","value":"Approved"}]}}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[3860,2980],"id":"49533fe0-20b6-4b21-bda5-a23dd2089486","name":"Get Campaigns Ready for Video2","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"method":"POST","url":"https://queue.fal.run/fal-ai/kling-video/v1.6/standard/image-to-video","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"specifyBody":"json","jsonBody":"={\n  \"prompt\": \"{{ $('Process Scenes in Batches4').item.json['Animation Prompt'] || 'Smooth professional product showcase with subtle camera movement and studio lighting' }}\",\n  \"image_url\": \"{{ $('Process Scenes in Batches4').item.json['Image'][0].url }}\",\n  \"duration\": \"{{ $('Process Scenes in Batches4').item.json['Duration'] > 7 ? '10' : '5' }}\",\n  \"aspect_ratio\": \"9:16\",\n  \"negative_prompt\": \"blur, distortion, low quality, artifacts, text, watermark\",\n  \"cfg_scale\": 0.5\n}","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[4760,3180],"id":"1b086373-a8a6-4b84-8758-e248b2faef68","name":"Generate Video with fal.ai1","credentials":{"httpHeaderAuth":{"id":"ir1jYgd60Pw6yEVx","name":"fal.ai Auth account"}}},{"parameters":{"amount":90},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[5020,3180],"id":"b7a14af0-4bf8-4335-a009-665b65b7e862","name":"Wait for Video Generation1","webhookId":"538eed79-4bd0-4f2e-aa00-bc495811d8b5"},{"parameters":{"url":"={{ $json.status_url }}","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[5200,3180],"id":"b3822b18-4688-4634-a738-bcf3555cb917","name":"Check Video Generation Status1","credentials":{"httpHeaderAuth":{"id":"ir1jYgd60Pw6yEVx","name":"fal.ai Auth account"}}},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"completion-check","leftValue":"={{ $json.status }}","rightValue":"COMPLETED","operator":{"type":"string","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[5380,3180],"id":"5ad9f65a-1f4d-40e4-9484-f56883403fac","name":"Check If Video Complete1"},{"parameters":{"url":"={{ $json.response_url }}","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[5600,3180],"id":"ac2d0e3f-8856-4f91-abd3-65e132d223b3","name":"Get Video Result1","credentials":{"httpHeaderAuth":{"id":"ir1jYgd60Pw6yEVx","name":"fal.ai Auth account"}}},{"parameters":{"method":"POST","url":"https://baserow.aiautomata.co.za/api/user-files/upload-file/","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"contentType":"multipart-form-data","bodyParameters":{"parameters":[{"parameterType":"formBinaryData","name":"file","inputDataFieldName":"data"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[5980,3160],"id":"96310bce-7576-4bca-adb5-098e2e5eecfa","name":"Upload Video to Baserow3","credentials":{"httpHeaderAuth":{"id":"eLr9WkAowHbRSmCb","name":"Baserow Auth account"}}},{"parameters":{"operation":"update","databaseId":171,"tableId":690,"rowId":"={{ $('Process Scenes in Batches4').item.json.id }}","fieldsUi":{"fieldValues":[{"fieldId":6686,"fieldValue":"={{ $json.name }}"},{"fieldId":6688,"fieldValue":"={{ $('Get Video Result1').item.json.video.url }}"}]}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[6220,3260],"id":"4e6fc3b7-f675-4235-992d-9ba4cca832e5","name":"Update Scene with Video1","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"operation":"update","databaseId":171,"tableId":695,"rowId":"={{ $('Get Campaigns Ready for Video2').item.json.id }}","fieldsUi":{"fieldValues":[{"fieldId":6754,"fieldValue":"Ready for Review"},{"fieldId":6728,"fieldValue":"Assembling"}]}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[5140,2880],"id":"23c6fd15-3628-4582-9f47-33e763a4564d","name":"Update Campaign Status5","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"options":{}},"type":"n8n-nodes-base.splitInBatches","typeVersion":3,"position":[4520,2980],"id":"68526a62-7d9c-4f3f-ba91-10ee18e2e144","name":"Process Scenes in Batches4"},{"parameters":{"url":"={{ $json.video.url }}","options":{"response":{"response":{"responseFormat":"file"}}}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[5780,3160],"id":"c90a7402-dbc2-49a8-a1da-acf189dfcad7","name":"Download Video2"},{"parameters":{"fieldToSplitOut":"[\"Scenes\"]","options":{}},"type":"n8n-nodes-base.splitOut","typeVersion":1,"position":[4060,2980],"id":"ce3b1d0a-0448-4cc0-888a-a0e04a85984c","name":"Split Out Scenes1"},{"parameters":{"amount":30},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[3700,4120],"id":"ff8e4acd-3e7c-48e5-8a47-3054a0adbeea","name":"Schedule Every 30s11","webhookId":"082c2ab7-ca99-45ae-936d-8b14bab53526"},{"parameters":{"amount":30},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[3780,5660],"id":"acb1ceea-9297-45f1-900b-59f4b4bf3ad5","name":"Schedule Every 30s12","webhookId":"20d639c6-60d7-4c02-b436-66cf0c759b03"},{"parameters":{"options":{}},"type":"n8n-nodes-base.splitInBatches","typeVersion":3,"position":[5300,1420],"id":"7338bc41-4ceb-4651-aaf6-8728af86b2f9","name":"Process Scenes (OpenAI)"},{"parameters":{"method":"POST","url":"https://baserow.aiautomata.co.za/api/user-files/upload-file/","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"contentType":"multipart-form-data","bodyParameters":{"parameters":[{"parameterType":"formBinaryData","name":"file","inputDataFieldName":"data"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[6360,1520],"id":"6bf1d5e8-7a59-4f80-ab5a-bd2af2d132d5","name":"Upload OpenAI to Baserow","credentials":{"httpHeaderAuth":{"id":"eLr9WkAowHbRSmCb","name":"Baserow Auth account"}}},{"parameters":{"operation":"update","databaseId":171,"tableId":690,"rowId":"={{ $('Process Scenes (OpenAI)').item.json.id }}","fieldsUi":{"fieldValues":[{"fieldId":6685,"fieldValue":"={{ $json.name }}"},{"fieldId":6687,"fieldValue":"={{ $json.url }}"}]}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[6520,1520],"id":"42c057f2-c90a-440d-97d0-a4f3d4aa347f","name":"Update Scene with OpenAI","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"operation":"toBinary","sourceProperty":"data[0].b64_json","options":{}},"type":"n8n-nodes-base.convertToFile","typeVersion":1.1,"position":[6140,1520],"id":"0b7d7c4c-1e42-49e1-88aa-be72e3a09800","name":"Convert to File"},{"parameters":{"rules":{"values":[{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"leftValue":"={{ $json['Image Generator'].value }}","rightValue":"fal.ai","operator":{"type":"string","operation":"equals"},"id":"2d1b72b8-0066-4d3b-9799-ce61b77ad5fe"}],"combinator":"and"},"renameOutput":true,"outputKey":"fal.ai"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"fa3a14b4-55cf-432e-ac11-0779a5f16e5a","leftValue":"={{ $json['Image Generator'].value }}","rightValue":"=gpt4.1","operator":{"type":"string","operation":"equals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"gpt4.1"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"1cd55451-5b87-4bb2-aa47-c5d38919161c","leftValue":"={{ $json['Image Generator'].value }}","rightValue":"Flux Context","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"Flux Context"}]},"options":{}},"type":"n8n-nodes-base.switch","typeVersion":3.2,"position":[3900,940],"id":"dafce3cc-e69b-4045-a60a-1a1e1a7d19f8","name":"Switch"},{"parameters":{"rules":{"values":[{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"leftValue":"={{ $json['Image Generator'] }}","rightValue":"fal.ai","operator":{"type":"string","operation":"equals"},"id":"2d1b72b8-0066-4d3b-9799-ce61b77ad5fe"}],"combinator":"and"},"renameOutput":true,"outputKey":"fal.ai"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"fa3a14b4-55cf-432e-ac11-0779a5f16e5a","leftValue":"={{ $json['Image Generator'] }}","rightValue":"=gpt4.1","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"gpt4.1"}]},"options":{}},"type":"n8n-nodes-base.switch","typeVersion":3.2,"position":[4720,1200],"id":"41d9a394-b868-47a2-9bf8-64517136634d","name":"Switch1"},{"parameters":{"operation":"get","databaseId":171,"tableId":696,"rowId":"={{ $json['Image Styles'][0].id }}"},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[4240,1440],"id":"7d55b5c8-92a8-4a41-b0b2-11cdf625322a","name":"Get Style By ID","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"url":"={{ $('Get Style By ID').item.json['style reference'][0].url }}","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[5500,1520],"id":"f54d55fc-ec63-49d3-9566-d1b0e02a8b6c","name":"Download Image"},{"parameters":{"databaseId":171,"tableId":690,"returnAll":true,"additionalOptions":{"filters":{"fields":[{"field":6679,"value":"={{ $json.id }}"},{"field":6685,"operator":"empty"}]}}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[4800,1440],"id":"c7bf3413-1143-4207-87fd-c0d56d94de1e","name":"Get Scenes","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"fieldToSplitOut":"[\"Scenes\"]","options":{}},"type":"n8n-nodes-base.splitOut","typeVersion":1,"position":[4640,1440],"id":"23d40ce0-1f74-4ade-b2cf-95f7eab864ef","name":"Split Out Scenes 6"},{"parameters":{"databaseId":171,"tableId":695,"returnAll":true,"additionalOptions":{"filters":{"fields":[{"field":6726,"operator":"contains","value":"Image Prompt Approved"}]}}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[4440,1440],"id":"ec2709e8-68b9-40d6-a5f8-a80eb1c656eb","name":"Get Image prompt","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"jsCode":"// Get the binary data from Download Image node\nconst downloadImageItem = $input.first();\n\n// Preserve the binary data and pass it through\nreturn [{\n  json: {\n    ...downloadImageItem.json,\n    preservedForOpenAI: true\n  },\n  binary: {\n    data: downloadImageItem.binary.data  // Preserve the binary image data with key 'data'\n  }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[5720,1520],"id":"70d9b020-d339-4e98-bea5-9d0cb23db1c1","name":"Code"},{"parameters":{"method":"POST","url":"https://api.openai.com/v1/images/edits","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"contentType":"multipart-form-data","bodyParameters":{"parameters":[{"parameterType":"formBinaryData","name":"image","inputDataFieldName":"data"},{"name":"prompt","value":"=Create a new professional product image based on the reference image provided with these specifications:\n\nScene Description: {{ $json['Description'] }}\nImage Prompt: {{ $json['Image Prompt'] }}\n\"Company: {{ $('Get Approved Campaigns1').item.json['Company Name'] }}\"\n\"Product: {{ $('Get Approved Campaigns1').item.json['Product/Service Name'] }}\"\n\"Brand Colors: {{ $('Get Approved Campaigns1').item.json['Brand Colors'] }}\"\n\nGenerate a hyper-realistic, professional studio photography image that:\n- Maintains clean, minimalistic, and elegant visual style\n- Highlights the product as the main subject with sharp detail and perfect lighting\n- Uses backgrounds that complement but do not overpower the product\n- Includes professional studio lighting with soft shadows\n- Emphasizes realism, texture, and color accuracy\n- Maintains a high-end, premium iPhone-style look and feel\n- Uses the brand colors: {{ $('Get Approved Campaigns1').item.json['Brand Colors'] }}"},{"name":"model","value":"gpt-image-1"},{"name":"size","value":"=1024x1536"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[5920,1520],"id":"0047d8e5-5846-47c6-a218-0a2d3315d23d","name":"Create Image1","credentials":{"httpHeaderAuth":{"id":"z06CbCGaeEeBPVIt","name":"GPT Image Generator"}}},{"parameters":{"content":"## Stage 8: Music Library Selection\n\nThis workflow:\n1. Finds campaigns with Images Status = 'Approved as Images'\n2. Retrieves the complete music library\n3. Uses AI to analyze campaign requirements vs available music\n4. Selects the best matching track based on industry, mood, tempo\n5. Links selected music to campaign and sets Music Status to 'Ready for Review'\n6. Stores reasoning for music choice in Music Prompt field","height":200,"width":400,"color":5},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[3280,4440],"id":"4c04e577-59fb-4c23-a3a5-3b2a7cf1e3a7","name":"Workflow Description5"},{"parameters":{"method":"POST","url":"https://nca.aiautomata.co.za/v1/image/transform/video","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"specifyBody":"json","jsonBody":"={\n    \"image_url\":\"{{ $json.Image[0].url }}\",\n    \"length\": {{ $json.Duration }},\n    \"frame_rate\": 25,\n    \"zoom_speed\": 3,\n    \"id\": \"{{ $json.id }}\"\n}","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[4580,3680],"id":"47074c88-acd4-4f0b-8cd5-0c95c02f5c55","name":"Create Clips","credentials":{"httpHeaderAuth":{"id":"XhOG8EmUXSMMk7ct","name":"NCS-Toolkit Auth account"}}},{"parameters":{"content":"STAGE 6B\n## Create clips from images\n","height":320,"width":380,"color":5},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[3260,3460],"id":"2e319b68-7b4b-4e39-a10c-f9bf9009c03a","name":"Sticky Note2","disabled":true},{"parameters":{"options":{}},"type":"n8n-nodes-base.splitInBatches","typeVersion":3,"position":[4340,3560],"id":"85818478-4078-41f9-9852-6f22879ce633","name":"Loop Over Items3"},{"parameters":{"databaseId":171,"tableId":690,"returnAll":true,"additionalOptions":{"filters":{"fields":[{"field":6679,"value":"={{ $json.id }}"}]}}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[4100,3560],"id":"258bf181-5ef9-4805-9ed8-1e4f35104ab6","name":"Baserow4","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"operation":"update","databaseId":171,"tableId":690,"rowId":"={{ $('Loop Over Items3').item.json.id }}","fieldsUi":{"fieldValues":[{"fieldId":6688,"fieldValue":"={{ $json.response }}"}]}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[4800,3680],"id":"8f9963fa-f400-4952-aae0-4465e9177516","name":"Baserow5","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"databaseId":171,"tableId":695,"returnAll":true,"additionalOptions":{"filters":{"fields":[{"field":6753,"operator":"empty"},{"field":6754,"operator":"contains","value":"Combine Video Clips"}]}}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[3700,3560],"id":"e024d525-573f-43e8-9a5d-b2b764912b0b","name":"Get video","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"fieldToSplitOut":"Scenes","options":{}},"type":"n8n-nodes-base.splitOut","typeVersion":1,"position":[3900,3560],"id":"398e6241-39c6-4db1-9e07-08b9942c9303","name":"Split Out"},{"parameters":{"operation":"update","databaseId":171,"tableId":695,"rowId":"={{ $json.id }}","fieldsUi":{"fieldValues":[{"fieldId":6721,"fieldValue":"={{ $json.output.fullScript }}"},{"fieldId":6725,"fieldValue":"Ready for Review"},{"fieldId":6728,"fieldValue":"Assembling"}]}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[4460,-240],"id":"854a9d1a-c756-4059-81f4-096c9c787c81","name":"Update Campaign Script1","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"operation":"update","databaseId":171,"tableId":695,"rowId":"={{ $('Get Approved Campaigns1').item.json.id }}","fieldsUi":{"fieldValues":[{"fieldId":6726,"fieldValue":"Images Ready for Review"},{"fieldId":6735,"fieldValue":"Assembling"}]}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[5520,1320],"id":"ec8b1c1f-41bd-47ed-876a-10b3ef56118a","name":"Update Campaign Status6","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"operation":"update","databaseId":171,"tableId":695,"rowId":"={{ $('Get video1').item.json.id }}","fieldsUi":{"fieldValues":[{"fieldId":6754,"fieldValue":"Ready for Review"},{"fieldId":6728,"fieldValue":"Assembling"}]}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[5460,4120],"id":"5f2349b0-5c91-495a-9c75-999c909431a3","name":"Update Campaign Status7","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"operation":"update","databaseId":171,"tableId":695,"rowId":"={{ $('Get Campaigns Ready for Music1').item.json.id }}","fieldsUi":{"fieldValues":[{"fieldId":6727,"fieldValue":"Approved"},{"fieldId":6728,"fieldValue":"Assembling"}]}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[5500,4500],"id":"5dd51002-7191-4811-a5aa-597055593508","name":"Update Campaign Status8","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"amount":18},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[5700,1840],"id":"df3a1463-c68e-43bf-b421-454c20ca52c1","name":"Wait for Caption Processing1","webhookId":"caption-replicate-wait"},{"parameters":{"url":"={{ 'https://api.replicate.com/v1/predictions/' + $json.id }}","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[5880,1780],"id":"50a2b8b7-6b87-47e8-b350-96fceb3cce3e","name":"Check Caption Status1","credentials":{"httpHeaderAuth":{"id":"JlfTRouEz1b1K4bJ","name":"Flux Replicate Auth account"}}},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"is-complete","leftValue":"={{ $json.status }}","rightValue":"succeeded","operator":{"type":"string","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[6060,1780],"id":"300a5461-3a45-4323-bb85-d3b468836844","name":"Check if Caption Complete1"},{"parameters":{"url":"={{ Array.isArray($json.output) ? $json.output[0] : $json.output }}","options":{"response":{"response":{"responseFormat":"file"}}}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[6380,1760],"id":"247d3992-025b-4074-9630-d9e1ba3fae2e","name":"Download Caption Result1"},{"parameters":{"amount":12},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[6400,1900],"id":"d8087889-5d96-41bd-ae4d-f45bbbcc7351","name":"Wait and Retry Caption1","webhookId":"caption-retry-wait"},{"parameters":{"jsCode":"// Handle API errors for caption workflow\nconst item = $input.all()[0];\nconst originalData = $('Caption Reference Form1').first().json;\n\nlet errorMessage = \"Caption processing failed\";\nlet errorDetails = item.json;\n\n// Handle specific error types\nif (item.json.error) {\n  if (item.json.error.message) {\n    errorMessage = item.json.error.message;\n  }\n} else if (item.json.message) {\n  errorMessage = item.json.message;\n} else if (item.json.status_code && item.json.status_code !== 200) {\n  errorMessage = `API returned status ${item.json.status_code}`;\n} else if (item.json.detail) {\n  errorMessage = item.json.detail;\n}\n\nreturn [{\n  json: {\n    status: \"error\",\n    workflow: \"Image Caption from Reference\",\n    message: errorMessage,\n    error_details: {\n      api_error: errorDetails,\n      original_request: {\n        title: originalData['Image Title'],\n        model: originalData['Processing Model'],\n        processing_type: originalData['Processing Type'],\n        had_caption: originalData['Add Caption?'] === 'Add Caption',\n        reference_source: originalData['Reference Image URL'] ? 'url' : 'upload'\n      }\n    },\n    timestamp: new Date().toISOString()\n  }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[5700,2060],"id":"4a0cbe4d-a187-4d88-b345-188ae4770b5e","name":"Handle Caption API Error1"},{"parameters":{"method":"POST","url":"=https://api.replicate.com/v1/models/{{ $('Process Upload for Caption1').item.json.model }}/predictions","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Prefer","value":"wait"}]},"sendBody":true,"specifyBody":"json","jsonBody":"={\n  \"input\": {\n    \"prompt\": \"{{ $('Process Upload for Caption1').item.json.imageTransformation }} {{ $('Process Upload for Caption1').item.json.sceneContext }}\",\n    \"input_image\": \"{{ $json.data.display_url }}\",\n    \"output_format\": \"jpg\",\n    \"num_inference_steps\": 30\n  }\n}","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[5500,1880],"id":"b454079b-3908-45c6-89f1-bd9fdd530e60","name":"Call Caption Replicate2","credentials":{"httpHeaderAuth":{"id":"JlfTRouEz1b1K4bJ","name":"Flux Replicate Auth account"}},"onError":"continueErrorOutput"},{"parameters":{"method":"POST","url":"https://api.imgbb.com/1/upload","sendBody":true,"contentType":"multipart-form-data","bodyParameters":{"parameters":[{"name":"key","value":"906d52e8dfd22db6e234f01e2707bf41"},{"parameterType":"formBinaryData","name":"image","inputDataFieldName":"data"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[5340,1880],"id":"a6017c01-ede0-44a2-a2a4-23bb87cc1bdb","name":"HTTP Request7"}],"connections":{"Create Captions":{"main":[[{"node":"Baserow14","type":"main","index":0}]]},"Baserow13":{"main":[[{"node":"Create Captions","type":"main","index":0}]]},"Schedule Every 30s":{"main":[[{"node":"Get Draft Campaigns","type":"main","index":0}]]},"Get Draft Campaigns":{"main":[[{"node":"Generate Product Script","type":"main","index":0}]]},"Generate Product Script":{"main":[[{"node":"Update Campaign Script","type":"main","index":0}]]},"OpenRouter - GPT-4.1 Mini":{"ai_languageModel":[[{"node":"Generate Product Script","type":"ai_languageModel","index":0}]]},"Script Output Parser":{"ai_outputParser":[[{"node":"Generate Product Script","type":"ai_outputParser","index":0}]]},"Update Campaign Script":{"main":[[]]},"Get Approved Campaigns":{"main":[[{"node":"Get Segment File1","type":"main","index":0}]]},"Generate Scene Plan":{"main":[[{"node":"Split Scenes","type":"main","index":0}]]},"Scene Output Parser":{"ai_outputParser":[[{"node":"Generate Scene Plan","type":"ai_outputParser","index":0}]]},"Split Scenes":{"main":[[{"node":"Create Scene Records1","type":"main","index":0}]]},"Process Scenes in Batches":{"main":[[{"node":"Update Campaign Status","type":"main","index":0}],[{"node":"Generate Image","type":"main","index":0}]]},"Generate Image":{"main":[[{"node":"Wait for Generation","type":"main","index":0}]]},"Wait for Generation":{"main":[[{"node":"Check Generation Status","type":"main","index":0}]]},"Check Generation Status":{"main":[[{"node":"Check If Complete","type":"main","index":0}]]},"Check If Complete":{"main":[[{"node":"Download Image1","type":"main","index":0}],[{"node":"Wait for Generation","type":"main","index":0}]]},"Upload to Baserow":{"main":[[{"node":"Update Scene with Image","type":"main","index":0}]]},"Update Scene with Image":{"main":[[{"node":"Process Scenes in Batches","type":"main","index":0}]]},"Schedule Every 30s1":{"main":[[{"node":"Get Approved Campaigns","type":"main","index":0}]]},"OpenRouter - GPT-4.1 Mini1":{"ai_languageModel":[[{"node":"Generate Scene Plan","type":"ai_languageModel","index":0}]]},"Create Scene Records1":{"main":[[{"node":"Aggregate6","type":"main","index":0}]]},"Download Image1":{"main":[[{"node":"Upload to Baserow","type":"main","index":0}]]},"Get Campaigns Ready for Music":{"main":[[{"node":"Check If Campaigns Exist2","type":"main","index":0}]]},"Generate Music Prompt":{"main":[[{"node":"Update Music Prompt","type":"main","index":0}]]},"Music Prompt Parser":{"ai_outputParser":[[{"node":"Generate Music Prompt","type":"ai_outputParser","index":0}]]},"Update Music Prompt":{"main":[[{"node":"Generate Music with Suno","type":"main","index":0}]]},"Generate Music with Suno":{"main":[[{"node":"Wait for Music Generation","type":"main","index":0}]]},"Wait for Music Generation":{"main":[[{"node":"Check Music Generation Status","type":"main","index":0}]]},"Check Music Generation Status":{"main":[[{"node":"Check If Music Complete","type":"main","index":0}]]},"Check If Music Complete":{"main":[[{"node":"Download Music File","type":"main","index":0}],[{"node":"Wait for Music Generation","type":"main","index":0}]]},"Download Music File":{"main":[[{"node":"Upload Music to Baserow","type":"main","index":0}]]},"Upload Music to Baserow":{"main":[[{"node":"Create Music Library Record","type":"main","index":0}]]},"Create Music Library Record":{"main":[[{"node":"Link Music to Campaign","type":"main","index":0}]]},"Schedule Every 30s2":{"main":[[{"node":"Get Campaigns Ready for Music","type":"main","index":0}]]},"Check If Campaigns Exist2":{"main":[[{"node":"Generate Music Prompt","type":"main","index":0}]]},"OpenRouter - GPT-4.1 Mini2":{"ai_languageModel":[[{"node":"Generate Music Prompt","type":"ai_languageModel","index":0}]]},"Schedule Every 30s3":{"main":[[{"node":"Get Campaigns Ready for Video2","type":"main","index":0}]]},"When clicking ‘Test workflow’":{"main":[[{"node":"Get Approved Campaigns1","type":"main","index":0}]]},"Structured Output Parser5":{"ai_outputParser":[[{"node":"Generate Music Promps","type":"ai_outputParser","index":0}]]},"OpenRouter Chat Model5":{"ai_languageModel":[[{"node":"Generate Music Promps","type":"ai_languageModel","index":0}]]},"Generate Music Promps":{"main":[[{"node":"Split Prompts","type":"main","index":0}]]},"Split Prompts":{"main":[[{"node":"Add New Music Prompt","type":"main","index":0}]]},"Get Music Library":{"main":[[{"node":"Aggregate Music Library","type":"main","index":0}]]},"Aggregate Music Library":{"main":[[{"node":"AI Music Selector","type":"main","index":0}]]},"AI Music Selector":{"main":[[{"node":"Link Selected Music to Campaign","type":"main","index":0}]]},"Music Selection Parser":{"ai_outputParser":[[{"node":"AI Music Selector","type":"ai_outputParser","index":0}]]},"Schedule Every 30s5":{"main":[[{"node":"Get Campaigns Ready for Music1","type":"main","index":0}]]},"Get Campaigns Ready for Music1":{"main":[[{"node":"Check If Campaigns Exist5","type":"main","index":0}]]},"Check If Campaigns Exist5":{"main":[[{"node":"Get Music Library","type":"main","index":0}]]},"OpenRouter - GPT-4.1 Mini5":{"ai_languageModel":[[{"node":"AI Music Selector","type":"ai_languageModel","index":0}]]},"Schedule Every 30s6":{"main":[[{"node":"Get Campaigns Ready for Assembly1","type":"main","index":0}]]},"Get Campaigns Ready for Assembly1":{"main":[[{"node":"Generate Voiceover1","type":"main","index":0}]]},"Generate Voiceover1":{"main":[[{"node":"Upload Voiceover to Baserow1","type":"main","index":0}]]},"Upload Voiceover to Baserow1":{"main":[[{"node":"Get Captions1","type":"main","index":0}]]},"Get Campaigns with Voice Ready":{"main":[[{"node":"HTTP Request","type":"main","index":0}]]},"Schedule Every 30s7":{"main":[[{"node":"Get Campaigns with Voice Ready","type":"main","index":0}]]},"Add Voiceover to Video1":{"main":[[{"node":"Get Campaign Music1","type":"main","index":0}]]},"Get Campaign Music1":{"main":[[{"node":"Add Background Music1","type":"main","index":0}]]},"Add Background Music1":{"main":[[{"node":"HTTP Request1","type":"main","index":0}]]},"Get Campaigns with Audio Mixed":{"main":[[{"node":"Check If Brand Assets Exist","type":"main","index":0}]]},"Check If Brand Assets Exist":{"main":[[{"node":"Add Branding/Watermark1","type":"main","index":0}],[{"node":"Merge Paths","type":"main","index":0}]]},"Download Branded Video":{"main":[[{"node":"Upload Branded Video to Baserow","type":"main","index":0}]]},"Upload Branded Video to Baserow":{"main":[[{"node":"Merge Paths","type":"main","index":0}]]},"Merge Paths":{"main":[[{"node":"Generate Video Description1","type":"main","index":0}]]},"Schedule Every 30s8":{"main":[[{"node":"Get Campaigns with Audio Mixed","type":"main","index":0}]]},"Add Branding/Watermark1":{"main":[[{"node":"Download Branded Video","type":"main","index":0}]]},"Generate Video Description1":{"main":[[{"node":"Update Campaign Complete1","type":"main","index":0}]]},"OpenRouter - GPT-4.1 Mini6":{"ai_languageModel":[[{"node":"Generate Video Description1","type":"ai_languageModel","index":0}]]},"Description Parser1":{"ai_outputParser":[[{"node":"Generate Video Description1","type":"ai_outputParser","index":0}]]},"Get Scenes Without Animation Prompts":{"main":[[{"node":"Process Scenes in Batches2","type":"main","index":0}]]},"Schedule Every 30s9":{"main":[[{"node":"Get Campaigns Ready for Video1","type":"main","index":0}]]},"Get Campaigns Ready for Video1":{"main":[[{"node":"Split Out Scenes ","type":"main","index":0}]]},"Process Scenes in Batches2":{"main":[[{"node":"Update Campaign Status3","type":"main","index":0}],[{"node":"Generate Animation Prompt1","type":"main","index":0}]]},"Generate Animation Prompt1":{"main":[[{"node":"Update Animation Prompt1","type":"main","index":0}]]},"OpenRouter - GPT-4.1 Mini7":{"ai_languageModel":[[{"node":"Generate Animation Prompt1","type":"ai_languageModel","index":0}]]},"Animation Parser1":{"ai_outputParser":[[{"node":"Generate Animation Prompt1","type":"ai_outputParser","index":0}]]},"Update Animation Prompt1":{"main":[[{"node":"Process Scenes in Batches2","type":"main","index":0}]]},"Split Out Scenes ":{"main":[[{"node":"Get Scenes Without Animation Prompts","type":"main","index":0}]]},"Get Style By ID1":{"main":[[{"node":"Download Image3","type":"main","index":0}]]},"Download Image3":{"main":[[{"node":"Convert to Base64 String1","type":"main","index":0}]]},"Convert to Base64 String1":{"main":[[{"node":"Get Image prompt1","type":"main","index":0}]]},"Split Out Scenes 3":{"main":[[{"node":"Get Scenes5","type":"main","index":0}]]},"Get Scenes5":{"main":[[{"node":"Switch1","type":"main","index":0}]]},"Schedule Every 30s10":{"main":[[{"node":"Get Approved Campaigns1","type":"main","index":0}]]},"Get Approved Campaigns1":{"main":[[{"node":"Switch","type":"main","index":0}]]},"If":{"main":[[{"node":"Get Style By ID1","type":"main","index":0}],[{"node":"Split Out Scenes 3","type":"main","index":0}]]},"Get Scenes6":{"main":[[{"node":"Process Scenes in Batches","type":"main","index":0}]]},"Split Out Scenes 5":{"main":[[{"node":"Get Scenes6","type":"main","index":0}]]},"Get Image prompt1":{"main":[[{"node":"Split Out Scenes 5","type":"main","index":0}]]},"Get Captions1":{"main":[[{"node":"Upload captions To Baserow1","type":"main","index":0}]]},"Upload captions To Baserow1":{"main":[[{"node":"Update Record2","type":"main","index":0}]]},"Aggregate1":{"main":[[{"node":"Video url to array1","type":"main","index":0}]]},"Split Out1":{"main":[[{"node":"Get Scenes1","type":"main","index":0}]]},"Combine Clips1":{"main":[[{"node":"Baserow","type":"main","index":0}]]},"Video url to array1":{"main":[[{"node":"Combine Clips1","type":"main","index":0}]]},"Get video1":{"main":[[{"node":"Split Out1","type":"main","index":0}]]},"Get Scenes1":{"main":[[{"node":"Aggregate1","type":"main","index":0}]]},"HTTP Request":{"main":[[{"node":"Upload Video to Baserow1","type":"main","index":0}]]},"Upload Video to Baserow1":{"main":[[{"node":"Add Voiceover to Video1","type":"main","index":0}]]},"HTTP Request1":{"main":[[{"node":"Upload Video to Baserow2","type":"main","index":0}]]},"Upload Video to Baserow2":{"main":[[{"node":"Update Campaign Status2","type":"main","index":0}]]},"Aggregate5":{"main":[[{"node":"Split into 5s Scenes1","type":"main","index":0}]]},"Fixer1":{"main":[[{"node":"Split Out2","type":"main","index":0}]]},"Get Segment File1":{"main":[[{"node":"Aggregate5","type":"main","index":0}]]},"Split into 5s Scenes1":{"main":[[{"node":"Fixer1","type":"main","index":0}]]},"Split Out2":{"main":[[{"node":"Generate Scene Plan","type":"main","index":0}]]},"Aggregate6":{"main":[[{"node":"IDs To Array","type":"main","index":0}]]},"IDs To Array":{"main":[[{"node":"Baserow20","type":"main","index":0}]]},"Baserow20":{"main":[[{"node":"Update Campaign Status4","type":"main","index":0}]]},"Process Scenes in Batches3":{"main":[[{"node":"Update Campaign Status1","type":"main","index":0}],[{"node":"Generate Image1","type":"main","index":0}]]},"Generate Image1":{"main":[[{"node":"Wait for Generation1","type":"main","index":0}]]},"Wait for Generation1":{"main":[[{"node":"Check Generation Status1","type":"main","index":0}]]},"Check Generation Status1":{"main":[[{"node":"Check If Complete1","type":"main","index":0}]]},"Check If Complete1":{"main":[[{"node":"Download Image4","type":"main","index":0}],[{"node":"Wait for Generation1","type":"main","index":0}]]},"Upload to Baserow1":{"main":[[{"node":"Update Scene with Image1","type":"main","index":0}]]},"Update Scene with Image1":{"main":[[{"node":"Process Scenes in Batches3","type":"main","index":0}]]},"Download Image4":{"main":[[{"node":"Upload to Baserow1","type":"main","index":0}]]},"Aggregate Completed Videos":{"main":[[{"node":"Update Campaign Status5","type":"main","index":0}]]},"Get Scenes Ready for Video":{"main":[[{"node":"Process Scenes in Batches4","type":"main","index":0}]]},"Get Campaigns Ready for Video2":{"main":[[{"node":"Split Out Scenes1","type":"main","index":0}]]},"Generate Video with fal.ai1":{"main":[[{"node":"Wait for Video Generation1","type":"main","index":0}]]},"Wait for Video Generation1":{"main":[[{"node":"Check Video Generation Status1","type":"main","index":0}]]},"Check Video Generation Status1":{"main":[[{"node":"Check If Video Complete1","type":"main","index":0}]]},"Check If Video Complete1":{"main":[[{"node":"Get Video Result1","type":"main","index":0}],[{"node":"Wait for Video Generation1","type":"main","index":0}]]},"Get Video Result1":{"main":[[{"node":"Download Video2","type":"main","index":0}]]},"Upload Video to Baserow3":{"main":[[{"node":"Update Scene with Video1","type":"main","index":0}]]},"Update Scene with Video1":{"main":[[{"node":"Process Scenes in Batches4","type":"main","index":0}]]},"Process Scenes in Batches4":{"main":[[{"node":"Aggregate Completed Videos","type":"main","index":0}],[{"node":"Generate Video with fal.ai1","type":"main","index":0}]]},"Download Video2":{"main":[[{"node":"Upload Video to Baserow3","type":"main","index":0}]]},"Split Out Scenes1":{"main":[[{"node":"Get Scenes Ready for Video","type":"main","index":0}]]},"Schedule Every 30s11":{"main":[[{"node":"Get video1","type":"main","index":0}]]},"Schedule Every 30s12":{"main":[[{"node":"Baserow13","type":"main","index":0}]]},"Process Scenes (OpenAI)":{"main":[[{"node":"Update Campaign Status6","type":"main","index":0}],[{"node":"Download Image","type":"main","index":0}]]},"Upload OpenAI to Baserow":{"main":[[{"node":"Update Scene with OpenAI","type":"main","index":0}]]},"Update Scene with OpenAI":{"main":[[{"node":"Process Scenes (OpenAI)","type":"main","index":0}]]},"Convert to File":{"main":[[{"node":"Upload OpenAI to Baserow","type":"main","index":0}]]},"Switch":{"main":[[{"node":"If","type":"main","index":0}],[{"node":"Get Style By ID","type":"main","index":0}],[]]},"Switch1":{"main":[[{"node":"Process Scenes in Batches3","type":"main","index":0}],[{"node":"Process Scenes (OpenAI)","type":"main","index":0}]]},"Get Style By ID":{"main":[[{"node":"Get Image prompt","type":"main","index":0}]]},"Download Image":{"main":[[{"node":"Code","type":"main","index":0}]]},"Split Out Scenes 6":{"main":[[{"node":"Get Scenes","type":"main","index":0}]]},"Get Image prompt":{"main":[[{"node":"Split Out Scenes 6","type":"main","index":0}]]},"Get Scenes":{"main":[[{"node":"Process Scenes (OpenAI)","type":"main","index":0}]]},"Code":{"main":[[{"node":"Create Image1","type":"main","index":0}]]},"Create Image1":{"main":[[{"node":"Convert to File","type":"main","index":0}]]},"Create Clips":{"main":[[{"node":"Baserow5","type":"main","index":0}]]},"Loop Over Items3":{"main":[[],[{"node":"Create Clips","type":"main","index":0}]]},"Baserow4":{"main":[[{"node":"Loop Over Items3","type":"main","index":0}]]},"Baserow5":{"main":[[{"node":"Loop Over Items3","type":"main","index":0}]]},"Get video":{"main":[[{"node":"Split Out","type":"main","index":0}]]},"Split Out":{"main":[[{"node":"Baserow4","type":"main","index":0}]]},"Update Record2":{"main":[[{"node":"Update Campaign Script1","type":"main","index":0}]]},"Baserow":{"main":[[{"node":"Update Campaign Status7","type":"main","index":0}]]},"Link Selected Music to Campaign":{"main":[[{"node":"Update Campaign Status8","type":"main","index":0}]]},"Wait for Caption Processing1":{"main":[[{"node":"Check Caption Status1","type":"main","index":0}]]},"Check Caption Status1":{"main":[[{"node":"Check if Caption Complete1","type":"main","index":0}]]},"Check if Caption Complete1":{"main":[[{"node":"Download Caption Result1","type":"main","index":0}],[{"node":"Wait and Retry Caption1","type":"main","index":0}]]},"Wait and Retry Caption1":{"main":[[{"node":"Check Caption Status1","type":"main","index":0}]]},"Call Caption Replicate2":{"main":[[{"node":"Wait for Caption Processing1","type":"main","index":0}],[{"node":"Handle Caption API Error1","type":"main","index":0}]]},"HTTP Request7":{"main":[[{"node":"Call Caption Replicate2","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":null,"pinData":{},"versionId":"cdb8f779-96c4-4dec-be3d-3e9a8c7845ef","triggerCount":0,"shared":[{"createdAt":"2025-05-30T03:09:56.563Z","updatedAt":"2025-05-30T03:09:56.563Z","role":"workflow:owner","workflowId":"ZBAlHrBJK7TNUVJl","projectId":"pRXFeKq9D8e0hAOx"}],"tags":[]},{"createdAt":"2025-09-01T08:04:09.633Z","updatedAt":"2025-09-01T08:15:57.000Z","id":"ddypojIEQkzrxGmr","name":"MG Bryanston Facebook Insights (Final Fix)","active":false,"isArchived":false,"nodes":[{"parameters":{"rule":{"interval":[{"field":"cronExpression"}]}},"id":"schedule-trigger","name":"Daily Insights Schedule","type":"n8n-nodes-base.scheduleTrigger","position":[200,300],"typeVersion":1.2,"disabled":true},{"parameters":{},"id":"manual-trigger","name":"Manual Trigger","type":"n8n-nodes-base.manualTrigger","position":[200,500],"typeVersion":1},{"parameters":{"assignments":{"assignments":[{"id":"date-today","name":"date_today","type":"string","value":"={{ $now.format('yyyy-MM-dd') }}"},{"id":"date-yesterday","name":"date_yesterday","type":"string","value":"={{ $now.minus({days: 1}).format('yyyy-MM-dd') }}"}]},"options":{}},"id":"set-date-vars","name":"Set Date Variables","type":"n8n-nodes-base.set","position":[400,400],"typeVersion":3.4},{"parameters":{"graphApiVersion":"v23.0","node":"376784612189028","edge":"insights","options":{}},"id":"facebook-page-insights","name":"Get Facebook Page Insights","type":"n8n-nodes-base.facebookGraphApi","position":[600,200],"typeVersion":1,"credentials":{"facebookGraphApi":{"id":"Zr6cRDN8mGYlfOob","name":"Facebook Graph New"}},"continueOnFail":true},{"parameters":{"graphApiVersion":"v23.0","node":"act_495023694603728","edge":"insights","options":{}},"id":"facebook-ads-account-insights","name":"Get Facebook Ads Account Insights","type":"n8n-nodes-base.facebookGraphApi","position":[600,400],"typeVersion":1,"credentials":{"facebookGraphApi":{"id":"Zr6cRDN8mGYlfOob","name":"Facebook Graph New"}},"continueOnFail":true},{"parameters":{"graphApiVersion":"v23.0","node":"act_495023694603728/campaigns","options":{}},"id":"facebook-campaign-insights","name":"Get Facebook Campaign Insights","type":"n8n-nodes-base.facebookGraphApi","position":[600,600],"typeVersion":1,"credentials":{"facebookGraphApi":{"id":"Zr6cRDN8mGYlfOob","name":"Facebook Graph New"}},"continueOnFail":true},{"parameters":{"language":"javascript"},"id":"process-insights-data","name":"Process & Combine Insights Data","type":"n8n-nodes-base.code","position":[800,400],"typeVersion":2},{"parameters":{"operation":"create","databaseId":"YOUR_BASEROW_DATABASE_ID","tableId":"YOUR_BASEROW_TABLE_ID"},"id":"store-in-baserow","name":"Store in Baserow","type":"n8n-nodes-base.baserow","position":[1000,400],"typeVersion":1},{"parameters":{},"id":"success-notification","name":"Success Notification","type":"n8n-nodes-base.noOp","position":[1200,300],"typeVersion":1},{"parameters":{"content":"## Facebook Access Token:\nEAATZASTslvaABPdBQGTxsJjlZBbu0elLCZBs2xTZAZAznPen4F2HSUWupL1wBUDzxRYJ2WxslTv6ZCMn0pljKXLLeCBl8GrwefqPHOWv5Nt6qb3fPtw7p1mSAoSHY9K1TcyAWckfdsMqZCFSbDXFXW5U7ZANUTzmoNoxexrhHLVCN0MpUZAYZBAyLcnAZAEnCUukAGFH0oYJYvtbJngu7aRjZAABobpd73EzxSjqZBPtB71HbbeEzgwZDZD"},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[940,200],"id":"56d2dc2d-5458-4ac6-b6ac-24bde8ab7b6c","name":"Sticky Note"}],"connections":{"Manual Trigger":{"main":[[{"node":"Set Date Variables","type":"main","index":0}]]},"Store in Baserow":{"main":[[{"node":"Success Notification","type":"main","index":0}]]},"Set Date Variables":{"main":[[{"node":"Get Facebook Page Insights","type":"main","index":0},{"node":"Get Facebook Ads Account Insights","type":"main","index":0},{"node":"Get Facebook Campaign Insights","type":"main","index":0}]]},"Daily Insights Schedule":{"main":[[{"node":"Set Date Variables","type":"main","index":0}]]},"Get Facebook Page Insights":{"main":[[]]},"Get Facebook Campaign Insights":{"main":[[]]},"Process & Combine Insights Data":{"main":[[{"node":"Store in Baserow","type":"main","index":0}]]},"Get Facebook Ads Account Insights":{"main":[[]]}},"settings":{"executionOrder":"v1","timezone":"America/New_York","saveDataErrorExecution":"all","saveDataSuccessExecution":"all","saveManualExecutions":true},"staticData":null,"meta":null,"pinData":{},"versionId":"8f037237-a7e1-4fe3-b489-d0a139275844","triggerCount":0,"shared":[{"createdAt":"2025-09-01T08:04:09.635Z","updatedAt":"2025-09-01T08:04:09.635Z","role":"workflow:owner","workflowId":"ddypojIEQkzrxGmr","projectId":"pRXFeKq9D8e0hAOx"}],"tags":[]},{"createdAt":"2025-09-04T09:00:54.288Z","updatedAt":"2025-09-15T10:54:29.000Z","id":"dgaaSyW1ECJCRxCj","name":"Nano Banana Image Generation","active":false,"isArchived":false,"nodes":[{"parameters":{"operation":"update"},"type":"n8n-nodes-base.baserowTool","typeVersion":1,"position":[720,720],"id":"12a5cade-f13b-480e-8bcc-1ad013c9a3a1","name":"Change File Name","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"method":"POST","url":"https://baserow.aiautomata.co.za/api/user-files/upload-file/","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"contentType":"multipart-form-data","bodyParameters":{"parameters":[{"parameterType":"formBinaryData","name":"file","inputDataFieldName":"data"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[1280,400],"id":"8a3294c6-aac9-4ea4-b5a8-a97ebd51034e","name":"Upload OpenAI to Baserow1","credentials":{"httpHeaderAuth":{"id":"eLr9WkAowHbRSmCb","name":"Baserow Auth account"}}},{"parameters":{"method":"PATCH","url":"=https://baserow.aiautomata.co.za/api/database/rows/table/{{ $('Enhanced Process Payload').item.json.baserow.imagesTableId }}/{{ $('Enhanced Process Payload').item.json.imageId }}/","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"application/json"},{"name":"Authorization","value":"=Token {{ $('Enhanced Process Payload').item.json.baserow.token }}"}]},"sendBody":true,"specifyBody":"json","jsonBody":"={\n  \"field_7185\": \"Completed\",\n  \"field_7178\": [\n    {\n      \"name\": \"{{ $json.name }}\"\n    }\n  ]\n}","options":{}},"id":"574b64f1-d199-49a4-83cc-7f867cdb4efb","name":"Update Baserow Success1","type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[1488,400]},{"parameters":{"rules":{"values":[{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"e7211e46-0f49-46a0-9cb7-e83fed150efd","leftValue":"={{ $json.message.photo }}","rightValue":"","operator":{"type":"array","operation":"exists","singleValue":true}}],"combinator":"and"},"renameOutput":true,"outputKey":"Photo"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"leftValue":"={{ $json.message.text }}","rightValue":"","operator":{"type":"string","operation":"exists","singleValue":true},"id":"85edf561-8f5e-4215-9e19-78ff0392068e"}],"combinator":"and"},"renameOutput":true,"outputKey":"Text"}]},"options":{}},"type":"n8n-nodes-base.switch","typeVersion":3.2,"position":[112,384],"id":"6c7d9c54-d209-49cc-b9f6-87fa7761102a","name":"Switch1"},{"parameters":{"assignments":{"assignments":[{"id":"53de4eb0-6684-48f5-a5b5-2b3bedaff817","name":"message.text","value":"=The user just submitted a picture. Here is the ID of that file in Google Drive: {{ $json.id }}","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[432,336],"id":"064658f4-d6e6-4557-a61c-6c5156bbb36c","name":"Set Text1"},{"parameters":{"model":{"__rl":true,"value":"claude-3-5-sonnet-20241022","mode":"list","cachedResultName":"Claude Sonnet 3.5 (New)"},"options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatAnthropic","typeVersion":1.3,"position":[112,704],"id":"eebdd26a-f721-4a64-ae4a-74619ecf75c3","name":"Sonnet 3.","credentials":{"anthropicApi":{"id":"vh9pvkS1xu1Sr2bF","name":"Anthropic account"}}},{"parameters":{"promptType":"define","text":"={{ $json.message.text }}","needsFallback":true,"options":{"systemMessage":"=# Overview\nYou are a personal assistant agent. Your job is to use the tools you have access to help the user with their request. \n\n## Tools\nChange Name - Use this tool to change the name of a photo. You must have the file ID to change the name.\nCombine Images - Use this tool to combine two images.\nSearch Raw Files - Use this tool to search for image files that the user has previously uploaded.\nSearch AI Images - Use this tool to search for AI-generated images that you've helped the user create. \nEdit Image - Use this tool to edit an image.\n\n## Instructions\n1) If the user submits a photo, ask them what to name that photo by saying \"What would you like me to name that photo in your Google Drive?\". Then once they respond, change the name using your Change Name tool.\n","returnIntermediateSteps":true}},"type":"@n8n/n8n-nodes-langchain.agent","typeVersion":2.2,"position":[720,400],"id":"48730cdf-14a1-4fcc-a44a-f7ad0fbe65bf","name":"Photoshop Agent1","onError":"continueErrorOutput"},{"parameters":{"description":"Call this tool to combine two images. You must pass over an image generation prompt, the IDs of both of the images, and a title for this new image.","workflowId":{"__rl":true,"value":"QNVD8DNkhhOiS1BD","mode":"list","cachedResultName":"Combined Images Nanobanana"},"workflowInputs":{"mappingMode":"defineBelow","value":{"prompt":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('prompt', `The image generation prompt. This should be optimized for AI image generation, and should only reference the images as image1 and image2. This prompt should not contain \\\\n or \"\".`, 'string') }}","image1":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('image1', `The ID of image 1`, 'string') }}","image2":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('image2', `The ID of image 2`, 'string') }}","imageTitle":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('imageTitle', `The title for the new image`, 'string') }}"},"matchingColumns":[],"schema":[{"id":"prompt","displayName":"prompt","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string"},{"id":"image1","displayName":"image1","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string"},{"id":"image2","displayName":"image2","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string"},{"id":"imageTitle","displayName":"imageTitle","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string","removed":false}],"attemptToConvertTypes":false,"convertFieldsToString":false}},"type":"@n8n/n8n-nodes-langchain.toolWorkflow","typeVersion":2.2,"position":[400,704],"id":"734f4711-3ae2-4223-a865-f6b2a0fd6911","name":"Combine Images1"},{"parameters":{"description":"Call this tool to edit an image. You must pass over a new image title, an image prompt, and the image ID. ","workflowId":{"__rl":true,"value":"WM3g2X71QC2iY769","mode":"list","cachedResultName":"Edit Image Nanobanana Tool"},"workflowInputs":{"mappingMode":"defineBelow","value":{"imageTitle":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('imageTitle', `The title of the new image`, 'string') }}","imagePrompt":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('imagePrompt', `The image generation prompt. This should be detailed and optimized for AI image generation. This prompt should not contain \\\\n or \"\".`, 'string') }}","imageID":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('imageID', `The ID of the image to edit`, 'string') }}"},"matchingColumns":[],"schema":[{"id":"imageTitle","displayName":"imageTitle","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string"},{"id":"imagePrompt","displayName":"imagePrompt","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string"},{"id":"imageID","displayName":"imageID","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string"}],"attemptToConvertTypes":false,"convertFieldsToString":false}},"type":"@n8n/n8n-nodes-langchain.toolWorkflow","typeVersion":2.2,"position":[544,704],"id":"55b13a5a-b6be-483b-ba87-0ee31a3d7d1b","name":"Edit Image1"},{"parameters":{"content":"## Text/Image Input","height":352,"width":720,"color":2},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[-64,256],"id":"5ef4f465-1d92-4e19-880d-886572afdaaf","name":"Sticky Note6"},{"parameters":{"content":"## Photoshop Agent","height":352,"width":480,"color":6},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[672,256],"id":"c7789beb-6990-4561-b0b9-490664007526","name":"Sticky Note7"},{"parameters":{"sessionIdType":"customKey","sessionKey":"={{ $('Telegram Trigger').item.json.message.chat.id }}"},"type":"@n8n/n8n-nodes-langchain.memoryBufferWindow","typeVersion":1.3,"position":[240,704],"id":"4bb4568d-5721-4497-88f7-fe03f111b88e","name":"Simple Memory1"},{"parameters":{"model":"openai/gpt-5-mini","options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenRouter","typeVersion":1,"position":[-16,704],"id":"cbc1148c-5963-4efe-89be-e9b6d22bda45","name":"GPT 5 mini1","credentials":{"openRouterApi":{"id":"eni2kFdHGvy7lEd3","name":"OpenRouter account"}}},{"parameters":{"additionalOptions":{}},"type":"n8n-nodes-base.baserowTool","typeVersion":1,"position":[864,720],"id":"39b6be31-d9a3-47d2-b3d8-6a5ab4f8fe47","name":"Search Raw Files1","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"additionalOptions":{}},"type":"n8n-nodes-base.baserowTool","typeVersion":1,"position":[1024,720],"id":"9bb248aa-3607-48b7-8715-1ac6cd908085","name":"Search AI Images1","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}}],"connections":{"Change File Name":{"ai_tool":[[{"node":"Photoshop Agent1","type":"ai_tool","index":0}]]},"Upload OpenAI to Baserow1":{"main":[[{"node":"Update Baserow Success1","type":"main","index":0}]]},"Switch1":{"main":[[{"node":"Set Text1","type":"main","index":0}],[{"node":"Photoshop Agent1","type":"main","index":0}]]},"Set Text1":{"main":[[{"node":"Photoshop Agent1","type":"main","index":0}]]},"Sonnet 3.":{"ai_languageModel":[[{"node":"Photoshop Agent1","type":"ai_languageModel","index":1}]]},"Photoshop Agent1":{"main":[[{"node":"Upload OpenAI to Baserow1","type":"main","index":0}]]},"Combine Images1":{"ai_tool":[[{"node":"Photoshop Agent1","type":"ai_tool","index":0}]]},"Edit Image1":{"ai_tool":[[{"node":"Photoshop Agent1","type":"ai_tool","index":0}]]},"Simple Memory1":{"ai_memory":[[{"node":"Photoshop Agent1","type":"ai_memory","index":0}]]},"GPT 5 mini1":{"ai_languageModel":[[{"node":"Photoshop Agent1","type":"ai_languageModel","index":0}]]},"Search Raw Files1":{"ai_tool":[[{"node":"Photoshop Agent1","type":"ai_tool","index":0}]]},"Search AI Images1":{"ai_tool":[[{"node":"Photoshop Agent1","type":"ai_tool","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"ec47185a-7e93-46ba-a680-9e4c777f084b","triggerCount":0,"shared":[{"createdAt":"2025-09-04T09:00:54.297Z","updatedAt":"2025-09-04T09:00:54.297Z","role":"workflow:owner","workflowId":"dgaaSyW1ECJCRxCj","projectId":"pRXFeKq9D8e0hAOx"}],"tags":[]},{"createdAt":"2025-09-01T06:40:22.293Z","updatedAt":"2025-09-01T07:50:41.000Z","id":"dmYZX61fzaDHoRJA","name":"Facebook Page & Ads Insights to Baserow","active":false,"isArchived":false,"nodes":[{"parameters":{"rule":{"interval":[{"field":"cronExpression"}]}},"id":"schedule-trigger","name":"Daily Insights Schedule","type":"n8n-nodes-base.scheduleTrigger","typeVersion":1.2,"position":[200,540],"disabled":true},{"parameters":{"assignments":{"assignments":[{"id":"date-today","name":"date_today","value":"={{ $now.format('yyyy-MM-dd') }}","type":"string"},{"id":"date-yesterday","name":"date_yesterday","value":"={{ $now.minus({days: 1}).format('yyyy-MM-dd') }}","type":"string"}]},"options":{}},"id":"set-date-vars","name":"Set Date Variables","type":"n8n-nodes-base.set","typeVersion":3.4,"position":[400,300]},{"parameters":{"graphApiVersion":"v22.0","node":"376784612189028","options":{}},"id":"facebook-page-insights","name":"Get Facebook Page Insights","type":"n8n-nodes-base.facebookGraphApi","typeVersion":1,"position":[600,200],"credentials":{"facebookGraphApi":{"id":"Zr6cRDN8mGYlfOob","name":"Facebook Graph New"}},"continueOnFail":true},{"parameters":{"graphApiVersion":"v20.0","node":" 495023694603728/insights","options":{}},"id":"facebook-ads-account-insights","name":"Get Facebook Ads Account Insights","type":"n8n-nodes-base.facebookGraphApi","typeVersion":1,"position":[600,400],"credentials":{"facebookGraphApi":{"id":"l4pIP1rC506QwuLu","name":"Facebook Graph account"}},"continueOnFail":true},{"parameters":{"graphApiVersion":"v20.0","node":"act_YOUR_AD_ACCOUNT_ID/campaigns","edge":"insights","options":{}},"id":"facebook-campaign-insights","name":"Get Facebook Campaign Insights","type":"n8n-nodes-base.facebookGraphApi","typeVersion":1,"position":[600,600],"credentials":{"facebookGraphApi":{"id":"l4pIP1rC506QwuLu","name":"Facebook Graph account"}},"continueOnFail":true},{"parameters":{"language":"javascript"},"id":"process-insights-data","name":"Process & Combine Insights Data","type":"n8n-nodes-base.code","typeVersion":2,"position":[800,400]},{"parameters":{"operation":"create","databaseId":"YOUR_BASEROW_DATABASE_ID","tableId":"YOUR_BASEROW_TABLE_ID"},"id":"store-in-baserow","name":"Store in Baserow","type":"n8n-nodes-base.baserow","typeVersion":1,"position":[1000,400]},{"parameters":{},"id":"success-notification","name":"Success Notification","type":"n8n-nodes-base.noOp","typeVersion":1,"position":[1200,300]},{"parameters":{"language":"javascript"},"id":"error-notification","name":"Error Handler","type":"n8n-nodes-base.code","typeVersion":2,"position":[1200,500]},{"parameters":{},"type":"n8n-nodes-base.manualTrigger","typeVersion":1,"position":[180,300],"id":"55aad430-c12f-4079-b65f-3c61e7417de3","name":"When clicking ‘Execute workflow’"},{"parameters":{"content":"## Facebook Graph Token:\nEAATZASTslvaABPeKqiW412Dw0N4JzJ0tOTyrDmshQZAJIvCeXLUnOVsypmaYNc5abWrwTSXdLfaIXYkA4W2iwZBg7wInp8v97R20IJR5OaGPTl0Qa0PJ9aM5cApllamTkK8A4bukcfhOVGZBEYlM2ALFYZAUkZAzIAySS9BRnXqjTfijcwoR1uv76pbM8CzDJvZAonEOfJG7xhQhhQZD","height":200},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[1040,-60],"id":"6ba9ac2e-76ea-416f-be77-4a5d937dab97","name":"Sticky Note"}],"connections":{"Daily Insights Schedule":{"main":[[]]},"Set Date Variables":{"main":[[{"node":"Get Facebook Page Insights","type":"main","index":0},{"node":"Get Facebook Ads Account Insights","type":"main","index":0},{"node":"Get Facebook Campaign Insights","type":"main","index":0}]]},"Get Facebook Page Insights":{"main":[[]]},"Get Facebook Ads Account Insights":{"main":[[]]},"Get Facebook Campaign Insights":{"main":[[]]},"Process & Combine Insights Data":{"main":[[{"node":"Store in Baserow","type":"main","index":0}]]},"Store in Baserow":{"main":[[{"node":"Success Notification","type":"main","index":0}]]},"When clicking ‘Execute workflow’":{"main":[[{"node":"Set Date Variables","type":"main","index":0}]]}},"settings":{"executionOrder":"v1","timezone":"America/New_York","saveDataErrorExecution":"all","saveDataSuccessExecution":"all","saveManualExecutions":true,"errorWorkflow":""},"staticData":null,"meta":null,"pinData":{},"versionId":"e5d6ddcb-814b-49f9-ad63-efca0cc150ef","triggerCount":0,"shared":[{"createdAt":"2025-09-01T06:40:22.297Z","updatedAt":"2025-09-01T06:40:22.297Z","role":"workflow:owner","workflowId":"dmYZX61fzaDHoRJA","projectId":"pRXFeKq9D8e0hAOx"}],"tags":[]},{"createdAt":"2025-09-17T02:31:03.757Z","updatedAt":"2025-09-18T04:36:36.000Z","id":"enW3ViUlsacdPdH2","name":"Generate Image Nano Banana Tool","active":false,"isArchived":false,"nodes":[{"parameters":{"workflowInputs":{"values":[{"name":"imageTitle"},{"name":"imagePrompt"},{"name":"imageID"}]}},"type":"n8n-nodes-base.executeWorkflowTrigger","typeVersion":1.1,"position":[-80,32],"id":"6780ed0e-2acc-4be7-9248-62b06ad9a973","name":"When Executed by Another Workflow"},{"parameters":{"method":"POST","url":"https://fal.run/fal-ai/gemini-25-flash-image","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"specifyBody":"json","jsonBody":"={\n  \"prompt\": \"{{ $json.imagePrompt }}\",\n  \"num_images\": 1\n}","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[384,32],"id":"23dc636f-3fcc-4358-aab5-4de418187fa6","name":"Create Image","credentials":{"httpHeaderAuth":{"id":"ir1jYgd60Pw6yEVx","name":"fal.ai Auth account"},"openRouterApi":{"id":"eni2kFdHGvy7lEd3","name":"OpenRouter account"}}},{"parameters":{"url":"=https://queue.fal.run/fal-ai/nano-banana/requests/{{ $json.request_id }}","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[640,-160],"id":"6e4ccdc2-aaae-44df-bf3f-1c3d7db087ae","name":"Get Result","credentials":{"httpHeaderAuth":{"id":"ir1jYgd60Pw6yEVx","name":"fal.ai Auth account"}},"onError":"continueErrorOutput"},{"parameters":{"assignments":{"assignments":[{"id":"c66c7c13-57ca-4191-9af3-5ab306dfedfc","name":"Response","value":"=The image was created and named \"{{ $json.name }}\". \n\nHere is the link to the image in Baserow: {{ $json.url }}","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[1152,32],"id":"afd970ef-26fa-46d3-b5ed-93c05e37b832","name":"Result"},{"parameters":{"url":"={{ $json.images[0].url }}","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[848,32],"id":"176ef73f-1b46-4f27-ae52-57744f7a8038","name":"Download Image"},{"parameters":{"amount":10},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[480,-160],"id":"3588e7e8-8afa-4179-abe0-8ea97cffbd98","name":"10 Seconds","webhookId":"caad73e3-58d8-4fbd-a3e9-c42424f2d1ee"},{"parameters":{"content":"## Input","height":224,"width":176,"color":7},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[-128,-32],"id":"625a2952-e908-4bca-883c-66d50f779ba8","name":"Sticky Note"},{"parameters":{"content":"## Download File URL","height":224,"width":288,"color":4},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[64,-32],"id":"fa2657b2-d744-4b2d-a2b4-a72669b0ea9d","name":"Sticky Note1"},{"parameters":{"content":"## Create AI Image","height":224,"width":432,"color":5},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[368,-32],"id":"66c21807-fb31-475d-af78-d6eaeb84b2d8","name":"Sticky Note2"},{"parameters":{"content":"## Polling","height":224,"width":192,"color":3},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[608,208],"id":"c06e3a91-51ee-47de-85a2-0bd208a6d3ca","name":"Sticky Note3"},{"parameters":{"content":"## Output","height":224,"width":464,"color":6},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[816,-32],"id":"67d13109-9ad1-4a65-8aca-e3d54c257378","name":"Sticky Note4"},{"parameters":{},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[656,272],"id":"299440e3-5649-4474-be3e-0079297c44a5","name":"5 Seconds","webhookId":"5f6bbd1e-a155-48de-b737-a225c6fd7a84"},{"parameters":{"method":"POST","url":"https://baserow.aiautomata.co.za/api/user-files/upload-file/","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"contentType":"multipart-form-data","bodyParameters":{"parameters":[{"parameterType":"formBinaryData","name":"file","inputDataFieldName":"data"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[992,32],"id":"b23578f8-bea7-4f2f-971e-b6371f53d0bd","name":"Upload Nano to Baserow","credentials":{"httpHeaderAuth":{"id":"eLr9WkAowHbRSmCb","name":"Baserow Auth account"}}}],"connections":{"When Executed by Another Workflow":{"main":[[{"node":"Create Image","type":"main","index":0}]]},"Create Image":{"main":[[{"node":"Download Image","type":"main","index":0}]]},"Get Result":{"main":[[],[{"node":"5 Seconds","type":"main","index":0}]]},"Download Image":{"main":[[{"node":"Upload Nano to Baserow","type":"main","index":0}]]},"10 Seconds":{"main":[[{"node":"Get Result","type":"main","index":0}]]},"5 Seconds":{"main":[[{"node":"Get Result","type":"main","index":0}]]},"Upload Nano to Baserow":{"main":[[{"node":"Result","type":"main","index":0}]]},"Result":{"main":[[]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{"When Executed by Another Workflow":[{"json":{"imageTitle":"Golden Hour Tropical Beach","imagePrompt":"Photorealistic, ultra-high-resolution image of a tranquil tropical beach at golden hour. Foreground: fine golden sand with natural ripples, scattered seashells, and a few small footprints leading toward the water. Midground: crystal-clear turquoise waves gently lapping the shore with subtle white foam and wet sand reflecting the warm sky. Background: calm sea stretching to horizon with a couple of distant sailboats and the low sun casting long warm reflections on the water. Sky: clear with a few wispy clouds, gradient from warm orange near the horizon to soft blue above. Include realistic details: wet sand reflections, water transparency, accurate light scattering, natural shadows from palm fronds entering the frame at the top-right, and textured sand and water surface. Camera: 35mm focal length, shallow to moderate depth of field for a crisp foreground and slightly softened background, cinematic color grading, 4k photorealistic detail.","imageID":"beach_gen_002"}}]},"versionId":"accb12eb-f6d9-4b3a-815a-161c3c3cde89","triggerCount":0,"shared":[{"createdAt":"2025-09-17T02:31:03.765Z","updatedAt":"2025-09-17T02:31:03.765Z","role":"workflow:owner","workflowId":"enW3ViUlsacdPdH2","projectId":"pRXFeKq9D8e0hAOx"}],"tags":[]},{"createdAt":"2025-07-03T11:22:43.647Z","updatedAt":"2025-08-18T11:09:23.000Z","id":"hv9dFlSR09lZamSt","name":"Image Generator","active":true,"isArchived":false,"nodes":[{"parameters":{"content":"## New Image with or without captions","height":800,"width":2460},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[-200,-40],"id":"1a97b8e1-9615-442a-914c-d98886795bdf","name":"Sticky Note"},{"parameters":{"content":"## Image from Ref Image","height":840,"width":2660,"color":2},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[-240,1000],"id":"57c51518-4e66-4f81-99c2-676bf2170a25","name":"Sticky Note1"},{"parameters":{"content":"## Edit Image","height":780,"width":2720,"color":3},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[-260,2180],"id":"8820206b-534e-47ab-a3ef-4d0de1385d8b","name":"Sticky Note2"},{"parameters":{"content":"##Image with captions from ref Image","height":800,"width":2980,"color":4},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[-360,3180],"id":"3fa8163d-5521-4088-8b55-7dfac9f284a2","name":"Sticky Note3"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"has-errors","leftValue":"={{ $json.hasErrors }}","rightValue":true,"operator":{"type":"boolean","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[260,1240],"id":"48d13463-f08e-4929-a2b1-c81f7a6d13c6","name":"Check for Errors"},{"parameters":{"operation":"toBinary","sourceProperty":"data[0].b64_json","options":{}},"type":"n8n-nodes-base.convertToFile","typeVersion":1.1,"position":[1260,1240],"id":"c7fb8107-3426-4c8c-8bd1-62e01d7376db","name":"Convert OpenAI Response"},{"parameters":{"amount":12},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[1660,1440],"id":"c7259153-c4de-4e90-9806-3cbe9cc9b8f1","name":"Wait for Replicate","webhookId":"replicate-regenerate-wait"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"is-complete","leftValue":"={{ $json.status }}","rightValue":"succeeded","operator":{"type":"string","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[2060,1440],"id":"5146bad1-f499-4ae8-ba0f-0491e247211b","name":"Check if Complete"},{"parameters":{"amount":8},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[2260,1540],"id":"420fdbcd-693a-4dd8-9c53-9b6958ca827a","name":"Wait and Retry","webhookId":"regenerate-retry-wait"},{"parameters":{"path":"b2022b43-a237-4d06-bd79-06e7bc128d7b","formTitle":"Image Re-generation from Reference","formDescription":"Transform existing images with new styles, scenes, and modifications","formFields":{"values":[{"fieldLabel":"Image Title","placeholder":"My Regenerated Image","requiredField":true},{"fieldLabel":"Image Model","fieldType":"dropdown","fieldOptions":{"values":[{"option":"openai/gpt-image-1"},{"option":"black-forest-labs/flux-1.1-pro-ultra"},{"option":"stability-ai/sdxl-turbo"},{"option":"black-forest-labs/flux-dev"},{"option":"stability-ai/stable-diffusion-3.5-large"}]},"requiredField":true},{"fieldLabel":"Reference Image URL","placeholder":"https://example.com/your-reference-image.jpg"},{"fieldLabel":"Upload Reference Image","fieldType":"file","multipleFiles":false},{"fieldLabel":"Style Transformation","fieldType":"textarea","placeholder":"Transform to photorealistic style, make it look like a vintage painting, convert to cyberpunk aesthetic, etc.","requiredField":true},{"fieldLabel":"Scene Modifications","fieldType":"textarea","placeholder":"Change the setting to a futuristic city, move to outdoor environment, add more people, etc."},{"fieldLabel":"Background Changes","fieldType":"textarea","placeholder":"Replace background with mountains, add sunset lighting, make background blurred, etc."},{"fieldLabel":"Focus Areas","fieldType":"textarea","placeholder":"Keep the main subject but emphasize the colors, maintain the car but change everything else, etc."},{"fieldLabel":"Additional Instructions","fieldType":"textarea","placeholder":"Any other specific modifications or requirements"},{"fieldLabel":"Output Size","fieldType":"dropdown","fieldOptions":{"values":[{"option":"1024x1024"},{"option":"1024x1536"},{"option":"1536x1024"}]}},{"fieldLabel":"Transformation Strength","fieldType":"dropdown","fieldOptions":{"values":[{"option":"Light (keep most original elements)"},{"option":"Medium (balanced transformation)"},{"option":"Strong (significant changes)"}]}}]},"responseMode":"responseNode","options":{}},"id":"16154b26-d727-4d8d-aa4c-9c5162eb6e60","name":"Image Regenerate Form1","type":"n8n-nodes-base.formTrigger","position":[-140,1240],"webhookId":"b2022b43-a237-4d06-bd79-06e7bc128d7b","typeVersion":2.1},{"parameters":{"jsCode":"// Process and validate form data for image regeneration\nconst formData = $json;\n\n// Extract and clean form data\nconst processedData = {\n  title: formData['Image Title'] || '',\n  model: formData['Image Model'] || '',\n  referenceUrl: formData['Reference Image URL'] || '',\n  uploadedImage: formData['Upload Reference Image'] || null,\n  styleTransformation: formData['Style Transformation'] || '',\n  sceneModifications: formData['Scene Modifications'] || '',\n  backgroundChanges: formData['Background Changes'] || '',\n  focusAreas: formData['Focus Areas'] || '',\n  additionalInstructions: formData['Additional Instructions'] || '',\n  outputSize: formData['Output Size'] || '1024x1024',\n  transformationStrength: formData['Transformation Strength'] || 'Medium (balanced transformation)'\n};\n\n// Validation\nconst errors = [];\nif (!processedData.title.trim()) errors.push('Image Title is required');\nif (!processedData.model) errors.push('Image Model is required');\nif (!processedData.styleTransformation.trim()) errors.push('Style Transformation is required');\n\n// Reference image validation\nconst hasUrl = processedData.referenceUrl.trim().length > 0;\nconst hasUpload = processedData.uploadedImage !== null;\n\nif (!hasUrl && !hasUpload) {\n  errors.push('Reference image is required - provide either URL or upload a file');\n}\n\nif (hasUrl && hasUpload) {\n  errors.push('Please provide either URL or upload - not both');\n}\n\n// Determine API type and settings\nconst isOpenAI = processedData.model === 'openai/gpt-image-1';\nconst apiType = isOpenAI ? 'openai' : 'replicate';\n\n// Build comprehensive transformation prompt\nlet transformationPrompt = `Transform this image: ${processedData.styleTransformation}`;\n\nif (processedData.sceneModifications) {\n  transformationPrompt += ` Scene: ${processedData.sceneModifications}.`;\n}\n\nif (processedData.backgroundChanges) {\n  transformationPrompt += ` Background: ${processedData.backgroundChanges}.`;\n}\n\nif (processedData.focusAreas) {\n  transformationPrompt += ` Focus: ${processedData.focusAreas}.`;\n}\n\nif (processedData.additionalInstructions) {\n  transformationPrompt += ` Additional: ${processedData.additionalInstructions}.`;\n}\n\n// Add quality and style instructions\ntransformationPrompt += ' Maintain high quality and professional appearance.';\n\n// Set transformation strength parameters\nlet strengthParams = {};\nif (processedData.transformationStrength.includes('Light')) {\n  strengthParams = { guidance: 5, steps: 20 };\n} else if (processedData.transformationStrength.includes('Strong')) {\n  strengthParams = { guidance: 12, steps: 40 };\n} else {\n  strengthParams = { guidance: 7, steps: 28 };\n}\n\nreturn [{\n  json: {\n    ...processedData,\n    transformationPrompt: transformationPrompt,\n    apiType: apiType,\n    isOpenAI: isOpenAI,\n    hasUrl: hasUrl,\n    hasUpload: hasUpload,\n    strengthParams: strengthParams,\n    errors: errors,\n    hasErrors: errors.length > 0,\n    timestamp: new Date().toISOString()\n  }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[60,1240],"id":"e66db00b-7143-4e8a-879c-806c69e9bebd","name":"Process Regenerate Data1"},{"parameters":{"respondWith":"json","responseBody":"={\n  \"status\": \"error\",\n  \"workflow\": \"Image Re-generation\",\n  \"message\": \"Validation failed\",\n  \"errors\": {{ JSON.stringify($json.errors) }},\n  \"timestamp\": \"{{ $json.timestamp }}\"\n}","options":{}},"id":"0f4ce912-a1e5-4540-868a-848c8d346662","name":"Return Regenerate Errors1","type":"n8n-nodes-base.respondToWebhook","position":[460,1140],"typeVersion":1.1},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"has-url","leftValue":"={{ $json.hasUrl }}","rightValue":true,"operator":{"type":"boolean","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[460,1340],"id":"c247ad1e-1afb-45b2-b5b6-546133923fa5","name":"Reference Type Router3"},{"parameters":{"url":"={{ $json.referenceUrl }}","options":{"response":{"response":{"responseFormat":"file"}}}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[660,1240],"id":"a21d657a-996c-435c-b524-61b995e60328","name":"Download Reference Image3","onError":"continueErrorOutput"},{"parameters":{"jsCode":"// Process uploaded reference image for regeneration\nconst item = $input.all()[0];\n\nconsole.log('🔍 Processing uploaded image for regeneration');\n\nif (!item.json.uploadedImage) {\n  throw new Error('No uploaded image found in form data');\n}\n\nconst uploadedFile = item.json.uploadedImage;\nconsole.log('Uploaded file structure:', JSON.stringify(uploadedFile, null, 2));\n\nlet binaryData = null;\nlet mimeType = 'image/jpeg';\nlet fileName = 'reference-image.jpg';\n\n// Extract metadata\nif (uploadedFile.mimetype) mimeType = uploadedFile.mimetype;\nif (uploadedFile.mimeType) mimeType = uploadedFile.mimeType;\nif (uploadedFile.filename) fileName = uploadedFile.filename;\nif (uploadedFile.fileName) fileName = uploadedFile.fileName;\n\n// Extract binary data using multiple approaches\nif (uploadedFile.data) {\n  binaryData = uploadedFile.data;\n} else if (uploadedFile.buffer) {\n  binaryData = uploadedFile.buffer;\n} else if (uploadedFile.content) {\n  binaryData = uploadedFile.content;\n} else if (uploadedFile.file) {\n  binaryData = uploadedFile.file;\n} else if (typeof uploadedFile === 'string') {\n  binaryData = uploadedFile;\n} else {\n  // Check all properties for binary data\n  const keys = Object.keys(uploadedFile);\n  for (const key of keys) {\n    const value = uploadedFile[key];\n    if (value && (typeof value === 'string' || Buffer.isBuffer(value))) {\n      binaryData = value;\n      break;\n    }\n  }\n}\n\nif (!binaryData) {\n  throw new Error(`Could not extract binary data from upload. Available keys: ${Object.keys(uploadedFile).join(', ')}`);\n}\n\nconsole.log('✅ Successfully extracted binary data');\nconsole.log('Binary data type:', typeof binaryData);\nconsole.log('Binary data length:', binaryData.length || 'unknown');\n\n// Return with proper n8n binary structure\nreturn [{\n  json: {\n    ...item.json,\n    referenceProcessed: true,\n    referenceSource: 'upload'\n  },\n  binary: {\n    data: {\n      data: binaryData,\n      mimeType: mimeType,\n      fileName: fileName,\n      fileExtension: fileName.split('.').pop() || 'jpg'\n    }\n  }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[660,1440],"id":"d461faa4-0cea-481e-94cd-02476ef47ec2","name":"Process Upload Reference1"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"is-openai","leftValue":"={{ $json.isOpenAI }}","rightValue":true,"operator":{"type":"boolean","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[860,1340],"id":"6ab79157-71f6-473e-95ec-575b4c7e161c","name":"API Type Router4"},{"parameters":{"method":"POST","url":"https://api.openai.com/v1/images/edits","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"contentType":"multipart-form-data","bodyParameters":{"parameters":[{"parameterType":"formBinaryData","name":"image","inputDataFieldName":"data"},{"name":"prompt","value":"={{ $json.transformationPrompt }}"},{"name":"model","value":"gpt-image-1"},{"name":"size","value":"={{ $json.outputSize }}"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[1060,1240],"id":"f22798c0-d26f-49c4-81d7-720671b3cc74","name":"OpenAI Regenerate1","credentials":{"httpHeaderAuth":{"id":"z06CbCGaeEeBPVIt","name":"GPT Image Generator"}},"onError":"continueErrorOutput"},{"parameters":{"method":"POST","url":"https://freeimage.host/api/1/upload","sendBody":true,"contentType":"multipart-form-data","bodyParameters":{"parameters":[{"parameterType":"formBinaryData","name":"source","inputDataFieldName":"data"},{"name":"key","value":"6d207e02198a847aa98d0a2a901485a5"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[1060,1440],"id":"3490084e-960d-48fc-974f-4e20e4f03553","name":"Upload for Replicate1","onError":"continueErrorOutput"},{"parameters":{"jsCode":"// Prepare Replicate API call for regeneration\nconst item = $input.all()[0];\nconst uploadResponse = item.json;\n\nconsole.log('🚀 Preparing Replicate regeneration call');\nconsole.log('Upload response:', JSON.stringify(uploadResponse, null, 2));\n\n// Check if upload was successful\nif (uploadResponse.status_code !== 200 || !uploadResponse.image || !uploadResponse.image.url) {\n  throw new Error('Reference image upload failed for Replicate API');\n}\n\nconst imageUrl = uploadResponse.image.url;\nconsole.log('✅ Reference image URL:', imageUrl);\n\n// Get original form data to build the API call\nconst originalData = $('Image Regenerate Form1').first().json;\nconst model = originalData['Image Model'];\nconst transformationPrompt = item.json.transformationPrompt || originalData['Style Transformation'];\nconst strengthParams = item.json.strengthParams || { guidance: 7, steps: 28 };\nconst outputSize = originalData['Output Size'] || '1024x1024';\n\n// Create aspect ratio from size\nlet aspectRatio = '1:1';\nif (outputSize === '1024x1536') aspectRatio = '2:3';\nelse if (outputSize === '1536x1024') aspectRatio = '3:2';\n\nconsole.log('✅ Using model:', model);\nconsole.log('✅ Using prompt:', transformationPrompt);\nconsole.log('✅ Strength params:', strengthParams);\n\n// Create the API call structure\nconst apiCall = {\n  url: `https://api.replicate.com/v1/models/${model}/predictions`,\n  method: 'POST',\n  headers: { 'Content-Type': 'application/json' },\n  body: {\n    input: {\n      prompt: transformationPrompt,\n      input_image: imageUrl,\n      aspect_ratio: aspectRatio,\n      steps: strengthParams.steps,\n      guidance: strengthParams.guidance,\n      output_format: 'jpg'\n    }\n  }\n};\n\nconsole.log('✅ Final API call body:', JSON.stringify(apiCall.body, null, 2));\n\nreturn [{\n  json: {\n    ...item.json,\n    apiCall: apiCall,\n    uploadedImageUrl: imageUrl,\n    model: model,\n    transformationPrompt: transformationPrompt\n  },\n  binary: item.binary\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1260,1440],"id":"9fbdffff-6c32-4c24-bccf-fc8a90a85316","name":"Prepare Replicate Call1"},{"parameters":{"method":"POST","url":"={{ $json.apiCall.url }}","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"application/json"}]},"sendBody":true,"specifyBody":"json","jsonBody":"={{ JSON.stringify($json.apiCall.body) }}","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[1460,1440],"id":"34885e7a-eef8-4ff6-8df5-8201fde10af1","name":"Call Replicate Regenerate1","credentials":{"httpHeaderAuth":{"id":"JlfTRouEz1b1K4bJ","name":"Flux Replicate Auth account"}},"onError":"continueErrorOutput"},{"parameters":{"url":"={{ 'https://api.replicate.com/v1/predictions/' + $json.id }}","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[1860,1440],"id":"de598a1d-a315-4cc6-afa2-9f3c894e8be1","name":"Check Regenerate Status1","credentials":{"httpHeaderAuth":{"id":"JlfTRouEz1b1K4bJ","name":"Flux Replicate Auth account"}}},{"parameters":{"url":"={{ Array.isArray($json.output) ? $json.output[0] : $json.output }}","options":{"response":{"response":{"responseFormat":"file"}}}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[2260,1340],"id":"fc2164f9-22d5-4cd1-a774-8eb9d48e3739","name":"Download Regenerate Result1"},{"parameters":{"jsCode":"// Handle API errors for regeneration\nconst item = $input.all()[0];\nconst originalData = $('Image Regenerate Form1').first().json;\n\nlet errorMessage = \"Image regeneration failed\";\nlet errorDetails = item.json;\n\n// Handle specific error types\nif (item.json.error) {\n  if (item.json.error.message) {\n    errorMessage = item.json.error.message;\n  }\n} else if (item.json.message) {\n  errorMessage = item.json.message;\n} else if (item.json.status_code && item.json.status_code !== 200) {\n  errorMessage = `API returned status ${item.json.status_code}`;\n}\n\nreturn [{\n  json: {\n    status: \"error\",\n    workflow: \"Image Re-generation\",\n    message: errorMessage,\n    error_details: {\n      api_error: errorDetails,\n      original_request: {\n        title: originalData['Image Title'],\n        model: originalData['Image Model'],\n        style_transformation: originalData['Style Transformation'],\n        reference_source: originalData['Reference Image URL'] ? 'url' : 'upload'\n      }\n    },\n    timestamp: new Date().toISOString()\n  }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1260,1640],"id":"b626ae3f-87fd-4f47-8ae3-8c1c6f96aced","name":"Handle Regenerate API Error1"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"has-url","leftValue":"={{ $json.hasUrl }}","rightValue":true,"operator":{"type":"boolean","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[400,2480],"id":"fbf64c54-8e0f-4c2a-8517-bd11f35c1a5d","name":"Reference Type Router"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"is-openai","leftValue":"={{ $json.isOpenAI }}","rightValue":true,"operator":{"type":"boolean","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[800,2480],"id":"0ba99968-7bfa-41fa-9485-e058c21980f2","name":"API Type Router"},{"parameters":{"path":"4975cc97-291b-4b39-a4ca-1390d71a1716","formTitle":"Image Editing - Specific Modifications","formDescription":"Make precise edits to existing images: change colors, add/remove objects, modify details","formFields":{"values":[{"fieldLabel":"Image Title","placeholder":"My Edited Image","requiredField":true},{"fieldLabel":"Editing Model","fieldType":"dropdown","fieldOptions":{"values":[{"option":"openai/gpt-image-1"},{"option":"black-forest-labs/flux-kontext-dev"},{"option":"black-forest-labs/flux-kontext-pro"},{"option":"black-forest-labs/flux-1.1-pro-ultra"},{"option":"stability-ai/sdxl-turbo"}]},"requiredField":true},{"fieldLabel":"Reference Image URL","placeholder":"https://example.com/your-image-to-edit.jpg"},{"fieldLabel":"Upload Image to Edit","fieldType":"file","multipleFiles":false},{"fieldLabel":"Editing Instructions","fieldType":"textarea","placeholder":"Change the car color from red to blue, turn on the headlights, add racing stripes","requiredField":true},{"fieldLabel":"Objects to Add","fieldType":"textarea","placeholder":"Add sunglasses to the person, include a coffee cup on the table, add clouds to the sky"},{"fieldLabel":"Objects to Remove","fieldType":"textarea","placeholder":"Remove the background people, delete the power lines, eliminate the watermark"},{"fieldLabel":"Color Changes","fieldType":"textarea","placeholder":"Change shirt from white to black, make the car metallic silver, brighten the overall colors"},{"fieldLabel":"Lighting/Effects Changes","fieldType":"textarea","placeholder":"Add dramatic shadows, brighten the scene, add lens flare, make it look like sunset"},{"fieldLabel":"Details to Preserve","fieldType":"textarea","placeholder":"Keep the person's face exactly the same, maintain the logo unchanged, preserve the background building"},{"fieldLabel":"Output Quality","fieldType":"dropdown","fieldOptions":{"values":[{"option":"Standard Quality"},{"option":"High Quality"},{"option":"Ultra High Quality"}]}},{"fieldLabel":"Edit Precision","fieldType":"dropdown","fieldOptions":{"values":[{"option":"Subtle edits (minimal changes)"},{"option":"Moderate edits (noticeable changes)"},{"option":"Bold edits (significant modifications)"}]}},{"fieldLabel":"Output Size","fieldType":"dropdown","fieldOptions":{"values":[{"option":"1024x1024"},{"option":"1024x1536"},{"option":"1536x1024"}]}}]},"responseMode":"responseNode","options":{}},"id":"a775218d-5c44-45e5-8363-cf81e201f9fa","name":"Image Editing Form1","type":"n8n-nodes-base.formTrigger","position":[-200,2380],"webhookId":"4975cc97-291b-4b39-a4ca-1390d71a1716","typeVersion":2.1},{"parameters":{"jsCode":"// Process and validate form data for image editing\nconst formData = $json;\n\n// Extract and clean form data\nconst processedData = {\n  title: formData['Image Title'] || '',\n  model: formData['Editing Model'] || '',\n  referenceUrl: formData['Reference Image URL'] || '',\n  uploadedImage: formData['Upload Image to Edit'] || null,\n  editingInstructions: formData['Editing Instructions'] || '',\n  objectsToAdd: formData['Objects to Add'] || '',\n  objectsToRemove: formData['Objects to Remove'] || '',\n  colorChanges: formData['Color Changes'] || '',\n  lightingEffects: formData['Lighting/Effects Changes'] || '',\n  detailsToPreserve: formData['Details to Preserve'] || '',\n  outputQuality: formData['Output Quality'] || 'Standard Quality',\n  editPrecision: formData['Edit Precision'] || 'Moderate edits (noticeable changes)',\n  outputSize: formData['Output Size'] || '1024x1024'\n};\n\n// Validation\nconst errors = [];\nif (!processedData.title.trim()) errors.push('Image Title is required');\nif (!processedData.model) errors.push('Editing Model is required');\nif (!processedData.editingInstructions.trim()) errors.push('Editing Instructions are required');\n\n// Reference image validation\nconst hasUrl = processedData.referenceUrl.trim().length > 0;\nconst hasUpload = processedData.uploadedImage !== null;\n\nif (!hasUrl && !hasUpload) {\n  errors.push('Image to edit is required - provide either URL or upload a file');\n}\n\nif (hasUrl && hasUpload) {\n  errors.push('Please provide either URL or upload - not both');\n}\n\n// Determine API type and settings\nconst isOpenAI = processedData.model === 'openai/gpt-image-1';\nconst isFluxKontext = processedData.model.includes('flux-kontext');\nconst apiType = isOpenAI ? 'openai' : 'replicate';\n\n// Build comprehensive editing prompt\nlet editingPrompt = `Edit this image: ${processedData.editingInstructions}`;\n\nif (processedData.objectsToAdd) {\n  editingPrompt += ` Add: ${processedData.objectsToAdd}.`;\n}\n\nif (processedData.objectsToRemove) {\n  editingPrompt += ` Remove: ${processedData.objectsToRemove}.`;\n}\n\nif (processedData.colorChanges) {\n  editingPrompt += ` Color changes: ${processedData.colorChanges}.`;\n}\n\nif (processedData.lightingEffects) {\n  editingPrompt += ` Lighting/Effects: ${processedData.lightingEffects}.`;\n}\n\nif (processedData.detailsToPreserve) {\n  editingPrompt += ` Important: preserve ${processedData.detailsToPreserve} exactly as they are.`;\n}\n\n// Add quality and precision instructions\neditingPrompt += ' Maintain professional image quality and realistic appearance.';\n\n// Set precision parameters based on edit precision\nlet precisionParams = {};\nif (processedData.editPrecision.includes('Subtle')) {\n  precisionParams = { guidance: 3, steps: 15, strength: 0.3 };\n} else if (processedData.editPrecision.includes('Bold')) {\n  precisionParams = { guidance: 10, steps: 35, strength: 0.8 };\n} else {\n  precisionParams = { guidance: 6, steps: 25, strength: 0.5 };\n}\n\n// Set quality parameters\nlet qualityParams = {};\nif (processedData.outputQuality.includes('Ultra')) {\n  qualityParams = { steps: Math.max(precisionParams.steps + 10, 40) };\n} else if (processedData.outputQuality.includes('High')) {\n  qualityParams = { steps: Math.max(precisionParams.steps + 5, 30) };\n} else {\n  qualityParams = { steps: precisionParams.steps };\n}\n\nreturn [{\n  json: {\n    ...processedData,\n    editingPrompt: editingPrompt,\n    apiType: apiType,\n    isOpenAI: isOpenAI,\n    isFluxKontext: isFluxKontext,\n    hasUrl: hasUrl,\n    hasUpload: hasUpload,\n    precisionParams: precisionParams,\n    qualityParams: qualityParams,\n    errors: errors,\n    hasErrors: errors.length > 0,\n    timestamp: new Date().toISOString()\n  }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[0,2380],"id":"8409281d-f355-456d-8b91-06191d08534e","name":"Process Editing Data1"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"has-errors","leftValue":"={{ $json.hasErrors }}","rightValue":true,"operator":{"type":"boolean","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[200,2380],"id":"17e81988-4b37-4b1e-8e8e-e8462d995ee3","name":"Check for Errors1"},{"parameters":{"respondWith":"json","responseBody":"={\n  \"status\": \"error\",\n  \"workflow\": \"Image Editing\",\n  \"message\": \"Validation failed\",\n  \"errors\": {{ JSON.stringify($json.errors) }},\n  \"timestamp\": \"{{ $json.timestamp }}\"\n}","options":{}},"id":"90110d96-ddcf-44ab-b10b-0fe9c892385d","name":"Return Editing Errors1","type":"n8n-nodes-base.respondToWebhook","position":[400,2280],"typeVersion":1.1},{"parameters":{"url":"={{ $json.referenceUrl }}","options":{"response":{"response":{"responseFormat":"file"}}}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[600,2380],"id":"dbacd2ee-bbfb-43d8-856d-603cbb2e2cdb","name":"Download Image to Edit1","onError":"continueErrorOutput"},{"parameters":{"jsCode":"// Process uploaded image for editing\nconst item = $input.all()[0];\n\nconsole.log('🔍 Processing uploaded image for editing');\n\nif (!item.json.uploadedImage) {\n  throw new Error('No uploaded image found in form data');\n}\n\nconst uploadedFile = item.json.uploadedImage;\nconsole.log('Uploaded file structure:', JSON.stringify(uploadedFile, null, 2));\n\nlet binaryData = null;\nlet mimeType = 'image/jpeg';\nlet fileName = 'image-to-edit.jpg';\n\n// Extract metadata\nif (uploadedFile.mimetype) mimeType = uploadedFile.mimetype;\nif (uploadedFile.mimeType) mimeType = uploadedFile.mimeType;\nif (uploadedFile.filename) fileName = uploadedFile.filename;\nif (uploadedFile.fileName) fileName = uploadedFile.fileName;\n\n// Extract binary data using multiple approaches\nif (uploadedFile.data) {\n  binaryData = uploadedFile.data;\n} else if (uploadedFile.buffer) {\n  binaryData = uploadedFile.buffer;\n} else if (uploadedFile.content) {\n  binaryData = uploadedFile.content;\n} else if (uploadedFile.file) {\n  binaryData = uploadedFile.file;\n} else if (typeof uploadedFile === 'string') {\n  binaryData = uploadedFile;\n} else {\n  // Check all properties for binary data\n  const keys = Object.keys(uploadedFile);\n  for (const key of keys) {\n    const value = uploadedFile[key];\n    if (value && (typeof value === 'string' || Buffer.isBuffer(value))) {\n      binaryData = value;\n      break;\n    }\n  }\n}\n\nif (!binaryData) {\n  throw new Error(`Could not extract binary data from upload. Available keys: ${Object.keys(uploadedFile).join(', ')}`);\n}\n\nconsole.log('✅ Successfully extracted binary data for editing');\nconsole.log('Binary data type:', typeof binaryData);\nconsole.log('Binary data length:', binaryData.length || 'unknown');\n\n// Return with proper n8n binary structure\nreturn [{\n  json: {\n    ...item.json,\n    imageProcessed: true,\n    imageSource: 'upload'\n  },\n  binary: {\n    data: {\n      data: binaryData,\n      mimeType: mimeType,\n      fileName: fileName,\n      fileExtension: fileName.split('.').pop() || 'jpg'\n    }\n  }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[600,2580],"id":"b5e1c51d-dbc1-43de-abdb-12ab40cd070e","name":"Process Upload for Editing1"},{"parameters":{"method":"POST","url":"https://api.openai.com/v1/images/edits","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"contentType":"multipart-form-data","bodyParameters":{"parameters":[{"parameterType":"formBinaryData","name":"image","inputDataFieldName":"data"},{"name":"prompt","value":"={{ $json.editingPrompt }}"},{"name":"model","value":"gpt-image-1"},{"name":"size","value":"={{ $json.outputSize }}"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[1000,2380],"id":"449e169f-74fa-4c1e-89d8-98d6f8d679f4","name":"OpenAI Image Edit1","credentials":{"httpHeaderAuth":{"id":"z06CbCGaeEeBPVIt","name":"GPT Image Generator"}},"onError":"continueErrorOutput"},{"parameters":{"method":"POST","url":"https://freeimage.host/api/1/upload","sendBody":true,"contentType":"multipart-form-data","bodyParameters":{"parameters":[{"parameterType":"formBinaryData","name":"source","inputDataFieldName":"data"},{"name":"key","value":"6d207e02198a847aa98d0a2a901485a5"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[1000,2580],"id":"d998ee8d-20c3-44c5-aa17-807c070f810e","name":"Upload for Replicate Edit1","onError":"continueErrorOutput"},{"parameters":{"jsCode":"// Prepare Replicate API call for image editing\nconst item = $input.all()[0];\nconst uploadResponse = item.json;\n\nconsole.log('🛠️ Preparing Replicate editing call');\nconsole.log('Upload response:', JSON.stringify(uploadResponse, null, 2));\n\n// Check if upload was successful\nif (uploadResponse.status_code !== 200 || !uploadResponse.image || !uploadResponse.image.url) {\n  throw new Error('Image upload failed for Replicate editing API');\n}\n\nconst imageUrl = uploadResponse.image.url;\nconsole.log('✅ Image to edit URL:', imageUrl);\n\n// Get original form data to build the API call\nconst originalData = $('Image Editing Form1').first().json;\nconst model = originalData['Editing Model'];\nconst editingPrompt = item.json.editingPrompt || originalData['Editing Instructions'];\nconst precisionParams = item.json.precisionParams || { guidance: 6, steps: 25, strength: 0.5 };\nconst qualityParams = item.json.qualityParams || { steps: 25 };\nconst outputSize = originalData['Output Size'] || '1024x1024';\n\n// Create aspect ratio from size\nlet aspectRatio = '1:1';\nif (outputSize === '1024x1536') aspectRatio = '2:3';\nelse if (outputSize === '1536x1024') aspectRatio = '3:2';\n\n// Combine precision and quality parameters\nconst finalSteps = Math.max(precisionParams.steps, qualityParams.steps);\n\nconsole.log('✅ Using editing model:', model);\nconsole.log('✅ Using editing prompt:', editingPrompt);\nconsole.log('✅ Precision params:', precisionParams);\nconsole.log('✅ Final steps:', finalSteps);\n\n// Create the API call structure based on model type\nlet apiCallBody = {};\n\nif (model.includes('flux-kontext')) {\n  // Flux Kontext models use input_image and specific parameters\n  apiCallBody = {\n    input: {\n      prompt: editingPrompt,\n      input_image: imageUrl,\n      output_format: 'jpg'\n    }\n  };\n} else {\n  // Other Replicate models (flux-1.1-pro-ultra, sdxl-turbo)\n  apiCallBody = {\n    input: {\n      prompt: editingPrompt,\n      input_image: imageUrl,\n      aspect_ratio: aspectRatio,\n      steps: finalSteps,\n      guidance: precisionParams.guidance,\n      strength: precisionParams.strength,\n      output_format: 'jpg'\n    }\n  };\n}\n\nconst apiCall = {\n  url: `https://api.replicate.com/v1/models/${model}/predictions`,\n  method: 'POST',\n  headers: { 'Content-Type': 'application/json' },\n  body: apiCallBody\n};\n\nconsole.log('✅ Final editing API call body:', JSON.stringify(apiCall.body, null, 2));\n\nreturn [{\n  json: {\n    ...item.json,\n    apiCall: apiCall,\n    uploadedImageUrl: imageUrl,\n    model: model,\n    editingPrompt: editingPrompt,\n    finalSteps: finalSteps\n  },\n  binary: item.binary\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1200,2580],"id":"d1ac0ce0-a2a7-4841-a8bc-ea710467de9c","name":"Prepare Replicate Edit Call1"},{"parameters":{"method":"POST","url":"={{ $json.apiCall.url }}","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"application/json"}]},"sendBody":true,"specifyBody":"json","jsonBody":"={{ JSON.stringify($json.apiCall.body) }}","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[1400,2580],"id":"467c0abc-b030-42c9-8fb3-ce01bde185f5","name":"Call Replicate Edit1","credentials":{"httpHeaderAuth":{"id":"JlfTRouEz1b1K4bJ","name":"Flux Replicate Auth account"}},"onError":"continueErrorOutput"},{"parameters":{"operation":"toBinary","sourceProperty":"data[0].b64_json","options":{}},"type":"n8n-nodes-base.convertToFile","typeVersion":1.1,"position":[1200,2380],"id":"63d4cc5c-6256-48ee-8878-288ac05e3076","name":"Convert OpenAI Edit Response1"},{"parameters":{"amount":15},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[1600,2580],"id":"efd51828-9787-4ab8-bb6c-c814ba33c394","name":"Wait for Edit Processing1","webhookId":"replicate-editing-wait"},{"parameters":{"url":"={{ 'https://api.replicate.com/v1/predictions/' + $json.id }}","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[1800,2580],"id":"074c02e4-871b-4675-9493-01fb88742eee","name":"Check Edit Status1","credentials":{"httpHeaderAuth":{"id":"JlfTRouEz1b1K4bJ","name":"Flux Replicate Auth account"}}},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"is-complete","leftValue":"={{ $json.status }}","rightValue":"succeeded","operator":{"type":"string","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[2000,2580],"id":"015f2239-ba46-4645-ac1e-f68e7bad7c75","name":"Check if Edit Complete1"},{"parameters":{"url":"={{ Array.isArray($json.output) ? $json.output[0] : $json.output }}","options":{"response":{"response":{"responseFormat":"file"}}}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[2200,2480],"id":"0247ce30-fab4-414f-93a6-fb271da7f1c7","name":"Download Edited Image1"},{"parameters":{"amount":10},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[2200,2680],"id":"ece94ae5-8ff0-49db-9473-c177cb49f2c7","name":"Wait and Retry Edit1","webhookId":"editing-retry-wait"},{"parameters":{"operation":"binaryToPropery","destinationKey":"image_base64","options":{}},"type":"n8n-nodes-base.extractFromFile","typeVersion":1,"position":[1400,2380],"id":"dca5d44c-5812-4c43-93ac-7ba0fd6239a3","name":"Convert to Base68"},{"parameters":{"jsCode":"// Final response for Image Editing workflow\nconst item = $input.all()[0];\nconst originalData = $('Image Editing Form1').first().json;\n\n// Check if this is an error response\nif (item.json.error || item.json.message) {\n  return [{\n    json: {\n      status: \"error\",\n      workflow: \"Image Editing\",\n      message: item.json.error?.message || item.json.message || \"Image editing failed\",\n      error_details: item.json.error || item.json,\n      timestamp: new Date().toISOString()\n    }\n  }];\n}\n\n// Success response\nreturn [{\n  json: {\n    status: \"success\",\n    workflow: \"Image Editing\",\n    title: originalData['Image Title'],\n    model: originalData['Editing Model'],\n    editing_prompt: item.json.editingPrompt || originalData['Editing Instructions'],\n    image_source: item.json.imageSource || (originalData['Reference Image URL'] ? 'url' : 'upload'),\n    image_base64: item.json.image_base64,\n    metadata: {\n      editing_instructions: originalData['Editing Instructions'],\n      objects_added: originalData['Objects to Add'],\n      objects_removed: originalData['Objects to Remove'],\n      color_changes: originalData['Color Changes'],\n      lighting_effects: originalData['Lighting/Effects Changes'],\n      details_preserved: originalData['Details to Preserve'],\n      output_quality: originalData['Output Quality'],\n      edit_precision: originalData['Edit Precision'],\n      output_size: originalData['Output Size'],\n      api_used: item.json.apiType || (originalData['Editing Model'] === 'openai/gpt-image-1' ? 'openai' : 'replicate'),\n      generation_type: \"editing\",\n      had_reference_url: !!originalData['Reference Image URL'],\n      had_upload: !!originalData['Upload Image to Edit'],\n      uploaded_image_url: item.json.uploadedImageUrl || null,\n      precision_params: item.json.precisionParams,\n      final_steps: item.json.finalSteps\n    },\n    timestamp: new Date().toISOString()\n  }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1600,2380],"id":"1be77ae6-2b16-4ccb-bcb0-313fe3732d04","name":"Final Editing Processing1"},{"parameters":{"respondWith":"text","responseBody":"=<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>{{ $json.title }} - Image Editing</title>\n    <style>\n        body {\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n            background: linear-gradient(135deg, #11998e 0%, #38ef7d 100%);\n            margin: 0;\n            padding: 20px;\n            min-height: 100vh;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n        }\n        .container {\n            background: white;\n            border-radius: 20px;\n            box-shadow: 0 20px 40px rgba(0,0,0,0.1);\n            padding: 30px;\n            max-width: 950px;\n            width: 100%;\n            text-align: center;\n        }\n        .status {\n            display: inline-block;\n            padding: 8px 16px;\n            border-radius: 20px;\n            font-weight: bold;\n            margin-bottom: 20px;\n        }\n        .success { background: #d4edda; color: #155724; }\n        .error { background: #f8d7da; color: #721c24; }\n        .image-container {\n            margin: 20px 0;\n            border-radius: 15px;\n            overflow: hidden;\n            box-shadow: 0 10px 25px rgba(0,0,0,0.1);\n            display: inline-block;\n        }\n        .generated-image {\n            max-width: 100%;\n            height: auto;\n            display: block;\n        }\n        .metadata {\n            background: #f8f9fa;\n            border-radius: 10px;\n            padding: 20px;\n            margin: 20px 0;\n            text-align: left;\n        }\n        .metadata h3 {\n            margin-top: 0;\n            color: #495057;\n        }\n        .metadata-item {\n            margin: 8px 0;\n            padding: 5px 0;\n            border-bottom: 1px solid #e9ecef;\n        }\n        .metadata-item:last-child {\n            border-bottom: none;\n        }\n        .label {\n            font-weight: bold;\n            color: #6c757d;\n            display: inline-block;\n            min-width: 140px;\n        }\n        .download-btn {\n            background: linear-gradient(45deg, #11998e, #38ef7d);\n            color: white;\n            padding: 12px 24px;\n            border: none;\n            border-radius: 25px;\n            font-size: 16px;\n            cursor: pointer;\n            text-decoration: none;\n            display: inline-block;\n            margin: 10px;\n            transition: transform 0.2s;\n        }\n        .download-btn:hover {\n            transform: translateY(-2px);\n            box-shadow: 0 5px 15px rgba(0,0,0,0.2);\n        }\n        .json-btn {\n            background: linear-gradient(45deg, #6c757d, #495057);\n            color: white;\n            padding: 8px 16px;\n            border: none;\n            border-radius: 20px;\n            font-size: 14px;\n            cursor: pointer;\n            margin: 10px;\n        }\n        .json-data {\n            display: none;\n            background: #f8f9fa;\n            border: 1px solid #dee2e6;\n            border-radius: 5px;\n            padding: 15px;\n            margin-top: 10px;\n            text-align: left;\n            font-family: monospace;\n            font-size: 12px;\n            white-space: pre-wrap;\n            max-height: 300px;\n            overflow-y: auto;\n        }\n        h1 {\n            color: #343a40;\n            margin-bottom: 10px;\n        }\n        .workflow-badge {\n            background: linear-gradient(45deg, #11998e, #38ef7d);\n            color: white;\n            padding: 4px 12px;\n            border-radius: 15px;\n            font-size: 12px;\n            font-weight: bold;\n        }\n        .editing-sections {\n            display: grid;\n            grid-template-columns: 1fr 1fr;\n            gap: 15px;\n            margin: 20px 0;\n        }\n        .edit-section {\n            background: linear-gradient(45deg, #e8f5e8, #f0fff0);\n            border-radius: 10px;\n            padding: 15px;\n            border-left: 4px solid #28a745;\n            text-align: left;\n        }\n        .edit-section h4 {\n            margin: 0 0 10px 0;\n            color: #155724;\n            font-size: 14px;\n        }\n        .edit-section p {\n            margin: 5px 0;\n            font-size: 13px;\n            color: #495057;\n        }\n        .source-badge {\n            background: #6c757d;\n            color: white;\n            padding: 2px 8px;\n            border-radius: 10px;\n            font-size: 11px;\n            font-weight: bold;\n        }\n        .precision-badge {\n            background: #17a2b8;\n            color: white;\n            padding: 2px 8px;\n            border-radius: 10px;\n            font-size: 11px;\n            font-weight: bold;\n        }\n        .quality-badge {\n            background: #6f42c1;\n            color: white;\n            padding: 2px 8px;\n            border-radius: 10px;\n            font-size: 11px;\n            font-weight: bold;\n        }\n        @media (max-width: 768px) {\n            .editing-sections {\n                grid-template-columns: 1fr;\n            }\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"workflow-badge\">{{ $json.workflow }}</div>\n        <h1>{{ $json.title }}</h1>\n        \n        <div class=\"status {{ $json.status === 'success' ? 'success' : 'error' }}\">\n            {{ $json.status === 'success' ? '✏️ Editing Successful' : '❌ Editing Failed' }}\n        </div>\n\n        {{ $json.status === 'success' ? '\n        <div class=\"image-container\">\n            <img src=\"data:image/jpeg;base64,' + $json.image_base64 + '\" alt=\"Edited Image\" class=\"generated-image\" />\n        </div>\n        \n        <a href=\"data:image/jpeg;base64,' + $json.image_base64 + '\" download=\"' + $json.title.replace(/[^a-zA-Z0-9]/g, '_') + '_edited.jpg\" class=\"download-btn\">\n            📥 Download Edited Image\n        </a>' : '' }}\n\n        {{ $json.status === 'success' ? '\n        <div class=\"editing-sections\">\n            ' + ($json.metadata?.objects_added ? '<div class=\"edit-section\"><h4>➕ Objects Added</h4><p>' + $json.metadata.objects_added + '</p></div>' : '') + '\n            ' + ($json.metadata?.objects_removed ? '<div class=\"edit-section\"><h4>➖ Objects Removed</h4><p>' + $json.metadata.objects_removed + '</p></div>' : '') + '\n            ' + ($json.metadata?.color_changes ? '<div class=\"edit-section\"><h4>🎨 Color Changes</h4><p>' + $json.metadata.color_changes + '</p></div>' : '') + '\n            ' + ($json.metadata?.lighting_effects ? '<div class=\"edit-section\"><h4>💡 Lighting/Effects</h4><p>' + $json.metadata.lighting_effects + '</p></div>' : '') + '\n            ' + ($json.metadata?.details_preserved ? '<div class=\"edit-section\"><h4>🔒 Preserved Details</h4><p>' + $json.metadata.details_preserved + '</p></div>' : '') + '\n            <div class=\"edit-section\"><h4>🎯 Main Instructions</h4><p>' + ($json.metadata?.editing_instructions || 'N/A') + '</p></div>\n        </div>' : '' }}\n\n        <div class=\"metadata\">\n            <h3>Editing Details</h3>\n            <div class=\"metadata-item\">\n                <span class=\"label\">Model:</span> {{ $json.model || 'N/A' }}\n            </div>\n            <div class=\"metadata-item\">\n                <span class=\"label\">Image Source:</span> \n                <span class=\"source-badge\">{{ $json.image_source === 'url' ? 'URL' : 'UPLOAD' }}</span>\n            </div>\n            <div class=\"metadata-item\">\n                <span class=\"label\">Edit Precision:</span> \n                <span class=\"precision-badge\">{{ $json.metadata?.edit_precision || 'N/A' }}</span>\n            </div>\n            <div class=\"metadata-item\">\n                <span class=\"label\">Output Quality:</span> \n                <span class=\"quality-badge\">{{ $json.metadata?.output_quality || 'N/A' }}</span>\n            </div>\n            {{ $json.metadata?.output_size ? '<div class=\"metadata-item\"><span class=\"label\">Output Size:</span> ' + $json.metadata.output_size + '</div>' : '' }}\n            <div class=\"metadata-item\">\n                <span class=\"label\">API Used:</span> {{ $json.metadata?.api_used || 'N/A' }}\n            </div>\n            {{ $json.metadata?.uploaded_image_url ? '<div class=\"metadata-item\"><span class=\"label\">Original URL:</span> <a href=\"' + $json.metadata.uploaded_image_url + '\" target=\"_blank\">View Original</a></div>' : '' }}\n            {{ $json.metadata?.final_steps ? '<div class=\"metadata-item\"><span class=\"label\">Processing Steps:</span> ' + $json.metadata.final_steps + '</div>' : '' }}\n            {{ $json.metadata?.precision_params ? '<div class=\"metadata-item\"><span class=\"label\">Guidance:</span> ' + $json.metadata.precision_params.guidance + ' | Strength: ' + $json.metadata.precision_params.strength + '</div>' : '' }}\n            <div class=\"metadata-item\">\n                <span class=\"label\">Timestamp:</span> {{ $json.timestamp }}\n            </div>\n        </div>\n\n        <button class=\"json-btn\" onclick=\"toggleJson()\">Show JSON Data</button>\n        <div id=\"jsonData\" class=\"json-data\">{{ JSON.stringify($json, null, 2) }}</div>\n    </div>\n\n    <script>\n        function toggleJson() {\n            const jsonData = document.getElementById('jsonData');\n            const btn = event.target;\n            if (jsonData.style.display === 'none' || !jsonData.style.display) {\n                jsonData.style.display = 'block';\n                btn.textContent = 'Hide JSON Data';\n            } else {\n                jsonData.style.display = 'none';\n                btn.textContent = 'Show JSON Data';\n            }\n        }\n    </script>\n</body>\n</html>","options":{}},"id":"77543997-dfc4-483d-b4f3-292e12420993","name":"Final Editing Response1","type":"n8n-nodes-base.respondToWebhook","position":[1800,2380],"typeVersion":1.1},{"parameters":{"jsCode":"// Handle API errors for image editing\nconst item = $input.all()[0];\nconst originalData = $('Image Editing Form1').first().json;\n\nlet errorMessage = \"Image editing failed\";\nlet errorDetails = item.json;\n\n// Handle specific error types\nif (item.json.error) {\n  if (item.json.error.message) {\n    errorMessage = item.json.error.message;\n  }\n} else if (item.json.message) {\n  errorMessage = item.json.message;\n} else if (item.json.status_code && item.json.status_code !== 200) {\n  errorMessage = `API returned status ${item.json.status_code}`;\n} else if (item.json.detail) {\n  errorMessage = item.json.detail;\n}\n\nreturn [{\n  json: {\n    status: \"error\",\n    workflow: \"Image Editing\",\n    message: errorMessage,\n    error_details: {\n      api_error: errorDetails,\n      original_request: {\n        title: originalData['Image Title'],\n        model: originalData['Editing Model'],\n        editing_instructions: originalData['Editing Instructions'],\n        image_source: originalData['Reference Image URL'] ? 'url' : 'upload'\n      }\n    },\n    timestamp: new Date().toISOString()\n  }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1200,2780],"id":"add24ca5-270e-4c5c-9b3b-0fac221c45d5","name":"Handle Editing API Error1"},{"parameters":{"path":"1b85cc1b-c5d0-48c4-85c3-437ed66d801f","formTitle":"Image with or without Captions from Reference","formDescription":"Transform reference images and optionally add professional text overlays/captions","formFields":{"values":[{"fieldLabel":"Image Title","placeholder":"My Captioned Image","requiredField":true},{"fieldLabel":"Processing Model","fieldType":"dropdown","fieldOptions":{"values":[{"option":"openai/gpt-image-1"},{"option":"black-forest-labs/flux-kontext-pro"},{"option":"black-forest-labs/flux-kontext-dev"},{"option":"stability-ai/stable-diffusion-3.5-large"},{"option":"recraft-ai/recraft-v3"},{"option":"ideogram-ai/ideogram-v2"}]},"requiredField":true},{"fieldLabel":"Reference Image URL","placeholder":"https://example.com/your-reference-image.jpg"},{"fieldLabel":"Upload Reference Image","fieldType":"file","multipleFiles":false},{"fieldLabel":"Processing Type","fieldType":"dropdown","fieldOptions":{"values":[{"option":"Add Caption Only"},{"option":"Transform Image + Add Caption"},{"option":"Transform Image (No Caption)"},{"option":"Professional Headshot + Caption"},{"option":"Product Photo + Caption"}]},"requiredField":true},{"fieldLabel":"Image Transformation","fieldType":"textarea","placeholder":"Make it look more professional, enhance lighting, improve background, convert to portrait style, etc."},{"fieldLabel":"Scene Context","fieldType":"textarea","placeholder":"Professional office setting, outdoor natural environment, studio photography, etc."},{"fieldLabel":"Add Caption?","fieldType":"dropdown","fieldOptions":{"values":[{"option":"No Caption"},{"option":"Add Caption"}]}},{"fieldLabel":"Caption Text","placeholder":"John Smith, CEO | Limited Time Offer! | Call (555) 123-4567"},{"fieldLabel":"Caption Position","fieldType":"dropdown","fieldOptions":{"values":[{"option":"bottom-center"},{"option":"bottom-left"},{"option":"bottom-right"},{"option":"top-center"},{"option":"top-left"},{"option":"top-right"},{"option":"center"},{"option":"lower-third"},{"option":"upper-third"}]}},{"fieldLabel":"Caption Style","fieldType":"dropdown","fieldOptions":{"values":[{"option":"Bold white text with black shadow"},{"option":"Professional black text on white background"},{"option":"Modern sans-serif white text"},{"option":"Elegant serif text with transparency"},{"option":"Bold colored text (brand colors)"},{"option":"Minimal clean text overlay"},{"option":"Corporate professional style"},{"option":"Social media style text"}]}},{"fieldLabel":"Caption Size","fieldType":"dropdown","fieldOptions":{"values":[{"option":"Small (subtle)"},{"option":"Medium (standard)"},{"option":"Large (prominent)"},{"option":"Extra Large (headline style)"}]}},{"fieldLabel":"Brand Colors","placeholder":"Blue (#0066CC), Red (#CC0000), Corporate colors to use in caption"},{"fieldLabel":"Background Enhancement","fieldType":"dropdown","fieldOptions":{"values":[{"option":"Keep Original Background"},{"option":"Professional Studio Background"},{"option":"Clean White Background"},{"option":"Subtle Gradient Background"},{"option":"Corporate Environment"},{"option":"Natural Outdoor Setting"}]}},{"fieldLabel":"Output Quality","fieldType":"dropdown","fieldOptions":{"values":[{"option":"Standard Quality"},{"option":"High Quality"},{"option":"Ultra High Quality (slow)"}]}},{"fieldLabel":"Output Size","fieldType":"dropdown","fieldOptions":{"values":[{"option":"1024x1024"},{"option":"1024x1536"},{"option":"1536x1024"},{"option":"Social Media (1080x1080)"},{"option":"Story Format (1080x1920)"}]}}]},"responseMode":"responseNode","options":{}},"id":"922d99e8-2f42-4ba3-b746-47d4ffc5fa0a","name":"Caption Reference Form1","type":"n8n-nodes-base.formTrigger","position":[-260,3420],"webhookId":"1b85cc1b-c5d0-48c4-85c3-437ed66d801f","typeVersion":2.1},{"parameters":{"jsCode":"// Process and validate form data for caption/reference workflow\nconst formData = $json;\n\n// Extract and clean form data\nconst processedData = {\n  title: formData['Image Title'] || '',\n  model: formData['Processing Model'] || '',\n  referenceUrl: formData['Reference Image URL'] || '',\n  uploadedImage: formData['Upload Reference Image'] || null, // Preserve original upload data\n  processingType: formData['Processing Type'] || '',\n  imageTransformation: formData['Image Transformation'] || '',\n  sceneContext: formData['Scene Context'] || '',\n  addCaption: formData['Add Caption?'] === 'Add Caption',\n  captionText: formData['Caption Text'] || '',\n  captionPosition: formData['Caption Position'] || 'bottom-center',\n  captionStyle: formData['Caption Style'] || 'Bold white text with black shadow',\n  captionSize: formData['Caption Size'] || 'Medium (standard)',\n  brandColors: formData['Brand Colors'] || '',\n  backgroundEnhancement: formData['Background Enhancement'] || 'Keep Original Background',\n  outputQuality: formData['Output Quality'] || 'Standard Quality',\n  outputSize: formData['Output Size'] || '1024x1024'\n};\n\n// Validation\nconst errors = [];\nif (!processedData.title.trim()) errors.push('Image Title is required');\nif (!processedData.model) errors.push('Processing Model is required');\nif (!processedData.processingType) errors.push('Processing Type is required');\n\n// Reference image validation\nconst hasUrl = processedData.referenceUrl.trim().length > 0;\nconst hasUpload = processedData.uploadedImage !== null;\n\nif (!hasUrl && !hasUpload) {\n  errors.push('Reference image is required - provide either URL or upload a file');\n}\n\nif (hasUrl && hasUpload) {\n  errors.push('Please provide either URL or upload - not both');\n}\n\n// Caption validation\nif (processedData.addCaption && !processedData.captionText.trim()) {\n  errors.push('Caption Text is required when Add Caption is selected');\n}\n\n// Check if model supports captions (primarily OpenAI)\nconst captionOptimizedModels = ['openai/gpt-image-1'];\nif (processedData.addCaption && !captionOptimizedModels.includes(processedData.model)) {\n  // Warning but not error - other models might work\n  console.log(`Warning: ${processedData.model} may have limited caption support. OpenAI models are recommended for text overlays.`);\n}\n\n// Determine API type and processing approach\nconst isOpenAI = processedData.model === 'openai/gpt-image-1';\nconst apiType = isOpenAI ? 'openai' : 'replicate';\n\n// Build comprehensive prompt based on processing type and options\nlet mainPrompt = '';\nlet useEditsAPI = false;\n\nswitch(processedData.processingType) {\n  case 'Add Caption Only':\n    mainPrompt = 'Enhance this image while maintaining its original style and composition';\n    if (processedData.addCaption) {\n      mainPrompt += ` and add professional text overlay: \"${processedData.captionText}\" positioned at ${processedData.captionPosition}`;\n    }\n    useEditsAPI = true;\n    break;\n    \n  case 'Transform Image + Add Caption':\n    mainPrompt = `Transform this image: ${processedData.imageTransformation || 'Enhance to professional quality'}`;\n    if (processedData.sceneContext) {\n      mainPrompt += ` Context: ${processedData.sceneContext}.`;\n    }\n    if (processedData.addCaption) {\n      mainPrompt += ` Include text overlay: \"${processedData.captionText}\" positioned at ${processedData.captionPosition}`;\n    }\n    useEditsAPI = true;\n    break;\n    \n  case 'Transform Image (No Caption)':\n    mainPrompt = `Transform this image: ${processedData.imageTransformation || 'Enhance to professional quality'}`;\n    if (processedData.sceneContext) {\n      mainPrompt += ` Context: ${processedData.sceneContext}.`;\n    }\n    useEditsAPI = true;\n    break;\n    \n  case 'Professional Headshot + Caption':\n    mainPrompt = 'Transform this into a professional headshot with studio lighting, professional background, and polished appearance';\n    if (processedData.addCaption) {\n      mainPrompt += ` Add professional name caption: \"${processedData.captionText}\" positioned at ${processedData.captionPosition}`;\n    }\n    useEditsAPI = true;\n    break;\n    \n  case 'Product Photo + Caption':\n    mainPrompt = 'Transform this into a professional product photograph with clean background, optimal lighting, and commercial quality';\n    if (processedData.addCaption) {\n      mainPrompt += ` Add product caption: \"${processedData.captionText}\" positioned at ${processedData.captionPosition}`;\n    }\n    useEditsAPI = true;\n    break;\n}\n\n// Add background enhancement\nif (processedData.backgroundEnhancement !== 'Keep Original Background') {\n  mainPrompt += ` Background: ${processedData.backgroundEnhancement}.`;\n}\n\n// Add caption styling details if caption is enabled\nif (processedData.addCaption) {\n  mainPrompt += ` Caption style: ${processedData.captionStyle}, size: ${processedData.captionSize}`;\n  \n  if (processedData.brandColors) {\n    mainPrompt += `, incorporate brand colors: ${processedData.brandColors}`;\n  }\n}\n\n// Add quality instructions\nmainPrompt += ' Maintain professional quality and realistic appearance.';\n\n// Set quality parameters\nlet qualityParams = {};\nif (processedData.outputQuality.includes('Ultra')) {\n  qualityParams = { steps: 40, guidance: 8 };\n} else if (processedData.outputQuality.includes('High')) {\n  qualityParams = { steps: 30, guidance: 7 };\n} else {\n  qualityParams = { steps: 25, guidance: 6 };\n}\n\n// Convert output size for APIs\nlet apiSize = processedData.outputSize;\nif (processedData.outputSize.includes('Social Media')) {\n  apiSize = '1024x1024';\n} else if (processedData.outputSize.includes('Story Format')) {\n  apiSize = '1024x1536';\n}\n\n// Always preserve binary data from the form trigger\nconst inputItem = $input.all()[0];\n\nconst returnData = {\n  json: {\n    ...processedData,\n    mainPrompt: mainPrompt,\n    apiType: apiType,\n    isOpenAI: isOpenAI,\n    hasUrl: hasUrl,\n    hasUpload: hasUpload,\n    useEditsAPI: useEditsAPI,\n    qualityParams: qualityParams,\n    apiSize: apiSize,\n    errors: errors,\n    hasErrors: errors.length > 0,\n    timestamp: new Date().toISOString()\n  }\n};\n\n// ALWAYS preserve binary data from input\nif (inputItem.binary) {\n  returnData.binary = inputItem.binary;\n  console.log('✅ Preserved binary data with keys:', Object.keys(inputItem.binary));\n} else {\n  console.log('⚠️ No binary data found in input to preserve');\n}\n\nreturn [returnData];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-60,3420],"id":"e616f2df-0574-4cb3-8976-865f33ea57db","name":"Process Caption Ref Data1"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"has-errors","leftValue":"={{ $json.hasErrors }}","rightValue":true,"operator":{"type":"boolean","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[140,3420],"id":"37ea0b5d-3374-4b40-a03e-98f61e289044","name":"Check for Errors5"},{"parameters":{"respondWith":"json","responseBody":"={\n  \"status\": \"error\",\n  \"workflow\": \"Image Caption from Reference\",\n  \"message\": \"Validation failed\",\n  \"errors\": {{ JSON.stringify($json.errors) }},\n  \"timestamp\": \"{{ $json.timestamp }}\"\n}","options":{}},"id":"6988b67a-fe39-4c68-b5c3-bf6ab9fc8617","name":"Return Caption Ref Errors1","type":"n8n-nodes-base.respondToWebhook","position":[340,3320],"typeVersion":1.1},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"has-url","leftValue":"={{ $json.hasUrl }}","rightValue":true,"operator":{"type":"boolean","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[340,3520],"id":"364fb9f6-689c-4feb-a4a8-69c3a0db93fa","name":"Reference Type Router4"},{"parameters":{"url":"={{ $json.referenceUrl }}","options":{"response":{"response":{"responseFormat":"file"}}}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[540,3420],"id":"39b95a4d-1771-452b-8203-e4cef447e90c","name":"Download Reference for Caption1","onError":"continueErrorOutput"},{"parameters":{"jsCode":"// Debug binary data transfer\nconst item = $input.all()[0];\n\nconsole.log('=== BINARY TRANSFER DEBUG ===');\nconsole.log('Input has binary:', !!item.binary);\n\nif (item.binary) {\n  console.log('Input binary keys:', Object.keys(item.binary));\n  \n  if (item.binary.Upload_Reference_Image) {\n    const binaryData = item.binary.Upload_Reference_Image;\n    console.log('Upload_Reference_Image found:', {\n      hasData: !!binaryData.data,\n      dataType: typeof binaryData.data,\n      dataLength: binaryData.data ? binaryData.data.length : 'no data',\n      mimeType: binaryData.mimeType,\n      fileName: binaryData.fileName\n    });\n    \n    // Try to create a simple return with binary data\n    const result = {\n      json: {\n        ...item.json,\n        referenceProcessed: true,\n        referenceSource: 'upload',\n        binaryDataFound: true\n      },\n      binary: {\n        data: binaryData  // Keep original structure first\n      }\n    };\n    \n    console.log('Created result with binary keys:', Object.keys(result.binary));\n    console.log('Binary data structure:', {\n      hasData: !!result.binary.data.data,\n      mimeType: result.binary.data.mimeType\n    });\n    \n    return [result];\n    \n  } else {\n    console.log('❌ Upload_Reference_Image not found');\n    console.log('Available binary keys:', Object.keys(item.binary));\n  }\n} else {\n  console.log('❌ No binary data in input');\n}\n\n// Fallback - return without binary to see if that works\nreturn [{\n  json: {\n    ...item.json,\n    referenceProcessed: true,\n    referenceSource: 'upload',\n    binaryDataFound: false,\n    error: 'No binary data found'\n  }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[540,3620],"id":"febeb52f-d6f3-4c70-b452-62388435d5d8","name":"Process Upload for Caption1"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"is-openai","leftValue":"={{ $json.isOpenAI }}","rightValue":true,"operator":{"type":"boolean","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[740,3520],"id":"e74de54f-f903-4c47-bafd-3665bad74303","name":"API Type Router5"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"use-edits","leftValue":"={{ $json.useEditsAPI }}","rightValue":true,"operator":{"type":"boolean","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[960,3360],"id":"ca247760-ee4d-418b-a21b-03f6d6fcbc9d","name":"OpenAI Method Router1"},{"parameters":{"method":"POST","url":"https://api.openai.com/v1/images/edits","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"contentType":"multipart-form-data","bodyParameters":{"parameters":[{"parameterType":"formBinaryData","name":"image","inputDataFieldName":"data"},{"name":"prompt","value":"={{ $json.mainPrompt }}"},{"name":"model","value":"gpt-image-1"},{"name":"size","value":"={{ $json.apiSize }}"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[1160,3260],"id":"31b55d97-8481-4b01-bf21-5113b0b220b1","name":"OpenAI Caption Edit1","credentials":{"httpHeaderAuth":{"id":"z06CbCGaeEeBPVIt","name":"GPT Image Generator"}},"onError":"continueErrorOutput"},{"parameters":{"method":"POST","url":"https://api.openai.com/v1/images/generations","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"application/json"}]},"sendBody":true,"specifyBody":"json","jsonBody":"={\n  \"model\": \"gpt-image-1\",\n  \"prompt\": {{ JSON.stringify($json.mainPrompt) }},\n  \"size\": \"{{ $json.apiSize }}\",\n  \"response_format\": \"b64_json\"\n}","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[1160,3440],"id":"d0ab0d63-f733-466c-b428-09afffcdb9ee","name":"OpenAI Caption Generate1","credentials":{"httpHeaderAuth":{"id":"z06CbCGaeEeBPVIt","name":"GPT Image Generator"}},"onError":"continueErrorOutput"},{"parameters":{"operation":"toBinary","sourceProperty":"data[0].b64_json","options":{}},"type":"n8n-nodes-base.convertToFile","typeVersion":1.1,"position":[1360,3360],"id":"97995eea-5355-4c10-afb9-dac2e5b9dd3a","name":"Convert OpenAI Caption1"},{"parameters":{"amount":18},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[1380,3640],"id":"75ee7869-4e85-44ac-a962-9796638715fd","name":"Wait for Caption Processing1","webhookId":"caption-replicate-wait"},{"parameters":{"url":"={{ 'https://api.replicate.com/v1/predictions/' + $json.id }}","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[1720,3540],"id":"62027c10-2b1e-4259-8b15-662f5c824f91","name":"Check Caption Status1","credentials":{"httpHeaderAuth":{"id":"JlfTRouEz1b1K4bJ","name":"Flux Replicate Auth account"}}},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"is-complete","leftValue":"={{ $json.status }}","rightValue":"succeeded","operator":{"type":"string","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[1940,3620],"id":"e0613703-43e5-44ae-ae93-97afbf7229ae","name":"Check if Caption Complete1"},{"parameters":{"url":"={{ Array.isArray($json.output) ? $json.output[0] : $json.output }}","options":{"response":{"response":{"responseFormat":"file"}}}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[2140,3500],"id":"d6753e18-79d7-4104-863b-a91492740d2d","name":"Download Caption Result1"},{"parameters":{"amount":12},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[2140,3720],"id":"e604e913-1dcc-4ef2-ba87-935052bf988d","name":"Wait and Retry Caption1","webhookId":"caption-retry-wait"},{"parameters":{"jsCode":"// Handle API errors for caption workflow\nconst item = $input.all()[0];\nconst originalData = $('Caption Reference Form1').first().json;\n\nlet errorMessage = \"Caption processing failed\";\nlet errorDetails = item.json;\n\n// Handle specific error types\nif (item.json.error) {\n  if (item.json.error.message) {\n    errorMessage = item.json.error.message;\n  }\n} else if (item.json.message) {\n  errorMessage = item.json.message;\n} else if (item.json.status_code && item.json.status_code !== 200) {\n  errorMessage = `API returned status ${item.json.status_code}`;\n} else if (item.json.detail) {\n  errorMessage = item.json.detail;\n}\n\nreturn [{\n  json: {\n    status: \"error\",\n    workflow: \"Image Caption from Reference\",\n    message: errorMessage,\n    error_details: {\n      api_error: errorDetails,\n      original_request: {\n        title: originalData['Image Title'],\n        model: originalData['Processing Model'],\n        processing_type: originalData['Processing Type'],\n        had_caption: originalData['Add Caption?'] === 'Add Caption',\n        reference_source: originalData['Reference Image URL'] ? 'url' : 'upload'\n      }\n    },\n    timestamp: new Date().toISOString()\n  }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1760,3760],"id":"4d800d3f-0339-4a30-9ed0-7c8000210480","name":"Handle Caption API Error1"},{"parameters":{"path":"new-image-generation","formTitle":"New Image Generation (with optional Caption)","formDescription":"Generate brand new images from text prompts, with optional text captions","formFields":{"values":[{"fieldLabel":"Image Title","placeholder":"My Generated Image","requiredField":true},{"fieldLabel":"Image Model","fieldType":"dropdown","fieldOptions":{"values":[{"option":"openai/gpt-image-1"},{"option":"black-forest-labs/flux-schnell"},{"option":"black-forest-labs/flux-dev"},{"option":"black-forest-labs/flux-1.1-pro-ultra"},{"option":"stability-ai/stable-diffusion-3.5-large"},{"option":"stability-ai/sdxl-turbo"},{"option":"recraft-ai/recraft-v3"},{"option":"ideogram-ai/ideogram-v2"},{"option":"bytedance/sdxl-lightning-4step"}]},"requiredField":true},{"fieldLabel":"Main Prompt","fieldType":"textarea","placeholder":"A bustling coffee shop with people working on laptops, warm lighting, modern interior design","requiredField":true},{"fieldLabel":"Image Style","placeholder":"Photorealistic, Cartoon, Abstract, Oil painting, Digital art, Cinematic, etc."},{"fieldLabel":"Background Description","fieldType":"textarea","placeholder":"Modern urban setting, soft gradient, studio lighting, outdoor scene, etc."},{"fieldLabel":"Image Size","fieldType":"dropdown","fieldOptions":{"values":[{"option":"1024x1024"},{"option":"1024x1536"},{"option":"1536x1024"}]}},{"fieldLabel":"Add Caption?","fieldType":"dropdown","fieldOptions":{"values":[{"option":"No Caption"},{"option":"Add Caption"}]}},{"fieldLabel":"Caption Text","placeholder":"Limited Time Offer! | John Smith, CEO | Call Now!"},{"fieldLabel":"Caption Style","placeholder":"Bold white text, bottom-center, professional font, with shadow"},{"fieldLabel":"Caption Position","fieldType":"dropdown","fieldOptions":{"values":[{"option":"bottom-center"},{"option":"bottom-left"},{"option":"bottom-right"},{"option":"top-center"},{"option":"top-left"},{"option":"top-right"},{"option":"center"}]}}]},"responseMode":"responseNode","options":{}},"id":"72af4c85-0d9d-466f-ab72-2f52bdea5dc6","name":"New Image Form","type":"n8n-nodes-base.formTrigger","position":[-80,200],"webhookId":"new-image-generation","typeVersion":2.1},{"parameters":{"jsCode":"// Process and validate form data for new image generation\nconst formData = $json;\n\n// Extract and clean form data\nconst processedData = {\n  title: formData['Image Title'] || '',\n  model: formData['Image Model'] || '',\n  mainPrompt: formData['Main Prompt'] || '',\n  style: formData['Image Style'] || '',\n  background: formData['Background Description'] || '',\n  size: formData['Image Size'] || '1024x1024',\n  addCaption: formData['Add Caption?'] === 'Add Caption',\n  captionText: formData['Caption Text'] || '',\n  captionStyle: formData['Caption Style'] || '',\n  captionPosition: formData['Caption Position'] || 'bottom-center'\n};\n\n// Validation\nconst errors = [];\nif (!processedData.title.trim()) errors.push('Image Title is required');\nif (!processedData.model) errors.push('Image Model is required');\nif (!processedData.mainPrompt.trim()) errors.push('Main Prompt is required');\n\n// Caption validation\nif (processedData.addCaption && !processedData.captionText.trim()) {\n  errors.push('Caption Text is required when Add Caption is selected');\n}\n\n// Check if model supports captions\nconst captionSupportedModels = ['openai/gpt-image-1'];\nif (processedData.addCaption && !captionSupportedModels.includes(processedData.model)) {\n  errors.push(`Captions are only supported with OpenAI models. Selected model: ${processedData.model}`);\n}\n\n// Determine API type\nconst isOpenAI = processedData.model === 'openai/gpt-image-1';\nconst apiType = isOpenAI ? 'openai' : 'replicate';\n\n// Build final prompt\nlet finalPrompt = processedData.mainPrompt;\nif (processedData.style) {\n  finalPrompt = `${processedData.style} style. ${finalPrompt}`;\n}\nif (processedData.background) {\n  finalPrompt += ` Background: ${processedData.background}.`;\n}\n\n// Add caption to prompt if needed (OpenAI can handle text in prompts)\nif (processedData.addCaption && isOpenAI) {\n  finalPrompt += ` Include text overlay: \"${processedData.captionText}\" positioned at ${processedData.captionPosition}. ${processedData.captionStyle ? 'Style: ' + processedData.captionStyle : ''}`;\n}\n\nreturn [{\n  json: {\n    ...processedData,\n    finalPrompt: finalPrompt,\n    apiType: apiType,\n    isOpenAI: isOpenAI,\n    errors: errors,\n    hasErrors: errors.length > 0,\n    timestamp: new Date().toISOString()\n  }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[120,200],"id":"10b8ed10-c382-4600-a4f1-ce65e4d39f07","name":"Process Form Data"},{"parameters":{"respondWith":"json","responseBody":"={\n  \"status\": \"error\",\n  \"workflow\": \"New Image Generation\",\n  \"message\": \"Validation failed\",\n  \"errors\": {{ JSON.stringify($json.errors) }},\n  \"timestamp\": \"{{ $json.timestamp }}\"\n}","options":{}},"id":"12f9cc3b-0e9a-43ea-8435-e478ad7ffca5","name":"Return Validation Errors","type":"n8n-nodes-base.respondToWebhook","position":[520,100],"typeVersion":1.1},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"is-openai","leftValue":"={{ $json.isOpenAI }}","rightValue":true,"operator":{"type":"boolean","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[520,300],"id":"4734d883-3638-43e6-ad25-886dec49242d","name":"Route by API Type"},{"parameters":{"method":"POST","url":"https://api.openai.com/v1/images/generations","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"application/json"}]},"sendBody":true,"specifyBody":"json","jsonBody":"={\n  \"model\": \"gpt-image-1\",\n  \"prompt\": {{ JSON.stringify($json.finalPrompt) }},\n  \"size\": \"{{ $json.size }}\"\n}","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[720,200],"id":"502f1dc6-1e70-4d92-987c-6b1b3e71f399","name":"OpenAI Image Generation","credentials":{"httpHeaderAuth":{"id":"z06CbCGaeEeBPVIt","name":"GPT Image Generator"}},"onError":"continueErrorOutput"},{"parameters":{"method":"POST","url":"={{ 'https://api.replicate.com/v1/models/' + $json.model + '/predictions' }}","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"application/json"}]},"sendBody":true,"specifyBody":"json","jsonBody":"={\n  \"input\": {\n    \"prompt\": {{ JSON.stringify($json.finalPrompt) }},\n    \"aspect_ratio\": \"{{ $json.size === '1024x1024' ? '1:1' : ($json.size === '1024x1536' ? '2:3' : '3:2') }}\",\n    \"steps\": 28,\n    \"guidance\": 7,\n    \"output_format\": \"jpg\"\n  }\n}","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[720,400],"id":"59818533-2084-47bb-a3f4-81d03b8efd7d","name":"Replicate Image Generation","credentials":{"httpHeaderAuth":{"id":"JlfTRouEz1b1K4bJ","name":"Flux Replicate Auth account"}},"onError":"continueErrorOutput"},{"parameters":{"url":"={{ 'https://api.replicate.com/v1/predictions/' + $json.id }}","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[1120,400],"id":"ff081b69-e7e0-4a11-80f1-f2c418f2ec71","name":"Check Replicate Status","credentials":{"httpHeaderAuth":{"id":"JlfTRouEz1b1K4bJ","name":"Flux Replicate Auth account"}}},{"parameters":{"url":"={{ Array.isArray($json.output) ? $json.output[0] : $json.output }}","options":{"response":{"response":{"responseFormat":"file"}}}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[1520,340],"id":"32364041-85c8-47c4-9ffb-63c5753c5d7a","name":"Download Replicate Result"},{"parameters":{"jsCode":"// Handle API errors and create error response\nconst item = $input.all()[0];\nconst originalData = $('New Image Form').first().json;\n\nreturn [{\n  json: {\n    status: \"error\",\n    workflow: \"New Image Generation\",\n    message: \"Image generation API failed\",\n    error_details: {\n      api_error: item.json,\n      original_request: {\n        title: originalData['Image Title'],\n        model: originalData['Image Model'],\n        prompt: originalData['Main Prompt']\n      }\n    },\n    timestamp: new Date().toISOString()\n  }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[920,600],"id":"e7faa469-69f4-4d39-971d-790612d47262","name":"Handle API Error"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"has-errors","leftValue":"={{ $json.hasErrors }}","rightValue":true,"operator":{"type":"boolean","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[320,200],"id":"373da13d-d184-4c4c-bfa1-9ab2359037ac","name":"Check for Errors6"},{"parameters":{"amount":10},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[920,400],"id":"c7ec50a1-d1f9-4b19-8066-9d9298025321","name":"Wait for Replicate1","webhookId":"replicate-wait"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"is-complete","leftValue":"={{ $json.status }}","rightValue":"succeeded","operator":{"type":"string","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[1320,400],"id":"7560fcdf-dad8-4a4e-8fdb-a157f4db939e","name":"Check if Complete1"},{"parameters":{},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[1520,500],"id":"76e47cbb-f196-4f59-b1e0-6d0088328315","name":"Wait and Retry1","webhookId":"retry-wait"},{"parameters":{"respondWith":"text","responseBody":"={{ $json.html }}","options":{}},"id":"1ac85285-37dd-44a1-bc6b-022eb84e645f","name":"Final Response1","type":"n8n-nodes-base.respondToWebhook","position":[2160,100],"typeVersion":1.1},{"parameters":{"jsCode":"// Split the flow - prepare for both upload and base64 conversion\nconst item = $input.all()[0];\n\n// Pass through the data unchanged, but add a flag to indicate we have binary data\nreturn [{\n  json: {\n    ...item.json,\n    hasBinaryData: true,\n    readyForUpload: true\n  },\n  binary: item.binary\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1120,60],"id":"c14db463-b68b-42e4-8b90-4492af7e7266","name":"Prepare for Upload"},{"parameters":{"operation":"binaryToPropery","destinationKey":"image_base64","options":{}},"type":"n8n-nodes-base.extractFromFile","typeVersion":1,"position":[1420,180],"id":"dcea48ff-a0e5-4e9e-84d2-7dfdbe86d253","name":"Convert to Base64 (Backup)"},{"parameters":{"jsCode":"// Merge upload result with base64 data\nconst uploadItem = $input.all()[0]; // From upload\nconst base64Item = $input.all()[1]; // From base64 conversion\nconst originalData = $('New Image Form').first().json;\n\nconsole.log('🔄 Merging upload and base64 data');\nconsole.log('Upload response:', JSON.stringify(uploadItem.json, null, 2));\nconsole.log('Base64 available:', !!base64Item?.json?.image_base64);\n\n// Check if upload was successful\nconst uploadSuccessful = uploadItem.json.status_code === 200 && uploadItem.json.image && uploadItem.json.image.url;\n\nif (uploadSuccessful) {\n  console.log('✅ Upload successful, using hosted image');\n  return [{\n    json: {\n      status: \"success\",\n      workflow: \"New Image Generation\",\n      title: originalData['Image Title'],\n      model: originalData['Image Model'],\n      prompt: uploadItem.json.finalPrompt || originalData['Main Prompt'],\n      had_caption: originalData['Add Caption?'] === 'Add Caption',\n      caption_text: originalData['Caption Text'] || null,\n      image_url: uploadItem.json.image.url,\n      image_display_url: uploadItem.json.image.display_url || uploadItem.json.image.url,\n      image_base64: base64Item?.json?.image_base64 || null, // Keep base64 as backup\n      hosted_image: true,\n      metadata: {\n        style: originalData['Image Style'],\n        background: originalData['Background Description'],\n        size: originalData['Image Size'],\n        api_used: uploadItem.json.apiType || (originalData['Image Model'] === 'openai/gpt-image-1' ? 'openai' : 'replicate'),\n        generation_type: \"new_image\",\n        caption_position: originalData['Caption Position'] || null,\n        caption_style: originalData['Caption Style'] || null,\n        upload_service: \"freeimage.host\",\n        upload_response: {\n          url: uploadItem.json.image.url,\n          display_url: uploadItem.json.image.display_url,\n          thumb_url: uploadItem.json.image.thumb?.url\n        }\n      },\n      timestamp: new Date().toISOString()\n    }\n  }];\n} else {\n  console.log('⚠️ Upload failed, using base64 fallback');\n  return [{\n    json: {\n      status: base64Item?.json?.image_base64 ? \"success\" : \"error\",\n      workflow: \"New Image Generation\",\n      title: originalData['Image Title'],\n      model: originalData['Image Model'],\n      prompt: uploadItem.json.finalPrompt || originalData['Main Prompt'],\n      had_caption: originalData['Add Caption?'] === 'Add Caption',\n      caption_text: originalData['Caption Text'] || null,\n      image_base64: base64Item?.json?.image_base64,\n      hosted_image: false,\n      upload_error: `Upload failed: ${uploadItem.json.error?.message || 'Unknown error'}`,\n      metadata: {\n        style: originalData['Image Style'],\n        background: originalData['Background Description'],\n        size: originalData['Image Size'],\n        api_used: uploadItem.json.apiType || (originalData['Image Model'] === 'openai/gpt-image-1' ? 'openai' : 'replicate'),\n        generation_type: \"new_image\",\n        caption_position: originalData['Caption Position'] || null,\n        caption_style: originalData['Caption Style'] || null,\n        upload_service: \"fallback_base64\",\n        upload_error_details: uploadItem.json\n      },\n      timestamp: new Date().toISOString()\n    }\n  }];\n}"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1740,100],"id":"7944a050-2d1f-4c4f-a7e4-1182468c2664","name":"Merge Upload & Base64"},{"parameters":{"method":"POST","url":"https://freeimage.host/api/1/upload","sendBody":true,"contentType":"multipart-form-data","bodyParameters":{"parameters":[{"parameterType":"formBinaryData","name":"source","inputDataFieldName":"data"},{"name":"key","value":"6d207e02198a847aa98d0a2a901485a5"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[1420,0],"id":"29fa2cba-1f6e-4c7b-a014-c8edcd9aafaa","name":"Upload to FreeImage1","onError":"continueErrorOutput"},{"parameters":{"jsCode":"// Generate HTML response for the webhook\nconst data = $json;\n\n// Helper function to escape quotes in strings\nconst escapeQuotes = (str) => str ? str.replace(/'/g, \"\\\\'\").replace(/\"/g, '\\\\\"') : '';\n\n// Generate the image section\nconst generateImageSection = () => {\n  if (data.status !== 'success') return '';\n  \n  let imageHtml = '';\n  \n  if (data.hosted_image) {\n    imageHtml = `<img src=\"${data.image_display_url}\" alt=\"Generated Image\" class=\"generated-image\" crossorigin=\"anonymous\" onerror=\"this.style.display='none'; document.getElementById('fallback-img').style.display='block';\" />`;\n    \n    if (data.image_base64) {\n      imageHtml += `<img id=\"fallback-img\" src=\"data:image/jpeg;base64,${data.image_base64}\" alt=\"Generated Image (Fallback)\" class=\"generated-image\" style=\"display:none;\" />`;\n    }\n  } else {\n    imageHtml = `<img src=\"data:image/jpeg;base64,${data.image_base64}\" alt=\"Generated Image\" class=\"generated-image\" />`;\n  }\n  \n  const overlayText = data.hosted_image ? 'HOSTED' : 'BASE64';\n  \n  return `\n    <div class=\"image-container\">\n      ${imageHtml}\n      <div class=\"image-overlay\">${overlayText}</div>\n    </div>\n  `;\n};\n\n// Generate download buttons\nconst generateDownloadButtons = () => {\n  if (data.status !== 'success') return '';\n  \n  const safeTitle = data.title ? data.title.replace(/[^a-zA-Z0-9]/g, '_') : 'generated';\n  \n  if (data.hosted_image) {\n    return `\n      <div style=\"margin: 20px 0;\">\n        <a href=\"${data.image_url}\" target=\"_blank\" class=\"view-btn\">🔗 View Full Size</a>\n        <a href=\"${data.image_url}\" download=\"${safeTitle}_generated.jpg\" class=\"download-btn\">📥 Download Image</a>\n      </div>\n    `;\n  } else {\n    return `\n      <div style=\"margin: 20px 0;\">\n        <a href=\"data:image/jpeg;base64,${data.image_base64}\" download=\"${safeTitle}_generated.jpg\" class=\"download-btn\">📥 Download Image</a>\n      </div>\n    `;\n  }\n};\n\n// Generate metadata items\nconst generateMetadata = () => {\n  let metadataItems = `\n    <div class=\"metadata-item\">\n      <span class=\"label\">Model:</span> ${data.model || 'N/A'}\n    </div>\n    <div class=\"metadata-item\">\n      <span class=\"label\">Prompt:</span> ${escapeQuotes(data.prompt || 'N/A')}\n    </div>\n  `;\n  \n  if (data.had_caption) {\n    metadataItems += `\n      <div class=\"metadata-item\">\n        <span class=\"label\">Caption:</span> ${escapeQuotes(data.caption_text)}\n      </div>\n    `;\n  }\n  \n  const hostingBadge = data.hosted_image ? \n    '<span class=\"hosting-badge\">HOSTED</span>' : \n    '<span class=\"fallback-badge\">BASE64</span>';\n  \n  const uploadService = data.metadata && data.metadata.upload_service ? \n    ` via ${data.metadata.upload_service}` : '';\n  \n  metadataItems += `\n    <div class=\"metadata-item\">\n      <span class=\"label\">Hosting:</span> ${hostingBadge}${uploadService}\n    </div>\n  `;\n  \n  if (data.hosted_image && data.image_url) {\n    metadataItems += `\n      <div class=\"metadata-item\">\n        <span class=\"label\">Image URL:</span> <a href=\"${data.image_url}\" target=\"_blank\">View Original</a>\n      </div>\n    `;\n  }\n  \n  metadataItems += `\n    <div class=\"metadata-item\">\n      <span class=\"label\">Timestamp:</span> ${data.timestamp}\n    </div>\n  `;\n  \n  if (data.metadata && data.metadata.api_used) {\n    metadataItems += `\n      <div class=\"metadata-item\">\n        <span class=\"label\">API Used:</span> ${data.metadata.api_used}\n      </div>\n    `;\n  }\n  \n  if (data.metadata && data.metadata.style) {\n    metadataItems += `\n      <div class=\"metadata-item\">\n        <span class=\"label\">Style:</span> ${escapeQuotes(data.metadata.style)}\n      </div>\n    `;\n  }\n  \n  if (data.metadata && data.metadata.size) {\n    metadataItems += `\n      <div class=\"metadata-item\">\n        <span class=\"label\">Size:</span> ${data.metadata.size}\n      </div>\n    `;\n  }\n  \n  return metadataItems;\n};\n\n// Generate warning message if needed\nconst generateWarning = () => {\n  if (data.upload_error && data.status === 'success') {\n    return `<div class=\"status warning\">⚠️ ${escapeQuotes(data.upload_error)}</div>`;\n  }\n  return '';\n};\n\n// Main HTML template\nconst html = `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>${escapeQuotes(data.title)} - New Image Generation</title>\n    <style>\n        body {\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            margin: 0;\n            padding: 20px;\n            min-height: 100vh;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n        }\n        .container {\n            background: white;\n            border-radius: 20px;\n            box-shadow: 0 20px 40px rgba(0,0,0,0.1);\n            padding: 30px;\n            max-width: 800px;\n            width: 100%;\n            text-align: center;\n        }\n        .status {\n            display: inline-block;\n            padding: 8px 16px;\n            border-radius: 20px;\n            font-weight: bold;\n            margin-bottom: 20px;\n        }\n        .success { background: #d4edda; color: #155724; }\n        .error { background: #f8d7da; color: #721c24; }\n        .warning { background: #fff3cd; color: #856404; }\n        .image-container {\n            margin: 20px 0;\n            border-radius: 15px;\n            overflow: hidden;\n            box-shadow: 0 10px 25px rgba(0,0,0,0.1);\n            display: inline-block;\n            position: relative;\n        }\n        .generated-image {\n            max-width: 100%;\n            height: auto;\n            display: block;\n        }\n        .image-overlay {\n            position: absolute;\n            top: 10px;\n            right: 10px;\n            background: rgba(0,0,0,0.7);\n            color: white;\n            padding: 4px 8px;\n            border-radius: 12px;\n            font-size: 11px;\n            font-weight: bold;\n        }\n        .metadata {\n            background: #f8f9fa;\n            border-radius: 10px;\n            padding: 20px;\n            margin: 20px 0;\n            text-align: left;\n        }\n        .metadata h3 {\n            margin-top: 0;\n            color: #495057;\n        }\n        .metadata-item {\n            margin: 8px 0;\n            padding: 5px 0;\n            border-bottom: 1px solid #e9ecef;\n        }\n        .metadata-item:last-child {\n            border-bottom: none;\n        }\n        .label {\n            font-weight: bold;\n            color: #6c757d;\n            display: inline-block;\n            min-width: 120px;\n        }\n        .download-btn {\n            background: linear-gradient(45deg, #28a745, #20c997);\n            color: white;\n            padding: 12px 24px;\n            border: none;\n            border-radius: 25px;\n            font-size: 16px;\n            cursor: pointer;\n            text-decoration: none;\n            display: inline-block;\n            margin: 10px;\n            transition: transform 0.2s;\n        }\n        .download-btn:hover {\n            transform: translateY(-2px);\n            box-shadow: 0 5px 15px rgba(0,0,0,0.2);\n        }\n        .view-btn {\n            background: linear-gradient(45deg, #007bff, #6610f2);\n            color: white;\n            padding: 12px 24px;\n            border: none;\n            border-radius: 25px;\n            font-size: 16px;\n            cursor: pointer;\n            text-decoration: none;\n            display: inline-block;\n            margin: 10px;\n            transition: transform 0.2s;\n        }\n        .view-btn:hover {\n            transform: translateY(-2px);\n            box-shadow: 0 5px 15px rgba(0,0,0,0.2);\n        }\n        .json-btn {\n            background: linear-gradient(45deg, #6c757d, #495057);\n            color: white;\n            padding: 8px 16px;\n            border: none;\n            border-radius: 20px;\n            font-size: 14px;\n            cursor: pointer;\n            margin: 10px;\n        }\n        .json-data {\n            display: none;\n            background: #f8f9fa;\n            border: 1px solid #dee2e6;\n            border-radius: 5px;\n            padding: 15px;\n            margin-top: 10px;\n            text-align: left;\n            font-family: monospace;\n            font-size: 12px;\n            white-space: pre-wrap;\n            max-height: 300px;\n            overflow-y: auto;\n        }\n        h1 {\n            color: #343a40;\n            margin-bottom: 10px;\n        }\n        .workflow-badge {\n            background: linear-gradient(45deg, #007bff, #6610f2);\n            color: white;\n            padding: 4px 12px;\n            border-radius: 15px;\n            font-size: 12px;\n            font-weight: bold;\n        }\n        .hosting-badge {\n            background: linear-gradient(45deg, #17a2b8, #20c997);\n            color: white;\n            padding: 2px 8px;\n            border-radius: 10px;\n            font-size: 11px;\n            font-weight: bold;\n        }\n        .fallback-badge {\n            background: linear-gradient(45deg, #ffc107, #fd7e14);\n            color: white;\n            padding: 2px 8px;\n            border-radius: 10px;\n            font-size: 11px;\n            font-weight: bold;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"workflow-badge\">${data.workflow}</div>\n        <h1>${escapeQuotes(data.title)}</h1>\n        \n        <div class=\"status ${data.status === 'success' ? 'success' : 'error'}\">\n            ${data.status === 'success' ? '✓ Generation Successful' : '❌ Generation Failed'}\n        </div>\n\n        ${generateWarning()}\n\n        ${generateImageSection()}\n        ${generateDownloadButtons()}\n\n        <div class=\"metadata\">\n            <h3>Generation Details</h3>\n            ${generateMetadata()}\n        </div>\n\n        <button class=\"json-btn\" onclick=\"toggleJson()\">Show JSON Data</button>\n        <div id=\"jsonData\" class=\"json-data\">${JSON.stringify(data, null, 2)}</div>\n    </div>\n\n    <script>\n        function toggleJson() {\n            const jsonData = document.getElementById('jsonData');\n            const btn = event.target;\n            if (jsonData.style.display === 'none' || !jsonData.style.display) {\n                jsonData.style.display = 'block';\n                btn.textContent = 'Hide JSON Data';\n            } else {\n                jsonData.style.display = 'none';\n                btn.textContent = 'Show JSON Data';\n            }\n        }\n    </script>\n</body>\n</html>`;\n\n// Return the generated HTML\nreturn [{ json: { html: html } }];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1960,100],"id":"86bec8ed-707a-4e04-bc25-5ca74ddca2f8","name":"Generate HTML Response"},{"parameters":{"operation":"toBinary","sourceProperty":"data[0].b64_json","options":{}},"type":"n8n-nodes-base.convertToFile","typeVersion":1.1,"position":[880,80],"id":"bd187f3d-80a5-4749-97ff-fed793f33d1d","name":"Convert to File5"},{"parameters":{"respondWith":"text","responseBody":"={{ $json.html }}","options":{}},"id":"66526b8f-7a97-438f-809e-7dfb3c3c804f","name":"Final Response3","type":"n8n-nodes-base.respondToWebhook","position":[2240,1180],"typeVersion":1.1},{"parameters":{"jsCode":"// Split the flow - prepare for both upload and base64 conversion\nconst item = $input.all()[0];\n\n// Pass through the data unchanged, but add a flag to indicate we have binary data\nreturn [{\n  json: {\n    ...item.json,\n    hasBinaryData: true,\n    readyForUpload: true\n  },\n  binary: item.binary\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1440,1180],"id":"0250efdb-3a48-4083-9436-9d860b2cb3b4","name":"Prepare for Upload1"},{"parameters":{"operation":"binaryToPropery","destinationKey":"image_base64","options":{}},"type":"n8n-nodes-base.extractFromFile","typeVersion":1,"position":[1660,1260],"id":"f70723de-08e9-45a4-9519-c45d4c883b7e","name":"Convert to Base64 (Backup)1"},{"parameters":{"jsCode":"// Merge upload result with base64 data for regeneration workflow\nconst uploadItem = $input.all()[0]; // From upload\nconst base64Item = $input.all()[1]; // From base64 conversion\nconst originalData = $('Image Regenerate Form1').first().json; // Fixed: use correct form name\n\nconsole.log('🔄 Merging upload and base64 data for regeneration');\nconsole.log('Upload response:', JSON.stringify(uploadItem.json, null, 2));\nconsole.log('Base64 available:', !!base64Item?.json?.image_base64);\n\n// Check if upload was successful\nconst uploadSuccessful = uploadItem.json.status_code === 200 && uploadItem.json.image && uploadItem.json.image.url;\n\nif (uploadSuccessful) {\n  console.log('✅ Upload successful, using hosted image');\n  return [{\n    json: {\n      status: \"success\",\n      workflow: \"Image Re-generation\",\n      title: originalData['Image Title'],\n      model: originalData['Image Model'],\n      prompt: uploadItem.json.transformationPrompt || originalData['Style Transformation'],\n      transformation_details: {\n        style: originalData['Style Transformation'],\n        scene_modifications: originalData['Scene Modifications'],\n        background_changes: originalData['Background Changes'],\n        focus_areas: originalData['Focus Areas'],\n        additional_instructions: originalData['Additional Instructions'],\n        transformation_strength: originalData['Transformation Strength']\n      },\n      reference_source: originalData['Reference Image URL'] ? 'url' : 'upload',\n      image_url: uploadItem.json.image.url,\n      image_display_url: uploadItem.json.image.display_url || uploadItem.json.image.url,\n      image_base64: base64Item?.json?.image_base64 || null, // Keep base64 as backup\n      hosted_image: true,\n      metadata: {\n        output_size: originalData['Output Size'],\n        api_used: uploadItem.json.apiType || (originalData['Image Model'] === 'openai/gpt-image-1' ? 'openai' : 'replicate'),\n        generation_type: \"image_regeneration\",\n        upload_service: \"freeimage.host\",\n        upload_response: {\n          url: uploadItem.json.image.url,\n          display_url: uploadItem.json.image.display_url,\n          thumb_url: uploadItem.json.image.thumb?.url\n        }\n      },\n      timestamp: new Date().toISOString()\n    }\n  }];\n} else {\n  console.log('⚠️ Upload failed, using base64 fallback');\n  return [{\n    json: {\n      status: base64Item?.json?.image_base64 ? \"success\" : \"error\",\n      workflow: \"Image Re-generation\",\n      title: originalData['Image Title'],\n      model: originalData['Image Model'],\n      prompt: uploadItem.json.transformationPrompt || originalData['Style Transformation'],\n      transformation_details: {\n        style: originalData['Style Transformation'],\n        scene_modifications: originalData['Scene Modifications'],\n        background_changes: originalData['Background Changes'],\n        focus_areas: originalData['Focus Areas'],\n        additional_instructions: originalData['Additional Instructions'],\n        transformation_strength: originalData['Transformation Strength']\n      },\n      reference_source: originalData['Reference Image URL'] ? 'url' : 'upload',\n      image_base64: base64Item?.json?.image_base64,\n      hosted_image: false,\n      upload_error: `Upload failed: ${uploadItem.json.error?.message || 'Unknown error'}`,\n      metadata: {\n        output_size: originalData['Output Size'],\n        api_used: uploadItem.json.apiType || (originalData['Image Model'] === 'openai/gpt-image-1' ? 'openai' : 'replicate'),\n        generation_type: \"image_regeneration\",\n        upload_service: \"fallback_base64\",\n        upload_error_details: uploadItem.json\n      },\n      timestamp: new Date().toISOString()\n    }\n  }];\n}"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1880,1180],"id":"5c68c18d-fde4-4bab-a379-313e650f7e9d","name":"Merge Upload & Base"},{"parameters":{"method":"POST","url":"https://freeimage.host/api/1/upload","sendBody":true,"contentType":"multipart-form-data","bodyParameters":{"parameters":[{"parameterType":"formBinaryData","name":"source","inputDataFieldName":"data"},{"name":"key","value":"6d207e02198a847aa98d0a2a901485a5"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[1660,1080],"id":"3d21301f-9a95-438e-bc1a-c943714d38a2","name":"Upload to FreeImage2","onError":"continueErrorOutput"},{"parameters":{"jsCode":"// Generate HTML response for the regeneration webhook\nconst data = $json;\n\n// Helper function to escape quotes in strings\nconst escapeQuotes = (str) => str ? str.replace(/'/g, \"\\\\'\").replace(/\"/g, '\\\\\"') : '';\n\n// Generate the image section\nconst generateImageSection = () => {\n  if (data.status !== 'success') return '';\n  \n  let imageHtml = '';\n  \n  if (data.hosted_image) {\n    imageHtml = `<img src=\"${data.image_display_url}\" alt=\"Regenerated Image\" class=\"generated-image\" crossorigin=\"anonymous\" onerror=\"this.style.display='none'; document.getElementById('fallback-img').style.display='block';\" />`;\n    \n    if (data.image_base64) {\n      imageHtml += `<img id=\"fallback-img\" src=\"data:image/jpeg;base64,${data.image_base64}\" alt=\"Regenerated Image (Fallback)\" class=\"generated-image\" style=\"display:none;\" />`;\n    }\n  } else {\n    imageHtml = `<img src=\"data:image/jpeg;base64,${data.image_base64}\" alt=\"Regenerated Image\" class=\"generated-image\" />`;\n  }\n  \n  const overlayText = data.hosted_image ? 'HOSTED' : 'BASE64';\n  \n  return `\n    <div class=\"image-container\">\n      ${imageHtml}\n      <div class=\"image-overlay\">${overlayText}</div>\n    </div>\n  `;\n};\n\n// Generate download buttons\nconst generateDownloadButtons = () => {\n  if (data.status !== 'success') return '';\n  \n  const safeTitle = data.title ? data.title.replace(/[^a-zA-Z0-9]/g, '_') : 'regenerated';\n  \n  if (data.hosted_image) {\n    return `\n      <div style=\"margin: 20px 0;\">\n        <a href=\"${data.image_url}\" target=\"_blank\" class=\"view-btn\">🔗 View Full Size</a>\n        <a href=\"${data.image_url}\" download=\"${safeTitle}_regenerated.jpg\" class=\"download-btn\">📥 Download Image</a>\n      </div>\n    `;\n  } else {\n    return `\n      <div style=\"margin: 20px 0;\">\n        <a href=\"data:image/jpeg;base64,${data.image_base64}\" download=\"${safeTitle}_regenerated.jpg\" class=\"download-btn\">📥 Download Image</a>\n      </div>\n    `;\n  }\n};\n\n// Generate transformation details section\nconst generateTransformationDetails = () => {\n  if (!data.transformation_details) return '';\n  \n  const details = data.transformation_details;\n  let detailsHtml = '';\n  \n  if (details.style) {\n    detailsHtml += `\n      <div class=\"metadata-item\">\n        <span class=\"label\">Style Transform:</span> ${escapeQuotes(details.style)}\n      </div>\n    `;\n  }\n  \n  if (details.scene_modifications) {\n    detailsHtml += `\n      <div class=\"metadata-item\">\n        <span class=\"label\">Scene Changes:</span> ${escapeQuotes(details.scene_modifications)}\n      </div>\n    `;\n  }\n  \n  if (details.background_changes) {\n    detailsHtml += `\n      <div class=\"metadata-item\">\n        <span class=\"label\">Background:</span> ${escapeQuotes(details.background_changes)}\n      </div>\n    `;\n  }\n  \n  if (details.focus_areas) {\n    detailsHtml += `\n      <div class=\"metadata-item\">\n        <span class=\"label\">Focus Areas:</span> ${escapeQuotes(details.focus_areas)}\n      </div>\n    `;\n  }\n  \n  if (details.additional_instructions) {\n    detailsHtml += `\n      <div class=\"metadata-item\">\n        <span class=\"label\">Additional:</span> ${escapeQuotes(details.additional_instructions)}\n      </div>\n    `;\n  }\n  \n  if (details.transformation_strength) {\n    detailsHtml += `\n      <div class=\"metadata-item\">\n        <span class=\"label\">Strength:</span> ${details.transformation_strength}\n      </div>\n    `;\n  }\n  \n  return detailsHtml;\n};\n\n// Generate metadata items\nconst generateMetadata = () => {\n  let metadataItems = `\n    <div class=\"metadata-item\">\n      <span class=\"label\">Model:</span> ${data.model || 'N/A'}\n    </div>\n    <div class=\"metadata-item\">\n      <span class=\"label\">Transformation:</span> ${escapeQuotes(data.prompt || 'N/A')}\n    </div>\n    <div class=\"metadata-item\">\n      <span class=\"label\">Reference Source:</span> ${data.reference_source || 'N/A'}\n    </div>\n  `;\n  \n  // Add transformation details\n  metadataItems += generateTransformationDetails();\n  \n  const hostingBadge = data.hosted_image ? \n    '<span class=\"hosting-badge\">HOSTED</span>' : \n    '<span class=\"fallback-badge\">BASE64</span>';\n  \n  const uploadService = data.metadata && data.metadata.upload_service ? \n    ` via ${data.metadata.upload_service}` : '';\n  \n  metadataItems += `\n    <div class=\"metadata-item\">\n      <span class=\"label\">Hosting:</span> ${hostingBadge}${uploadService}\n    </div>\n  `;\n  \n  if (data.hosted_image && data.image_url) {\n    metadataItems += `\n      <div class=\"metadata-item\">\n        <span class=\"label\">Image URL:</span> <a href=\"${data.image_url}\" target=\"_blank\">View Original</a>\n      </div>\n    `;\n  }\n  \n  metadataItems += `\n    <div class=\"metadata-item\">\n      <span class=\"label\">Timestamp:</span> ${data.timestamp}\n    </div>\n  `;\n  \n  if (data.metadata && data.metadata.api_used) {\n    metadataItems += `\n      <div class=\"metadata-item\">\n        <span class=\"label\">API Used:</span> ${data.metadata.api_used}\n      </div>\n    `;\n  }\n  \n  if (data.metadata && data.metadata.output_size) {\n    metadataItems += `\n      <div class=\"metadata-item\">\n        <span class=\"label\">Output Size:</span> ${data.metadata.output_size}\n      </div>\n    `;\n  }\n  \n  return metadataItems;\n};\n\n// Generate warning message if needed\nconst generateWarning = () => {\n  if (data.upload_error && data.status === 'success') {\n    return `<div class=\"status warning\">⚠️ ${escapeQuotes(data.upload_error)}</div>`;\n  }\n  return '';\n};\n\n// Main HTML template\nconst html = `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>${escapeQuotes(data.title)} - Image Re-generation</title>\n    <style>\n        body {\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n            background: linear-gradient(135deg, #6a11cb 0%, #2575fc 100%);\n            margin: 0;\n            padding: 20px;\n            min-height: 100vh;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n        }\n        .container {\n            background: white;\n            border-radius: 20px;\n            box-shadow: 0 20px 40px rgba(0,0,0,0.1);\n            padding: 30px;\n            max-width: 800px;\n            width: 100%;\n            text-align: center;\n        }\n        .status {\n            display: inline-block;\n            padding: 8px 16px;\n            border-radius: 20px;\n            font-weight: bold;\n            margin-bottom: 20px;\n        }\n        .success { background: #d4edda; color: #155724; }\n        .error { background: #f8d7da; color: #721c24; }\n        .warning { background: #fff3cd; color: #856404; }\n        .image-container {\n            margin: 20px 0;\n            border-radius: 15px;\n            overflow: hidden;\n            box-shadow: 0 10px 25px rgba(0,0,0,0.1);\n            display: inline-block;\n            position: relative;\n        }\n        .generated-image {\n            max-width: 100%;\n            height: auto;\n            display: block;\n        }\n        .image-overlay {\n            position: absolute;\n            top: 10px;\n            right: 10px;\n            background: rgba(0,0,0,0.7);\n            color: white;\n            padding: 4px 8px;\n            border-radius: 12px;\n            font-size: 11px;\n            font-weight: bold;\n        }\n        .metadata {\n            background: #f8f9fa;\n            border-radius: 10px;\n            padding: 20px;\n            margin: 20px 0;\n            text-align: left;\n        }\n        .metadata h3 {\n            margin-top: 0;\n            color: #495057;\n        }\n        .metadata-item {\n            margin: 8px 0;\n            padding: 5px 0;\n            border-bottom: 1px solid #e9ecef;\n        }\n        .metadata-item:last-child {\n            border-bottom: none;\n        }\n        .label {\n            font-weight: bold;\n            color: #6c757d;\n            display: inline-block;\n            min-width: 140px;\n        }\n        .download-btn {\n            background: linear-gradient(45deg, #28a745, #20c997);\n            color: white;\n            padding: 12px 24px;\n            border: none;\n            border-radius: 25px;\n            font-size: 16px;\n            cursor: pointer;\n            text-decoration: none;\n            display: inline-block;\n            margin: 10px;\n            transition: transform 0.2s;\n        }\n        .download-btn:hover {\n            transform: translateY(-2px);\n            box-shadow: 0 5px 15px rgba(0,0,0,0.2);\n        }\n        .view-btn {\n            background: linear-gradient(45deg, #007bff, #6610f2);\n            color: white;\n            padding: 12px 24px;\n            border: none;\n            border-radius: 25px;\n            font-size: 16px;\n            cursor: pointer;\n            text-decoration: none;\n            display: inline-block;\n            margin: 10px;\n            transition: transform 0.2s;\n        }\n        .view-btn:hover {\n            transform: translateY(-2px);\n            box-shadow: 0 5px 15px rgba(0,0,0,0.2);\n        }\n        .json-btn {\n            background: linear-gradient(45deg, #6c757d, #495057);\n            color: white;\n            padding: 8px 16px;\n            border: none;\n            border-radius: 20px;\n            font-size: 14px;\n            cursor: pointer;\n            margin: 10px;\n        }\n        .json-data {\n            display: none;\n            background: #f8f9fa;\n            border: 1px solid #dee2e6;\n            border-radius: 5px;\n            padding: 15px;\n            margin-top: 10px;\n            text-align: left;\n            font-family: monospace;\n            font-size: 12px;\n            white-space: pre-wrap;\n            max-height: 300px;\n            overflow-y: auto;\n        }\n        h1 {\n            color: #343a40;\n            margin-bottom: 10px;\n        }\n        .workflow-badge {\n            background: linear-gradient(45deg, #6a11cb, #2575fc);\n            color: white;\n            padding: 4px 12px;\n            border-radius: 15px;\n            font-size: 12px;\n            font-weight: bold;\n        }\n        .hosting-badge {\n            background: linear-gradient(45deg, #17a2b8, #20c997);\n            color: white;\n            padding: 2px 8px;\n            border-radius: 10px;\n            font-size: 11px;\n            font-weight: bold;\n        }\n        .fallback-badge {\n            background: linear-gradient(45deg, #ffc107, #fd7e14);\n            color: white;\n            padding: 2px 8px;\n            border-radius: 10px;\n            font-size: 11px;\n            font-weight: bold;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"workflow-badge\">${data.workflow}</div>\n        <h1>${escapeQuotes(data.title)}</h1>\n        \n        <div class=\"status ${data.status === 'success' ? 'success' : 'error'}\">\n            ${data.status === 'success' ? '✓ Regeneration Successful' : '❌ Regeneration Failed'}\n        </div>\n\n        ${generateWarning()}\n\n        ${generateImageSection()}\n        ${generateDownloadButtons()}\n\n        <div class=\"metadata\">\n            <h3>Regeneration Details</h3>\n            ${generateMetadata()}\n        </div>\n\n        <button class=\"json-btn\" onclick=\"toggleJson()\">Show JSON Data</button>\n        <div id=\"jsonData\" class=\"json-data\">${JSON.stringify(data, null, 2)}</div>\n    </div>\n\n    <script>\n        function toggleJson() {\n            const jsonData = document.getElementById('jsonData');\n            const btn = event.target;\n            if (jsonData.style.display === 'none' || !jsonData.style.display) {\n                jsonData.style.display = 'block';\n                btn.textContent = 'Hide JSON Data';\n            } else {\n                jsonData.style.display = 'none';\n                btn.textContent = 'Show JSON Data';\n            }\n        }\n    </script>\n</body>\n</html>`;\n\n// Return the generated HTML\nreturn [{ json: { html: html } }];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[2040,1180],"id":"e5e57821-5e7f-475f-a46d-644a69605795","name":"Generate HTML Response1"},{"parameters":{"respondWith":"text","responseBody":"={{ $json.html }}","options":{}},"id":"c0638706-9139-4e1e-a2b4-dbe6147ddf51","name":"Final Response4","type":"n8n-nodes-base.respondToWebhook","position":[2360,3400],"typeVersion":1.1},{"parameters":{"jsCode":"// Split the flow - prepare for both upload and base64 conversion\nconst item = $input.all()[0];\n\n// Pass through the data unchanged, but add a flag to indicate we have binary data\nreturn [{\n  json: {\n    ...item.json,\n    hasBinaryData: true,\n    readyForUpload: true\n  },\n  binary: item.binary\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1560,3320],"id":"859f19ab-cfce-4ead-95d3-3fbe6ba799cd","name":"Prepare for Upload2"},{"parameters":{"operation":"binaryToPropery","destinationKey":"image_base64","options":{}},"type":"n8n-nodes-base.extractFromFile","typeVersion":1,"position":[1780,3360],"id":"eb42dd83-7b9e-4914-aac4-2c05ed273e18","name":"Convert to Base64 (Backup)2"},{"parameters":{"jsCode":"// Merge upload result with base64 data for caption workflow\nconst uploadItem = $input.all()[0]; // From upload\nconst base64Item = $input.all()[1]; // From base64 conversion\nconst originalData = $('Caption Reference Form1').first().json; // Fixed: use correct form name\n\nconsole.log('🔄 Merging upload and base64 data for caption workflow');\nconsole.log('Upload response:', JSON.stringify(uploadItem.json, null, 2));\nconsole.log('Base64 available:', !!base64Item?.json?.image_base64);\n\n// Check if upload was successful\nconst uploadSuccessful = uploadItem.json.status_code === 200 && uploadItem.json.image && uploadItem.json.image.url;\n\nif (uploadSuccessful) {\n  console.log('✅ Upload successful, using hosted image');\n  return [{\n    json: {\n      status: \"success\",\n      workflow: \"Image Caption from Reference\",\n      title: originalData['Image Title'],\n      model: originalData['Processing Model'],\n      prompt: uploadItem.json.mainPrompt || uploadItem.json.finalPrompt || originalData['Image Transformation'],\n      processing_details: {\n        processing_type: originalData['Processing Type'],\n        image_transformation: originalData['Image Transformation'],\n        scene_context: originalData['Scene Context'],\n        background_enhancement: originalData['Background Enhancement'],\n        output_quality: originalData['Output Quality']\n      },\n      caption_details: {\n        had_caption: originalData['Add Caption?'] === 'Add Caption',\n        caption_text: originalData['Caption Text'] || null,\n        caption_position: originalData['Caption Position'] || null,\n        caption_style: originalData['Caption Style'] || null,\n        caption_size: originalData['Caption Size'] || null,\n        brand_colors: originalData['Brand Colors'] || null\n      },\n      reference_source: originalData['Reference Image URL'] ? 'url' : 'upload',\n      image_url: uploadItem.json.image.url,\n      image_display_url: uploadItem.json.image.display_url || uploadItem.json.image.url,\n      image_base64: base64Item?.json?.image_base64 || null, // Keep base64 as backup\n      hosted_image: true,\n      metadata: {\n        output_size: originalData['Output Size'],\n        api_used: uploadItem.json.apiType || (originalData['Processing Model'] === 'openai/gpt-image-1' ? 'openai' : 'replicate'),\n        generation_type: \"caption_from_reference\",\n        upload_service: \"freeimage.host\",\n        upload_response: {\n          url: uploadItem.json.image.url,\n          display_url: uploadItem.json.image.display_url,\n          thumb_url: uploadItem.json.image.thumb?.url\n        }\n      },\n      timestamp: new Date().toISOString()\n    }\n  }];\n} else {\n  console.log('⚠️ Upload failed, using base64 fallback');\n  return [{\n    json: {\n      status: base64Item?.json?.image_base64 ? \"success\" : \"error\",\n      workflow: \"Image Caption from Reference\",\n      title: originalData['Image Title'],\n      model: originalData['Processing Model'],\n      prompt: uploadItem.json.mainPrompt || uploadItem.json.finalPrompt || originalData['Image Transformation'],\n      processing_details: {\n        processing_type: originalData['Processing Type'],\n        image_transformation: originalData['Image Transformation'],\n        scene_context: originalData['Scene Context'],\n        background_enhancement: originalData['Background Enhancement'],\n        output_quality: originalData['Output Quality']\n      },\n      caption_details: {\n        had_caption: originalData['Add Caption?'] === 'Add Caption',\n        caption_text: originalData['Caption Text'] || null,\n        caption_position: originalData['Caption Position'] || null,\n        caption_style: originalData['Caption Style'] || null,\n        caption_size: originalData['Caption Size'] || null,\n        brand_colors: originalData['Brand Colors'] || null\n      },\n      reference_source: originalData['Reference Image URL'] ? 'url' : 'upload',\n      image_base64: base64Item?.json?.image_base64,\n      hosted_image: false,\n      upload_error: `Upload failed: ${uploadItem.json.error?.message || 'Unknown error'}`,\n      metadata: {\n        output_size: originalData['Output Size'],\n        api_used: uploadItem.json.apiType || (originalData['Processing Model'] === 'openai/gpt-image-1' ? 'openai' : 'replicate'),\n        generation_type: \"caption_from_reference\",\n        upload_service: \"fallback_base64\",\n        upload_error_details: uploadItem.json\n      },\n      timestamp: new Date().toISOString()\n    }\n  }];\n}"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[2000,3280],"id":"209e6c36-87f2-44a7-8037-60a7f04d69f1","name":"Merge Upload & Base1"},{"parameters":{"method":"POST","url":"https://freeimage.host/api/1/upload","sendBody":true,"contentType":"multipart-form-data","bodyParameters":{"parameters":[{"parameterType":"formBinaryData","name":"source","inputDataFieldName":"data"},{"name":"key","value":"6d207e02198a847aa98d0a2a901485a5"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[1780,3180],"id":"5dd72ec9-e155-4f0f-8cec-5ba5df7a4870","name":"Upload to FreeImage3","onError":"continueErrorOutput"},{"parameters":{"jsCode":"// Generate HTML response for the caption workflow\nconst data = $json;\n\n// Helper function to escape quotes in strings\nconst escapeQuotes = (str) => str ? str.replace(/'/g, \"\\\\'\").replace(/\"/g, '\\\\\"') : '';\n\n// Generate the image section\nconst generateImageSection = () => {\n  if (data.status !== 'success') return '';\n  \n  let imageHtml = '';\n  \n  if (data.hosted_image) {\n    imageHtml = `<img src=\"${data.image_display_url}\" alt=\"Processed Image with Caption\" class=\"generated-image\" crossorigin=\"anonymous\" onerror=\"this.style.display='none'; document.getElementById('fallback-img').style.display='block';\" />`;\n    \n    if (data.image_base64) {\n      imageHtml += `<img id=\"fallback-img\" src=\"data:image/jpeg;base64,${data.image_base64}\" alt=\"Processed Image (Fallback)\" class=\"generated-image\" style=\"display:none;\" />`;\n    }\n  } else {\n    imageHtml = `<img src=\"data:image/jpeg;base64,${data.image_base64}\" alt=\"Processed Image with Caption\" class=\"generated-image\" />`;\n  }\n  \n  const overlayText = data.hosted_image ? 'HOSTED' : 'BASE64';\n  \n  return `\n    <div class=\"image-container\">\n      ${imageHtml}\n      <div class=\"image-overlay\">${overlayText}</div>\n    </div>\n  `;\n};\n\n// Generate download buttons\nconst generateDownloadButtons = () => {\n  if (data.status !== 'success') return '';\n  \n  const safeTitle = data.title ? data.title.replace(/[^a-zA-Z0-9]/g, '_') : 'captioned';\n  \n  if (data.hosted_image) {\n    return `\n      <div style=\"margin: 20px 0;\">\n        <a href=\"${data.image_url}\" target=\"_blank\" class=\"view-btn\">🔗 View Full Size</a>\n        <a href=\"${data.image_url}\" download=\"${safeTitle}_captioned.jpg\" class=\"download-btn\">📥 Download Image</a>\n      </div>\n    `;\n  } else {\n    return `\n      <div style=\"margin: 20px 0;\">\n        <a href=\"data:image/jpeg;base64,${data.image_base64}\" download=\"${safeTitle}_captioned.jpg\" class=\"download-btn\">📥 Download Image</a>\n      </div>\n    `;\n  }\n};\n\n// Generate processing details section\nconst generateProcessingDetails = () => {\n  if (!data.processing_details) return '';\n  \n  const details = data.processing_details;\n  let detailsHtml = '';\n  \n  if (details.processing_type) {\n    detailsHtml += `\n      <div class=\"metadata-item\">\n        <span class=\"label\">Processing Type:</span> ${details.processing_type}\n      </div>\n    `;\n  }\n  \n  if (details.image_transformation) {\n    detailsHtml += `\n      <div class=\"metadata-item\">\n        <span class=\"label\">Transformation:</span> ${escapeQuotes(details.image_transformation)}\n      </div>\n    `;\n  }\n  \n  if (details.scene_context) {\n    detailsHtml += `\n      <div class=\"metadata-item\">\n        <span class=\"label\">Scene Context:</span> ${escapeQuotes(details.scene_context)}\n      </div>\n    `;\n  }\n  \n  if (details.background_enhancement) {\n    detailsHtml += `\n      <div class=\"metadata-item\">\n        <span class=\"label\">Background:</span> ${details.background_enhancement}\n      </div>\n    `;\n  }\n  \n  if (details.output_quality) {\n    detailsHtml += `\n      <div class=\"metadata-item\">\n        <span class=\"label\">Quality:</span> ${details.output_quality}\n      </div>\n    `;\n  }\n  \n  return detailsHtml;\n};\n\n// Generate caption details section\nconst generateCaptionDetails = () => {\n  if (!data.caption_details || !data.caption_details.had_caption) return '';\n  \n  const caption = data.caption_details;\n  let captionHtml = '';\n  \n  if (caption.caption_text) {\n    captionHtml += `\n      <div class=\"metadata-item\">\n        <span class=\"label\">Caption Text:</span> \"${escapeQuotes(caption.caption_text)}\"\n      </div>\n    `;\n  }\n  \n  if (caption.caption_position) {\n    captionHtml += `\n      <div class=\"metadata-item\">\n        <span class=\"label\">Caption Position:</span> ${caption.caption_position}\n      </div>\n    `;\n  }\n  \n  if (caption.caption_style) {\n    captionHtml += `\n      <div class=\"metadata-item\">\n        <span class=\"label\">Caption Style:</span> ${caption.caption_style}\n      </div>\n    `;\n  }\n  \n  if (caption.caption_size) {\n    captionHtml += `\n      <div class=\"metadata-item\">\n        <span class=\"label\">Caption Size:</span> ${caption.caption_size}\n      </div>\n    `;\n  }\n  \n  if (caption.brand_colors) {\n    captionHtml += `\n      <div class=\"metadata-item\">\n        <span class=\"label\">Brand Colors:</span> ${escapeQuotes(caption.brand_colors)}\n      </div>\n    `;\n  }\n  \n  return captionHtml;\n};\n\n// Generate metadata items\nconst generateMetadata = () => {\n  let metadataItems = `\n    <div class=\"metadata-item\">\n      <span class=\"label\">Model:</span> ${data.model || 'N/A'}\n    </div>\n    <div class=\"metadata-item\">\n      <span class=\"label\">Processing:</span> ${escapeQuotes(data.prompt || 'N/A')}\n    </div>\n    <div class=\"metadata-item\">\n      <span class=\"label\">Reference Source:</span> ${data.reference_source || 'N/A'}\n    </div>\n  `;\n  \n  // Add processing details\n  metadataItems += generateProcessingDetails();\n  \n  // Add caption details if present\n  metadataItems += generateCaptionDetails();\n  \n  const hostingBadge = data.hosted_image ? \n    '<span class=\"hosting-badge\">HOSTED</span>' : \n    '<span class=\"fallback-badge\">BASE64</span>';\n  \n  const uploadService = data.metadata && data.metadata.upload_service ? \n    ` via ${data.metadata.upload_service}` : '';\n  \n  metadataItems += `\n    <div class=\"metadata-item\">\n      <span class=\"label\">Hosting:</span> ${hostingBadge}${uploadService}\n    </div>\n  `;\n  \n  if (data.hosted_image && data.image_url) {\n    metadataItems += `\n      <div class=\"metadata-item\">\n        <span class=\"label\">Image URL:</span> <a href=\"${data.image_url}\" target=\"_blank\">View Original</a>\n      </div>\n    `;\n  }\n  \n  metadataItems += `\n    <div class=\"metadata-item\">\n      <span class=\"label\">Timestamp:</span> ${data.timestamp}\n    </div>\n  `;\n  \n  if (data.metadata && data.metadata.api_used) {\n    metadataItems += `\n      <div class=\"metadata-item\">\n        <span class=\"label\">API Used:</span> ${data.metadata.api_used}\n      </div>\n    `;\n  }\n  \n  if (data.metadata && data.metadata.output_size) {\n    metadataItems += `\n      <div class=\"metadata-item\">\n        <span class=\"label\">Output Size:</span> ${data.metadata.output_size}\n      </div>\n    `;\n  }\n  \n  return metadataItems;\n};\n\n// Generate warning message if needed\nconst generateWarning = () => {\n  if (data.upload_error && data.status === 'success') {\n    return `<div class=\"status warning\">⚠️ ${escapeQuotes(data.upload_error)}</div>`;\n  }\n  return '';\n};\n\n// Main HTML template\nconst html = `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>${escapeQuotes(data.title)} - Image Caption Processing</title>\n    <style>\n        body {\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            margin: 0;\n            padding: 20px;\n            min-height: 100vh;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n        }\n        .container {\n            background: white;\n            border-radius: 20px;\n            box-shadow: 0 20px 40px rgba(0,0,0,0.1);\n            padding: 30px;\n            max-width: 800px;\n            width: 100%;\n            text-align: center;\n        }\n        .status {\n            display: inline-block;\n            padding: 8px 16px;\n            border-radius: 20px;\n            font-weight: bold;\n            margin-bottom: 20px;\n        }\n        .success { background: #d4edda; color: #155724; }\n        .error { background: #f8d7da; color: #721c24; }\n        .warning { background: #fff3cd; color: #856404; }\n        .image-container {\n            margin: 20px 0;\n            border-radius: 15px;\n            overflow: hidden;\n            box-shadow: 0 10px 25px rgba(0,0,0,0.1);\n            display: inline-block;\n            position: relative;\n        }\n        .generated-image {\n            max-width: 100%;\n            height: auto;\n            display: block;\n        }\n        .image-overlay {\n            position: absolute;\n            top: 10px;\n            right: 10px;\n            background: rgba(0,0,0,0.7);\n            color: white;\n            padding: 4px 8px;\n            border-radius: 12px;\n            font-size: 11px;\n            font-weight: bold;\n        }\n        .metadata {\n            background: #f8f9fa;\n            border-radius: 10px;\n            padding: 20px;\n            margin: 20px 0;\n            text-align: left;\n        }\n        .metadata h3 {\n            margin-top: 0;\n            color: #495057;\n        }\n        .metadata-item {\n            margin: 8px 0;\n            padding: 5px 0;\n            border-bottom: 1px solid #e9ecef;\n        }\n        .metadata-item:last-child {\n            border-bottom: none;\n        }\n        .label {\n            font-weight: bold;\n            color: #6c757d;\n            display: inline-block;\n            min-width: 140px;\n        }\n        .download-btn {\n            background: linear-gradient(45deg, #28a745, #20c997);\n            color: white;\n            padding: 12px 24px;\n            border: none;\n            border-radius: 25px;\n            font-size: 16px;\n            cursor: pointer;\n            text-decoration: none;\n            display: inline-block;\n            margin: 10px;\n            transition: transform 0.2s;\n        }\n        .download-btn:hover {\n            transform: translateY(-2px);\n            box-shadow: 0 5px 15px rgba(0,0,0,0.2);\n        }\n        .view-btn {\n            background: linear-gradient(45deg, #007bff, #6610f2);\n            color: white;\n            padding: 12px 24px;\n            border: none;\n            border-radius: 25px;\n            font-size: 16px;\n            cursor: pointer;\n            text-decoration: none;\n            display: inline-block;\n            margin: 10px;\n            transition: transform 0.2s;\n        }\n        .view-btn:hover {\n            transform: translateY(-2px);\n            box-shadow: 0 5px 15px rgba(0,0,0,0.2);\n        }\n        .json-btn {\n            background: linear-gradient(45deg, #6c757d, #495057);\n            color: white;\n            padding: 8px 16px;\n            border: none;\n            border-radius: 20px;\n            font-size: 14px;\n            cursor: pointer;\n            margin: 10px;\n        }\n        .json-data {\n            display: none;\n            background: #f8f9fa;\n            border: 1px solid #dee2e6;\n            border-radius: 5px;\n            padding: 15px;\n            margin-top: 10px;\n            text-align: left;\n            font-family: monospace;\n            font-size: 12px;\n            white-space: pre-wrap;\n            max-height: 300px;\n            overflow-y: auto;\n        }\n        h1 {\n            color: #343a40;\n            margin-bottom: 10px;\n        }\n        .workflow-badge {\n            background: linear-gradient(45deg, #667eea, #764ba2);\n            color: white;\n            padding: 4px 12px;\n            border-radius: 15px;\n            font-size: 12px;\n            font-weight: bold;\n        }\n        .hosting-badge {\n            background: linear-gradient(45deg, #17a2b8, #20c997);\n            color: white;\n            padding: 2px 8px;\n            border-radius: 10px;\n            font-size: 11px;\n            font-weight: bold;\n        }\n        .fallback-badge {\n            background: linear-gradient(45deg, #ffc107, #fd7e14);\n            color: white;\n            padding: 2px 8px;\n            border-radius: 10px;\n            font-size: 11px;\n            font-weight: bold;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"workflow-badge\">${data.workflow}</div>\n        <h1>${escapeQuotes(data.title)}</h1>\n        \n        <div class=\"status ${data.status === 'success' ? 'success' : 'error'}\">\n            ${data.status === 'success' ? '✓ Processing Successful' : '❌ Processing Failed'}\n        </div>\n\n        ${generateWarning()}\n\n        ${generateImageSection()}\n        ${generateDownloadButtons()}\n\n        <div class=\"metadata\">\n            <h3>Processing Details</h3>\n            ${generateMetadata()}\n        </div>\n\n        <button class=\"json-btn\" onclick=\"toggleJson()\">Show JSON Data</button>\n        <div id=\"jsonData\" class=\"json-data\">${JSON.stringify(data, null, 2)}</div>\n    </div>\n\n    <script>\n        function toggleJson() {\n            const jsonData = document.getElementById('jsonData');\n            const btn = event.target;\n            if (jsonData.style.display === 'none' || !jsonData.style.display) {\n                jsonData.style.display = 'block';\n                btn.textContent = 'Hide JSON Data';\n            } else {\n                jsonData.style.display = 'none';\n                btn.textContent = 'Show JSON Data';\n            }\n        }\n    </script>\n</body>\n</html>`;\n\n// Return the generated HTML\nreturn [{ json: { html: html } }];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[2160,3280],"id":"9ef6464d-0945-4629-a7b0-83110e3dcb49","name":"Generate HTML Response2"},{"parameters":{"method":"POST","url":"=https://api.replicate.com/v1/models/{{ $('API Type Router5').item.json.model }}/predictions","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Prefer","value":"wait"}]},"sendBody":true,"specifyBody":"json","jsonBody":"={\n  \"input\": {\n    \"prompt\": \"{{ $('API Type Router5').item.json.imageTransformation }} {{ $('API Type Router5').item.json.sceneContext }}\",\n    \"input_image\": \"{{ $json.data.display_url }}\",\n    \"output_format\": \"jpg\",\n    \"num_inference_steps\": 30\n  }\n}","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[1160,3740],"id":"dc55f8b0-a3c2-4138-baf5-79f916f5b092","name":"Call Caption Replicate2","credentials":{"httpHeaderAuth":{"id":"JlfTRouEz1b1K4bJ","name":"Flux Replicate Auth account"}},"onError":"continueErrorOutput"},{"parameters":{"method":"POST","url":"https://api.imgbb.com/1/upload","sendBody":true,"contentType":"multipart-form-data","bodyParameters":{"parameters":[{"name":"key","value":"906d52e8dfd22db6e234f01e2707bf41"},{"parameterType":"formBinaryData","name":"image","inputDataFieldName":"data"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[960,3700],"id":"2998eced-9b84-4386-bb80-1a3b53b18a78","name":"HTTP Request7"}],"connections":{"Check for Errors":{"main":[[{"node":"Return Regenerate Errors1","type":"main","index":0}],[{"node":"Reference Type Router3","type":"main","index":0}]]},"Convert OpenAI Response":{"main":[[{"node":"Prepare for Upload1","type":"main","index":0}]]},"Wait for Replicate":{"main":[[{"node":"Check Regenerate Status1","type":"main","index":0}]]},"Check if Complete":{"main":[[{"node":"Download Regenerate Result1","type":"main","index":0}],[{"node":"Wait and Retry","type":"main","index":0}]]},"Wait and Retry":{"main":[[{"node":"Check Regenerate Status1","type":"main","index":0}]]},"Image Regenerate Form1":{"main":[[{"node":"Process Regenerate Data1","type":"main","index":0}]]},"Process Regenerate Data1":{"main":[[{"node":"Check for Errors","type":"main","index":0}]]},"Reference Type Router3":{"main":[[{"node":"Download Reference Image3","type":"main","index":0}],[{"node":"Process Upload Reference1","type":"main","index":0}]]},"Download Reference Image3":{"main":[[{"node":"API Type Router4","type":"main","index":0}],[{"node":"Handle Regenerate API Error1","type":"main","index":0}]]},"Process Upload Reference1":{"main":[[{"node":"API Type Router4","type":"main","index":0}]]},"API Type Router4":{"main":[[{"node":"OpenAI Regenerate1","type":"main","index":0}],[{"node":"Upload for Replicate1","type":"main","index":0}]]},"OpenAI Regenerate1":{"main":[[{"node":"Convert OpenAI Response","type":"main","index":0}],[{"node":"Handle Regenerate API Error1","type":"main","index":0}]]},"Upload for Replicate1":{"main":[[{"node":"Prepare Replicate Call1","type":"main","index":0}],[{"node":"Handle Regenerate API Error1","type":"main","index":0}]]},"Prepare Replicate Call1":{"main":[[{"node":"Call Replicate Regenerate1","type":"main","index":0}]]},"Call Replicate Regenerate1":{"main":[[{"node":"Wait for Replicate","type":"main","index":0}],[{"node":"Handle Regenerate API Error1","type":"main","index":0}]]},"Check Regenerate Status1":{"main":[[{"node":"Check if Complete","type":"main","index":0}]]},"Download Regenerate Result1":{"main":[[{"node":"Prepare for Upload1","type":"main","index":0}]]},"Reference Type Router":{"main":[[{"node":"Download Image to Edit1","type":"main","index":0}],[{"node":"Process Upload for Editing1","type":"main","index":0}]]},"API Type Router":{"main":[[{"node":"OpenAI Image Edit1","type":"main","index":0}],[{"node":"Upload for Replicate Edit1","type":"main","index":0}]]},"Image Editing Form1":{"main":[[{"node":"Process Editing Data1","type":"main","index":0}]]},"Process Editing Data1":{"main":[[{"node":"Check for Errors1","type":"main","index":0}]]},"Check for Errors1":{"main":[[{"node":"Return Editing Errors1","type":"main","index":0}],[{"node":"Reference Type Router","type":"main","index":0}]]},"Download Image to Edit1":{"main":[[{"node":"API Type Router","type":"main","index":0}],[{"node":"Handle Editing API Error1","type":"main","index":0}]]},"Process Upload for Editing1":{"main":[[{"node":"API Type Router","type":"main","index":0}]]},"OpenAI Image Edit1":{"main":[[{"node":"Convert OpenAI Edit Response1","type":"main","index":0}],[{"node":"Handle Editing API Error1","type":"main","index":0}]]},"Upload for Replicate Edit1":{"main":[[{"node":"Prepare Replicate Edit Call1","type":"main","index":0}],[{"node":"Handle Editing API Error1","type":"main","index":0}]]},"Prepare Replicate Edit Call1":{"main":[[{"node":"Call Replicate Edit1","type":"main","index":0}]]},"Call Replicate Edit1":{"main":[[{"node":"Wait for Edit Processing1","type":"main","index":0}],[{"node":"Handle Editing API Error1","type":"main","index":0}]]},"Convert OpenAI Edit Response1":{"main":[[{"node":"Convert to Base68","type":"main","index":0}]]},"Wait for Edit Processing1":{"main":[[{"node":"Check Edit Status1","type":"main","index":0}]]},"Check Edit Status1":{"main":[[{"node":"Check if Edit Complete1","type":"main","index":0}]]},"Check if Edit Complete1":{"main":[[{"node":"Download Edited Image1","type":"main","index":0}],[{"node":"Wait and Retry Edit1","type":"main","index":0}]]},"Download Edited Image1":{"main":[[{"node":"Convert to Base68","type":"main","index":0}]]},"Wait and Retry Edit1":{"main":[[{"node":"Check Edit Status1","type":"main","index":0}]]},"Convert to Base68":{"main":[[{"node":"Final Editing Processing1","type":"main","index":0}]]},"Final Editing Processing1":{"main":[[{"node":"Final Editing Response1","type":"main","index":0}]]},"Handle Editing API Error1":{"main":[[{"node":"Final Editing Response1","type":"main","index":0}]]},"Caption Reference Form1":{"main":[[{"node":"Process Caption Ref Data1","type":"main","index":0}]]},"Process Caption Ref Data1":{"main":[[{"node":"Check for Errors5","type":"main","index":0}]]},"Check for Errors5":{"main":[[{"node":"Return Caption Ref Errors1","type":"main","index":0}],[{"node":"Reference Type Router4","type":"main","index":0}]]},"Reference Type Router4":{"main":[[{"node":"Download Reference for Caption1","type":"main","index":0}],[{"node":"Process Upload for Caption1","type":"main","index":0}]]},"Download Reference for Caption1":{"main":[[{"node":"API Type Router5","type":"main","index":0}],[{"node":"Handle Caption API Error1","type":"main","index":0}]]},"Process Upload for Caption1":{"main":[[{"node":"API Type Router5","type":"main","index":0}]]},"API Type Router5":{"main":[[{"node":"OpenAI Method Router1","type":"main","index":0}],[{"node":"HTTP Request7","type":"main","index":0}]]},"OpenAI Method Router1":{"main":[[{"node":"OpenAI Caption Edit1","type":"main","index":0}],[{"node":"OpenAI Caption Generate1","type":"main","index":0}]]},"OpenAI Caption Edit1":{"main":[[{"node":"Convert OpenAI Caption1","type":"main","index":0}],[{"node":"Handle Caption API Error1","type":"main","index":0}]]},"OpenAI Caption Generate1":{"main":[[{"node":"Convert OpenAI Caption1","type":"main","index":0}],[{"node":"Handle Caption API Error1","type":"main","index":0}]]},"Convert OpenAI Caption1":{"main":[[{"node":"Prepare for Upload2","type":"main","index":0}]]},"Wait for Caption Processing1":{"main":[[{"node":"Check Caption Status1","type":"main","index":0}]]},"Check Caption Status1":{"main":[[{"node":"Check if Caption Complete1","type":"main","index":0}]]},"Check if Caption Complete1":{"main":[[{"node":"Download Caption Result1","type":"main","index":0}],[{"node":"Wait and Retry Caption1","type":"main","index":0}]]},"Download Caption Result1":{"main":[[{"node":"Prepare for Upload2","type":"main","index":0}]]},"Wait and Retry Caption1":{"main":[[{"node":"Check Caption Status1","type":"main","index":0}]]},"New Image Form":{"main":[[{"node":"Process Form Data","type":"main","index":0}]]},"Process Form Data":{"main":[[{"node":"Check for Errors6","type":"main","index":0}]]},"Route by API Type":{"main":[[{"node":"OpenAI Image Generation","type":"main","index":0}],[{"node":"Replicate Image Generation","type":"main","index":0}]]},"OpenAI Image Generation":{"main":[[{"node":"Convert to File5","type":"main","index":0}],[{"node":"Handle API Error","type":"main","index":0}]]},"Replicate Image Generation":{"main":[[{"node":"Wait for Replicate1","type":"main","index":0}],[{"node":"Handle API Error","type":"main","index":0}]]},"Check Replicate Status":{"main":[[{"node":"Check if Complete1","type":"main","index":0}]]},"Download Replicate Result":{"main":[[{"node":"Prepare for Upload","type":"main","index":0}]]},"Handle API Error":{"main":[[{"node":"Final Response1","type":"main","index":0}]]},"Check for Errors6":{"main":[[{"node":"Return Validation Errors","type":"main","index":0}],[{"node":"Route by API Type","type":"main","index":0}]]},"Wait for Replicate1":{"main":[[{"node":"Check Replicate Status","type":"main","index":0}]]},"Check if Complete1":{"main":[[{"node":"Download Replicate Result","type":"main","index":0}],[{"node":"Wait and Retry1","type":"main","index":0}]]},"Wait and Retry1":{"main":[[{"node":"Check Replicate Status","type":"main","index":0}]]},"Prepare for Upload":{"main":[[{"node":"Upload to FreeImage1","type":"main","index":0},{"node":"Convert to Base64 (Backup)","type":"main","index":0}]]},"Convert to Base64 (Backup)":{"main":[[{"node":"Merge Upload & Base64","type":"main","index":0}]]},"Merge Upload & Base64":{"main":[[{"node":"Generate HTML Response","type":"main","index":0}]]},"Upload to FreeImage1":{"main":[[{"node":"Merge Upload & Base64","type":"main","index":0}]]},"Generate HTML Response":{"main":[[{"node":"Final Response1","type":"main","index":0}]]},"Convert to File5":{"main":[[{"node":"Prepare for Upload","type":"main","index":0}]]},"Prepare for Upload1":{"main":[[{"node":"Upload to FreeImage2","type":"main","index":0},{"node":"Convert to Base64 (Backup)1","type":"main","index":0}]]},"Convert to Base64 (Backup)1":{"main":[[{"node":"Merge Upload & Base","type":"main","index":0}]]},"Merge Upload & Base":{"main":[[{"node":"Generate HTML Response1","type":"main","index":0}]]},"Upload to FreeImage2":{"main":[[{"node":"Merge Upload & Base","type":"main","index":0}]]},"Generate HTML Response1":{"main":[[{"node":"Final Response3","type":"main","index":0}]]},"Prepare for Upload2":{"main":[[{"node":"Upload to FreeImage3","type":"main","index":0},{"node":"Convert to Base64 (Backup)2","type":"main","index":0}]]},"Convert to Base64 (Backup)2":{"main":[[{"node":"Merge Upload & Base1","type":"main","index":0}]]},"Merge Upload & Base1":{"main":[[{"node":"Generate HTML Response2","type":"main","index":0}]]},"Upload to FreeImage3":{"main":[[{"node":"Merge Upload & Base1","type":"main","index":0}]]},"Generate HTML Response2":{"main":[[{"node":"Final Response4","type":"main","index":0}]]},"Call Caption Replicate2":{"main":[[{"node":"Wait for Caption Processing1","type":"main","index":0}],[{"node":"Handle Caption API Error1","type":"main","index":0}]]},"HTTP Request7":{"main":[[{"node":"Call Caption Replicate2","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"91c72610-90cf-4e70-9af7-cbc7858488d7","triggerCount":4,"shared":[{"createdAt":"2025-07-03T11:22:43.659Z","updatedAt":"2025-07-03T11:22:43.659Z","role":"workflow:owner","workflowId":"hv9dFlSR09lZamSt","projectId":"pRXFeKq9D8e0hAOx"}],"tags":[]},{"createdAt":"2025-09-01T07:58:32.345Z","updatedAt":"2025-09-01T08:06:09.000Z","id":"lwZD6kYpg9uS3m6i","name":"MG Bryanston Facebook Insights (Fixed)","active":false,"isArchived":true,"nodes":[],"connections":{},"settings":{"executionOrder":"v1","timezone":"America/New_York","saveDataErrorExecution":"all","saveDataSuccessExecution":"all","saveManualExecutions":true},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"1b250e1d-9b86-4713-9a0a-48d0c5a208e3","triggerCount":0,"shared":[{"createdAt":"2025-09-01T07:58:32.350Z","updatedAt":"2025-09-01T07:58:32.350Z","role":"workflow:owner","workflowId":"lwZD6kYpg9uS3m6i","projectId":"pRXFeKq9D8e0hAOx"}],"tags":[]},{"createdAt":"2025-09-01T08:18:49.547Z","updatedAt":"2025-09-01T08:18:49.547Z","id":"lxjbJEZKgxNhe7YV","name":"Multi-Page Facebook Insights Tracker","active":false,"isArchived":false,"nodes":[{"id":"schedule-trigger","name":"Daily Insights Schedule","type":"n8n-nodes-base.scheduleTrigger","position":[200,300],"parameters":{"rule":{"interval":[{"field":"cronExpression","value":"0 9 * * *"}]}},"typeVersion":1.2},{"id":"manual-trigger","name":"Manual Trigger","type":"n8n-nodes-base.manualTrigger","position":[200,500],"parameters":{},"typeVersion":1},{"id":"set-date-vars","name":"Set Date Variables","type":"n8n-nodes-base.set","position":[400,400],"parameters":{"assignments":{"assignments":[{"id":"date-today","name":"date_today","type":"string","value":"={{ $now.format('yyyy-MM-dd') }}"},{"id":"date-yesterday","name":"date_yesterday","type":"string","value":"={{ $now.minus({days: 1}).format('yyyy-MM-dd') }}"}]}},"typeVersion":3.4},{"id":"get-all-pages","name":"Get All Facebook Pages","type":"n8n-nodes-base.facebookGraphApi","position":[600,400],"parameters":{"edge":"","node":"me/accounts","hostUrl":"graph.facebook.com","graphApiVersion":"v23.0","additionalFields":{},"httpRequestMethod":"GET"},"typeVersion":1},{"id":"loop-pages","name":"Loop Through Pages","type":"n8n-nodes-base.splitInBatches","position":[800,400],"parameters":{"options":{"batchSize":1}},"typeVersion":3},{"id":"get-page-insights","name":"Get Page Insights","type":"n8n-nodes-base.facebookGraphApi","position":[1000,300],"parameters":{"edge":"insights","node":"={{ $json.id }}","hostUrl":"graph.facebook.com","graphApiVersion":"v23.0","additionalFields":{"queryParameters":{"parameters":[{"name":"metric","value":"page_fans,page_impressions,page_engaged_users,page_post_engagements,page_views_total"},{"name":"period","value":"day"},{"name":"since","value":"={{ $node['Set Date Variables'].json.date_yesterday }}"},{"name":"until","value":"={{ $node['Set Date Variables'].json.date_yesterday }}"}]}},"httpRequestMethod":"GET"},"typeVersion":1,"continueOnFail":true},{"id":"get-page-ads","name":"Get Page Ads Data","type":"n8n-nodes-base.facebookGraphApi","position":[1000,500],"parameters":{"edge":"","node":"={{ $json.id }}","hostUrl":"graph.facebook.com","graphApiVersion":"v23.0","additionalFields":{"queryParameters":{"parameters":[{"name":"fields","value":"ad_account"},{"name":"limit","value":"1"}]}},"httpRequestMethod":"GET"},"typeVersion":1,"continueOnFail":true},{"id":"process-page-data","name":"Process Page Data","type":"n8n-nodes-base.code","position":[1200,400],"parameters":{"jsCode":"// Get page information from the loop\nconst pageInfo = $node['Loop Through Pages'].json;\nconst dateVars = $node['Set Date Variables'].json;\nconst pageInsights = $node['Get Page Insights'].json?.data || [];\nconst pageAdsInfo = $node['Get Page Ads Data'].json || {};\n\n// Initialize result object for this page\nconst result = {\n  date: dateVars.date_yesterday,\n  created_at: new Date().toISOString(),\n  \n  // Page Information\n  page_id: pageInfo.id,\n  page_name: pageInfo.name,\n  page_category: pageInfo.category || '',\n  \n  // Page Insights\n  page_fans: 0,\n  page_impressions: 0,\n  page_engaged_users: 0,\n  page_post_engagements: 0,\n  page_views_total: 0,\n  page_video_views: 0,\n  \n  // Ad Account Info (if available)\n  has_ads_account: false,\n  ad_account_id: '',\n  \n  // Calculated KPIs\n  engagement_rate: 0\n};\n\n// Process page insights\npageInsights.forEach(insight => {\n  const metricName = insight.name;\n  const value = insight.values?.[0]?.value || 0;\n  \n  switch(metricName) {\n    case 'page_fans':\n      result.page_fans = parseInt(value);\n      break;\n    case 'page_impressions':\n      result.page_impressions = parseInt(value);\n      break;\n    case 'page_engaged_users':\n      result.page_engaged_users = parseInt(value);\n      break;\n    case 'page_post_engagements':\n      result.page_post_engagements = parseInt(value);\n      break;\n    case 'page_views_total':\n      result.page_views_total = parseInt(value);\n      break;\n    case 'page_video_views':\n      result.page_video_views = parseInt(value);\n      break;\n  }\n});\n\n// Check for ads account\nif (pageAdsInfo.ad_account) {\n  result.has_ads_account = true;\n  result.ad_account_id = pageAdsInfo.ad_account.id || '';\n}\n\n// Calculate engagement rate\nif (result.page_fans > 0) {\n  result.engagement_rate = (result.page_engaged_users / result.page_fans) * 100;\n}\n\nreturn [{ json: result }];","language":"javascript"},"typeVersion":2},{"id":"store-in-baserow","name":"Store in Baserow","type":"n8n-nodes-base.baserow","position":[1400,400],"parameters":{"tableId":"YOUR_BASEROW_TABLE_ID","resource":"row","operation":"create","databaseId":"YOUR_BASEROW_DATABASE_ID","additionalFields":{"fields":{"fields":[{"fieldId":"date","fieldValue":"={{ $json.date }}"},{"fieldId":"created_at","fieldValue":"={{ $json.created_at }}"},{"fieldId":"page_id","fieldValue":"={{ $json.page_id }}"},{"fieldId":"page_name","fieldValue":"={{ $json.page_name }}"},{"fieldId":"page_category","fieldValue":"={{ $json.page_category }}"},{"fieldId":"page_fans","fieldValue":"={{ $json.page_fans }}"},{"fieldId":"page_impressions","fieldValue":"={{ $json.page_impressions }}"},{"fieldId":"page_engaged_users","fieldValue":"={{ $json.page_engaged_users }}"},{"fieldId":"page_post_engagements","fieldValue":"={{ $json.page_post_engagements }}"},{"fieldId":"page_views_total","fieldValue":"={{ $json.page_views_total }}"},{"fieldId":"page_video_views","fieldValue":"={{ $json.page_video_views }}"},{"fieldId":"has_ads_account","fieldValue":"={{ $json.has_ads_account }}"},{"fieldId":"ad_account_id","fieldValue":"={{ $json.ad_account_id }}"},{"fieldId":"engagement_rate","fieldValue":"={{ $json.engagement_rate }}"}]}}},"typeVersion":1},{"id":"success-notification","name":"Success Notification","type":"n8n-nodes-base.noOp","position":[1600,400],"parameters":{},"typeVersion":1}],"connections":{"Manual Trigger":{"main":[[{"node":"Set Date Variables","type":"main","index":0}]]},"Set Date Variables":{"main":[[{"node":"Get All Facebook Pages","type":"main","index":0}]]},"Get All Facebook Pages":{"main":[[{"node":"Loop Through Pages","type":"main","index":0}]]},"Loop Through Pages":{"main":[[{"node":"Get Page Insights","type":"main","index":0},{"node":"Get Page Ads Data","type":"main","index":0}]]},"Get Page Insights":{"main":[[{"node":"Process Page Data","type":"main","index":0}]]},"Get Page Ads Data":{"main":[[{"node":"Process Page Data","type":"main","index":0}]]},"Process Page Data":{"main":[[{"node":"Store in Baserow","type":"main","index":0}]]},"Store in Baserow":{"main":[[{"node":"Success Notification","type":"main","index":0}]]},"Daily Insights Schedule":{"main":[[{"node":"Set Date Variables","type":"main","index":0}]]}},"settings":{"executionOrder":"v1","timezone":"America/New_York","saveDataErrorExecution":"all","saveDataSuccessExecution":"all","saveManualExecutions":true},"staticData":null,"meta":null,"pinData":null,"versionId":"1bb4ebb9-223a-442a-ae9f-deadd3cd1e39","triggerCount":0,"shared":[{"createdAt":"2025-09-01T08:18:49.551Z","updatedAt":"2025-09-01T08:18:49.551Z","role":"workflow:owner","workflowId":"lxjbJEZKgxNhe7YV","projectId":"pRXFeKq9D8e0hAOx"}],"tags":[]},{"createdAt":"2025-06-03T23:44:10.588Z","updatedAt":"2025-06-13T08:05:29.000Z","id":"mhN1WCdsRjSq4nQa","name":"Image Gen from Airtable","active":true,"isArchived":false,"nodes":[{"parameters":{"jsCode":"// Extract data from webhook\nconst recordData = {\n  recordId: $json.query.recordId,\n  baseId: $json.query.baseId,\n  tableId: $json.query.tableId,\n  hook: $json.query.hook,\n  post: $json.query.post,\n  platform: $json.query.platform,\n  angle: $json.query.angle,\n  intent: $json.query.intent,\n  contentType: $json.query.contentType,\n  temperature: $json.query.temperature,\n  imageStyle: $json.query.imageStyle || \"\"\n};\n\n// Create enhanced image prompt\nlet imagePrompt = '';\n\nif (recordData.platform === 'X') {\n  imagePrompt = `Create a professional rugby-themed social media image for Twitter/X. \n  Main concept: ${recordData.hook}\n  Visual style: ${recordData.angle}\n  Content context: Show a rugby coach analyzing game data, looking focused and dedicated. \n  Style: Modern, professional, with rugby and analytics elements. \n  Aspect ratio: 16:9 for optimal social media display.\n  Colors: Use rugby team colors or professional blue/green tones.\n  Text overlay space: Leave room for text overlay.`;\n} else {\n  imagePrompt = `Create an image for: ${recordData.hook}. \n  Content: ${recordData.post}. \n  Style: ${recordData.angle}. \n  Platform: ${recordData.platform}`;\n}\n\nreturn [{\n  ...recordData,\n  imagePrompt: imagePrompt\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-120,-30],"id":"edb50262-4456-498b-913b-c562f0f3d83f","name":"Process Data"},{"parameters":{"path":"9ea79a9b-1cb3-46cd-afed-61882884c1ef","options":{}},"type":"n8n-nodes-base.webhook","typeVersion":2,"position":[-340,-30],"id":"e8752332-3b6a-4e5f-aea4-3ad521ff2e13","name":"Webhook1","webhookId":"11aa3cf7-21c5-4881-89f5-0ba57890881c"},{"parameters":{"method":"POST","url":"https://api.openai.com/v1/images/generations","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"bodyParameters":{"parameters":[{"name":"prompt","value":"={{ $json.output }}"},{"name":"model","value":"gpt-image-1"},{"name":"size","value":"1024x1024"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[916,-180],"id":"36599dae-900d-4a5b-a44e-1ec67a3cb32d","name":"HTTP Request","credentials":{"httpHeaderAuth":{"id":"z06CbCGaeEeBPVIt","name":"GPT Image Generator"}}},{"parameters":{"authentication":"airtableOAuth2Api","operation":"update","base":{"__rl":true,"value":"={{ $('Process Data').item.json.baseId }}","mode":"id"},"table":{"__rl":true,"value":"={{ $('Process Data').item.json.tableId }}","mode":"id"},"columns":{"mappingMode":"defineBelow","value":{"id":"={{ $('Process Data').item.json.recordId }}","Image":"=[\n  {\n    \"url\": \"{{ $json.data.url }}\"\n  }\n]"},"matchingColumns":["id"],"schema":[{"id":"id","displayName":"id","required":false,"defaultMatch":true,"display":true,"type":"string","readOnly":true,"removed":false},{"id":"Hook","displayName":"Hook","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Post","displayName":"Post","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Platform","displayName":"Platform","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"options","options":[{"name":"Facebook","value":"Facebook"},{"name":"LinkedIn","value":"LinkedIn"},{"name":"X","value":"X"},{"name":"Medium","value":"Medium"},{"name":"Instagram","value":"Instagram"}],"readOnly":false,"removed":false},{"id":"Image","displayName":"Image","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"array","readOnly":false,"removed":false},{"id":"Image Generate","displayName":"Image Generate","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Generate Image","displayName":"Generate Image","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":true,"removed":true},{"id":"Angle","displayName":"Angle","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Intent","displayName":"Intent","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Comments","displayName":"Comments","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Content Type","displayName":"Content Type","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"array","options":[{"name":"Image","value":"Image"},{"name":"Video","value":"Video"}],"readOnly":false,"removed":false},{"id":"Status","displayName":"Status","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"options","options":[{"name":"Approved","value":"Approved"},{"name":"Not Approved","value":"Not Approved"},{"name":"Waiting","value":"Waiting"}],"readOnly":false,"removed":false},{"id":"Date Send","displayName":"Date Send","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"dateTime","readOnly":false,"removed":false},{"id":"Schedule Date","displayName":"Schedule Date","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"dateTime","readOnly":false,"removed":false},{"id":"Schedule Send","displayName":"Schedule Send","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"dateTime","readOnly":false,"removed":false},{"id":"Temperature","displayName":"Temperature","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false}],"attemptToConvertTypes":false,"convertFieldsToString":false},"options":{}},"type":"n8n-nodes-base.airtable","typeVersion":2.1,"position":[1796,-130],"id":"a1a5cabd-14f0-43a6-8198-8d0999171738","name":"VS Sport Airtable","credentials":{"airtableOAuth2Api":{"id":"pOcHNkax3d1V3xqS","name":"Airtable VS Sport"}}},{"parameters":{"method":"POST","url":"https://api.imgbb.com/1/upload","sendBody":true,"contentType":"multipart-form-data","bodyParameters":{"parameters":[{"name":"key","value":"906d52e8dfd22db6e234f01e2707bf41"},{"parameterType":"formBinaryData","name":"image","inputDataFieldName":"data"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[1356,-180],"id":"5e053be4-4595-4ac9-a40c-0dbf409dbb6e","name":"HTTP Request1"},{"parameters":{"operation":"toBinary","sourceProperty":"data[0].b64_json","options":{}},"type":"n8n-nodes-base.convertToFile","typeVersion":1.1,"position":[1136,-180],"id":"81a07fd7-6731-4037-8200-df493faaff62","name":"Convert to File"},{"parameters":{"rules":{"values":[{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"92fd768d-3ed5-401b-9837-31d0c297a23d","leftValue":"={{ $json['Business Name'] }}","rightValue":"Jetour","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"}},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"e80e343b-dbd7-42aa-8f8c-26badfb21258","leftValue":"={{ $json['Business Name'] }}","rightValue":"JAC","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"}},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"f59c4059-51e2-4520-a4b9-b26f5685eab6","leftValue":"={{ $json['Business Name'] }}","rightValue":"Mitsubishi","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"}},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"193447b3-3ff4-408a-bbca-788b0a6a7c58","leftValue":"={{ $json['Business Name'] }}","rightValue":"JAC Westrand","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"}},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"b4d39370-f92e-4edb-b627-5044bcc16424","leftValue":"={{ $('Process Data').item.json.baseId }}","rightValue":"appYCyeY7F24c9yuT","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"VS Sport"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"e501993d-1922-4cd3-840f-80dc292d0fd6","leftValue":"={{ $json['Business Name'] }}","rightValue":"RevDev","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"}},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"7fa8f19a-ec00-4ad8-95d6-76492d21d68d","leftValue":"={{ $json['Business Name'] }}","rightValue":"CBRM","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"}},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"706033fc-8cac-4caa-aa50-68f87403c899","leftValue":"={{ $('Process Data').item.json.tableId }}","rightValue":"=tbl7HDn68N7UOQ8fG","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"MG Bryanston"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"095fd86b-e237-40d7-ab96-8157c9778ea3","leftValue":"={{ $json['Business Name'] }}","rightValue":"MG Ruimsig","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"MG Ruimsig"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"2c7a54ed-057e-4d7b-920c-1bea47051f02","leftValue":"={{ $json['Business Name'] }}","rightValue":"JAC Middelburg","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"JAC Middelburg"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"a07c3700-a895-4213-bfcc-61ebf9814eee","leftValue":"={{ $('Process Data').item.json.baseId }}","rightValue":"appvrzu1zv7yet0ID","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"Octogas"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"42ae8052-d63d-4762-9988-0c3080e4cae9","leftValue":"={{ $('Process Data').item.json.baseId }}","rightValue":"appI4boUUL9EPR49g","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"Modern Management"}]},"options":{}},"type":"n8n-nodes-base.switch","typeVersion":3.2,"position":[1576,-219],"id":"deca893e-9b65-4d2a-a3a4-6ecb762fac2a","name":"Switch1"},{"parameters":{"promptType":"define","text":"={{ $('Webhook1').item.json.query.imageGenerate }}","options":{"systemMessage":"=You are an expert in converting markdown format in to json format. \n\nImpostant:\n- Do not change the text that is provide to you, only convert it.\n- Keep the caption the same, dont change IT!\n\nYour task is to take a structured image description and convert to json.\n\nINPUT FORMAT: You'll receive a description with sections like:\n- Image Focus: [main subject]\n- Image Scene: [setting and action] \n- Image Background Description: [environment details]\n- Image Caption: [text overlay]\n\nOUTPUT FORMAT: \nReturn a JSON object with:\n\n**imagefocus**: main subject\n**imagescene**: setting and action \n**imagebackground**: environment details\n**imagecaption**: text overlay\n\nFocus on:\n- Clear, specific visual descriptions\n- Professional photography terminology\n- Detailed scene composition\n- Lighting and atmosphere details\n- Exact positioning and elements\n\nConvert the structured input into one flowing, detailed prompt. Image Caption max leth is 8 word. "}},"type":"@n8n/n8n-nodes-langchain.agent","typeVersion":1.9,"position":[540,-280],"id":"052db3aa-5a8f-4eda-acc6-b39f43616dc1","name":"AI Agent"},{"parameters":{"options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenRouter","typeVersion":1,"position":[628,-60],"id":"9e8d0bba-d051-41ce-ac04-e1e116ce464e","name":"OpenRouter Chat Model","credentials":{"openRouterApi":{"id":"eni2kFdHGvy7lEd3","name":"OpenRouter account"}}},{"parameters":{"authentication":"airtableOAuth2Api","operation":"update","base":{"__rl":true,"value":"={{ $('Process Data').item.json.baseId }}","mode":"id"},"table":{"__rl":true,"value":"={{ $('Process Data').item.json.tableId }}","mode":"id"},"columns":{"mappingMode":"defineBelow","value":{"id":"={{ $('Process Data').item.json.recordId }}","Image":"=[\n  {\n    \"url\": \"{{ $json.data.url }}\"\n  }\n]"},"matchingColumns":["id"],"schema":[{"id":"id","displayName":"id","required":false,"defaultMatch":true,"display":true,"type":"string","readOnly":true,"removed":false},{"id":"Hook","displayName":"Hook","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Post","displayName":"Post","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Platform","displayName":"Platform","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"options","options":[{"name":"Facebook","value":"Facebook"},{"name":"LinkedIn","value":"LinkedIn"},{"name":"X","value":"X"},{"name":"Medium","value":"Medium"},{"name":"Instagram","value":"Instagram"}],"readOnly":false,"removed":false},{"id":"Image","displayName":"Image","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"array","readOnly":false,"removed":false},{"id":"Image Generate","displayName":"Image Generate","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Image Gen","displayName":"Image Gen","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":true,"removed":false},{"id":"Angle","displayName":"Angle","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Intent","displayName":"Intent","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Comments","displayName":"Comments","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Content Type","displayName":"Content Type","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"array","options":[{"name":"Image","value":"Image"},{"name":"Video","value":"Video"}],"readOnly":false,"removed":false},{"id":"Status","displayName":"Status","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"options","options":[{"name":"Approved","value":"Approved"},{"name":"Not Approved","value":"Not Approved"},{"name":"Waiting","value":"Waiting"}],"readOnly":false,"removed":false},{"id":"Date Send","displayName":"Date Send","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"dateTime","readOnly":false,"removed":false},{"id":"Schedule Date","displayName":"Schedule Date","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"dateTime","readOnly":false,"removed":false},{"id":"Schedule Send","displayName":"Schedule Send","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"dateTime","readOnly":false,"removed":false},{"id":"Temperature","displayName":"Temperature","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false}],"attemptToConvertTypes":false,"convertFieldsToString":false},"options":{}},"type":"n8n-nodes-base.airtable","typeVersion":2.1,"position":[1820,240],"id":"726c1298-5a29-4b3c-890b-065f16f169cc","name":"Modern mangement Airtable1","credentials":{"airtableOAuth2Api":{"id":"pOcHNkax3d1V3xqS","name":"Airtable VS Sport"}}},{"parameters":{"operation":"toBinary","sourceProperty":"data[0].b64_json","options":{}},"type":"n8n-nodes-base.convertToFile","typeVersion":1.1,"position":[1136,120],"id":"6ef85251-f929-488d-8c1e-9175e342e791","name":"Convert to File2"},{"parameters":{"method":"POST","url":"https://api.openai.com/v1/images/edits","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"contentType":"multipart-form-data","bodyParameters":{"parameters":[{"parameterType":"formBinaryData","name":"image","inputDataFieldName":"data"},{"name":"prompt","value":"=\"role\": \"system\",\n      \"content\": \"You are an expert at creating new images based on reference images and user instructions. Focus on generating high-quality images that incorporate elements from the reference while following the user's specifications.\n\n## Key Requirements:\n- Focus on hyper-realistic, professional studio photography.\n- Maintain a clean, minimalistic, and elegant visual style.\n- Highlight the product as the main subject with sharp detail and perfect lighting.\n- Use backgrounds that complement but do not overpower the product (e.g., soft gradient, light-colored, or pure white).\n- Include professional lighting details such as \"softbox lighting\", \"studio lights\", or \"natural soft shadows\".\n- Emphasize realism, texture, and color accuracy.\n- Maintain a high-end, premium look and feel.\n- If applicable, suggest a subtle setting that enhances the product's story (e.g., a luxury kitchen counter for a high-end blender).\"\n\n\"role\": \"user\",\n      \"content\": \"Create a new image based on the reference image provided with these specifications:\n\nImage Focus: [{{ $('Generate Product Script').item.json.output.imagefocus }}]\nScene Description: [{{ $('Generate Product Script').item.json.output.imagescene }}]\nBackground Description: [{{ $('Generate Product Script').item.json.output.imagebackground }}]\nDesired Caption: [{{ $('Generate Product Script').item.json.output.imagecaption }}]\nGenerate a new image that uses the provided image as a reference while following these specifications.\"\n\n                  "},{"name":"model","value":"gpt-image-1"},{"name":"size","value":"=1024x1024"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[940,140],"id":"0ec804bf-6ed1-4808-94dd-d8877e943c5d","name":"Create Image1","credentials":{"httpHeaderAuth":{"id":"z06CbCGaeEeBPVIt","name":"GPT Image Generator"}}},{"parameters":{"url":"={{ $('Process Data').item.json.imageStyle }}","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[740,140],"id":"de4fbd6c-a7dd-42e5-be84-11c66d3362f7","name":"HTTP Request3"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"59a5a112-6e31-4318-9d20-5fb58912ba2d","leftValue":"={{ $json.imageStyle }}","rightValue":"","operator":{"type":"string","operation":"empty","singleValue":true}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[100,-20],"id":"760312a2-8912-4695-8d81-3f1f0ee12b61","name":"If"},{"parameters":{"method":"POST","url":"https://api.imgbb.com/1/upload","sendBody":true,"contentType":"multipart-form-data","bodyParameters":{"parameters":[{"name":"key","value":"906d52e8dfd22db6e234f01e2707bf41"},{"parameterType":"formBinaryData","name":"image","inputDataFieldName":"data"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[1356,120],"id":"8ae37e85-1f2c-4163-88be-6fc8c6ef4e08","name":"HTTP Request2"},{"parameters":{"jsonSchemaExample":"{\n  \"imagefocus\": \"string\",\n  \"imagescene\": \"string\",\n  \"imagebackground\": \"string\",\n  \"imagecaption\": \"string\"\n}"},"type":"@n8n/n8n-nodes-langchain.outputParserStructured","typeVersion":1.2,"position":[580,360],"id":"eba18add-8e64-4d11-acfd-0b54a805a602","name":"Script Output Parser"},{"parameters":{"promptType":"define","text":"={{ $('Webhook1').item.json.query.imageGenerate }}","hasOutputParser":true,"messages":{"messageValues":[{"message":"=You are an expert in converting markdown format in to json format. \n\nImpostant:\n- Do not change the text that is provide to you, only convert it. \n- Keep the caption the same, dont change IT!\n\nYour task is to take a structured image description and convert to json.\n\nINPUT FORMAT: You'll receive a description with sections like:\n- Image Focus: [main subject]\n- Image Scene: [setting and action] \n- Image Background Description: [environment details]\n- Image Caption: [text overlay]\n\nOUTPUT FORMAT: \nReturn a JSON object with:\n\n**imagefocus**: main subject\n**imagescene**: setting and action \n**imagebackground**: environment details\n**imagecaption**: text overlay\n\nFocus on:\n- Clear, specific visual descriptions\n- Professional photography terminology\n- Detailed scene composition\n- Lighting and atmosphere details\n- Exact positioning and elements\n\nConvert the structured input into one flowing, detailed prompt. Image Caption max leth is 8 word. "}]}},"type":"@n8n/n8n-nodes-langchain.chainLlm","typeVersion":1.5,"position":[400,140],"id":"eee6952a-26a1-4176-a035-f8db9fde98bd","name":"Generate Product Script"},{"parameters":{"authentication":"airtableOAuth2Api","operation":"upsert","base":{"__rl":true,"value":"={{ $('Process Data').item.json.baseId }}","mode":"id"},"table":{"__rl":true,"value":"={{ $('Process Data').item.json.tableId }}","mode":"id"},"columns":{"mappingMode":"defineBelow","value":{"id":"={{ $('Process Data').item.json.recordId }}","Image":"=[\n  {\n    \"url\": \"{{ $json.data.url }}\"\n  }\n]"},"matchingColumns":["id"],"schema":[{"id":"id","displayName":"id","required":false,"defaultMatch":true,"display":true,"type":"string","readOnly":true,"removed":false},{"id":"Hook","displayName":"Hook","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Post","displayName":"Post","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Platform","displayName":"Platform","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"options","options":[{"name":"Facebook","value":"Facebook"},{"name":"LinkedIn","value":"LinkedIn"},{"name":"X","value":"X"},{"name":"Medium","value":"Medium"},{"name":"Instagram","value":"Instagram"}],"readOnly":false,"removed":false},{"id":"Image","displayName":"Image","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"array","readOnly":false,"removed":false},{"id":"Image Generate","displayName":"Image Generate","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Image Gen","displayName":"Image Gen","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":true,"removed":false},{"id":"Angle","displayName":"Angle","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Intent","displayName":"Intent","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Comments","displayName":"Comments","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Content Type","displayName":"Content Type","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"array","options":[{"name":"Image","value":"Image"},{"name":"Video","value":"Video"}],"readOnly":false,"removed":false},{"id":"Status","displayName":"Status","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"options","options":[{"name":"Approved","value":"Approved"},{"name":"Not Approved","value":"Not Approved"},{"name":"Waiting","value":"Waiting"}],"readOnly":false,"removed":false},{"id":"Date Send","displayName":"Date Send","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"dateTime","readOnly":false,"removed":false},{"id":"Schedule Date","displayName":"Schedule Date","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"dateTime","readOnly":false,"removed":false},{"id":"Schedule Send","displayName":"Schedule Send","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"dateTime","readOnly":false,"removed":false},{"id":"Temperature","displayName":"Temperature","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false}],"attemptToConvertTypes":false,"convertFieldsToString":false},"options":{}},"type":"n8n-nodes-base.airtable","typeVersion":2.1,"position":[1840,40],"id":"5bb9c310-13a9-41b5-95ac-ae1b0f2a764e","name":"MG Bryanston Airtable","credentials":{"airtableOAuth2Api":{"id":"vOn3xh0AyBuS5bmm","name":"Airtable MG Bryanston"}}},{"parameters":{"authentication":"airtableOAuth2Api","operation":"update","base":{"__rl":true,"value":"={{ $('Process Data').item.json.baseId }}","mode":"id"},"table":{"__rl":true,"value":"={{ $('Process Data').item.json.tableId }}","mode":"id"},"columns":{"mappingMode":"defineBelow","value":{"id":"={{ $('Process Data').item.json.recordId }}","Image":"=[\n  {\n    \"url\": \"{{ $json.data.url }}\"\n  }\n]"},"matchingColumns":["id"],"schema":[{"id":"id","displayName":"id","required":false,"defaultMatch":true,"display":true,"type":"string","readOnly":true,"removed":false},{"id":"Hook","displayName":"Hook","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Post","displayName":"Post","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Platform","displayName":"Platform","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"options","options":[{"name":"Facebook","value":"Facebook"},{"name":"LinkedIn","value":"LinkedIn"},{"name":"X","value":"X"},{"name":"Medium","value":"Medium"},{"name":"Instagram","value":"Instagram"}],"readOnly":false,"removed":false},{"id":"Image","displayName":"Image","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"array","readOnly":false,"removed":false},{"id":"Image Generate","displayName":"Image Generate","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Generate Image","displayName":"Generate Image","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":true,"removed":true},{"id":"Angle","displayName":"Angle","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Intent","displayName":"Intent","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Comments","displayName":"Comments","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Content Type","displayName":"Content Type","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"array","options":[{"name":"Image","value":"Image"},{"name":"Video","value":"Video"}],"readOnly":false,"removed":false},{"id":"Status","displayName":"Status","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"options","options":[{"name":"Approved","value":"Approved"},{"name":"Not Approved","value":"Not Approved"},{"name":"Waiting","value":"Waiting"}],"readOnly":false,"removed":false},{"id":"Date Send","displayName":"Date Send","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"dateTime","readOnly":false,"removed":false},{"id":"Schedule Date","displayName":"Schedule Date","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"dateTime","readOnly":false,"removed":false},{"id":"Schedule Send","displayName":"Schedule Send","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"dateTime","readOnly":false,"removed":false},{"id":"Temperature","displayName":"Temperature","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false}],"attemptToConvertTypes":false,"convertFieldsToString":false},"options":{}},"type":"n8n-nodes-base.airtable","typeVersion":2.1,"position":[1980,140],"id":"b0b8ca2a-49a9-493c-924e-9ecfde590fdc","name":"Octogas Airtable1","credentials":{"airtableOAuth2Api":{"id":"pOcHNkax3d1V3xqS","name":"Airtable VS Sport"}}}],"connections":{"Webhook1":{"main":[[{"node":"Process Data","type":"main","index":0}]]},"Process Data":{"main":[[{"node":"If","type":"main","index":0}]]},"HTTP Request":{"main":[[{"node":"Convert to File","type":"main","index":0}]]},"HTTP Request1":{"main":[[{"node":"Switch1","type":"main","index":0}]]},"Convert to File":{"main":[[{"node":"HTTP Request1","type":"main","index":0}]]},"Switch1":{"main":[[],[],[],[],[{"node":"VS Sport Airtable","type":"main","index":0}],[],[],[{"node":"MG Bryanston Airtable","type":"main","index":0}],[],[],[{"node":"Octogas Airtable1","type":"main","index":0}],[{"node":"Modern mangement Airtable1","type":"main","index":0}]]},"AI Agent":{"main":[[{"node":"HTTP Request","type":"main","index":0}]]},"OpenRouter Chat Model":{"ai_languageModel":[[{"node":"AI Agent","type":"ai_languageModel","index":0},{"node":"Generate Product Script","type":"ai_languageModel","index":0}]]},"Convert to File2":{"main":[[{"node":"HTTP Request2","type":"main","index":0}]]},"Create Image1":{"main":[[{"node":"Convert to File2","type":"main","index":0}]]},"HTTP Request3":{"main":[[{"node":"Create Image1","type":"main","index":0}]]},"If":{"main":[[{"node":"AI Agent","type":"main","index":0}],[{"node":"Generate Product Script","type":"main","index":0}]]},"HTTP Request2":{"main":[[{"node":"Switch1","type":"main","index":0}]]},"Generate Product Script":{"main":[[{"node":"HTTP Request3","type":"main","index":0}]]},"Script Output Parser":{"ai_outputParser":[[{"node":"Generate Product Script","type":"ai_outputParser","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{"Webhook1":[{"json":{"headers":{"host":"n8n.aiautomata.co.za","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36","accept":"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7","accept-encoding":"gzip, br","accept-language":"en-US,en;q=0.9","cdn-loop":"cloudflare; loops=1","cf-connecting-ip":"192.143.134.193","cf-ipcountry":"ZA","cf-ray":"94e8c421bc9473b8-JNB","cf-visitor":"{\"scheme\":\"https\"}","cookie":"rl_page_init_referrer=RudderEncrypt%3AU2FsdGVkX19hnsbRmPkVMqmzzrknWQyVWDIE2NpvQqQ%3D; rl_page_init_referring_domain=RudderEncrypt%3AU2FsdGVkX1%2Bmlqo7bMm%2Fgq924xFi3JnKiMNS1Bf4SBs%3D; n8n-auth=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjFhNjFjZjBlLWRiMjQtNGQyYS1hYzM5LTU0MGUxNTc1OWViZiIsImhhc2giOiJrZm1GTlkwR3YzIiwiYnJvd3NlcklkIjoiVXN5WTZDS3E1WGhUTWVQTElhQXJySG56R2dER3N4ditZOUl2NUxZTTJqbz0iLCJpYXQiOjE3NDk1NDE1NDcsImV4cCI6MTc1MDE0NjM0N30.GQHTdvDxI0Q6aitekz4jXThWolQ6YFyKFVvHgmW3WFY; user_session=eyJ1c2VyX2lkIjoiMSIsInRva2VuX2hhc2giOiI2ZTgzM2M4MzQ1M2EzYTliOWNkYTVhMWVjYTk1NzcyNWJkZDUxOTM2ZGIwYjhjNTFjMDJlYWU1NzUxN2ZmOGIwIn0%3A1uOtgg%3AnBJjOcHcGfuEGD0GprmNlz021r8RzArwvjk85ujR0oI; rl_anonymous_id=RudderEncrypt%3AU2FsdGVkX19eqdfqWB2YX9zRNtI4MXLA4k1NXJzAEcEWLrTwQjE6ZrgcYKruFTfwgh3JAKfvwN%2BfZQNSN51rTQ%3D%3D; rl_user_id=RudderEncrypt%3AU2FsdGVkX19vx5r2bKYUOcoL8UdThlyUgdW%2BeprISMRJFyJqfP5SsHMlUedcB85G26nwR9ARAxQqyvonBdcExu7lFQGx4I6jO8l0SUkOOKfUQxfQGJbIDaONPpBWPqn6ljZ7LcsUbrkCvkzRY6%2BbX7fAuSmktxiBZOYXw4KIVFk%3D; rl_trait=RudderEncrypt%3AU2FsdGVkX19WLP8YoFEMIY5WjJtSWZytDgWawIJ8QuUh7pyMXwEjYn2zBtT%2BtvAVTUTepioeplia75zbpLIAhFrY666I4fQC7GZHE6JV9VEB231M0Acy7KQ2R5SW8BHRd7hpXPSwnt9SpFwadBU98g%3D%3D; ph_phc_4URIAm1uYfJO7j8kWSe0J8lc8IqnstRLS7Jx8NcakHo_posthog=%7B%22distinct_id%22%3A%2215a60e08082ab352e35a507877bcd1434fb079a9fcbac992f93eb2b8909136d7%231a61cf0e-db24-4d2a-ac39-540e15759ebf%22%2C%22%24sesid%22%3A%5B1749724010280%2C%220197639a-9add-78b7-935b-5e7d67184363%22%2C1749722766042%5D%2C%22%24epp%22%3Atrue%2C%22%24initial_person_info%22%3A%7B%22r%22%3A%22%24direct%22%2C%22u%22%3A%22https%3A%2F%2Fn8n.aiautomata.co.za%2Fsignin%3Fredirect%3D%25252F%22%7D%7D; rl_session=RudderEncrypt%3AU2FsdGVkX19rRuR4QhaJh3GMahpGhlUOpCNhW4T4r5Yg8gbFCSTk8CSN3FAdSuNR%2FFFdcalcEn9UHDlGhI9lUzzTj9C%2F0EqhYkWIGUk1fDqpv6ULd26XYE6FHKVwCz7HxgNvPJiPBNI9aAJIGBK9Ug%3D%3D","priority":"u=0, i","sec-ch-ua":"\"Google Chrome\";v=\"137\", \"Chromium\";v=\"137\", \"Not/A)Brand\";v=\"24\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"document","sec-fetch-mode":"navigate","sec-fetch-site":"cross-site","sec-fetch-user":"?1","upgrade-insecure-requests":"1","x-forwarded-for":"197.234.242.183","x-forwarded-host":"n8n.aiautomata.co.za","x-forwarded-port":"443","x-forwarded-proto":"https","x-forwarded-server":"4dfffab53bdb","x-real-ip":"197.234.242.183"},"params":{},"query":{"recordId":"recUOJal8ppE0nCXy","baseId":"appvrzu1zv7yet0ID","tableId":"tblht1ivQa3A7OzTy","hook":"💧 When load-shedding strikes, your shower shouldn't go cold...","post":"Introducing Octogas's Fan Forced Geyser – the intelligent solution keeping South African homes running hot water even when the power goes out.\n\nWith over 40% energy savings compared to traditional electric geysers, our UPS-compatible technology ensures your facility never misses a hot water moment – even during the toughest power cuts.\n\nFully certified for safety (LPGSA, SANS, SABS approved) and designed for flexible indoor/outdoor installation, it's the smart choice for property managers watching both the bottom line and tenant satisfaction.\n\nCurious how much your property could save? 👇\n\nTap the link in bio to download our savings calculator and discover what your monthly utility bills could look like with Octogas working for you.","platform":"Instagram","imageGenerate":"### Image Focus\nA sleek, modern-looking gas geyser unit prominently displayed as the centerpiece, symbolizing innovation and efficiency in home utilities.  \n\n### Image Scene\nA cozy bathroom setting lit by candles, showcasing a steaming shower as if someone is enjoying hot water despite the darkness outside. The geyser is mounted on the wall and visually connected to the idea of power reliability. A family member, silhouetted in the shower, exudes comfort and ease.  \n\n### Image Background Description\nRealistic style. A dimly-lit interior suggests a power outage, complemented by a warm ambiance created by candles and soft shadows. Through the window, a subtle glimpse of a night sky indicates the time. Neutral tones blend with bright pops of orange on the geyser design and a glowing reassuring LED indicator on the geyser.\n\n### Image Caption  \n\"Never miss hot water moments – even in power cuts!\"  ","angle":"Addressing the frustration of cold showers during load-shedding while emphasizing significant cost savings for budget-conscious property managers","intent":"Position Octogas as the reliable, certified solution to South Africa's energy crisis for hot water needs while highlighting tangible financial benefits","contentType":"","status":"Waiting","temperature":"","imageStyle":"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSJ3S8zgDdww-wQ3JJS4Xd-M1QHzoY8UxLhtprkYik3pkrW4KD3CJRWU295fUUXaJ9Iuaw&usqp=CAU"},"body":{},"webhookUrl":"https://n8n.aiautomata.co.za/webhook/9ea79a9b-1cb3-46cd-afed-61882884c1ef","executionMode":"production"}}]},"versionId":"24a59789-455c-47f7-bf77-53a045c43d01","triggerCount":1,"shared":[{"createdAt":"2025-06-03T23:44:10.597Z","updatedAt":"2025-06-03T23:44:10.597Z","role":"workflow:owner","workflowId":"mhN1WCdsRjSq4nQa","projectId":"pRXFeKq9D8e0hAOx"}],"tags":[]},{"createdAt":"2025-06-19T03:24:37.787Z","updatedAt":"2025-08-24T14:09:15.000Z","id":"odII27ElQAwchvE8","name":"VS. Sport Email Campaign v2","active":true,"isArchived":false,"nodes":[{"parameters":{"formTitle":"VS Sports Email Campaign Creator","formDescription":"Create professional sports analytics email campaigns with comprehensive customization options","formFields":{"values":[{"fieldLabel":"Campaign Name","placeholder":"e.g., Tennis Championship Congrats - May 2024","requiredField":true},{"fieldLabel":"Email Type","fieldType":"dropdown","fieldOptions":{"values":[{"option":"Educational/Analytics Insight"},{"option":"Congratulatory/Achievement"},{"option":"Promotional/Special Offer"},{"option":"General Engagement/Season Update"},{"option":"Performance Analysis Report"},{"option":"Training Tips & Techniques"}]},"requiredField":true},{"fieldLabel":"Sport Category","fieldType":"dropdown","fieldOptions":{"values":[{"option":"Tennis"},{"option":"Rugby"},{"option":"Hockey"},{"option":"Netball"},{"option":"Waterpolo"},{"option":"Pickleball"},{"option":"All Sports"}]},"requiredField":true},{"fieldLabel":"Target Audience","fieldType":"dropdown","fieldOptions":{"values":[{"option":"Coaches"},{"option":"Players"},{"option":"Athletic Directors"},{"option":"Program Administrators"},{"option":"Mixed Audience"},{"option":"Parents/Guardians"},{"option":"Sponsors/Partners"}]},"requiredField":true},{"fieldLabel":"Email Focus/Description","fieldType":"textarea","placeholder":"Describe the main message and purpose of this email campaign. Include key points, achievements, or insights you want to highlight...","requiredField":true},{"fieldLabel":"Campaign Priority","fieldType":"dropdown","fieldOptions":{"values":[{"option":"High"},{"option":"Medium"},{"option":"Low"}]}},{"fieldLabel":"Send Date","fieldType":"date"},{"fieldLabel":"Header Image Upload","fieldType":"file","multipleFiles":false,"acceptFileTypes":".jpg,.jpeg,.png,.gif,.webp"},{"fieldLabel":"Header Image URL","placeholder":"https://example.com/header-image.gif"},{"fieldLabel":"Section 1 (Hook) Image Upload","fieldType":"file","multipleFiles":false,"acceptFileTypes":".jpg,.jpeg,.png,.gif,.webp"},{"fieldLabel":"Section 1 (Hook) Image URL","placeholder":"https://example.com/hook-image.png"},{"fieldLabel":"Section 2 (Information) Image Upload","fieldType":"file","multipleFiles":false,"acceptFileTypes":".jpg,.jpeg,.png,.gif,.webp"},{"fieldLabel":"Section 2 (Information) Image URL","placeholder":"https://example.com/info-image.png"},{"fieldLabel":"VS Sports Logo Upload","fieldType":"file","multipleFiles":false,"acceptFileTypes":".jpg,.jpeg,.png,.gif,.webp"},{"fieldLabel":"VS Sports Logo URL","placeholder":"https://example.com/cta-image.png"},{"fieldLabel":"CTA Button Text","placeholder":"e.g., Book a Demo, Get Started, Learn More"},{"fieldLabel":"CTA Button URL","placeholder":"e.g., https://vssports.us/contact, https://vssports.us/demo"},{"fieldLabel":"Additional Notes","fieldType":"textarea","placeholder":"Any additional requirements, special instructions, or context for this campaign..."}]},"responseMode":"lastNode","options":{"appendAttribution":true,"buttonLabel":"Create Campaign"}},"type":"n8n-nodes-base.formTrigger","typeVersion":2.2,"position":[-3180,1260],"id":"c6aba715-bea0-4574-bad6-fd233988a71a","name":"VS Sports Email Campaign Form","webhookId":"0af73e59-d6ae-4e0f-8c73-f4d7b0a4ffe5"},{"parameters":{"model":"anthropic/claude-opus-4","options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenRouter","typeVersion":1,"position":[-2052,721.5],"id":"0fd03478-5292-45c8-aa02-f9ec793810ce","name":"OpenRouter Chat Model2","credentials":{"openRouterApi":{"id":"eni2kFdHGvy7lEd3","name":"OpenRouter account"}}},{"parameters":{"jsonSchemaExample":"{\n  \"subject_line\": \"Example Subject Line\",\n  \"hook_title\": \"Compelling Hook Title Here\",\n  \"hook\": \"Hook section content (50-100 words with 2-sentence paragraphs)\",\n  \"key_insights_title\": \"Dynamic Section Title\",\n  \"information\": \"Information section content (150-200 words with proper formatting)\",\n  \"details\": \"Details section content (150-200 words with proper formatting)\"\n}"},"type":"@n8n/n8n-nodes-langchain.outputParserStructured","typeVersion":1.2,"position":[-1932,721.5],"id":"433c9860-fea3-4ebe-8cb3-5d91e4d2303d","name":"VS Sports Email Structure Parser"},{"parameters":{"promptType":"define","text":"=### Campaign Details\n- **Campaign Name**: \"{{ $json['Campaign Name'] }}\"\n- **Email Type**: \"{{ $json['Email Type'] }}\"\n- **Sport Category**: \"{{ $json['Sport Category'] }}\"\n- **Target Audience**: \"{{ $json['Target Audience'] }}\"\n- **Email Focus/Description**: \"{{ $json['Email Focus/Description'] }}\"\n- **Campaign Priority**: \"{{ $json['Campaign Priority'] || 'Medium' }}\"\n- **Send Date**: \"{{ $json['Send Date'] || 'Not specified' }}\"\n","hasOutputParser":true,"options":{"systemMessage":"=You are VS. Sports' expert email content creator, specializing in professional sports analytics communications. Your task is to create compelling, structured email content that maintains VS. Sports' brand voice while delivering value to sports professionals.\n\n### VS. Sports Brand Guidelines\n- **Tone**: Professional yet approachable, data-driven, supportive of athletic excellence\n- **Voice**: Expert authority in sports analytics, encouraging, results-focused\n- **Style**: Clean, modern, emphasizes performance improvement and competitive advantage\n- **Colors**: Blue highlights, black/blue feature boxes (mentioned in design)\n- **Focus**: Performance analytics, achievement recognition, competitive edge through data\n\n### Content Structure Requirements\nGenerate exactly 6 distinct components with specific formatting:\n\n**1. SUBJECT LINE (35-50 characters)**\n- Compelling and concise\n- Includes sport or key benefit when possible\n- Optimized for mobile preview\n- Creates curiosity or urgency\n\n**2. HOOK_TITLE (Maximum 10 words)**\n- Powerful, attention-grabbing headline\n- Sport-specific and relevant to the email type\n- Creates urgency or curiosity\n- NOT the email type - this should be a compelling hook\n\n**3. HOOK (50-100 words)**\n- Short paragraph format\n- Maximum 2 sentences per paragraph, then add line break\n- Attention-grabbing opening that connects with target audience\n- Addresses a key pain point or opportunity\n\n**4. KEY_INSIGHTS_TITLE (Maximum 6 words)**\n- Dynamic title for the insights section\n- Should relate to the specific content (not always \"Key Insights\")\n- Examples: \"Performance Metrics\", \"Game Changers\", \"Critical Data\", \"Winning Strategies\"\n\n**5. INFORMATION (150-200 words)**\n- Main content section with core message\n- Maximum 2 sentences per paragraph, then line break\n- Include bullet points when they improve readability\n- Sport-specific analytics or performance data when applicable\n- Educational value that positions VS Sports as the expert\n- Auto-detect and format URLs: \"text - url.com\" becomes linked text\n\n**6. DETAILS (150-200 words)**\n- Supporting information and additional benefits\n- Maximum 2 sentences per paragraph, then line break\n- Use bullet points when they enhance content structure\n- Deeper insights, features, or supporting evidence\n- NO fake names unless specifically provided in email focus/description\n- Technical details made accessible to the target audience\n\n### URL Formatting Rules\n- Detect pattern: \"text - url.com\" in email focus/description\n- Convert to: linked text (hide the URL, link the preceding text)\n- Example: \"USA schools - usaschools.com/ben\" becomes \"USA schools\" (linked)\n\n### Paragraph Formatting Rules\n- Maximum 2 sentences per paragraph\n- Add line break between paragraphs\n- Use bullet points strategically to improve readability\n- NOT every section needs bullets - only when beneficial\n\n### Email Type Specific Guidelines\n\n**Educational/Analytics Insight:**\n- Focus on data visualization concepts and performance metrics\n- Include specific statistics or analytical insights\n- Position VS Sports as the analytics authority\n- Emphasize learning and improvement\n\n**Congratulatory/Achievement:**\n- Celebrate specific accomplishments or milestones\n- Include performance highlights and achievements\n- Create emotional connection through recognition\n- Showcase success stories\n\n**Promotional/Special Offer:**\n- Highlight pricing, discounts, or limited-time offers\n- Create urgency with time-sensitive language\n- Emphasize value proposition and ROI\n- Include clear benefit statements\n\n**General Engagement/Season Update:**\n- Focus on relationship building and community\n- Share season highlights and upcoming events\n- Maintain engagement without hard selling\n- Build anticipation for future content\n\n**Performance Analysis Report:**\n- Deep dive into specific performance metrics\n- Technical insights made accessible\n- Comparative analysis and benchmarking\n- Actionable recommendations\n\n**Training Tips & Techniques:**\n- Practical, actionable advice\n- Evidence-based training methodologies\n- Progressive skill development concepts\n- Performance optimization strategies\n\n### Sport-Specific Adaptations\n\n**Tennis:** Focus on individual performance, technique analysis, match strategy\n**Rugby:** Team dynamics, physical conditioning, tactical analysis\n**Hockey:** Speed and agility, team coordination, game intelligence\n**Netball:** Precision and accuracy, team positioning, fitness optimization\n**Waterpolo:** Endurance and strength, tactical positioning, technique refinement\n**Pickleball:** Accessibility and fun, technique improvement, community building\n**All Sports:** Universal performance principles, cross-sport analytics, versatility\n\n### Target Audience Adaptations\n\n**Coaches:** Focus on team improvement, analytical insights, coaching tools\n**Players:** Individual performance enhancement, personal goals, skill development\n**Athletic Directors:** Program management, budget efficiency, overall program success\n**Program Administrators:** Operational efficiency, reporting capabilities, program oversight\n**Mixed Audience:** Balanced approach covering multiple perspectives\n**Parents/Guardians:** Player development, safety, progress tracking\n**Sponsors/Partners:** ROI demonstration, partnership value, brand association\n\n### Output Requirements\nYou MUST return a valid JSON object with exactly these 6 fields:\n{\n  \"subject_line\": \"[35-50 character compelling subject line]\",\n  \"hook_title\": \"[Maximum 10 words compelling headline]\",\n  \"hook\": \"[50-100 words with 2-sentence paragraphs and line breaks]\",\n  \"key_insights_title\": \"[Maximum 6 words dynamic section title]\",\n  \"information\": \"[150-200 words with proper formatting, bullets when beneficial]\",\n  \"details\": \"[150-200 words with proper formatting, bullets when beneficial]\"\n}\n\n### Quality Standards\n- Write in active voice with strong, action-oriented language\n- Use sport-specific terminology appropriately for the target audience\n- Include performance metrics, percentages, or data points when relevant\n- Maintain professional credibility while being engaging\n- Ensure each section flows logically to the next\n- Create content that positions VS Sports as the industry leader\n- Make technical concepts accessible without dumbing down\n- Include emotional connection points relevant to sports achievement\n- Process URLs from email focus/description automatically\n- Use provided information and references when available\n\nGenerate professional, compelling email content that will drive engagement and position VS Sports as the premier sports analytics platform."}},"type":"@n8n/n8n-nodes-langchain.agent","typeVersion":1.8,"position":[-2080,501.5],"id":"1d50e0f6-d8da-4402-9e8b-1e5d344ce40f","name":"VS Sports Email Content Generator"},{"parameters":{"jsCode":"// Header Image Logic - UPDATED for Enhanced Form Data and New Content Structure\n// Now properly handles ImgBB URLs and new AI content fields\n\n// Get form data and AI content\n// Check if we're getting enhanced form data from URL Aggregator or original form\nlet formData;\ntry {\n  // Try to get enhanced form data first (has ImgBB URLs if uploads were processed)\n  formData = $('URL Aggregator').first().json;\n  console.log('✅ Using enhanced form data from URL Aggregator');\n} catch (error) {\n  // Fallback to original form data\n  formData = $('VS Sports Email Campaign Form').first().json;\n  console.log('⚠️ Using original form data (URL Aggregator not found)');\n}\n\nconst aiContent = $('VS Sports Email Content Generator').first().json;\n\n// Check for uploaded header image and URL\nconst headerImageUpload = formData['Header Image Upload'];\nconst headerImageURL = formData['Header Image URL'];\n\nconsole.log('=== Header Image Logic (Enhanced) ===');\nconsole.log('Upload exists:', !!headerImageUpload?.filename);\nconsole.log('URL exists:', !!headerImageURL?.trim());\nconsole.log('URL value:', headerImageURL);\n\n// NEW: Get the updated AI content fields\nconst subjectLine = aiContent?.subject_line || aiContent?.output?.subject_line || 'VS Sports Update';\nconst hookTitle = aiContent?.hook_title || aiContent?.output?.hook_title || 'Transform Your Performance';\n\nconsole.log('AI Content - Subject Line:', subjectLine);\nconsole.log('AI Content - Hook Title:', hookTitle);\n\n// Priority 1: Use provided URL (even if upload also exists)\nif (headerImageURL && headerImageURL.trim() !== '') {\n  console.log('✅ Using provided URL for header (ignoring any upload)');\n  \n  return {\n    json: {\n      section: 'header',\n      imageSource: 'url',\n      imageData: null,\n      imageUrl: headerImageURL.trim(),\n      needsPrompt: false,\n      // Pass through data for other nodes\n      campaignName: formData['Campaign Name'],\n      emailType: formData['Email Type'],\n      sportCategory: formData['Sport Category'],\n      targetAudience: formData['Target Audience'],\n      // NEW: Pass new AI content fields\n      subjectLine: subjectLine,\n      hookTitle: hookTitle,\n      sectionContent: subjectLine, // For any prompt generation\n      // Enhanced metadata\n      imageType: 'provided_url',\n      _uploadIgnored: headerImageUpload ? `Upload \"${headerImageUpload.filename}\" ignored due to URL priority` : false\n    }\n  };\n}\n\n// Priority 2: No URL provided, use uploaded image\nif (headerImageUpload && typeof headerImageUpload === 'object' && headerImageUpload.filename) {\n  console.log('✅ No URL provided, using upload for header');\n  \n  return {\n    json: {\n      section: 'header',\n      imageSource: 'upload',\n      imageData: headerImageUpload,\n      imageUrl: null,\n      needsPrompt: false,\n      // Pass through data for other nodes\n      campaignName: formData['Campaign Name'],\n      emailType: formData['Email Type'],\n      sportCategory: formData['Sport Category'],\n      targetAudience: formData['Target Audience'],\n      // NEW: Pass new AI content fields\n      subjectLine: subjectLine,\n      hookTitle: hookTitle,\n      sectionContent: subjectLine,\n      // File metadata\n      fileName: headerImageUpload.filename,\n      fileType: headerImageUpload.mimetype,\n      fileSize: headerImageUpload.size,\n      imageType: 'uploaded_file'\n    }\n  };\n}\n\n// Priority 3: Need to generate image\nconsole.log('✅ No URL or upload, will generate header image');\n\nreturn {\n  json: {\n    section: 'header',\n    imageSource: 'generate',\n    imageData: null,\n    imageUrl: null,\n    needsPrompt: true,\n    // Pass through data for prompt generation\n    campaignName: formData['Campaign Name'],\n    emailType: formData['Email Type'],\n    sportCategory: formData['Sport Category'],\n    targetAudience: formData['Target Audience'],\n    // NEW: Enhanced content for image generation\n    subjectLine: subjectLine,\n    hookTitle: hookTitle,\n    sectionContent: `${hookTitle} - ${subjectLine}`, // Combined for better prompts\n    // Generation metadata\n    imageType: 'ai_generated',\n    generationContext: 'header_image'\n  }\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-1704,341],"id":"f38e7572-f9f8-49f4-a9c3-f4a2d1b4efcf","name":"Header Image Logic"},{"parameters":{"jsCode":"// Hook Image Logic - UPDATED for Enhanced Form Data and New Content Structure\n// Now properly handles ImgBB URLs and new AI content fields\n\n// Get form data and AI content\n// Check if we're getting enhanced form data from URL Aggregator or original form\nlet formData;\ntry {\n  // Try to get enhanced form data first (has ImgBB URLs if uploads were processed)\n  formData = $('URL Aggregator').first().json;\n  console.log('✅ Using enhanced form data from URL Aggregator');\n} catch (error) {\n  // Fallback to original form data\n  formData = $('VS Sports Email Campaign Form').first().json;\n  console.log('⚠️ Using original form data (URL Aggregator not found)');\n}\n\nconst aiContent = $('VS Sports Email Content Generator').first().json;\n\n// Check for uploaded hook image and URL\nconst hookImageUpload = formData['Section 1 (Hook) Image Upload'];\nconst hookImageURL = formData['Section 1 (Hook) Image URL'];\n\nconsole.log('=== Hook Image Logic (Enhanced) ===');\nconsole.log('Upload exists:', !!hookImageUpload?.filename);\nconsole.log('URL exists:', !!hookImageURL?.trim());\nconsole.log('URL value:', hookImageURL);\n\n// NEW: Get the updated AI content fields\nconst hookContent = aiContent?.hook || aiContent?.output?.hook || '';\nconst hookTitle = aiContent?.hook_title || aiContent?.output?.hook_title || 'Engaging Hook';\nconst sportCategory = formData['Sport Category'] || 'Sports';\n\nconsole.log('AI Content - Hook Content Preview:', hookContent.substring(0, 50) + '...');\nconsole.log('AI Content - Hook Title:', hookTitle);\n\n// Priority 1: Use provided URL (even if upload also exists)\nif (hookImageURL && hookImageURL.trim() !== '') {\n  console.log('✅ Using provided URL for hook (ignoring any upload)');\n  \n  return {\n    json: {\n      section: 'hook',\n      imageSource: 'url',\n      imageData: null,\n      imageUrl: hookImageURL.trim(),\n      needsPrompt: false,\n      // Pass through data for other nodes\n      campaignName: formData['Campaign Name'],\n      emailType: formData['Email Type'],\n      sportCategory: formData['Sport Category'],\n      targetAudience: formData['Target Audience'],\n      // NEW: Enhanced AI content fields\n      hookContent: hookContent,\n      hookTitle: hookTitle,\n      sectionContent: hookContent, // For any downstream processing\n      // Enhanced metadata\n      imageType: 'provided_url',\n      contentLength: hookContent.length,\n      _uploadIgnored: hookImageUpload ? `Upload \"${hookImageUpload.filename}\" ignored due to URL priority` : false\n    }\n  };\n}\n\n// Priority 2: No URL provided, use uploaded image\nif (hookImageUpload && typeof hookImageUpload === 'object' && hookImageUpload.filename) {\n  console.log('✅ No URL provided, using uploaded hook image');\n  \n  return {\n    json: {\n      section: 'hook',\n      imageSource: 'upload',\n      imageData: hookImageUpload,\n      imageUrl: null,\n      needsPrompt: false,\n      // Pass through data for other nodes\n      campaignName: formData['Campaign Name'],\n      emailType: formData['Email Type'],\n      sportCategory: formData['Sport Category'],\n      targetAudience: formData['Target Audience'],\n      // NEW: Enhanced AI content fields\n      hookContent: hookContent,\n      hookTitle: hookTitle,\n      sectionContent: hookContent,\n      // File metadata\n      fileName: hookImageUpload.filename,\n      fileType: hookImageUpload.mimetype,\n      fileSize: hookImageUpload.size,\n      imageType: 'uploaded_file'\n    }\n  };\n}\n\n// Priority 3: Generate image based on hook content\nconsole.log('✅ No URL or upload, will generate hook image');\n\nreturn {\n  json: {\n    section: 'hook',\n    imageSource: 'generate',\n    imageData: null,\n    imageUrl: null,\n    needsPrompt: true,\n    // Pass through data for prompt generation\n    campaignName: formData['Campaign Name'],\n    emailType: formData['Email Type'],\n    sportCategory: formData['Sport Category'],\n    targetAudience: formData['Target Audience'],\n    // NEW: Enhanced content for better image generation\n    hookContent: hookContent,\n    hookTitle: hookTitle,\n    sectionContent: `${hookTitle}: ${hookContent}`, // Combined for better AI prompts\n    // Generation metadata\n    imageType: 'ai_generated',\n    generationContext: 'hook_section',\n    contentPreview: hookContent.substring(0, 100), // First 100 chars for prompt context\n    promptHint: `Visual representation of \"${hookTitle}\" for ${sportCategory} audience`\n  }\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-1704,551.5],"id":"6840a3d2-cf23-4914-b717-7f0e7571d598","name":"Hook Image Logic"},{"parameters":{"jsCode":"// Information Image Logic - UPDATED for Enhanced Form Data and New Content Structure\n// Now properly handles ImgBB URLs and new AI content fields\n\n// Get form data and AI content\n// Check if we're getting enhanced form data from URL Aggregator or original form\nlet formData;\ntry {\n  // Try to get enhanced form data first (has ImgBB URLs if uploads were processed)\n  formData = $('URL Aggregator').first().json;\n  console.log('✅ Using enhanced form data from URL Aggregator');\n} catch (error) {\n  // Fallback to original form data\n  formData = $('VS Sports Email Campaign Form').first().json;\n  console.log('⚠️ Using original form data (URL Aggregator not found)');\n}\n\nconst aiContent = $('VS Sports Email Content Generator').first().json;\n\n// Check for uploaded information image and URL\nconst infoImageUpload = formData['Section 2 (Information) Image Upload'];\nconst infoImageURL = formData['Section 2 (Information) Image URL'];\n\nconsole.log('=== Information Image Logic (Enhanced) ===');\nconsole.log('Upload exists:', !!infoImageUpload?.filename);\nconsole.log('URL exists:', !!infoImageURL?.trim());\nconsole.log('URL value:', infoImageURL);\n\n// NEW: Get the updated AI content fields\nconst informationContent = aiContent?.information || aiContent?.output?.information || '';\nconst keyInsightsTitle = aiContent?.key_insights_title || aiContent?.output?.key_insights_title || 'Key Insights';\nconst sportCategory = formData['Sport Category'] || 'Sports';\nconst emailType = formData['Email Type'] || 'General';\n\nconsole.log('AI Content - Information Preview:', informationContent.substring(0, 50) + '...');\nconsole.log('AI Content - Key Insights Title:', keyInsightsTitle);\n\n// Priority 1: Use provided URL (even if upload also exists)\nif (infoImageURL && infoImageURL.trim() !== '') {\n  console.log('✅ Using provided URL for information section (ignoring any upload)');\n  \n  return {\n    json: {\n      section: 'information',\n      imageSource: 'url',\n      imageData: null,\n      imageUrl: infoImageURL.trim(),\n      needsPrompt: false,\n      // Pass through data for other nodes\n      campaignName: formData['Campaign Name'],\n      emailType: formData['Email Type'],\n      sportCategory: formData['Sport Category'],\n      targetAudience: formData['Target Audience'],\n      // NEW: Enhanced AI content fields\n      informationContent: informationContent,\n      keyInsightsTitle: keyInsightsTitle,\n      sectionContent: informationContent, // For any downstream processing\n      // Enhanced metadata\n      imageType: 'provided_url',\n      contentLength: informationContent.length,\n      sectionType: 'main_content',\n      _uploadIgnored: infoImageUpload ? `Upload \"${infoImageUpload.filename}\" ignored due to URL priority` : false\n    }\n  };\n}\n\n// Priority 2: No URL provided, use uploaded image\nif (infoImageUpload && typeof infoImageUpload === 'object' && infoImageUpload.filename) {\n  console.log('✅ No URL provided, using uploaded information image');\n  \n  return {\n    json: {\n      section: 'information',\n      imageSource: 'upload',\n      imageData: infoImageUpload,\n      imageUrl: null,\n      needsPrompt: false,\n      // Pass through data for other nodes\n      campaignName: formData['Campaign Name'],\n      emailType: formData['Email Type'],\n      sportCategory: formData['Sport Category'],\n      targetAudience: formData['Target Audience'],\n      // NEW: Enhanced AI content fields\n      informationContent: informationContent,\n      keyInsightsTitle: keyInsightsTitle,\n      sectionContent: informationContent,\n      // File metadata\n      fileName: infoImageUpload.filename,\n      fileType: infoImageUpload.mimetype,\n      fileSize: infoImageUpload.size,\n      imageType: 'uploaded_file',\n      sectionType: 'main_content'\n    }\n  };\n}\n\n// Priority 3: Generate image based on information content\nconsole.log('✅ No URL or upload, will generate information section image');\n\nreturn {\n  json: {\n    section: 'information',\n    imageSource: 'generate',\n    imageData: null,\n    imageUrl: null,\n    needsPrompt: true,\n    // Pass through data for prompt generation\n    campaignName: formData['Campaign Name'],\n    emailType: formData['Email Type'],\n    sportCategory: formData['Sport Category'],\n    targetAudience: formData['Target Audience'],\n    // NEW: Enhanced content for better image generation\n    informationContent: informationContent,\n    keyInsightsTitle: keyInsightsTitle,\n    sectionContent: `${keyInsightsTitle}: ${informationContent}`, // Combined for better AI prompts\n    // Generation metadata\n    imageType: 'ai_generated',\n    generationContext: 'information_section',\n    sectionType: 'main_content',\n    contentPreview: informationContent.substring(0, 150), // First 150 chars for prompt context\n    promptHint: `Visual representation of \"${keyInsightsTitle}\" showing ${sportCategory} ${emailType} insights`,\n    // Additional context for image generation\n    hasStatistics: informationContent.includes('%') || informationContent.includes('data') || informationContent.includes('metric'),\n    hasBulletPoints: informationContent.includes('•') || informationContent.includes('-'),\n    contentType: informationContent.includes('performance') ? 'performance_data' : \n                informationContent.includes('training') ? 'training_insights' : \n                informationContent.includes('analysis') ? 'analytical_data' : 'general_insights'\n  }\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-1704,812],"id":"a1b88bad-5fe5-474b-a192-1b4d27660587","name":"Information Image Logic"},{"parameters":{"jsCode":"// CTA Image Logic - UPDATED for VS Sports Logo with Fallback\n// Now handles VS Sports Logo Upload/URL with default fallback\n\n// Get form data and AI content\n// Check if we're getting enhanced form data from URL Aggregator or original form\nlet formData;\ntry {\n  // Try to get enhanced form data first (has ImgBB URLs if uploads were processed)\n  formData = $('URL Aggregator').first().json;\n  console.log('✅ Using enhanced form data from URL Aggregator');\n} catch (error) {\n  // Fallback to original form data\n  formData = $('VS Sports Email Campaign Form').first().json;\n  console.log('⚠️ Using original form data (URL Aggregator not found)');\n}\n\nconst aiContent = $('VS Sports Email Content Generator').first().json;\n\n// NEW FIELD NAMES: VS Sports Logo Upload/URL (instead of CTA Section)\nconst logoImageUpload = formData['VS Sports Logo Upload'];\nconst logoImageURL = formData['VS Sports Logo URL'];\n\n// Default VS Sports logo URL\nconst DEFAULT_LOGO_URL = 'https://www.vssports.us/wp-content/uploads/2024/11/VS-Sports-4-2048x604.png';\n\nconsole.log('=== CTA Image Logic (VS Sports Logo) ===');\nconsole.log('Logo Upload exists:', !!logoImageUpload?.filename);\nconsole.log('Logo URL exists:', !!logoImageURL?.trim());\nconsole.log('Logo URL value:', logoImageURL);\n\n// Priority 1: Use provided logo URL (even if upload also exists)\nif (logoImageURL && logoImageURL.trim() !== '') {\n  console.log('✅ Using provided logo URL');\n  \n  return {\n    json: {\n      section: 'cta',\n      imageSource: 'url',\n      imageData: null,\n      imageUrl: logoImageURL.trim(),\n      needsPrompt: false,\n      // Pass through data for other nodes\n      campaignName: formData['Campaign Name'],\n      emailType: formData['Email Type'],\n      sportCategory: formData['Sport Category'],\n      targetAudience: formData['Target Audience'],\n      ctaContent: 'VS Sports Logo', // Changed from AI content\n      logoType: 'custom_url',\n      _uploadIgnored: logoImageUpload ? `Upload \"${logoImageUpload.filename}\" ignored due to URL priority` : false\n    }\n  };\n}\n\n// Priority 2: No URL provided, use uploaded logo image\nif (logoImageUpload && typeof logoImageUpload === 'object' && logoImageUpload.filename) {\n  console.log('✅ No URL provided, using uploaded logo');\n  \n  return {\n    json: {\n      section: 'cta',\n      imageSource: 'upload',\n      imageData: logoImageUpload,\n      imageUrl: null,\n      needsPrompt: false,\n      // Pass through data for other nodes\n      campaignName: formData['Campaign Name'],\n      emailType: formData['Email Type'],\n      sportCategory: formData['Sport Category'],\n      targetAudience: formData['Target Audience'],\n      ctaContent: 'VS Sports Logo', // Changed from AI content\n      logoType: 'custom_upload',\n      fileName: logoImageUpload.filename,\n      fileType: logoImageUpload.mimetype,\n      fileSize: logoImageUpload.size\n    }\n  };\n}\n\n// Priority 3: No upload, no URL - use DEFAULT VS Sports logo\nconsole.log('✅ No upload or URL, using default VS Sports logo');\n\nreturn {\n  json: {\n    section: 'cta',\n    imageSource: 'url', // Treat default as URL\n    imageData: null,\n    imageUrl: DEFAULT_LOGO_URL,\n    needsPrompt: false,\n    // Pass through data for other nodes\n    campaignName: formData['Campaign Name'],\n    emailType: formData['Email Type'],\n    sportCategory: formData['Sport Category'],\n    targetAudience: formData['Target Audience'],\n    ctaContent: 'VS Sports Logo',\n    logoType: 'default_fallback',\n    isDefaultLogo: true\n  }\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-1704,1112],"id":"4d203d90-a4f8-4fca-a32f-a65ae8295744","name":"CTA Image Logic"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":1},"conditions":[{"id":"upload_condition","leftValue":"={{ $json.imageData }}","rightValue":"upload","operator":{"type":"string","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2,"position":[-1484,341],"id":"8852b9ee-a6bb-49df-a573-3de91096b055","name":"Header Image Router"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":1},"conditions":[{"id":"upload_condition","leftValue":"={{ $json.imageData }}","rightValue":"upload","operator":{"type":"string","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2,"position":[-1484,551.5],"id":"7f865768-5387-415e-a3a9-bdd74b53d153","name":"Hook Image Router"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":1},"conditions":[{"id":"upload_condition","leftValue":"={{ $json.imageData }}","rightValue":"upload","operator":{"type":"string","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2,"position":[-1484,812],"id":"2ac18363-eaca-401d-b855-79c3b95921d1","name":"Info Image Router"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":1},"conditions":[{"id":"upload_condition","leftValue":"={{ $json.imageSource }}","rightValue":"upload","operator":{"type":"string","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2,"position":[-1484,1112],"id":"53f417b6-574e-4656-b1bc-999ecdfa9fe9","name":"CTA Image Router"},{"parameters":{"jsCode":"// Process multiple image URLs from merge node\nconst allInputs = $input.all();\nconst processedImages = [];\n\n// Process each URL input\nallInputs.forEach(input => {\n  const inputData = input.json;\n  \n  // Get the image URL from the correct property\n  const imageUrl = inputData.imageUrl;\n  const section = inputData.section;\n\n  if (!imageUrl || imageUrl.trim() === '') {\n    throw new Error(`No image URL provided for ${section} section`);\n  }\n\n  // Basic URL validation\n  const urlPattern = /^https?:\\/\\/.+\\.(jpg|jpeg|png|gif|webp)(\\?.*)?$/i;\n  if (!urlPattern.test(imageUrl)) {\n    throw new Error(`Invalid image URL format for ${section} section: ${imageUrl}`);\n  }\n\n  // Extract file information from URL\n  const urlParts = imageUrl.split('/');\n  const fileName = urlParts[urlParts.length - 1].split('?')[0] || `${section}_url_image.jpg`;\n  const fileExtension = fileName.split('.').pop().toLowerCase();\n\n  // Determine MIME type\n  let mimeType = 'image/jpeg';\n  switch (fileExtension) {\n    case 'png':\n      mimeType = 'image/png';\n      break;\n    case 'gif':\n      mimeType = 'image/gif';\n      break;\n    case 'webp':\n      mimeType = 'image/webp';\n      break;\n  }\n\n  // Add processed image to array\n  processedImages.push({\n    section: section,\n    imageSource: 'url',\n    imageReady: true,\n    fileName: fileName,\n    fileType: mimeType,\n    imageUrl: imageUrl,\n    binaryData: null,\n    processingStatus: 'success',\n    processedAt: new Date().toISOString(),\n    urlValidated: true,\n    // Pass through original data\n    campaignName: inputData.campaignName,\n    emailType: inputData.emailType,\n    sportCategory: inputData.sportCategory,\n    targetAudience: inputData.targetAudience\n  });\n});\n\n// Return all processed images\nreturn processedImages.map(img => ({ json: img }));"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-824,341],"id":"39666cea-e193-48d7-b102-82c8d0a38098","name":"Process URL Image"},{"parameters":{"jsCode":"// Process generated image response and standardize output\nconst inputData = $input.first().json;\nconst generatedImageData = inputData.data || inputData;\nconst originalRequest = $('Header Image Logic', 'Hook Image Logic', 'Information Image Logic', 'CTA Image Logic').first().json;\n\nconst section = originalRequest.section || 'unknown';\nconst sportCategory = originalRequest.sportCategory || 'All Sports';\nconst emailType = originalRequest.emailType || 'General';\n\n// Extract image URL from OpenAI response\nlet imageUrl = null;\nlet fileName = `${section}_generated_${Date.now()}.png`;\n\nif (generatedImageData && generatedImageData.url) {\n  imageUrl = generatedImageData.url;\n} else if (typeof generatedImageData === 'string' && generatedImageData.startsWith('http')) {\n  imageUrl = generatedImageData;\n} else if (generatedImageData && generatedImageData[0] && generatedImageData[0].url) {\n  imageUrl = generatedImageData[0].url;\n}\n\nif (!imageUrl) {\n  throw new Error(`Failed to generate image for ${section} section`);\n}\n\n// Create standardized output for email assembly\nreturn {\n  json: {\n    section: section,\n    imageSource: 'generated',\n    imageReady: true,\n    fileName: fileName,\n    fileType: 'image/png',\n    imageUrl: imageUrl,\n    binaryData: null,\n    processingStatus: 'success',\n    processedAt: new Date().toISOString(),\n    generatedPrompt: originalRequest.prompt,\n    sportCategory: sportCategory,\n    emailType: emailType,\n    generationModel: 'GPT-4.1-DALLE'\n  }\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-604,562],"id":"935aef2c-bc0a-4d50-9dcb-d103b20b89f5","name":"Process Generated Image"},{"parameters":{"jsCode":"// Get processed images from Process URL Image node\nconst processedImages = $('Process URL Image').all();\n\n// Convert array to object by section\nconst imagesBySection = {};\nprocessedImages.forEach(item => {\n  const imageData = item.json;\n  imagesBySection[imageData.section] = imageData;\n});\n\n// Get AI content for email assembly\nconst aiContentNode = $('VS Sports Email Content Generator').first().json;\nconst aiContent = aiContentNode.output || aiContentNode; // Handle both structures\n\n// Get original form data - FIXED to access the right source\nlet originalFormData = {};\ntry {\n  // Try to get enhanced form data from URL Aggregator first\n  const urlAggregatorData = $('URL Aggregator').first().json;\n  originalFormData = urlAggregatorData;\n  console.log('✅ Using enhanced form data from URL Aggregator');\n} catch (error) {\n  // Fallback to original form data\n  try {\n    const formData = $('VS Sports Email Campaign Form').first().json;\n    originalFormData = formData;\n    console.log('⚠️ Using original form data from form');\n  } catch (error2) {\n    console.log('❌ Could not access form data:', error2.message);\n  }\n}\n\nconsole.log('=== COMBINE EMAIL DATA DEBUG ===');\nconsole.log('AI Content Keys:', Object.keys(aiContent));\nconsole.log('AI Content Structure:', JSON.stringify(aiContent, null, 2).substring(0, 500) + '...');\nconsole.log('Form Data Keys:', Object.keys(originalFormData));\nconsole.log('CTA Button Text from form:', originalFormData['CTA Button Text']);\nconsole.log('CTA Button URL from form:', originalFormData['CTA Button URL']);\nconsole.log('=== END DEBUG ===');\n\n// Create comprehensive email data structure\nconst emailData = {\n  // Campaign metadata from form\n  campaignName: originalFormData['Campaign Name'],\n  emailType: originalFormData['Email Type'],\n  sportCategory: originalFormData['Sport Category'],\n  targetAudience: originalFormData['Target Audience'],\n  emailFocus: originalFormData['Email Focus/Description'],\n  campaignPriority: originalFormData['Campaign Priority'] || 'Medium',\n  sendDate: originalFormData['Send Date'],\n  \n  // FIXED: Include ALL original form fields\n  'Campaign Name': originalFormData['Campaign Name'],\n  'Email Type': originalFormData['Email Type'],\n  'Sport Category': originalFormData['Sport Category'],\n  'Target Audience': originalFormData['Target Audience'],\n  'Email Focus/Description': originalFormData['Email Focus/Description'],\n  'Campaign Priority': originalFormData['Campaign Priority'] || 'Medium',\n  'Send Date': originalFormData['Send Date'],\n  'Additional Notes': originalFormData['Additional Notes'],\n  \n  // NEW: Include CTA Button fields\n  'CTA Button Text': originalFormData['CTA Button Text'],\n  'CTA Button URL': originalFormData['CTA Button URL'],\n  \n  // NEW: Include VS Sports Logo fields\n  'VS Sports Logo Upload': originalFormData['VS Sports Logo Upload'],\n  'VS Sports Logo URL': originalFormData['VS Sports Logo URL'],\n  \n  // AI generated content - FIXED to include ALL fields\n  content: {\n    subjectLine: aiContent.subject_line,\n    hook: aiContent.hook,\n    information: aiContent.information,\n    details: aiContent.details,\n    // NEW: Include the missing AI fields\n    hook_title: aiContent.hook_title,\n    key_insights_title: aiContent.key_insights_title,\n    cta: aiContent.cta // Also preserve original CTA for reference\n  },\n  \n  // Also add direct access to AI fields (for backward compatibility)\n  subject_line: aiContent.subject_line,\n  hook: aiContent.hook,\n  information: aiContent.information,\n  details: aiContent.details,\n  hook_title: aiContent.hook_title,\n  key_insights_title: aiContent.key_insights_title,\n  cta: aiContent.cta,\n  \n  // Processed images (organized by section)\n  images: {\n    header: imagesBySection.header || null,\n    hook: imagesBySection.hook || null,\n    information: imagesBySection.information || null,\n    cta: imagesBySection.cta || null\n  },\n  \n  // Processing metadata\n  processedAt: new Date().toISOString(),\n  status: 'ready_for_assembly',\n  readyForHtml: true\n};\n\n// Validate all sections are ready\nconst requiredSections = ['header', 'hook', 'information', 'cta'];\nconst missingSections = requiredSections.filter(section => \n  !emailData.images[section] || !emailData.images[section].imageReady\n);\n\nif (missingSections.length > 0) {\n  emailData.status = 'incomplete';\n  emailData.readyForHtml = false;\n  emailData.missingSections = missingSections;\n}\n\nconsole.log('✅ Email data combined successfully');\nconsole.log('📋 Form fields preserved:', !!emailData['CTA Button Text']);\nconsole.log('🎯 AI content included:', Object.keys(emailData.content));\nconsole.log('🖼️ Images ready:', Object.keys(emailData.images));\n\nreturn { json: emailData };"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-384,762],"id":"28cbbd36-68f5-492c-878a-9faacb7268d0","name":"Combine All Email Data"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":1},"conditions":[{"id":"url_condition","leftValue":"={{ $json.imageSource }}","rightValue":"url","operator":{"type":"string","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2,"position":[-1264,341],"id":"5e4e9e47-2f03-40e2-901f-57ebe13bdf4b","name":"URL or Generate Router"},{"parameters":{"operation":"toBinary","sourceProperty":"data[0].b64_json","options":{}},"type":"n8n-nodes-base.convertToFile","typeVersion":1.1,"position":[-824,562],"id":"44ccd580-4e4a-418b-adc4-ed311a7f0d70","name":"Convert to File"},{"parameters":{"method":"POST","url":"https://api.openai.com/v1/images/generations","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"bodyParameters":{"parameters":[{"name":"model","value":"gpt-image-1"},{"name":"prompt","value":"**Environment:** A dynamic and sleek corporate workspace, with computer monitors displaying analytics dashboards. The setting evokes a sense of productivity and precision. \n\n**Style:** Realistic with modern design elements, emphasizing professionalism and sophistication. \n\n**Objects:** A glowing digital dashboard overlaid with metadata nodes connecting like a neural network. A folder labeled \"Metadata Backup\" stands prominently beside it, with arrows illustrating seamless recovery. A graph shows cost reduction (90%) and efficiency gains (days to minutes). \n\n**People/Actions:** A focused BI analyst confidently clicking on a \"Recover Metadata\" button, with a restored dashboard component appearing above their screen.\n\n**Color Palette:** Blues, whites, and greens dominate for a tech-savvy and trustworthy vibe. Pops of orange highlight key elements like cost savings and actionable recovery.\n\n**FOMO Text:** **\"Recover Smarter. Save Millions.\"**"},{"name":"size","value":"1024x1024"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-1044,562],"id":"af73999e-58c2-45f5-bd48-90c671a7e954","name":"Generate Image1","credentials":{"httpHeaderAuth":{"id":"z06CbCGaeEeBPVIt","name":"GPT Image Generator"}}},{"parameters":{"jsCode":"// Process generated image response and standardize output\nconst inputData = $input.first().json;\nconst generatedImageData = inputData.data || inputData;\nconst originalRequest = $('Header Image Logic', 'Hook Image Logic', 'Information Image Logic', 'CTA Image Logic').first().json;\n\nconst section = originalRequest.section || 'unknown';\nconst sportCategory = originalRequest.sportCategory || 'All Sports';\nconst emailType = originalRequest.emailType || 'General';\n\n// Extract image URL from OpenAI response\nlet imageUrl = null;\nlet fileName = `${section}_generated_${Date.now()}.png`;\n\nif (generatedImageData && generatedImageData.url) {\n  imageUrl = generatedImageData.url;\n} else if (typeof generatedImageData === 'string' && generatedImageData.startsWith('http')) {\n  imageUrl = generatedImageData;\n} else if (generatedImageData && generatedImageData[0] && generatedImageData[0].url) {\n  imageUrl = generatedImageData[0].url;\n}\n\nif (!imageUrl) {\n  throw new Error(`Failed to generate image for ${section} section`);\n}\n\n// Create standardized output for email assembly\nreturn {\n  json: {\n    section: section,\n    imageSource: 'generated',\n    imageReady: true,\n    fileName: fileName,\n    fileType: 'image/png',\n    imageUrl: imageUrl,\n    binaryData: null,\n    processingStatus: 'success',\n    processedAt: new Date().toISOString(),\n    generatedPrompt: originalRequest.prompt,\n    sportCategory: sportCategory,\n    emailType: emailType,\n    generationModel: 'GPT-4.1-DALLE'\n  }\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-604,762],"id":"1067bcfe-d3e1-4bf6-8049-59eb5178f5ea","name":"Process Generated Image1"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":1},"conditions":[{"id":"url_condition","leftValue":"={{ $json.imageSource }}","rightValue":"url","operator":{"type":"string","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2,"position":[-1264,551.5],"id":"71253759-42ab-46e2-8125-578d6258f487","name":"URL or Generate Router1"},{"parameters":{"operation":"toBinary","sourceProperty":"data[0].b64_json","options":{}},"type":"n8n-nodes-base.convertToFile","typeVersion":1.1,"position":[-824,762],"id":"ef5e7426-f4ae-4440-b59f-fccdaba764b0","name":"Convert to File1"},{"parameters":{"method":"POST","url":"https://api.openai.com/v1/images/generations","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"bodyParameters":{"parameters":[{"name":"model","value":"gpt-image-1"},{"name":"prompt","value":"**Environment:** A dynamic and sleek corporate workspace, with computer monitors displaying analytics dashboards. The setting evokes a sense of productivity and precision. \n\n**Style:** Realistic with modern design elements, emphasizing professionalism and sophistication. \n\n**Objects:** A glowing digital dashboard overlaid with metadata nodes connecting like a neural network. A folder labeled \"Metadata Backup\" stands prominently beside it, with arrows illustrating seamless recovery. A graph shows cost reduction (90%) and efficiency gains (days to minutes). \n\n**People/Actions:** A focused BI analyst confidently clicking on a \"Recover Metadata\" button, with a restored dashboard component appearing above their screen.\n\n**Color Palette:** Blues, whites, and greens dominate for a tech-savvy and trustworthy vibe. Pops of orange highlight key elements like cost savings and actionable recovery.\n\n**FOMO Text:** **\"Recover Smarter. Save Millions.\"**"},{"name":"size","value":"1024x1024"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-1044,762],"id":"9a7fd497-4b84-464a-b525-e2f86fb4534b","name":"Generate Image","credentials":{"httpHeaderAuth":{"id":"z06CbCGaeEeBPVIt","name":"GPT Image Generator"}}},{"parameters":{"jsCode":"// Process generated image response and standardize output\nconst inputData = $input.first().json;\nconst generatedImageData = inputData.data || inputData;\nconst originalRequest = $('Header Image Logic', 'Hook Image Logic', 'Information Image Logic', 'CTA Image Logic').first().json;\n\nconst section = originalRequest.section || 'unknown';\nconst sportCategory = originalRequest.sportCategory || 'All Sports';\nconst emailType = originalRequest.emailType || 'General';\n\n// Extract image URL from OpenAI response\nlet imageUrl = null;\nlet fileName = `${section}_generated_${Date.now()}.png`;\n\nif (generatedImageData && generatedImageData.url) {\n  imageUrl = generatedImageData.url;\n} else if (typeof generatedImageData === 'string' && generatedImageData.startsWith('http')) {\n  imageUrl = generatedImageData;\n} else if (generatedImageData && generatedImageData[0] && generatedImageData[0].url) {\n  imageUrl = generatedImageData[0].url;\n}\n\nif (!imageUrl) {\n  throw new Error(`Failed to generate image for ${section} section`);\n}\n\n// Create standardized output for email assembly\nreturn {\n  json: {\n    section: section,\n    imageSource: 'generated',\n    imageReady: true,\n    fileName: fileName,\n    fileType: 'image/png',\n    imageUrl: imageUrl,\n    binaryData: null,\n    processingStatus: 'success',\n    processedAt: new Date().toISOString(),\n    generatedPrompt: originalRequest.prompt,\n    sportCategory: sportCategory,\n    emailType: emailType,\n    generationModel: 'GPT-4.1-DALLE'\n  }\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-604,962],"id":"70d4b0cd-89d7-474b-a49f-33467791775e","name":"Process Generated Image2"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":1},"conditions":[{"id":"url_condition","leftValue":"={{ $json.imageSource }}","rightValue":"url","operator":{"type":"string","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2,"position":[-1264,812],"id":"5b0008f1-5dd6-4e9d-bdf1-b0e54e524924","name":"URL or Generate Router2"},{"parameters":{"operation":"toBinary","sourceProperty":"data[0].b64_json","options":{}},"type":"n8n-nodes-base.convertToFile","typeVersion":1.1,"position":[-824,962],"id":"21901101-87ff-476c-be0e-c518b0450cad","name":"Convert to File2"},{"parameters":{"method":"POST","url":"https://api.openai.com/v1/images/generations","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"bodyParameters":{"parameters":[{"name":"model","value":"gpt-image-1"},{"name":"prompt","value":"**Environment:** A dynamic and sleek corporate workspace, with computer monitors displaying analytics dashboards. The setting evokes a sense of productivity and precision. \n\n**Style:** Realistic with modern design elements, emphasizing professionalism and sophistication. \n\n**Objects:** A glowing digital dashboard overlaid with metadata nodes connecting like a neural network. A folder labeled \"Metadata Backup\" stands prominently beside it, with arrows illustrating seamless recovery. A graph shows cost reduction (90%) and efficiency gains (days to minutes). \n\n**People/Actions:** A focused BI analyst confidently clicking on a \"Recover Metadata\" button, with a restored dashboard component appearing above their screen.\n\n**Color Palette:** Blues, whites, and greens dominate for a tech-savvy and trustworthy vibe. Pops of orange highlight key elements like cost savings and actionable recovery.\n\n**FOMO Text:** **\"Recover Smarter. Save Millions.\"**"},{"name":"size","value":"1024x1024"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-1044,962],"id":"f431a363-248f-41d5-8b3c-3c8f6fb9cf4f","name":"Generate Image2","credentials":{"httpHeaderAuth":{"id":"z06CbCGaeEeBPVIt","name":"GPT Image Generator"}}},{"parameters":{"jsCode":"// Process generated image response and standardize output\nconst inputData = $input.first().json;\nconst generatedImageData = inputData.data || inputData;\nconst originalRequest = $('Header Image Logic', 'Hook Image Logic', 'Information Image Logic', 'CTA Image Logic').first().json;\n\nconst section = originalRequest.section || 'unknown';\nconst sportCategory = originalRequest.sportCategory || 'All Sports';\nconst emailType = originalRequest.emailType || 'General';\n\n// Extract image URL from OpenAI response\nlet imageUrl = null;\nlet fileName = `${section}_generated_${Date.now()}.png`;\n\nif (generatedImageData && generatedImageData.url) {\n  imageUrl = generatedImageData.url;\n} else if (typeof generatedImageData === 'string' && generatedImageData.startsWith('http')) {\n  imageUrl = generatedImageData;\n} else if (generatedImageData && generatedImageData[0] && generatedImageData[0].url) {\n  imageUrl = generatedImageData[0].url;\n}\n\nif (!imageUrl) {\n  throw new Error(`Failed to generate image for ${section} section`);\n}\n\n// Create standardized output for email assembly\nreturn {\n  json: {\n    section: section,\n    imageSource: 'generated',\n    imageReady: true,\n    fileName: fileName,\n    fileType: 'image/png',\n    imageUrl: imageUrl,\n    binaryData: null,\n    processingStatus: 'success',\n    processedAt: new Date().toISOString(),\n    generatedPrompt: originalRequest.prompt,\n    sportCategory: sportCategory,\n    emailType: emailType,\n    generationModel: 'GPT-4.1-DALLE'\n  }\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-604,1162],"id":"944b1d2a-7c28-4117-9335-d810ae11cd6c","name":"Process Generated Image3"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":1},"conditions":[{"id":"url_condition","leftValue":"={{ $json.imageSource }}","rightValue":"url","operator":{"type":"string","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2,"position":[-1264,1112],"id":"b64005ef-2918-4793-a489-ba3eacd96586","name":"URL or Generate Router3"},{"parameters":{"operation":"toBinary","sourceProperty":"data[0].b64_json","options":{}},"type":"n8n-nodes-base.convertToFile","typeVersion":1.1,"position":[-824,1162],"id":"fe5145d9-952c-4ea4-88a1-f6d27cd0bd1f","name":"Convert to File3"},{"parameters":{"method":"POST","url":"https://api.openai.com/v1/images/generations","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"bodyParameters":{"parameters":[{"name":"model","value":"gpt-image-1"},{"name":"prompt","value":"**Environment:** A dynamic and sleek corporate workspace, with computer monitors displaying analytics dashboards. The setting evokes a sense of productivity and precision. \n\n**Style:** Realistic with modern design elements, emphasizing professionalism and sophistication. \n\n**Objects:** A glowing digital dashboard overlaid with metadata nodes connecting like a neural network. A folder labeled \"Metadata Backup\" stands prominently beside it, with arrows illustrating seamless recovery. A graph shows cost reduction (90%) and efficiency gains (days to minutes). \n\n**People/Actions:** A focused BI analyst confidently clicking on a \"Recover Metadata\" button, with a restored dashboard component appearing above their screen.\n\n**Color Palette:** Blues, whites, and greens dominate for a tech-savvy and trustworthy vibe. Pops of orange highlight key elements like cost savings and actionable recovery.\n\n**FOMO Text:** **\"Recover Smarter. Save Millions.\"**"},{"name":"size","value":"1024x1024"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-1044,1162],"id":"1819c57d-68b7-4047-beaf-163f8e9f17dc","name":"Generate Image3","credentials":{"httpHeaderAuth":{"id":"z06CbCGaeEeBPVIt","name":"GPT Image Generator"}}},{"parameters":{"numberInputs":4},"id":"c5e863b2-136b-419c-af89-75f51105d794","name":"Merge1","type":"n8n-nodes-base.merge","position":[-1044,320],"typeVersion":3,"alwaysOutputData":false},{"parameters":{"jsCode":"// VS Sports HTML Email Assembly Node - UPDATED WITH NEW SECTION ORDER\n// Takes combined email data and generates final HTML email for Mailchimp\n\nconst emailData = $input.first().json;\n\n// === DATA FLOW DIAGNOSTIC ===\nconsole.log('=== DATA FLOW DIAGNOSTIC ===');\n\n// Check what emailData structure we're getting\nconsole.log('emailData keys:', Object.keys(emailData));\nconsole.log('emailData structure preview:', JSON.stringify(emailData, null, 2).substring(0, 1000) + '...');\n\n// Check for CTA Button fields specifically\nconsole.log('CTA Button Text:', emailData['CTA Button Text']);\nconsole.log('CTA Button URL:', emailData['CTA Button URL']);\n\n// Check AI content structure\nconsole.log('emailData.content:', emailData.content);\nconsole.log('emailData.content keys:', emailData.content ? Object.keys(emailData.content) : 'No content object');\n\n// Check if we're getting it from a different path\nconsole.log('Direct AI fields:');\nconsole.log('- hook_title:', emailData.hook_title);\nconsole.log('- key_insights_title:', emailData.key_insights_title);\nconsole.log('- subject_line:', emailData.subject_line);\nconsole.log('- hook:', emailData.hook);\nconsole.log('- information:', emailData.information);\nconsole.log('- details:', emailData.details);\n\n// Check for VS Sports logo fields\nconsole.log('VS Sports Logo Upload:', emailData['VS Sports Logo Upload']);\nconsole.log('VS Sports Logo URL:', emailData['VS Sports Logo URL']);\n\n// Check for original form fields\nconsole.log('Original form fields:');\nconsole.log('- Campaign Name:', emailData['Campaign Name']);\nconsole.log('- Email Type:', emailData['Email Type']);\nconsole.log('- Sport Category:', emailData['Sport Category']);\nconsole.log('- Target Audience:', emailData['Target Audience']);\n\n// Check image structure\nconsole.log('Images structure:', emailData.images);\nconsole.log('Images keys:', emailData.images ? Object.keys(emailData.images) : 'No images object');\n\nconsole.log('=== END DIAGNOSTIC ===');\n\n// Helper function to safely escape HTML content\nfunction escapeForHtml(str) {\n    if (!str) return '';\n    return String(str)\n        .replace(/&/g, '&amp;')\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;')\n        .replace(/\"/g, '&quot;')\n        .replace(/'/g, '&#39;');\n}\n\n// Helper function to format content with 2-sentence paragraphs and bullet points\nfunction formatAsHtmlParagraphs(content) {\n    if (!content) return '<p style=\"text-align: center;color: #000000;font-family: Arial, Helvetica, sans-serif;font-size: 14px;margin: 10px 0;padding: 0;line-height: 150%;\">No content provided</p>';\n    \n    const safeContent = escapeForHtml(content);\n    \n    // First, split by explicit paragraph breaks (double newlines)\n    const naturalParagraphs = safeContent.split(/\\n\\n+/).filter(p => p.trim());\n    \n    let result = '';\n    \n    naturalParagraphs.forEach(paragraph => {\n        const trimmedPara = paragraph.trim();\n        \n        // Handle bullet point sections\n        if (trimmedPara.includes('•') || /\\n[-•]/.test(trimmedPara)) {\n            // Process mixed content (text + bullets)\n            const lines = trimmedPara.split('\\n');\n            let regularText = '';\n            \n            lines.forEach(line => {\n                const cleanLine = line.trim();\n                if (cleanLine.startsWith('•') || cleanLine.startsWith('-')) {\n                    // Process any accumulated regular text first\n                    if (regularText.trim()) {\n                        result += splitIntoTwoSentenceParagraphs(regularText.trim());\n                        regularText = '';\n                    }\n                    // Add bullet point\n                    const bulletText = cleanLine.substring(1).trim();\n                    result += `<p style=\"text-align: center;color: #000000;font-family: Arial, Helvetica, sans-serif;font-size: 14px;margin: 5px 0;padding: 0;line-height: 150%;\">• ${bulletText}</p>`;\n                } else if (cleanLine) {\n                    regularText += (regularText ? ' ' : '') + cleanLine;\n                }\n            });\n            \n            // Process any remaining regular text\n            if (regularText.trim()) {\n                result += splitIntoTwoSentenceParagraphs(regularText.trim());\n            }\n        } else {\n            // Regular paragraph - split into 2-sentence chunks\n            result += splitIntoTwoSentenceParagraphs(trimmedPara);\n        }\n    });\n    \n    return result || '<p style=\"text-align: center;color: #000000;font-family: Arial, Helvetica, sans-serif;font-size: 14px;margin: 10px 0;padding: 0;line-height: 150%;\">No content available</p>';\n}\n\n// Helper function to split text into 2-sentence paragraphs\nfunction splitIntoTwoSentenceParagraphs(text) {\n    if (!text || !text.trim()) return '';\n    \n    // Split into sentences using multiple sentence-ending patterns\n    const sentences = text.match(/[^.!?]*[.!?]+(?:\\s|$)/g) || [text];\n    \n    let result = '';\n    let currentParagraph = '';\n    let sentenceCount = 0;\n    \n    sentences.forEach(sentence => {\n        const cleanSentence = sentence.trim();\n        if (!cleanSentence) return;\n        \n        // Add sentence to current paragraph\n        currentParagraph += (currentParagraph ? ' ' : '') + cleanSentence;\n        sentenceCount++;\n        \n        // Create paragraph after 2 sentences\n        if (sentenceCount >= 2) {\n            result += `<p style=\"text-align: center;color: #000000;font-family: Arial, Helvetica, sans-serif;font-size: 14px;margin: 10px 0;padding: 0;line-height: 150%;\">${currentParagraph}</p>`;\n            currentParagraph = '';\n            sentenceCount = 0;\n        }\n    });\n    \n    // Handle remaining sentences (less than 2)\n    if (currentParagraph.trim()) {\n        result += `<p style=\"text-align: center;color: #000000;font-family: Arial, Helvetica, sans-serif;font-size: 14px;margin: 10px 0;padding: 0;line-height: 150%;\">${currentParagraph}</p>`;\n    }\n    \n    return result;\n}\n\n// Helper function to process URLs in content\nfunction processUrlLinks(content) {\n    if (!content) return content;\n    \n    // Regex to match pattern: \"text - url.com\" or \"text - https://url.com\"\n    const urlPattern = /([^-\\n]+)\\s*-\\s*(https?:\\/\\/[^\\s]+|[^\\s]+\\.[^\\s]+)/g;\n    \n    return content.replace(urlPattern, (match, text, url) => {\n        const cleanText = text.trim();\n        const cleanUrl = url.startsWith('http') ? url : `https://${url}`;\n        return `<a href=\"${cleanUrl}\" target=\"_blank\" style=\"color: #03C4FF; text-decoration: underline;\">${cleanText}</a>`;\n    });\n}\n\n// Get CTA button information with defaults\nfunction getCtaButtonInfo(emailData) {\n    // Check multiple possible locations for CTA button data\n    const buttonText = emailData['CTA Button Text'] || \n                      emailData.campaignMetadata?.['CTA Button Text'] ||\n                      emailData.formData?.['CTA Button Text'] ||\n                      'Learn More';\n                      \n    let buttonUrl = emailData['CTA Button URL'] || \n                   emailData.campaignMetadata?.['CTA Button URL'] ||\n                   emailData.formData?.['CTA Button URL'] ||\n                   'https://vssports.us';\n    \n    console.log('CTA Button Debug:');\n    console.log('- Raw button text:', buttonText);\n    console.log('- Raw button URL:', buttonUrl);\n    console.log('- emailData[CTA Button Text]:', emailData['CTA Button Text']);\n    console.log('- emailData[CTA Button URL]:', emailData['CTA Button URL']);\n    \n    // Add https:// if not present\n    if (buttonUrl && !buttonUrl.startsWith('http')) {\n        buttonUrl = 'https://' + buttonUrl;\n    }\n    \n    return {\n        text: escapeForHtml(buttonText).toUpperCase(),\n        url: buttonUrl\n    };\n}\n\n// Get VS Sports logo URL\nfunction getVsSportsLogoUrl(emailData) {\n    // Check for uploaded/provided logo first\n    const logoUrl = emailData.images?.cta?.imageUrl || \n                   emailData['VS Sports Logo URL'] || \n                   'https://www.vssports.us/wp-content/uploads/2024/11/VS-Sports-4-2048x604.png';\n    return logoUrl;\n}\n\n// Get safe values from email data\nconst campaignName = escapeForHtml(emailData.campaignName || 'VS Sports Campaign');\nconst subjectLine = escapeForHtml(emailData.content?.subject_line || emailData.subject_line || 'VS Sports Update');\nconst sportCategory = escapeForHtml(emailData.sportCategory || 'Sports');\nconst emailType = escapeForHtml(emailData.emailType || 'General');\n\n// NEW: Get the dynamic titles and content\nconst hookTitle = escapeForHtml(emailData.content?.hook_title || emailData.hook_title || 'Transform Your Performance');\nconst keyInsightsTitle = escapeForHtml(emailData.content?.key_insights_title || emailData.key_insights_title || 'Key Insights');\n\nconsole.log('DEBUG - AI Content Structure:');\nconsole.log('Hook Title from content:', emailData.content?.hook_title);\nconsole.log('Hook Title direct:', emailData.hook_title);\nconsole.log('Final Hook Title:', hookTitle);\nconsole.log('Key Insights Title from content:', emailData.content?.key_insights_title);\nconsole.log('Key Insights Title direct:', emailData.key_insights_title);\nconsole.log('Final Key Insights Title:', keyInsightsTitle);\n\n// Process content sections with URL linking\nconst rawHook = emailData.content?.hook || emailData.hook || '';\nconst rawInformation = emailData.content?.information || emailData.information || '';\nconst rawDetails = emailData.content?.details || emailData.details || '';\n\nconsole.log('DEBUG - Raw Content Before Processing:');\nconsole.log('Raw Hook Length:', rawHook.length);\nconsole.log('Raw Information Length:', rawInformation.length);\nconsole.log('Raw Information Sample:', rawInformation.substring(0, 200) + '...');\nconsole.log('Raw Details Sample:', rawDetails.substring(0, 200) + '...');\n\nconst hookContent = formatAsHtmlParagraphs(processUrlLinks(rawHook));\nconst informationContent = formatAsHtmlParagraphs(processUrlLinks(rawInformation));\nconst detailsContent = formatAsHtmlParagraphs(processUrlLinks(rawDetails));\n\nconsole.log('DEBUG - Processed Content:');\nconsole.log('Information HTML Length:', informationContent.length);\nconsole.log('Information Paragraph Count:', (informationContent.match(/<p/g) || []).length);\nconsole.log('Details Paragraph Count:', (detailsContent.match(/<p/g) || []).length);\nconsole.log('Information HTML Sample:', informationContent.substring(0, 300) + '...');\nconsole.log('Details HTML Sample:', detailsContent.substring(0, 300) + '...');\n\n// Get CTA and logo info\nconst ctaButton = getCtaButtonInfo(emailData);\nconst logoUrl = getVsSportsLogoUrl(emailData);\n\nconsole.log('DEBUG - CTA Button Info:');\nconsole.log('Button Text from form:', emailData['CTA Button Text']);\nconsole.log('Button URL from form:', emailData['CTA Button URL']);\nconsole.log('Final CTA:', ctaButton);\n\n// Get other image URLs\nconst headerImageUrl = emailData.images?.header?.imageUrl || 'https://via.placeholder.com/600x200/03C4FF/FFFFFF?text=VS+Sports';\nconst hookImageUrl = emailData.images?.hook?.imageUrl || 'https://via.placeholder.com/600x300/03C4FF/FFFFFF?text=Hook';\nconst infoImageUrl = emailData.images?.information?.imageUrl || 'https://via.placeholder.com/600x300/03C4FF/FFFFFF?text=Info';\n\n// Create the complete HTML email with NEW SECTION ORDER\nconst completeHtml = `<!doctype html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:v=\"urn:schemas-microsoft-com:vml\" xmlns:o=\"urn:schemas-microsoft-com:office:office\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <title>${subjectLine}</title>\n    <style type=\"text/css\">\n        p { margin: 10px 0; padding: 0; }\n        table { border-collapse: collapse; }\n        h1, h2, h3, h4, h5, h6 { display: block; margin: 0; padding: 0; }\n        img, a img { border: 0; height: auto; outline: none; text-decoration: none; }\n        body, #bodyTable, #bodyCell { height: 100%; margin: 0; padding: 0; width: 100%; }\n        .mcnPreviewText { display: none !important; }\n        #outlook a { padding: 0; }\n        img { -ms-interpolation-mode: bicubic; }\n        table { mso-table-lspace: 0pt; mso-table-rspace: 0pt; }\n        .ReadMsgBody { width: 100%; }\n        .ExternalClass { width: 100%; }\n        p, a, li, td, blockquote { mso-line-height-rule: exactly; }\n        a[href^=tel], a[href^=sms] { color: inherit; cursor: default; text-decoration: none; }\n        p, a, li, td, body, table, blockquote { -ms-text-size-adjust: 100%; -webkit-text-size-adjust: 100%; }\n        .templateContainer { max-width: 600px !important; }\n        .mcnImage, .mcnRetinaImage { vertical-align: bottom; }\n        .mcnTextContent { word-break: break-word; }\n        h1 { color: #222222; font-family: Helvetica; font-size: 40px; font-weight: bold; line-height: 150%; text-align: center; }\n        #templateHeader { background-color: #FFFFFF; border: 0; padding: 9px 0 0 0; }\n        #templateBody { background-color: #FFFFFF; border: 0; padding: 9px; }\n        #templateFooter { background-color: #333333; border: 0; padding: 9px; }\n        .footerContainer .mcnTextContent, .footerContainer .mcnTextContent p { color: #FFFFFF; font-family: Helvetica; font-size: 12px; line-height: 150%; text-align: center; }\n        @media only screen and (min-width:768px) { .templateContainer { width: 600px !important; } }\n        @media only screen and (max-width: 480px) { body, table, td, p, a, li, blockquote { -webkit-text-size-adjust: none !important; } }\n        @media only screen and (max-width: 480px) { body { width: 100% !important; min-width: 100% !important; } }\n        @media only screen and (max-width: 480px) { .mcnImage { width: 100% !important; } }\n        @media only screen and (max-width: 480px) { h1 { font-size: 30px !important; line-height: 125% !important; } }\n    </style>\n</head>\n<body>\n    <span class=\"mcnPreviewText\" style=\"display:none; font-size:0px; line-height:0px; max-height:0px; max-width:0px; opacity:0; overflow:hidden; visibility:hidden;\">${escapeForHtml(rawHook.substring(0, 100))}</span>\n    <center>\n        <table align=\"center\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" height=\"100%\" width=\"100%\" id=\"bodyTable\">\n            <tr>\n                <td align=\"center\" valign=\"top\" id=\"bodyCell\">\n                    <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">\n                        <tr>\n                            <td align=\"center\" valign=\"top\" id=\"templateHeader\">\n                                <table align=\"center\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\" class=\"templateContainer\">\n                                    <tr>\n                                        <td valign=\"top\" class=\"headerContainer\">\n                                            <!-- 1. HEADER IMAGE - FIRST -->\n                                            <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\" style=\"min-width: 100%;\">\n                                                <tbody>\n                                                    <tr>\n                                                        <td valign=\"top\" style=\"padding: 9px;\">\n                                                            <table align=\"left\" width=\"100%\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" style=\"min-width: 100%;\">\n                                                                <tbody>\n                                                                    <tr>\n                                                                        <td valign=\"top\" style=\"padding: 0 9px; text-align: center;\">\n                                                                            <img align=\"center\" alt=\"Header Image\" src=\"${headerImageUrl}\" width=\"564\" style=\"max-width: 600px; padding-bottom: 0; display: inline !important; vertical-align: bottom;\">\n                                                                        </td>\n                                                                    </tr>\n                                                                </tbody>\n                                                            </table>\n                                                        </td>\n                                                    </tr>\n                                                </tbody>\n                                            </table>\n                                            \n                                            <!-- 2. HEADER SECTION - HOOK TITLE (NOT EMAIL TYPE) -->\n                                            <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\" style=\"min-width: 100%;\">\n                                                <tbody>\n                                                    <tr>\n                                                        <td valign=\"top\" style=\"padding: 9px;\">\n                                                            <table align=\"left\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\" style=\"min-width: 100%;\">\n                                                                <tbody>\n                                                                    <tr>\n                                                                        <td style=\"padding: 9px 18px;\">\n                                                                            <table border=\"0\" cellspacing=\"0\" width=\"100%\" style=\"min-width: 100%; background-color: #03C4FF;\">\n                                                                                <tbody>\n                                                                                    <tr>\n                                                                                        <td valign=\"top\" style=\"padding: 18px; color: #FFFFFF; font-family: Helvetica; font-size: 14px; text-align: center; line-height: 150%;\">\n                                                                                            <h1 style=\"margin: 0; padding: 0; color: #FFFFFF; font-family: Helvetica; font-size: 17px; font-weight: bold; line-height: 150%; text-align: center;\">\n                                                                                                <strong>${hookTitle.toUpperCase()}</strong>\n                                                                                            </h1>\n                                                                                        </td>\n                                                                                    </tr>\n                                                                                </tbody>\n                                                                            </table>\n                                                                        </td>\n                                                                    </tr>\n                                                                </tbody>\n                                                            </table>\n                                                        </td>\n                                                    </tr>\n                                                </tbody>\n                                            </table>\n                                        </td>\n                                    </tr>\n                                </table>\n                            </td>\n                        </tr>\n                        <tr>\n                            <td align=\"center\" valign=\"top\" id=\"templateBody\">\n                                <table align=\"center\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\" class=\"templateContainer\">\n                                    <tr>\n                                        <td valign=\"top\" class=\"bodyContainer\">\n                                            <!-- 3. HOOK SECTION - SHORT PARAGRAPH + HOOK IMAGE -->\n                                            <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\" style=\"min-width: 100%;\">\n                                                <tbody>\n                                                    <tr>\n                                                        <td valign=\"top\" style=\"padding: 9px 0;\">\n                                                            <table align=\"left\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" style=\"max-width: 100%; min-width: 100%;\" width=\"100%\">\n                                                                <tbody>\n                                                                    <tr>\n                                                                        <td valign=\"top\" style=\"padding: 0 18px 9px; text-align: center;\">\n                                                                            ${hookContent}\n                                                                        </td>\n                                                                    </tr>\n                                                                </tbody>\n                                                            </table>\n                                                        </td>\n                                                    </tr>\n                                                </tbody>\n                                            </table>\n                                            \n                                            <!-- Hook Image -->\n                                            <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\" style=\"min-width: 100%;\">\n                                                <tbody>\n                                                    <tr>\n                                                        <td valign=\"top\" style=\"padding: 9px;\">\n                                                            <table align=\"left\" width=\"100%\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" style=\"min-width: 100%;\">\n                                                                <tbody>\n                                                                    <tr>\n                                                                        <td valign=\"top\" style=\"padding: 0 9px; text-align: center;\">\n                                                                            <img align=\"center\" alt=\"Hook Image\" src=\"${hookImageUrl}\" width=\"564\" style=\"max-width: 600px; padding-bottom: 0; display: inline !important; vertical-align: bottom;\">\n                                                                        </td>\n                                                                    </tr>\n                                                                </tbody>\n                                                            </table>\n                                                        </td>\n                                                    </tr>\n                                                </tbody>\n                                            </table>\n\n                                            <!-- 4. DYNAMIC INSIGHTS BANNER -->\n                                            <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\" style=\"min-width: 100%;\">\n                                                <tbody>\n                                                    <tr>\n                                                        <td valign=\"top\" style=\"padding: 9px;\">\n                                                            <table align=\"left\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\" style=\"min-width: 100%;\">\n                                                                <tbody>\n                                                                    <tr>\n                                                                        <td style=\"padding: 9px 18px;\">\n                                                                            <table border=\"0\" cellspacing=\"0\" width=\"100%\" style=\"min-width: 100%; background-color: #03C4FF;\">\n                                                                                <tbody>\n                                                                                    <tr>\n                                                                                        <td valign=\"top\" style=\"padding: 18px; color: #FFFFFF; font-family: Helvetica; font-size: 14px; text-align: center; line-height: 150%;\">\n                                                                                            <strong style=\"color: #FFFFFF; font-size: 16px; font-family: Arial, Helvetica, sans-serif;\">${keyInsightsTitle.toUpperCase()}</strong>\n                                                                                        </td>\n                                                                                    </tr>\n                                                                                </tbody>\n                                                                            </table>\n                                                                        </td>\n                                                                    </tr>\n                                                                </tbody>\n                                                            </table>\n                                                        </td>\n                                                    </tr>\n                                                </tbody>\n                                            </table>\n\n                                            <!-- 5. INFORMATION SECTION -->\n                                            <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\" style=\"min-width: 100%;\">\n                                                <tbody>\n                                                    <tr>\n                                                        <td valign=\"top\" style=\"padding: 9px 0;\">\n                                                            <table align=\"left\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" style=\"max-width: 100%; min-width: 100%;\" width=\"100%\">\n                                                                <tbody>\n                                                                    <tr>\n                                                                        <td valign=\"top\" style=\"padding: 0 18px 9px; text-align: center;\">\n                                                                            ${informationContent}\n                                                                        </td>\n                                                                    </tr>\n                                                                </tbody>\n                                                            </table>\n                                                        </td>\n                                                    </tr>\n                                                </tbody>\n                                            </table>\n\n                                            <!-- Information Image -->\n                                            <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\" style=\"min-width: 100%;\">\n                                                <tbody>\n                                                    <tr>\n                                                        <td valign=\"top\" style=\"padding: 9px;\">\n                                                            <table align=\"left\" width=\"100%\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" style=\"min-width: 100%;\">\n                                                                <tbody>\n                                                                    <tr>\n                                                                        <td valign=\"top\" style=\"padding: 0 9px; text-align: center;\">\n                                                                            <img align=\"center\" alt=\"Information Image\" src=\"${infoImageUrl}\" width=\"564\" style=\"max-width: 600px; padding-bottom: 0; display: inline !important; vertical-align: bottom;\">\n                                                                        </td>\n                                                                    </tr>\n                                                                </tbody>\n                                                            </table>\n                                                        </td>\n                                                    </tr>\n                                                </tbody>\n                                            </table>\n\n                                            <!-- 6. DETAILS SECTION -->\n                                            <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\" style=\"min-width: 100%;\">\n                                                <tbody>\n                                                    <tr>\n                                                        <td valign=\"top\" style=\"padding: 9px 0;\">\n                                                            <table align=\"left\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" style=\"max-width: 100%; min-width: 100%;\" width=\"100%\">\n                                                                <tbody>\n                                                                    <tr>\n                                                                        <td valign=\"top\" style=\"padding: 0 18px 9px; text-align: center;\">\n                                                                            ${detailsContent}\n                                                                        </td>\n                                                                    </tr>\n                                                                </tbody>\n                                                            </table>\n                                                        </td>\n                                                    </tr>\n                                                </tbody>\n                                            </table>\n\n                                            <!-- 7. CTA BUTTON - CUSTOM TEXT AND URL -->\n                                            <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\" style=\"min-width: 100%;\">\n                                                <tbody>\n                                                    <tr>\n                                                        <td style=\"padding: 0 18px 18px;\" valign=\"top\" align=\"center\">\n                                                            <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" style=\"border-radius: 3px; background-color: #03C4FF;\">\n                                                                <tbody>\n                                                                    <tr>\n                                                                        <td align=\"center\" valign=\"middle\" style=\"font-family: Helvetica; font-size: 18px; padding: 18px;\">\n                                                                            <a href=\"${ctaButton.url}\" target=\"_blank\" style=\"font-weight: bold; line-height: 100%; text-align: center; text-decoration: none; color: #FFFFFF;\">${ctaButton.text}</a>\n                                                                        </td>\n                                                                    </tr>\n                                                                </tbody>\n                                                            </table>\n                                                        </td>\n                                                    </tr>\n                                                </tbody>\n                                            </table>\n\n                                            <!-- 8. VS SPORTS LOGO -->\n                                            <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\" style=\"min-width: 100%;\">\n                                                <tbody>\n                                                    <tr>\n                                                        <td valign=\"top\" style=\"padding: 9px;\">\n                                                            <table align=\"left\" width=\"100%\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" style=\"min-width: 100%;\">\n                                                                <tbody>\n                                                                    <tr>\n                                                                        <td valign=\"top\" style=\"padding: 0 9px; text-align: center;\">\n                                                                            <img align=\"center\" alt=\"VS Sports Logo\" src=\"${logoUrl}\" width=\"300\" style=\"max-width: 400px; padding-bottom: 0; display: inline !important; vertical-align: bottom;\">\n                                                                        </td>\n                                                                    </tr>\n                                                                </tbody>\n                                                            </table>\n                                                        </td>\n                                                    </tr>\n                                                </tbody>\n                                            </table>\n                                        </td>\n                                    </tr>\n                                </table>\n                            </td>\n                        </tr>\n                        <tr>\n                            <td align=\"center\" valign=\"top\" id=\"templateFooter\">\n                                <table align=\"center\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\" class=\"templateContainer\">\n                                    <tr>\n                                        <td valign=\"top\" class=\"footerContainer\">\n                                            <!-- 9. FOOTER -->\n                                            <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\" style=\"min-width: 100%;\">\n                                                <tbody>\n                                                    <tr>\n                                                        <td valign=\"top\" style=\"padding: 9px 0;\">\n                                                            <table align=\"left\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" style=\"max-width: 100%; min-width: 100%;\" width=\"100%\">\n                                                                <tbody>\n                                                                    <tr>\n                                                                        <td valign=\"top\" style=\"padding: 0 18px 9px; color: #FFFFFF; font-family: Helvetica; font-size: 12px; line-height: 150%; text-align: center;\">\n                                                                            <p style=\"color: #FFFFFF; font-family: Helvetica; font-size: 12px; line-height: 150%; text-align: center; margin: 10px 0; padding: 0;\">\n                                                                                Copyright © ${new Date().getFullYear()} VS. Sports, All rights reserved.<br>\n                                                                                You are receiving this because you opted in via our website.<br><br>\n                                                                                <strong>Our mailing address is:</strong><br>\n                                                                                VS. Sports<br>\n                                                                                PO Box 681763<br>\n                                                                                Park City, UT 84068-1763<br><br>\n                                                                                Want to change how you receive these emails?<br>\n                                                                                You can <a href=\"*|UPDATE_PROFILE|*\" style=\"color: #FFFFFF;\">update your preferences</a> or <a href=\"*|UNSUB|*\" style=\"color: #FFFFFF;\">unsubscribe from this list</a>.\n                                                                            </p>\n                                                                        </td>\n                                                                    </tr>\n                                                                </tbody>\n                                                            </table>\n                                                        </td>\n                                                    </tr>\n                                                </tbody>\n                                            </table>\n                                        </td>\n                                    </tr>\n                                </table>\n                            </td>\n                        </tr>\n                    </table>\n                </td>\n            </tr>\n        </table>\n    </center>\n</body>\n</html>`;\n\n// Create comprehensive output object\nconst outputData = {\n    // Mailchimp-ready data\n    mailchimpReady: {\n        subject_line: subjectLine.replace(/&[^;]+;/g, ''), // Remove HTML entities for subject\n        html_content: completeHtml,\n        text_content: `${subjectLine}\\n\\n${hookTitle}\\n\\n${rawHook}\\n\\n${keyInsightsTitle}\\n\\n${rawInformation}\\n\\n${rawDetails}\\n\\n${ctaButton.text}: ${ctaButton.url}\\n\\nVisit us at: https://vssports.us\\n\\nCopyright © ${new Date().getFullYear()} VS Sports, All rights reserved.`,\n        from_name: 'VS. Sports',\n        reply_to: 'elanie@vssports.us'\n    },\n    \n    // Campaign metadata\n    campaignMetadata: {\n        campaignName: emailData.campaignName || 'Unknown Campaign',\n        emailType: emailData.emailType || 'General',\n        sportCategory: emailData.sportCategory || 'Sports',\n        targetAudience: emailData.targetAudience || 'Athletes',\n        campaignPriority: emailData.campaignPriority || 'Medium',\n        sendDate: emailData.sendDate || ''\n    },\n    \n    // Content sections\n    contentSections: {\n        subjectLine: subjectLine.replace(/&[^;]+;/g, ''),\n        hookTitle: hookTitle,\n        hook: rawHook,\n        keyInsightsTitle: keyInsightsTitle,\n        information: rawInformation,\n        details: rawDetails,\n        ctaButtonText: ctaButton.text,\n        ctaButtonUrl: ctaButton.url\n    },\n    \n    // Image assets\n    imageAssets: {\n        header: { url: headerImageUrl, ready: true },\n        hook: { url: hookImageUrl, ready: true },\n        information: { url: infoImageUrl, ready: true },\n        logo: { url: logoUrl, ready: true }\n    },\n    \n    // Processing info\n    processingInfo: {\n        htmlAssembledAt: new Date().toISOString(),\n        status: 'ready_for_mailchimp',\n        readyForSend: true,\n        templateVersion: 'vs_sports_reordered_v2.0',\n        newFeatures: ['dynamic_titles', 'custom_cta', 'url_linking', 'bullet_points', 'logo_fallback']\n    }\n};\n\nconsole.log('✅ HTML Email Assembly Complete - New Section Order');\nconsole.log('📧 Subject Line:', subjectLine);\nconsole.log('🎯 Hook Title:', hookTitle);\nconsole.log('📊 Key Insights Title:', keyInsightsTitle);\nconsole.log('🔘 CTA Button:', ctaButton.text, '->', ctaButton.url);\nconsole.log('🏃 Sport Category:', emailData.sportCategory);\nconsole.log('📊 Status: Ready for Mailchimp');\n\nreturn { json: outputData };"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-164,762],"id":"e9dc9e22-2384-40a6-8b80-f1b065129555","name":"HTML Email Assembly Node"},{"parameters":{"jsCode":"// Mailchimp Campaign Creator Node\n// Creates a draft campaign in Mailchimp using the assembled email data\n\nconst emailData = $input.first().json;\n\n// Extract the mailchimp-ready data\nconst mailchimpData = emailData.mailchimpReady;\nconst campaignMetadata = emailData.campaignMetadata;\n\n// Create campaign title with timestamp for uniqueness\nconst campaignTitle = `${campaignMetadata.campaignName} - ${campaignMetadata.sportCategory} - ${new Date().toISOString().split('T')[0]}`;\n\n// Create the campaign object for Mailchimp\nconst campaignPayload = {\n    type: 'regular',\n    recipients: {\n        list_id: '7f667c206a' // Your VS Sports list ID from the example emails\n    },\n    settings: {\n        subject_line: mailchimpData.subject_line,\n        title: campaignTitle,\n        from_name: mailchimpData.from_name,\n        reply_to: mailchimpData.reply_to,\n        to_name: '*|FNAME|*', // Mailchimp merge tag for first name\n        folder_id: '', // Optional: specify folder ID if you want to organize campaigns\n        authenticate: true,\n        auto_footer: false, // We're including our own footer\n        inline_css: true,\n        auto_tweet: false,\n        fb_comments: false,\n        timewarp: false,\n        template_id: 0, // Use custom HTML instead of template\n        drag_and_drop: false // We're using custom HTML\n    },\n    tracking: {\n        opens: true,\n        html_clicks: true,\n        text_clicks: false,\n        goal_tracking: false,\n        ecomm360: false,\n        google_analytics: '',\n        clicktale: ''\n    },\n    social_card: {\n        image_url: emailData.imageAssets?.header?.url || 'https://vssports.us/logo.png',\n        description: `${campaignMetadata.sportCategory} ${campaignMetadata.emailType} from VS Sports`,\n        title: mailchimpData.subject_line\n    }\n};\n\n// Log the campaign creation attempt\nconsole.log('🚀 Creating Mailchimp Campaign...');\nconsole.log('📧 Campaign Title:', campaignTitle);\nconsole.log('🎯 Subject Line:', mailchimpData.subject_line);\nconsole.log('🏃 Sport Category:', campaignMetadata.sportCategory);\nconsole.log('📊 Email Type:', campaignMetadata.emailType);\nconsole.log('👥 Target Audience:', campaignMetadata.targetAudience);\n\n// Return the campaign payload and additional metadata\nreturn {\n    json: {\n        // Main campaign data for Mailchimp API\n        campaignPayload: campaignPayload,\n        \n        // HTML content (separate because it's large)\n        htmlContent: mailchimpData.html_content,\n        textContent: mailchimpData.text_content,\n        \n        // Campaign metadata for tracking\n        campaignInfo: {\n            title: campaignTitle,\n            subjectLine: mailchimpData.subject_line,\n            sportCategory: campaignMetadata.sportCategory,\n            emailType: campaignMetadata.emailType,\n            targetAudience: campaignMetadata.targetAudience,\n            priority: campaignMetadata.campaignPriority,\n            createdAt: new Date().toISOString(),\n            status: 'ready_for_mailchimp_creation'\n        },\n        \n        // Next steps information\n        nextSteps: {\n            step1: 'Create campaign using campaignPayload',\n            step2: 'Set HTML content using htmlContent',\n            step3: 'Set text content using textContent',\n            step4: 'Campaign will be created in DRAFT status',\n            step5: 'Review and send manually from Mailchimp dashboard'\n        },\n        \n        // API endpoints needed (for reference)\n        mailchimpEndpoints: {\n            createCampaign: 'POST /campaigns',\n            setContent: 'PUT /campaigns/{campaign_id}/content',\n            sendTest: 'POST /campaigns/{campaign_id}/actions/test',\n            schedule: 'POST /campaigns/{campaign_id}/actions/schedule',\n            send: 'POST /campaigns/{campaign_id}/actions/send'\n        }\n    }\n};\n\n// Additional logging for debugging\nconsole.log('✅ Campaign payload prepared');\nconsole.log('📄 HTML content length:', mailchimpData.html_content.length, 'characters');\nconsole.log('📝 Text content length:', mailchimpData.text_content.length, 'characters');\nconsole.log('🎨 Images included:', Object.keys(emailData.imageAssets || {}).length);\nconsole.log('🔗 Ready for Mailchimp API integration');"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[56,762],"id":"eab57516-c89b-4697-91b5-77efb7c96930","name":"Mailchimp Campaign Preparation"},{"parameters":{"method":"POST","url":"https://us17.api.mailchimp.com/3.0/campaigns","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"specifyBody":"json","jsonBody":"={\n  \"type\": \"regular\",\n  \"recipients\": {\n    \"list_id\": \"7f667c206a\"\n  },\n  \"settings\": {\n    \"subject_line\": \"{{ $('HTML Email Assembly Node').item.json.mailchimpReady.subject_line }}\",\n    \"title\": \"{{ $('HTML Email Assembly Node').item.json.campaignMetadata.campaignName }} - {{ $('HTML Email Assembly Node').item.json.campaignMetadata.sportCategory }}\",\n    \"from_name\": \"{{ $('HTML Email Assembly Node').item.json.mailchimpReady.from_name }}\",\n    \"reply_to\": \"{{ $('HTML Email Assembly Node').item.json.mailchimpReady.reply_to }}\",\n    \"to_name\": \"*|FNAME|*\",\n    \"authenticate\": true,\n    \"auto_footer\": false,\n    \"inline_css\": true,\n    \"auto_tweet\": false,\n    \"fb_comments\": false\n  },\n  \"tracking\": {\n    \"opens\": true,\n    \"html_clicks\": true,\n    \"text_clicks\": false,\n    \"goal_tracking\": false,\n    \"ecomm360\": false\n  }\n}","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[276,762],"id":"1b0c49ab-d433-42fc-acbd-cf7101a6c4e2","name":"Create Campaign Mailchimp","credentials":{"httpHeaderAuth":{"id":"DrwVhGP1KRworMY3","name":"Mailchimp API VS Sports"}}},{"parameters":{"method":"PUT","url":"=https://us17.api.mailchimp.com/3.0/campaigns/{{ $('Create Campaign Mailchimp').item.json.id }}/content","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"contentType":"raw","rawContentType":"application/json","body":"={{ JSON.stringify($('Prepare Content for Mailchimp').item.json.contentPayload) }}","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[716,762],"id":"2fe81af9-6e13-42dc-adae-9332c7d50623","name":"Set Campaign Content","credentials":{"httpHeaderAuth":{"id":"DrwVhGP1KRworMY3","name":"Mailchimp API VS Sports"}}},{"parameters":{"jsCode":"// Prepare Content for Mailchimp - FIXED VERSION\n// This node gets the HTML content from the right source\n\n// Debug: Log the input to see what we're working with\nconsole.log('Input data structure:', JSON.stringify($input.first().json, null, 2));\n\n// Try to get data from the most likely sources\nlet emailData = null;\nlet htmlContent = null;\nlet textContent = null;\nlet campaignId = null;\n\n// Method 1: Try to get from current input (Create Campaign Mailchimp output)\nconst currentInput = $input.first().json;\ncampaignId = currentInput.id || currentInput.campaign_id;\n\n// Method 2: Try to get from HTML Email Assembly Node\ntry {\n    const htmlAssemblyData = $('HTML Email Assembly Node').first().json;\n    console.log('HTML Assembly Node data found:', !!htmlAssemblyData);\n    \n    if (htmlAssemblyData && htmlAssemblyData.mailchimpReady) {\n        htmlContent = htmlAssemblyData.mailchimpReady.html_content;\n        textContent = htmlAssemblyData.mailchimpReady.text_content;\n        console.log('✅ Using HTML Email Assembly Node data');\n    }\n} catch (error) {\n    console.log('HTML Email Assembly Node not found or error:', error.message);\n}\n\n// Method 3: Try alternative node names\nif (!htmlContent) {\n    try {\n        const assemblyData = $('Combine All Email Data').first().json;\n        if (assemblyData && assemblyData.mailchimpReady) {\n            htmlContent = assemblyData.mailchimpReady.html_content;\n            textContent = assemblyData.mailchimpReady.text_content;\n            console.log('✅ Using Combine All Email Data');\n        }\n    } catch (error) {\n        console.log('Combine All Email Data not found');\n    }\n}\n\n// Method 4: Try from previous execution data\nif (!htmlContent) {\n    try {\n        // Look for any previous node with mailchimpReady data\n        const allPreviousNodes = $input.all();\n        for (let node of allPreviousNodes) {\n            if (node.json.mailchimpReady) {\n                htmlContent = node.json.mailchimpReady.html_content;\n                textContent = node.json.mailchimpReady.text_content;\n                console.log('✅ Found mailchimpReady data in previous execution');\n                break;\n            }\n        }\n    } catch (error) {\n        console.log('No previous execution data found');\n    }\n}\n\n// Method 5: Fallback - use hardcoded test content if nothing found\nif (!htmlContent) {\n    console.log('❌ No HTML content found, using test content');\n    htmlContent = `<!doctype html>\n<html>\n<head><title>Test Email</title></head>\n<body>\n<h1>Test VS Sports Email</h1>\n<p>This is a test email generated because the original content could not be found.</p>\n<p>Campaign ID: ${campaignId}</p>\n</body>\n</html>`;\n    textContent = \"Test VS Sports Email\\n\\nThis is a test email generated because the original content could not be found.\\n\\nCampaign ID: \" + campaignId;\n}\n\n// Validate we have the required data\nif (!campaignId) {\n    console.error('❌ No campaign ID found!');\n    throw new Error('Campaign ID is required but not found in the input data');\n}\n\nif (!htmlContent || htmlContent.length < 100) {\n    console.warn('⚠️ HTML content seems incomplete');\n}\n\n// Create the payload as a properly formatted object\nconst contentPayload = {\n    html: htmlContent,\n    plain_text: textContent\n};\n\nconsole.log('✅ Content prepared successfully');\nconsole.log('📧 HTML content length:', htmlContent.length);\nconsole.log('📝 Text content length:', textContent.length);\nconsole.log('🆔 Campaign ID:', campaignId);\n\nreturn {\n    json: {\n        campaignId: campaignId,\n        contentPayload: contentPayload,\n        debug: {\n            htmlContentLength: htmlContent.length,\n            textContentLength: textContent.length,\n            htmlPreview: htmlContent.substring(0, 200) + '...',\n            textPreview: textContent.substring(0, 200) + '...'\n        }\n    }\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[496,762],"id":"d7d04e8e-5718-4b22-a231-6a9cfa534245","name":"Prepare Content for Mailchimp"},{"parameters":{"jsCode":"// Simplified ImgBB Upload - Just prepare metadata, let HTTP node handle file\nconst inputData = $input.first().json;\nconst section = inputData.section;\n\n// Get file info\nconst uploadFileInfo = inputData.imageData;\nif (!uploadFileInfo || !uploadFileInfo.filename) {\n  throw new Error(`No file information found for ${section} section`);\n}\n\nconst fileName = uploadFileInfo.filename;\nconst cleanName = fileName.replace(/\\.[^/.]+$/, ''); // Remove extension\n\nconsole.log(`📄 Preparing ${section} upload: ${fileName}`);\n\n// Return simple data for HTTP Request node\nreturn {\n  json: {\n    key: '10f598893185db2ddcb49736a3a5cd8d',\n    name: cleanName,\n    expiration: 0,\n    section: section,\n    originalFileName: fileName,\n    status: 'ready_for_http_upload'\n  }\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-3180,-720],"id":"4f167757-beb1-4d97-8576-e9d8c113aacf","name":"ImgBB Upload Preparation"},{"parameters":{"method":"POST","url":"https://api.imgbb.com/1/upload","sendBody":true,"contentType":"multipart-form-data","bodyParameters":{"parameters":[{"parameterType":"formBinaryData","name":"key"},{"name":"name","value":"={{ $json.name }}"},{"name":"=expiration","value":"={{ $json.expiration }}"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-2960,-720],"id":"bc3ad600-b81e-4cf6-9b50-240e1dcc1494","name":"HTTP Request (ImgBB)"},{"parameters":{"jsCode":"// ImgBB Upload Node - Fixed for n8n Form Uploads\n// This node uploads files to ImgBB and returns URLs for the unified flow\n\nconsole.log('=== ImgBB Upload Debug Info ===');\nconsole.log('Input JSON:', JSON.stringify($input.first().json, null, 2));\nconsole.log('Available $binary keys:', Object.keys($binary || {}));\n\nconst inputData = $input.first().json;\nconst section = inputData.section;\n\n// For form uploads, the file info is in JSON but binary data is in $binary\nconst uploadFileInfo = inputData.imageData;\n\n// Validate we have file info\nif (!uploadFileInfo || !uploadFileInfo.filename) {\n  throw new Error(`No image file information found for ${section} section`);\n}\n\n// Extract file information from the uploaded file info\nconst fileName = uploadFileInfo.filename;\nconst fileType = uploadFileInfo.mimetype || 'image/jpeg';\nconst fileSize = uploadFileInfo.size || 0;\n\nconsole.log(`📄 Processing file: ${fileName} (${fileSize} bytes, ${fileType})`);\n\n// Get binary data from n8n's $binary object\nlet base64Data;\ntry {\n  // n8n stores uploaded files in $binary with a key that matches the field name\n  // The key might be something like \"data\" or match the filename\n  const binaryKeys = Object.keys($binary || {});\n  console.log('Available binary keys:', binaryKeys);\n  \n  if (binaryKeys.length === 0) {\n    throw new Error('No binary data found in $binary object');\n  }\n  \n  // Try to find the binary data - usually it's the first (and often only) key\n  const binaryKey = binaryKeys[0];\n  const binaryData = $binary[binaryKey];\n  \n  if (!binaryData || !binaryData.data) {\n    throw new Error(`No binary data found for key: ${binaryKey}`);\n  }\n  \n  // Convert buffer to base64\n  base64Data = binaryData.data.toString('base64');\n  \n  console.log(`✅ Successfully extracted ${base64Data.length} characters of base64 data`);\n  console.log(`📊 Binary data info:`, {\n    mimeType: binaryData.mimeType,\n    fileName: binaryData.fileName,\n    fileSize: binaryData.fileSize\n  });\n  \n} catch (error) {\n  console.error(`❌ Binary data processing error for ${section}:`, error);\n  throw new Error(`Failed to process binary data for ${section}: ${error.message}`);\n}\n\n// Prepare ImgBB upload payload\nconst imgbbPayload = {\n  key: '10f598893185db2ddcb49736a3a5cd8d',\n  image: base64Data,\n  name: fileName.replace(/\\.[^/.]+$/, ''), // Remove extension\n  expiration: 0 // Never expires\n};\n\nconsole.log(`📤 Uploading ${section} image to ImgBB...`);\nconsole.log(`📄 File: ${fileName} (${fileSize} bytes)`);\nconsole.log(`🎯 Type: ${fileType}`);\n\n// Return the payload and metadata for the HTTP Request node\nreturn {\n  json: {\n    // ImgBB upload data\n    imgbbPayload: imgbbPayload,\n    \n    // Original metadata to pass through\n    section: section,\n    originalFileName: fileName,\n    fileType: fileType,\n    fileSize: fileSize,\n    imageSource: 'upload',\n    \n    // Campaign context\n    campaignName: inputData.campaignName,\n    emailType: inputData.emailType,\n    sportCategory: inputData.sportCategory,\n    targetAudience: inputData.targetAudience,\n    \n    // Processing info\n    uploadAttemptedAt: new Date().toISOString(),\n    status: 'ready_for_imgbb_upload',\n    \n    // Debug info\n    debug: {\n      binaryKeysFound: Object.keys($binary || {}),\n      base64Length: base64Data.length,\n      fileInfo: uploadFileInfo\n    }\n  }\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-2740,-720],"id":"c4a83d42-af99-4024-8696-5e76d31e8ba4","name":"ImgBB Response Processor"},{"parameters":{"jsCode":"// ImgBB Upload Node - Replace \"Process Uploaded Image\"\n// This node uploads files to ImgBB and returns URLs for the unified flow\n\nconst inputData = $input.first().json;\nconst imageData = inputData.imageData;\nconst section = inputData.section;\n\n// Validate input data\nif (!imageData || !Array.isArray(imageData) || imageData.length === 0) {\n  throw new Error(`No image data found for ${section} section`);\n}\n\n// Get the first uploaded file\nconst uploadedFile = imageData[0];\n\n// Extract file information\nconst fileName = uploadedFile.filename || `${section}_upload.jpg`;\nconst fileType = uploadedFile.mimeType || uploadedFile.mimetype || 'image/jpeg';\nconst fileSize = uploadedFile.fileSize || uploadedFile.size || 0;\n\n// Get binary data (n8n stores it in different possible locations)\nlet binaryData = null;\nif (uploadedFile.binary) {\n  binaryData = uploadedFile.binary;\n} else if (uploadedFile.data) {\n  binaryData = uploadedFile.data;\n} else {\n  binaryData = uploadedFile;\n}\n\n// Validate binary data exists\nif (!binaryData) {\n  throw new Error(`No binary data found for uploaded file in ${section} section`);\n}\n\n// Convert binary data to base64 for ImgBB API\nlet base64Data;\ntry {\n  if (typeof binaryData === 'string') {\n    // Already base64\n    base64Data = binaryData.replace(/^data:image\\/[a-z]+;base64,/, '');\n  } else if (Buffer.isBuffer(binaryData)) {\n    // Convert buffer to base64\n    base64Data = binaryData.toString('base64');\n  } else {\n    throw new Error('Unsupported binary data format');\n  }\n} catch (error) {\n  throw new Error(`Failed to process binary data for ${section}: ${error.message}`);\n}\n\n// Prepare ImgBB upload payload\nconst imgbbPayload = {\n  key: '10f598893185db2ddcb49736a3a5cd8d', // Replace with your actual API key or use credential\n  image: base64Data,\n  name: fileName.replace(/\\.[^/.]+$/, ''), // Remove extension, ImgBB will handle it\n  expiration: 0 // 0 = never expires, or set seconds (e.g., 604800 for 7 days)\n};\n\nconsole.log(`📤 Uploading ${section} image to ImgBB...`);\nconsole.log(`📄 File: ${fileName} (${fileSize} bytes)`);\nconsole.log(`🎯 Type: ${fileType}`);\n\n// Return the payload and metadata for the HTTP Request node\nreturn {\n  json: {\n    // ImgBB upload data\n    imgbbPayload: imgbbPayload,\n    \n    // Original metadata to pass through\n    section: section,\n    originalFileName: fileName,\n    fileType: fileType,\n    fileSize: fileSize,\n    imageSource: 'upload',\n    \n    // Campaign context\n    campaignName: inputData.campaignName,\n    emailType: inputData.emailType,\n    sportCategory: inputData.sportCategory,\n    targetAudience: inputData.targetAudience,\n    \n    // Processing info\n    uploadAttemptedAt: new Date().toISOString(),\n    status: 'ready_for_imgbb_upload'\n  }\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-3180,-460],"id":"0aa173d9-82ca-4086-b9f3-bf2296be705c","name":"ImgBB Upload Preparation1"},{"parameters":{"method":"POST","url":"https://api.imgbb.com/1/upload","sendBody":true,"bodyParameters":{"parameters":[{"name":"key","value":"={{ $json.imgbbPayload.key }}"},{"name":"image","value":"={{ $json.imgbbPayload.image }}"},{"name":"name","value":"={{ $json.imgbbPayload.name }}"},{"name":"expiration","value":"={{ $json.imgbbPayload.expiration }}"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-2960,-460],"id":"87cabd83-0b13-4c3e-a204-ec1993f7d7b1","name":"HTTP Request (ImgBB)1"},{"parameters":{"jsCode":"// ImgBB Response Processor - Process the ImgBB API response\n// This node standardizes the ImgBB response to match your existing image flow\n\nconst inputData = $input.first().json;\nconst imgbbResponse = inputData;\n\n// Get original request data from the preparation node\nconst originalData = $('ImgBB Upload Preparation1').first().json;\n\n// Validate ImgBB response\nif (!imgbbResponse.success) {\n  const errorMsg = imgbbResponse.error?.message || 'Unknown ImgBB upload error';\n  throw new Error(`ImgBB upload failed for ${originalData.section}: ${errorMsg}`);\n}\n\n// Extract image URLs from ImgBB response\nconst imageData = imgbbResponse.data;\nconst imageUrl = imageData.url;\nconst deleteUrl = imageData.delete_url;\nconst thumbnailUrl = imageData.thumb?.url;\n\n// Validate we got a URL\nif (!imageUrl) {\n  throw new Error(`No image URL returned from ImgBB for ${originalData.section}`);\n}\n\nconsole.log(`✅ ImgBB upload successful for ${originalData.section}`);\nconsole.log(`🔗 Image URL: ${imageUrl}`);\nconsole.log(`📊 ImgBB ID: ${imageData.id}`);\n\n// Create standardized output that matches your existing image processing structure\nconst standardizedOutput = {\n  section: originalData.section,\n  imageSource: 'upload', // Keep original source designation\n  imageReady: true,\n  fileName: originalData.originalFileName,\n  fileType: originalData.fileType,\n  fileSize: originalData.fileSize,\n  imageUrl: imageUrl, // This is the key - the URL that will be used in email\n  binaryData: null, // No longer needed since we have URL\n  \n  // ImgBB specific data\n  imgbbData: {\n    id: imageData.id,\n    title: imageData.title,\n    url: imageUrl,\n    displayUrl: imageData.display_url,\n    deleteUrl: deleteUrl,\n    width: imageData.width,\n    height: imageData.height,\n    size: imageData.size,\n    time: imageData.time,\n    expiration: imageData.expiration\n  },\n  \n  // Processing metadata\n  processingStatus: 'success',\n  processedAt: new Date().toISOString(),\n  uploadedAt: new Date().toISOString(),\n  uploadMethod: 'imgbb',\n  \n  // Pass through campaign context\n  campaignName: originalData.campaignName,\n  emailType: originalData.emailType,\n  sportCategory: originalData.sportCategory,\n  targetAudience: originalData.targetAudience\n};\n\nconsole.log(`📤 Upload complete - ${originalData.section} section ready`);\nconsole.log(`🎯 Final URL: ${imageUrl}`);\n\nreturn { json: standardizedOutput };"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-2740,-460],"id":"59477339-1c3e-4504-b3d3-3ebef9c29803","name":"ImgBB Response Processor1"},{"parameters":{"jsCode":"// ImgBB Upload Node - Replace \"Process Uploaded Image\"\n// This node uploads files to ImgBB and returns URLs for the unified flow\n\nconst inputData = $input.first().json;\nconst imageData = inputData.imageData;\nconst section = inputData.section;\n\n// Validate input data\nif (!imageData || !Array.isArray(imageData) || imageData.length === 0) {\n  throw new Error(`No image data found for ${section} section`);\n}\n\n// Get the first uploaded file\nconst uploadedFile = imageData[0];\n\n// Extract file information\nconst fileName = uploadedFile.filename || `${section}_upload.jpg`;\nconst fileType = uploadedFile.mimeType || uploadedFile.mimetype || 'image/jpeg';\nconst fileSize = uploadedFile.fileSize || uploadedFile.size || 0;\n\n// Get binary data (n8n stores it in different possible locations)\nlet binaryData = null;\nif (uploadedFile.binary) {\n  binaryData = uploadedFile.binary;\n} else if (uploadedFile.data) {\n  binaryData = uploadedFile.data;\n} else {\n  binaryData = uploadedFile;\n}\n\n// Validate binary data exists\nif (!binaryData) {\n  throw new Error(`No binary data found for uploaded file in ${section} section`);\n}\n\n// Convert binary data to base64 for ImgBB API\nlet base64Data;\ntry {\n  if (typeof binaryData === 'string') {\n    // Already base64\n    base64Data = binaryData.replace(/^data:image\\/[a-z]+;base64,/, '');\n  } else if (Buffer.isBuffer(binaryData)) {\n    // Convert buffer to base64\n    base64Data = binaryData.toString('base64');\n  } else {\n    throw new Error('Unsupported binary data format');\n  }\n} catch (error) {\n  throw new Error(`Failed to process binary data for ${section}: ${error.message}`);\n}\n\n// Prepare ImgBB upload payload\nconst imgbbPayload = {\n  key: '10f598893185db2ddcb49736a3a5cd8d', // Replace with your actual API key or use credential\n  image: base64Data,\n  name: fileName.replace(/\\.[^/.]+$/, ''), // Remove extension, ImgBB will handle it\n  expiration: 0 // 0 = never expires, or set seconds (e.g., 604800 for 7 days)\n};\n\nconsole.log(`📤 Uploading ${section} image to ImgBB...`);\nconsole.log(`📄 File: ${fileName} (${fileSize} bytes)`);\nconsole.log(`🎯 Type: ${fileType}`);\n\n// Return the payload and metadata for the HTTP Request node\nreturn {\n  json: {\n    // ImgBB upload data\n    imgbbPayload: imgbbPayload,\n    \n    // Original metadata to pass through\n    section: section,\n    originalFileName: fileName,\n    fileType: fileType,\n    fileSize: fileSize,\n    imageSource: 'upload',\n    \n    // Campaign context\n    campaignName: inputData.campaignName,\n    emailType: inputData.emailType,\n    sportCategory: inputData.sportCategory,\n    targetAudience: inputData.targetAudience,\n    \n    // Processing info\n    uploadAttemptedAt: new Date().toISOString(),\n    status: 'ready_for_imgbb_upload'\n  }\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-3180,-200],"id":"4abbc1a6-0fca-49b4-9506-d5246414c1b4","name":"ImgBB Upload Preparation2"},{"parameters":{"method":"POST","url":"https://api.imgbb.com/1/upload","sendBody":true,"bodyParameters":{"parameters":[{"name":"key","value":"={{ $json.imgbbPayload.key }}"},{"name":"image","value":"={{ $json.imgbbPayload.image }}"},{"name":"name","value":"={{ $json.imgbbPayload.name }}"},{"name":"expiration","value":"={{ $json.imgbbPayload.expiration }}"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-2960,-200],"id":"1228d66e-934e-408d-b150-c28ba57b1756","name":"HTTP Request (ImgBB)2"},{"parameters":{"jsCode":"// ImgBB Response Processor - Process the ImgBB API response\n// This node standardizes the ImgBB response to match your existing image flow\n\nconst inputData = $input.first().json;\nconst imgbbResponse = inputData;\n\n// Get original request data from the preparation node\nconst originalData = $('ImgBB Upload Preparation2').first().json;\n\n// Validate ImgBB response\nif (!imgbbResponse.success) {\n  const errorMsg = imgbbResponse.error?.message || 'Unknown ImgBB upload error';\n  throw new Error(`ImgBB upload failed for ${originalData.section}: ${errorMsg}`);\n}\n\n// Extract image URLs from ImgBB response\nconst imageData = imgbbResponse.data;\nconst imageUrl = imageData.url;\nconst deleteUrl = imageData.delete_url;\nconst thumbnailUrl = imageData.thumb?.url;\n\n// Validate we got a URL\nif (!imageUrl) {\n  throw new Error(`No image URL returned from ImgBB for ${originalData.section}`);\n}\n\nconsole.log(`✅ ImgBB upload successful for ${originalData.section}`);\nconsole.log(`🔗 Image URL: ${imageUrl}`);\nconsole.log(`📊 ImgBB ID: ${imageData.id}`);\n\n// Create standardized output that matches your existing image processing structure\nconst standardizedOutput = {\n  section: originalData.section,\n  imageSource: 'upload', // Keep original source designation\n  imageReady: true,\n  fileName: originalData.originalFileName,\n  fileType: originalData.fileType,\n  fileSize: originalData.fileSize,\n  imageUrl: imageUrl, // This is the key - the URL that will be used in email\n  binaryData: null, // No longer needed since we have URL\n  \n  // ImgBB specific data\n  imgbbData: {\n    id: imageData.id,\n    title: imageData.title,\n    url: imageUrl,\n    displayUrl: imageData.display_url,\n    deleteUrl: deleteUrl,\n    width: imageData.width,\n    height: imageData.height,\n    size: imageData.size,\n    time: imageData.time,\n    expiration: imageData.expiration\n  },\n  \n  // Processing metadata\n  processingStatus: 'success',\n  processedAt: new Date().toISOString(),\n  uploadedAt: new Date().toISOString(),\n  uploadMethod: 'imgbb',\n  \n  // Pass through campaign context\n  campaignName: originalData.campaignName,\n  emailType: originalData.emailType,\n  sportCategory: originalData.sportCategory,\n  targetAudience: originalData.targetAudience\n};\n\nconsole.log(`📤 Upload complete - ${originalData.section} section ready`);\nconsole.log(`🎯 Final URL: ${imageUrl}`);\n\nreturn { json: standardizedOutput };"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-2740,-200],"id":"fb024b51-307c-478d-8610-93120fc4dfa9","name":"ImgBB Response Processor2"},{"parameters":{"jsCode":"// ImgBB Upload Node - Replace \"Process Uploaded Image\"\n// This node uploads files to ImgBB and returns URLs for the unified flow\n\nconst inputData = $input.first().json;\nconst imageData = inputData.imageData;\nconst section = inputData.section;\n\n// Validate input data\nif (!imageData || !Array.isArray(imageData) || imageData.length === 0) {\n  throw new Error(`No image data found for ${section} section`);\n}\n\n// Get the first uploaded file\nconst uploadedFile = imageData[0];\n\n// Extract file information\nconst fileName = uploadedFile.filename || `${section}_upload.jpg`;\nconst fileType = uploadedFile.mimeType || uploadedFile.mimetype || 'image/jpeg';\nconst fileSize = uploadedFile.fileSize || uploadedFile.size || 0;\n\n// Get binary data (n8n stores it in different possible locations)\nlet binaryData = null;\nif (uploadedFile.binary) {\n  binaryData = uploadedFile.binary;\n} else if (uploadedFile.data) {\n  binaryData = uploadedFile.data;\n} else {\n  binaryData = uploadedFile;\n}\n\n// Validate binary data exists\nif (!binaryData) {\n  throw new Error(`No binary data found for uploaded file in ${section} section`);\n}\n\n// Convert binary data to base64 for ImgBB API\nlet base64Data;\ntry {\n  if (typeof binaryData === 'string') {\n    // Already base64\n    base64Data = binaryData.replace(/^data:image\\/[a-z]+;base64,/, '');\n  } else if (Buffer.isBuffer(binaryData)) {\n    // Convert buffer to base64\n    base64Data = binaryData.toString('base64');\n  } else {\n    throw new Error('Unsupported binary data format');\n  }\n} catch (error) {\n  throw new Error(`Failed to process binary data for ${section}: ${error.message}`);\n}\n\n// Prepare ImgBB upload payload\nconst imgbbPayload = {\n  key: '10f598893185db2ddcb49736a3a5cd8d', // Replace with your actual API key or use credential\n  image: base64Data,\n  name: fileName.replace(/\\.[^/.]+$/, ''), // Remove extension, ImgBB will handle it\n  expiration: 0 // 0 = never expires, or set seconds (e.g., 604800 for 7 days)\n};\n\nconsole.log(`📤 Uploading ${section} image to ImgBB...`);\nconsole.log(`📄 File: ${fileName} (${fileSize} bytes)`);\nconsole.log(`🎯 Type: ${fileType}`);\n\n// Return the payload and metadata for the HTTP Request node\nreturn {\n  json: {\n    // ImgBB upload data\n    imgbbPayload: imgbbPayload,\n    \n    // Original metadata to pass through\n    section: section,\n    originalFileName: fileName,\n    fileType: fileType,\n    fileSize: fileSize,\n    imageSource: 'upload',\n    \n    // Campaign context\n    campaignName: inputData.campaignName,\n    emailType: inputData.emailType,\n    sportCategory: inputData.sportCategory,\n    targetAudience: inputData.targetAudience,\n    \n    // Processing info\n    uploadAttemptedAt: new Date().toISOString(),\n    status: 'ready_for_imgbb_upload'\n  }\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-3180,60],"id":"aa754fad-7aa8-4a46-8267-3fdae37956a0","name":"ImgBB Upload Preparation3"},{"parameters":{"method":"POST","url":"https://api.imgbb.com/1/upload","sendBody":true,"bodyParameters":{"parameters":[{"name":"key","value":"={{ $json.imgbbPayload.key }}"},{"name":"image","value":"={{ $json.imgbbPayload.image }}"},{"name":"name","value":"={{ $json.imgbbPayload.name }}"},{"name":"expiration","value":"={{ $json.imgbbPayload.expiration }}"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-2960,60],"id":"8372c3e1-f4f4-44d8-915b-e2e1d8535381","name":"HTTP Request (ImgBB)3"},{"parameters":{"jsCode":"// ImgBB Response Processor - Process the ImgBB API response\n// This node standardizes the ImgBB response to match your existing image flow\n\nconst inputData = $input.first().json;\nconst imgbbResponse = inputData;\n\n// Get original request data from the preparation node\nconst originalData = $('ImgBB Upload Preparation3').first().json;\n\n// Validate ImgBB response\nif (!imgbbResponse.success) {\n  const errorMsg = imgbbResponse.error?.message || 'Unknown ImgBB upload error';\n  throw new Error(`ImgBB upload failed for ${originalData.section}: ${errorMsg}`);\n}\n\n// Extract image URLs from ImgBB response\nconst imageData = imgbbResponse.data;\nconst imageUrl = imageData.url;\nconst deleteUrl = imageData.delete_url;\nconst thumbnailUrl = imageData.thumb?.url;\n\n// Validate we got a URL\nif (!imageUrl) {\n  throw new Error(`No image URL returned from ImgBB for ${originalData.section}`);\n}\n\nconsole.log(`✅ ImgBB upload successful for ${originalData.section}`);\nconsole.log(`🔗 Image URL: ${imageUrl}`);\nconsole.log(`📊 ImgBB ID: ${imageData.id}`);\n\n// Create standardized output that matches your existing image processing structure\nconst standardizedOutput = {\n  section: originalData.section,\n  imageSource: 'upload', // Keep original source designation\n  imageReady: true,\n  fileName: originalData.originalFileName,\n  fileType: originalData.fileType,\n  fileSize: originalData.fileSize,\n  imageUrl: imageUrl, // This is the key - the URL that will be used in email\n  binaryData: null, // No longer needed since we have URL\n  \n  // ImgBB specific data\n  imgbbData: {\n    id: imageData.id,\n    title: imageData.title,\n    url: imageUrl,\n    displayUrl: imageData.display_url,\n    deleteUrl: deleteUrl,\n    width: imageData.width,\n    height: imageData.height,\n    size: imageData.size,\n    time: imageData.time,\n    expiration: imageData.expiration\n  },\n  \n  // Processing metadata\n  processingStatus: 'success',\n  processedAt: new Date().toISOString(),\n  uploadedAt: new Date().toISOString(),\n  uploadMethod: 'imgbb',\n  \n  // Pass through campaign context\n  campaignName: originalData.campaignName,\n  emailType: originalData.emailType,\n  sportCategory: originalData.sportCategory,\n  targetAudience: originalData.targetAudience\n};\n\nconsole.log(`📤 Upload complete - ${originalData.section} section ready`);\nconsole.log(`🎯 Final URL: ${imageUrl}`);\n\nreturn { json: standardizedOutput };"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-2740,60],"id":"0378c1e5-ce8a-4164-85a3-52bb33e37650","name":"ImgBB Response Processor3"},{"parameters":{"jsCode":"// File Upload Detector - FIXED with URL Priority\nconsole.log('=== File Upload Detector (URL Priority) ===');\n\nconst formData = $input.first().json;\nconst formBinary = $input.first().binary || {};\n\nconsole.log('Available binary keys:', Object.keys(formBinary));\nconsole.log('Form data keys:', Object.keys(formData));\n\n// Define the mapping of form fields to sections\nconst uploadFields = [\n  {\n    formField: 'Header Image Upload',\n    binaryKey: 'Header_Image_Upload',\n    section: 'header',\n    urlField: 'Header Image URL'\n  },\n  {\n    formField: 'Section 1 (Hook) Image Upload', \n    binaryKey: 'Section_1__Hook__Image_Upload',\n    section: 'hook',\n    urlField: 'Section 1 (Hook) Image URL'\n  },\n  {\n    formField: 'Section 2 (Information) Image Upload',\n    binaryKey: 'Section_2__Information__Image_Upload', \n    section: 'information',\n    urlField: 'Section 2 (Information) Image URL'\n  },\n  {\n    formField: 'CTA Section Image Upload',\n    binaryKey: 'CTA_Section_Image_Upload',\n    section: 'cta', \n    urlField: 'CTA Section Image URL'\n  }\n];\n\n// Analyze which files need to be uploaded - FIXED PRIORITY LOGIC\nconst uploadTasks = [];\nconst enhancedFormData = { ...formData };\n\nuploadFields.forEach(field => {\n  const uploadData = formData[field.formField];\n  const urlData = formData[field.urlField];\n  const hasBinary = formBinary[field.binaryKey];\n  \n  console.log(`Checking ${field.section}:`, {\n    hasUploadData: !!uploadData,\n    hasUrlData: !!urlData && urlData.trim() !== '',\n    hasBinary: !!hasBinary,\n    uploadDataStructure: uploadData ? Object.keys(uploadData) : null\n  });\n  \n  // NEW PRIORITY LOGIC: URL takes precedence over upload\n  if (urlData && urlData.trim() !== '') {\n    // Priority 1: URL provided - use URL, ignore upload\n    console.log(`🔗 ${field.section}: Using provided URL (ignoring any upload)`);\n    \n    // Clear any upload data since we're using URL\n    if (uploadData) {\n      console.log(`   ↳ Note: Upload file \"${uploadData.filename}\" was ignored due to URL priority`);\n    }\n    \n  } else if (uploadData && uploadData.filename && hasBinary) {\n    // Priority 2: No URL, but upload exists - upload to ImgBB\n    uploadTasks.push({\n      section: field.section,\n      binaryKey: field.binaryKey,\n      fileName: uploadData.filename,\n      fileType: uploadData.mimetype || 'image/jpeg',\n      fileSize: uploadData.size || 0,\n      needsUpload: true\n    });\n    \n    console.log(`✅ ${field.section}: Will upload ${uploadData.filename} (no URL provided)`);\n    \n  } else {\n    // Priority 3: No upload, no URL - will need to generate\n    console.log(`⚡ ${field.section}: Will generate image (no upload or URL)`);\n  }\n});\n\nconsole.log(`📊 Summary: ${uploadTasks.length} files need ImgBB upload`);\n\n// Additional logging for mixed scenarios\nconst totalSectionsWithImages = uploadFields.filter(field => {\n  const uploadData = formData[field.formField];\n  const urlData = formData[field.urlField];\n  const hasBinary = formBinary[field.binaryKey];\n  \n  return (urlData && urlData.trim() !== '') || (uploadData && uploadData.filename && hasBinary);\n}).length;\n\nconsole.log(`📈 Total sections with images: ${totalSectionsWithImages}`);\nconsole.log(`📤 Sections using uploads: ${uploadTasks.length}`);\nconsole.log(`🔗 Sections using URLs: ${totalSectionsWithImages - uploadTasks.length}`);\n\n// Return results\nreturn {\n  json: {\n    // Original form data (preserved)\n    formData: enhancedFormData,\n    \n    // Upload tasks for next stage (only sections that need ImgBB upload)\n    uploadTasks: uploadTasks,\n    \n    // Summary info\n    totalUploads: uploadTasks.length,\n    sectionsToUpload: uploadTasks.map(t => t.section),\n    \n    // Processing metadata\n    processedAt: new Date().toISOString(),\n    status: uploadTasks.length > 0 ? 'uploads_needed' : 'no_uploads_needed',\n    \n    // Debug info\n    debug: {\n      totalSectionsWithImages: totalSectionsWithImages,\n      sectionsUsingUploads: uploadTasks.length,\n      sectionsUsingUrls: totalSectionsWithImages - uploadTasks.length,\n      priorityUsed: 'URL_FIRST'\n    }\n  },\n  \n  // Pass through binary data for upload nodes\n  binary: formBinary\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-2960,1262],"id":"0beec954-f492-4e65-9491-722b4030d77c","name":"File Upload Detector"},{"parameters":{"jsCode":"// Upload Task Splitter - Creates individual upload tasks\nconsole.log('=== Upload Task Splitter ===');\n\nconst inputData = $input.first().json;\nconst inputBinary = $input.first().binary;\n\nconsole.log('Processing upload tasks:', inputData.uploadTasks.length);\n\n// Create individual items for each upload task\nconst uploadItems = inputData.uploadTasks.map(task => {\n  console.log(`Creating upload task for ${task.section}: ${task.fileName}`);\n  \n  return {\n    json: {\n      // Upload task details\n      section: task.section,\n      binaryKey: task.binaryKey,\n      fileName: task.fileName,\n      fileType: task.fileType,\n      fileSize: task.fileSize,\n      \n      // Original form data (needed for context)\n      formData: inputData.formData,\n      \n      // Upload info\n      needsUpload: true,\n      taskIndex: inputData.uploadTasks.indexOf(task),\n      totalTasks: inputData.uploadTasks.length,\n      \n      // Processing metadata\n      createdAt: new Date().toISOString()\n    },\n    \n    // Pass through binary data\n    binary: inputBinary\n  };\n});\n\nconsole.log(`✅ Created ${uploadItems.length} individual upload tasks`);\n\nreturn uploadItems;"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-2740,1262],"id":"e53214e1-5dcc-4a37-a34c-ac834484b8e1","name":"Upload Task Splitter"},{"parameters":{"method":"POST","url":"https://api.imgbb.com/1/upload","sendBody":true,"contentType":"multipart-form-data","bodyParameters":{"parameters":[{"name":"key","value":"={{ $json.key }}"},{"name":"name","value":"={{ $json.name }}"},{"name":"expiration","value":"{{ $json.expiration }}"},{"parameterType":"formBinaryData","name":"image","inputDataFieldName":"={{ $json.binaryKey }}"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-2002,1262],"id":"4f846c2b-4932-48e4-b462-db40dd45c387","name":"HTTP Request"},{"parameters":{"options":{}},"type":"n8n-nodes-base.splitInBatches","typeVersion":3,"position":[-2520,1262],"id":"b81f8413-377b-494e-9f17-252a67d98a25","name":"uploadTasks"},{"parameters":{"jsCode":"// ImgBB Upload Processor - Fixed for Split Out + Split In Batches\nconsole.log('=== ImgBB Upload Processor (Fixed) ===');\n\nconst inputData = $input.first().json;\nconst inputBinary = $input.first().binary;\n\nconsole.log('Input data structure:', Object.keys(inputData));\n\n// After Split Out, the individual upload task is directly in inputData\n// No longer in uploadTasks[0]\nlet currentTask;\n\nif (inputData.uploadTasks && inputData.uploadTasks[0]) {\n  // Old structure (if still using array)\n  currentTask = inputData.uploadTasks[0];\n  console.log('Using array structure');\n} else if (inputData.section && inputData.binaryKey) {\n  // New structure after Split Out - task data is directly in inputData\n  currentTask = {\n    section: inputData.section,\n    binaryKey: inputData.binaryKey,\n    fileName: inputData.fileName,\n    fileType: inputData.fileType,\n    fileSize: inputData.fileSize,\n    needsUpload: inputData.needsUpload\n  };\n  console.log('Using direct structure after Split Out');\n} else {\n  // Debug: log what we actually have\n  console.log('Full input data:', JSON.stringify(inputData, null, 2));\n  throw new Error('Cannot find upload task data. Check data structure above.');\n}\n\nif (!currentTask) {\n  throw new Error('No upload task found in current item');\n}\n\nconsole.log(`Processing ${currentTask.section} upload: ${currentTask.fileName}`);\n\n// Get binary data for this specific file\nconst binaryKey = currentTask.binaryKey;\nconsole.log(`Looking for binary key: ${binaryKey}`);\nconsole.log(`Available binary keys:`, Object.keys(inputBinary || {}));\n\nif (!inputBinary || !inputBinary[binaryKey]) {\n  throw new Error(`Binary data not found for ${binaryKey}`);\n}\n\nconst binaryData = inputBinary[binaryKey];\nif (!binaryData || !binaryData.data) {\n  throw new Error(`Invalid binary data structure for ${binaryKey}`);\n}\n\nconsole.log(`Binary data type: ${typeof binaryData.data}, value: ${binaryData.data}`);\n\n// Handle filesystem-based binary data\nif (binaryData.data && typeof binaryData.data === 'string' && binaryData.data === 'filesystem-v2') {\n  // n8n is using filesystem storage\n  console.log('✅ Using filesystem mode for binary data');\n  \n  const cleanFileName = currentTask.fileName.replace(/\\.[^/.]+$/, '');\n  \n  return {\n    json: {\n      // HTTP Request parameters\n      key: '10f598893185db2ddcb49736a3a5cd8d',\n      name: cleanFileName,\n      expiration: 0,\n      \n      // Task metadata (pass section info to HTTP Request)\n      section: currentTask.section,\n      fileName: currentTask.fileName,\n      fileType: currentTask.fileType,\n      fileSize: currentTask.fileSize,\n      binaryKey: currentTask.binaryKey,\n      originalSection: currentTask.section, // Add this for URL Collector\n      \n      // Processing info\n      storageMode: 'filesystem',\n      uploadReadyAt: new Date().toISOString(),\n      status: 'ready_for_http_binary_upload'\n    },\n    \n    // Pass through binary data for HTTP Request node\n    binary: {\n      [currentTask.binaryKey]: binaryData\n    }\n  };\n  \n} else if (Buffer.isBuffer(binaryData.data)) {\n  // Traditional buffer approach (fallback)\n  const base64Data = binaryData.data.toString('base64');\n  console.log(`✅ Extracted base64 data: ${base64Data.length} characters`);\n  \n  const cleanFileName = currentTask.fileName.replace(/\\.[^/.]+$/, '');\n  \n  return {\n    json: {\n      key: '10f598893185db2ddcb49736a3a5cd8d',\n      name: cleanFileName,\n      expiration: 0,\n      section: currentTask.section,\n      fileName: currentTask.fileName,\n      fileType: currentTask.fileType,\n      fileSize: currentTask.fileSize,\n      base64Length: base64Data.length,\n      storageMode: 'buffer',\n      status: 'ready_for_imgbb'\n    }\n  };\n  \n} else {\n  throw new Error(`Unsupported binary data format: ${typeof binaryData.data}`);\n}"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-2300,1262],"id":"dd956ef7-36d4-4211-9e63-fec743936755","name":"Upload Processor"},{"parameters":{"jsCode":"// ImgBB URL Collector - Processes ImgBB responses and creates URL mapping\nconsole.log('=== ImgBB URL Collector ===');\n\nconst inputData = $input.first().json;\n\n// Validate ImgBB response\nif (!inputData.success || !inputData.data) {\n  throw new Error('ImgBB upload failed: ' + JSON.stringify(inputData));\n}\n\nconst imgbbData = inputData.data;\nconst imageUrl = imgbbData.url; // Main image URL\nconst thumbnailUrl = imgbbData.thumb?.url;\nconst mediumUrl = imgbbData.medium?.url;\nconst imageTitle = imgbbData.title || imgbbData.image?.name || 'unknown';\n\nconsole.log(`✅ ImgBB upload successful`);\nconsole.log(`🔗 Image URL: ${imageUrl}`);\nconsole.log(`📊 ImgBB ID: ${imgbbData.id}`);\nconsole.log(`📝 Image title: ${imageTitle}`);\n\n// Get section info from Upload Processor (passed through HTTP Request)\n// Try to get from previous node data first\nlet section = 'unknown';\ntry {\n  const uploadProcessorData = $('Upload Processor').first().json;\n  section = uploadProcessorData.section || uploadProcessorData.originalSection || 'unknown';\n  console.log(`📍 Got section from Upload Processor: ${section}`);\n} catch (error) {\n  console.log('Could not get section from Upload Processor, trying to determine from title...');\n  \n  // Fallback: determine from image title\n  if (imageTitle.includes('HOT-WATER-DURING-LOAD-SHEDDING')) {\n    section = 'header';\n  } else if (imageTitle.includes('NEVER-MISS-HOT-WATER')) {\n    section = 'hook'; \n  } else if (imageTitle.includes('pickelball') && !imageTitle.includes('1')) {\n    section = 'information';\n  } else if (imageTitle.includes('pickelball-1')) {\n    section = 'cta';\n  }\n  \n  console.log(`📍 Determined section from title: ${section}`);\n}\n\nconsole.log(`📍 Determined section: ${section} (from title: ${imageTitle})`);\n\n// Create standardized output\nreturn {\n  json: {\n    // Section identification\n    section: section,\n    \n    // ImgBB URLs\n    imageUrl: imageUrl,\n    thumbnailUrl: thumbnailUrl,\n    mediumUrl: mediumUrl,\n    viewerUrl: imgbbData.url_viewer,\n    deleteUrl: imgbbData.delete_url,\n    \n    // Image metadata\n    imgbbId: imgbbData.id,\n    title: imageTitle,\n    width: imgbbData.width,\n    height: imgbbData.height,\n    fileSize: imgbbData.size,\n    mimeType: imgbbData.image?.mime,\n    \n    // Processing info\n    uploadedAt: new Date().toISOString(),\n    status: 'imgbb_upload_complete',\n    source: 'uploaded'\n  }\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-1704,1412],"id":"1f454703-73b4-4454-b0c3-516709931e4d","name":"ImgBB URL Collector"},{"parameters":{"jsCode":"// URL Aggregator - Processes completed loop results\nconsole.log('=== URL Aggregator (Loop Complete) ===');\n\n// Get all the results from the completed loop\nconst allResults = $input.all();\nconsole.log(`Received ${allResults.length} results from loop`);\n\n// Create URL mapping by section\nconst imageUrls = {};\nconst imageMetadata = {};\n\nallResults.forEach((result, index) => {\n  const data = result.json;\n  \n  // Skip if this doesn't look like a URL collector result\n  if (!data.section || !data.imageUrl) {\n    console.log(`Skipping result ${index}: missing section or imageUrl`);\n    return;\n  }\n  \n  const section = data.section;\n  console.log(`Processing ${section}: ${data.imageUrl}`);\n  \n  // Store the main image URL for each section\n  imageUrls[section] = data.imageUrl;\n  \n  // Store complete metadata\n  imageMetadata[section] = {\n    imageUrl: data.imageUrl,\n    thumbnailUrl: data.thumbnailUrl,\n    mediumUrl: data.mediumUrl,\n    viewerUrl: data.viewerUrl,\n    deleteUrl: data.deleteUrl,\n    imgbbId: data.imgbbId,\n    title: data.title,\n    width: data.width,\n    height: data.height,\n    fileSize: data.fileSize,\n    mimeType: data.mimeType,\n    uploadedAt: data.uploadedAt,\n    source: 'uploaded'\n  };\n});\n\n// Get original form data\nlet originalFormData = {};\ntry {\n  const detectorData = $('File Upload Detector').first().json;\n  originalFormData = detectorData.formData || {};\n  console.log('✅ Retrieved original form data');\n} catch (error) {\n  console.log('⚠️ Could not retrieve original form data:', error.message);\n}\n\n// Create enhanced form data with ImgBB URLs\nconst enhancedFormData = { ...originalFormData };\n\n// Replace uploaded files with ImgBB URLs\nif (imageUrls.header) {\n  enhancedFormData['Header Image URL'] = imageUrls.header;\n  enhancedFormData['Header Image Upload'] = null;\n}\nif (imageUrls.hook) {\n  enhancedFormData['Section 1 (Hook) Image URL'] = imageUrls.hook;\n  enhancedFormData['Section 1 (Hook) Image Upload'] = null;\n}\nif (imageUrls.information) {\n  enhancedFormData['Section 2 (Information) Image URL'] = imageUrls.information;\n  enhancedFormData['Section 2 (Information) Image Upload'] = null;\n}\nif (imageUrls.cta) {\n  enhancedFormData['CTA Section Image URL'] = imageUrls.cta;\n  enhancedFormData['CTA Section Image Upload'] = null;\n}\n\nconsole.log('📊 Upload Summary:');\nconsole.log(`- Header: ${imageUrls.header ? '✅' : '❌'}`);\nconsole.log(`- Hook: ${imageUrls.hook ? '✅' : '❌'}`);\nconsole.log(`- Information: ${imageUrls.information ? '✅' : '❌'}`);\nconsole.log(`- CTA: ${imageUrls.cta ? '✅' : '❌'}`);\n\n// Return enhanced form data ready for AI Content Generator\nreturn {\n  json: {\n    // All original form fields with ImgBB URLs\n    ...enhancedFormData,\n    \n    // Debug/tracking info\n    _uploadedImages: {\n      totalUploaded: Object.keys(imageUrls).length,\n      sections: Object.keys(imageUrls),\n      urls: imageUrls\n    },\n    \n    // Processing metadata\n    _processedAt: new Date().toISOString(),\n    _status: 'ready_for_ai_content_generation'\n  }\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-2300,501.5],"id":"5a105033-05c9-4d85-8c82-de21f3a67cde","name":"URL Aggregator"}],"connections":{"VS Sports Email Campaign Form":{"main":[[{"node":"File Upload Detector","type":"main","index":0}]]},"OpenRouter Chat Model2":{"ai_languageModel":[[{"node":"VS Sports Email Content Generator","type":"ai_languageModel","index":0}]]},"VS Sports Email Structure Parser":{"ai_outputParser":[[{"node":"VS Sports Email Content Generator","type":"ai_outputParser","index":0}]]},"VS Sports Email Content Generator":{"main":[[{"node":"Header Image Logic","type":"main","index":0},{"node":"Hook Image Logic","type":"main","index":0},{"node":"Information Image Logic","type":"main","index":0},{"node":"CTA Image Logic","type":"main","index":0}]]},"Header Image Logic":{"main":[[{"node":"Header Image Router","type":"main","index":0}]]},"Hook Image Logic":{"main":[[{"node":"Hook Image Router","type":"main","index":0}]]},"Information Image Logic":{"main":[[{"node":"Info Image Router","type":"main","index":0}]]},"CTA Image Logic":{"main":[[{"node":"CTA Image Router","type":"main","index":0}]]},"Header Image Router":{"main":[[],[{"node":"URL or Generate Router","type":"main","index":0}]]},"Hook Image Router":{"main":[[],[{"node":"URL or Generate Router1","type":"main","index":0}]]},"Info Image Router":{"main":[[],[{"node":"URL or Generate Router2","type":"main","index":0}]]},"CTA Image Router":{"main":[[],[{"node":"URL or Generate Router3","type":"main","index":0}]]},"Process URL Image":{"main":[[{"node":"Combine All Email Data","type":"main","index":0}]]},"Process Generated Image":{"main":[[{"node":"Combine All Email Data","type":"main","index":0}]]},"Combine All Email Data":{"main":[[{"node":"HTML Email Assembly Node","type":"main","index":0}]]},"URL or Generate Router":{"main":[[{"node":"Merge1","type":"main","index":0}],[{"node":"Generate Image1","type":"main","index":0}]]},"Convert to File":{"main":[[{"node":"Process Generated Image","type":"main","index":0}]]},"Generate Image1":{"main":[[{"node":"Convert to File","type":"main","index":0}]]},"Process Generated Image1":{"main":[[{"node":"Combine All Email Data","type":"main","index":0}]]},"URL or Generate Router1":{"main":[[{"node":"Merge1","type":"main","index":1}],[{"node":"Generate Image","type":"main","index":0}]]},"Convert to File1":{"main":[[{"node":"Process Generated Image1","type":"main","index":0}]]},"Generate Image":{"main":[[{"node":"Convert to File1","type":"main","index":0}]]},"Process Generated Image2":{"main":[[{"node":"Combine All Email Data","type":"main","index":0}]]},"URL or Generate Router2":{"main":[[{"node":"Merge1","type":"main","index":2}],[{"node":"Generate Image2","type":"main","index":0}]]},"Convert to File2":{"main":[[{"node":"Process Generated Image2","type":"main","index":0}]]},"Generate Image2":{"main":[[{"node":"Convert to File2","type":"main","index":0}]]},"Process Generated Image3":{"main":[[{"node":"Combine All Email Data","type":"main","index":0}]]},"URL or Generate Router3":{"main":[[{"node":"Merge1","type":"main","index":3}],[{"node":"Generate Image3","type":"main","index":0}]]},"Convert to File3":{"main":[[{"node":"Process Generated Image3","type":"main","index":0}]]},"Generate Image3":{"main":[[{"node":"Convert to File3","type":"main","index":0}]]},"Merge1":{"main":[[{"node":"Process URL Image","type":"main","index":0}]]},"HTML Email Assembly Node":{"main":[[{"node":"Mailchimp Campaign Preparation","type":"main","index":0}]]},"Mailchimp Campaign Preparation":{"main":[[{"node":"Create Campaign Mailchimp","type":"main","index":0}]]},"Create Campaign Mailchimp":{"main":[[{"node":"Prepare Content for Mailchimp","type":"main","index":0}]]},"Prepare Content for Mailchimp":{"main":[[{"node":"Set Campaign Content","type":"main","index":0}]]},"ImgBB Upload Preparation":{"main":[[{"node":"HTTP Request (ImgBB)","type":"main","index":0}]]},"HTTP Request (ImgBB)":{"main":[[{"node":"ImgBB Response Processor","type":"main","index":0}]]},"ImgBB Response Processor":{"main":[[]]},"ImgBB Upload Preparation1":{"main":[[{"node":"HTTP Request (ImgBB)1","type":"main","index":0}]]},"HTTP Request (ImgBB)1":{"main":[[{"node":"ImgBB Response Processor1","type":"main","index":0}]]},"ImgBB Response Processor1":{"main":[[]]},"ImgBB Upload Preparation2":{"main":[[{"node":"HTTP Request (ImgBB)2","type":"main","index":0}]]},"HTTP Request (ImgBB)2":{"main":[[{"node":"ImgBB Response Processor2","type":"main","index":0}]]},"ImgBB Response Processor2":{"main":[[]]},"ImgBB Upload Preparation3":{"main":[[{"node":"HTTP Request (ImgBB)3","type":"main","index":0}]]},"HTTP Request (ImgBB)3":{"main":[[{"node":"ImgBB Response Processor3","type":"main","index":0}]]},"ImgBB Response Processor3":{"main":[[]]},"File Upload Detector":{"main":[[{"node":"Upload Task Splitter","type":"main","index":0}]]},"Upload Task Splitter":{"main":[[{"node":"uploadTasks","type":"main","index":0}]]},"uploadTasks":{"main":[[{"node":"URL Aggregator","type":"main","index":0}],[{"node":"Upload Processor","type":"main","index":0}]]},"Upload Processor":{"main":[[{"node":"HTTP Request","type":"main","index":0}]]},"HTTP Request":{"main":[[{"node":"ImgBB URL Collector","type":"main","index":0}]]},"ImgBB URL Collector":{"main":[[{"node":"uploadTasks","type":"main","index":0}]]},"URL Aggregator":{"main":[[{"node":"VS Sports Email Content Generator","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":null,"pinData":{"VS Sports Email Campaign Form":[{"json":{"Campaign Name":"Return Efficiency","Email Type":"Educational/Analytics Insight","Sport Category":"Tennis","Target Audience":"Coaches","Email Focus/Description":"At VS. Sports we have examined over 55 million data points and we find that return efficiency is one of the stats the coaches use to develop players the most.","Campaign Priority":"High","Send Date":"2025-07-08","Header Image Upload":{"filename":"Return Tennis Header image.jpg","mimetype":"image/jpeg","size":131768},"Header Image URL":"","Section 1 (Hook) Image Upload":{"filename":"test 3.png","mimetype":"image/png","size":82510},"Section 1 (Hook) Image URL":"","Section 2 (Information) Image Upload":{"filename":"test 4.png","mimetype":"image/png","size":63361},"Section 2 (Information) Image URL":"","VS Sports Logo Upload":{"filename":"VS SPORTS - BLACK.png","mimetype":"image/png","size":738233},"VS Sports Logo URL":"","CTA Button Text":"","CTA Button URL":"https://www.vssports.us/pricing/","Additional Notes":"","submittedAt":"2025-07-07T07:37:56.425-04:00","formMode":"production"}}]},"versionId":"328b4723-3c6e-4f40-97d7-275475934572","triggerCount":1,"shared":[{"createdAt":"2025-06-19T03:24:37.795Z","updatedAt":"2025-06-19T03:24:37.795Z","role":"workflow:owner","workflowId":"odII27ElQAwchvE8","projectId":"pRXFeKq9D8e0hAOx"}],"tags":[]},{"createdAt":"2025-06-06T03:39:41.102Z","updatedAt":"2025-06-09T17:27:43.000Z","id":"rVcKMay5Zw60Yonm","name":"Image to Video promo","active":false,"isArchived":false,"nodes":[{"parameters":{"formTitle":"Go 2 Market","formDescription":"Give us a product photo, title, and description, and we'll get back to you with professional marketing materials. ","formFields":{"values":[{"fieldLabel":"Product Photo","fieldType":"file","multipleFiles":false,"requiredField":true},{"fieldLabel":"Product Title","placeholder":"Toothpaste","requiredField":true},{"fieldLabel":"Product Description","requiredField":true},{"fieldLabel":"Email","fieldType":"email","placeholder":"name@example.com","requiredField":true}]},"options":{}},"type":"n8n-nodes-base.formTrigger","typeVersion":2.2,"position":[-760,180],"id":"ec1a9590-1213-41e7-93bf-069ad45c5294","name":"On form submission","webhookId":"af13c24d-f792-46fb-ab9f-e1660bb6f068","disabled":true},{"parameters":{"content":"## Form Trigger","height":280,"color":7},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[-820,80],"id":"a09bdc3d-dc01-4722-badb-137e97e72ecc","name":"Sticky Note"},{"parameters":{"inputDataFieldName":"Product_Photo","name":"={{ $json['Product Title'] }} (Original)","driveId":{"__rl":true,"mode":"list","value":"My Drive"},"folderId":{"__rl":true,"value":"1b77GO5hLvZNoHbd68iw7dE7iKjhTiVpV","mode":"list","cachedResultName":"Product Creatives","cachedResultUrl":"https://drive.google.com/drive/folders/1b77GO5hLvZNoHbd68iw7dE7iKjhTiVpV"},"options":{}},"type":"n8n-nodes-base.googleDrive","typeVersion":3,"position":[-520,180],"id":"e7067a00-08d1-4fdf-a9e2-d138e6b25fda","name":"Upload Photo","disabled":true},{"parameters":{"content":"## Upload File","height":280,"width":180},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[-560,80],"id":"9436981b-a614-4386-9e9c-c7987858c1b2","name":"Sticky Note1"},{"parameters":{"model":"openai/gpt-4.1","options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenRouter","typeVersion":1,"position":[-300,300],"id":"b9e89dbe-6011-48ad-b2af-50667d755b10","name":"GPT 4.1","credentials":{"openRouterApi":{"id":"eni2kFdHGvy7lEd3","name":"OpenRouter account"}}},{"parameters":{"content":"## Image Prompt","height":280,"width":360,"color":5},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[-360,80],"id":"4a654c14-77a0-43d5-ab9e-83f438747298","name":"Sticky Note2"},{"parameters":{"operation":"download","fileId":{"__rl":true,"value":"={{ $('Upload Photo').item.json.id }}","mode":"id"},"options":{}},"type":"n8n-nodes-base.googleDrive","typeVersion":3,"position":[60,180],"id":"0992cbfe-47ee-49e6-ae74-c20ecc004c7b","name":"Download File","disabled":true},{"parameters":{"content":"## Download File","height":240,"width":180},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[40,80],"id":"a8b614d7-811a-4f67-88c2-e91fdf543222","name":"Sticky Note3"},{"parameters":{"method":"POST","url":"https://api.openai.com/v1/images/edits","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"contentType":"multipart-form-data","bodyParameters":{"parameters":[{"parameterType":"formBinaryData","name":"image","inputDataFieldName":"data"},{"name":"prompt","value":"={{ $('Product Photography Agent').item.json.output }}"},{"name":"model","value":"gpt-image-1"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[260,180],"id":"6ff3aec4-be74-40fa-af13-e1c31a6d422a","name":"Create Image","credentials":{"httpHeaderAuth":{"id":"z06CbCGaeEeBPVIt","name":"GPT Image Generator"}}},{"parameters":{"operation":"toBinary","sourceProperty":"data[0].b64_json","options":{}},"type":"n8n-nodes-base.convertToFile","typeVersion":1.1,"position":[400,180],"id":"7fe76fd7-8047-4f7a-bba4-c22d0521f0c9","name":"Convert to File"},{"parameters":{"content":"## Image Generation","height":280,"width":320,"color":4},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[220,80],"id":"a9e193e2-9837-4c00-8ce3-65fad1a17db6","name":"Sticky Note4"},{"parameters":{"method":"POST","url":"https://api.imgbb.com/1/upload","authentication":"genericCredentialType","genericAuthType":"httpQueryAuth","sendBody":true,"contentType":"multipart-form-data","bodyParameters":{"parameters":[{"parameterType":"formBinaryData","name":"image","inputDataFieldName":"data"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-780,480],"id":"72580c36-4062-459a-a2ea-c000aab0e893","name":"Get URL","credentials":{"httpQueryAuth":{"id":"XpBaNZ60VHV1dtXH","name":"Imgbb Auth account"}}},{"parameters":{"method":"POST","url":"https://api.dev.runwayml.com/v1/image_to_video","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendHeaders":true,"headerParameters":{"parameters":[{"name":"X-Runway-Version","value":"2024-11-06"}]},"sendBody":true,"bodyParameters":{"parameters":[{"name":"promptImage","value":"={{ $json.data.url }}"},{"name":"model","value":"gen4_turbo"},{"name":"promptText","value":"=Create a highly professional marketing video from the provided product photo. Simulate a smooth, realistic 3D turntable rotation around the product, as if the product is slowly rotating in place. The movement should be continuous, slow, and elegant — no sudden pans, jerks, or camera cuts. Always keep the entire product fully in frame, centered, and clearly visible at all times. Avoid zooming in or cropping. Focus on a premium, clean, and modern aesthetic that feels suitable for commercial marketing materials. No flashy effects, transitions, or overlays — only a subtle, realistic 3D rotation that highlights the product in the most polished way possible."},{"name":"duration","value":"5"},{"name":"ratio","value":"960:960"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-580,480],"id":"f6ccfa5f-6439-41fd-8f78-63ff97e7d0b9","name":"Generate Video","credentials":{"httpHeaderAuth":{"id":"AWIjxOtHhQ1zyP0V","name":"Runway Auth account"}}},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"b45aec04-a6dc-4118-8318-42f40f903935","leftValue":"={{ $json.status }}","rightValue":"RUNNING","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[-120,480],"id":"beedc3c5-b7c5-4877-9013-ca3852845cd2","name":"If"},{"parameters":{},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[80,480],"id":"ae7742b1-8b4e-4703-965a-ac5b4fe61af7","name":"5 Secs","webhookId":"dd3eae86-f75c-41fe-a48c-58788f1ee73d"},{"parameters":{"url":"=https://api.dev.runwayml.com/v1/tasks/{{ $json.id }}","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendHeaders":true,"headerParameters":{"parameters":[{"name":"X-Runway-Version","value":"2024-11-06"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-260,480],"id":"152d51d0-bc89-49ca-94fd-18bed8472239","name":"Get Video","credentials":{"httpHeaderAuth":{"id":"AWIjxOtHhQ1zyP0V","name":"Runway Auth account"}}},{"parameters":{"amount":1},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[-420,480],"id":"492ee19b-ca05-41d4-b590-2b78920761ca","name":"60 Seconds","webhookId":"ae4ab48f-6ebe-4768-88f0-743989181262"},{"parameters":{"content":"## Get URL","height":260,"width":180,"color":2},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[-820,380],"id":"ffd37f34-ebaf-435b-a390-87bdd49d375c","name":"Sticky Note5"},{"parameters":{"content":"## Video Generation","height":260,"width":640,"color":6},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[-620,380],"id":"ae27d2ff-e0c7-46d9-86a3-59cb7d99ff42","name":"Sticky Note6"},{"parameters":{"content":"## Polling","height":260,"width":180,"color":3},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[40,380],"id":"80f91283-dee2-427a-835b-fd5cfceb1cf2","name":"Sticky Note7"},{"parameters":{"authentication":"serviceAccount","sendTo":"={{ $('On form submission').item.json.Email }}","subject":"=Marketing Materials: {{ $('On form submission').item.json['Product Title'] }}","emailType":"text","message":"=Hey!\n\nHere is your photo: {{ $('Get URL').item.json.data.url }}\n\nHere is your video: {{ $json.output[0] }}\n\nCheers!","options":{"appendAttribution":false}},"type":"n8n-nodes-base.gmail","typeVersion":2.1,"position":[280,480],"id":"050f555b-5be7-4149-af3f-dbde7dee1b61","name":"Send Finished Products","webhookId":"779028aa-2c69-4e60-8d40-ff55f32042bc","disabled":true},{"parameters":{"content":"## Done","height":260,"width":180,"color":2},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[240,380],"id":"c46f96e7-b7b2-4d79-a156-03452d160a29","name":"Sticky Note8"},{"parameters":{"promptType":"define","text":"=Product: {{ $('On form submission').item.json['Product Title'] }}\nDescription: {{ $('On form submission').item.json['Product Description'] }}","options":{"systemMessage":"=# Overview\nYou are a world-class marketing strategist and an expert text-to-image prompt engineer specializing in creating hyper-realistic, high-quality product photography prompts for AI image generation models.\n\n## Your Objective:\nWhen given a product description, your task is to craft a detailed, professional prompt that results in a hyper-realistic, clean, and visually stunning product image suitable for marketing material, advertising campaigns, or e-commerce platforms.\n\n## Key Requirements:\n- Focus on hyper-realistic, professional studio photography.\n- Maintain a clean, minimalistic, and elegant visual style.\n- Highlight the product as the main subject with sharp detail and perfect lighting.\n- Use backgrounds that complement but do not overpower the product (e.g., soft gradient, light-colored, or pure white).\n- Include professional lighting details such as \"softbox lighting\", \"studio lights\", or \"natural soft shadows\".\n- Emphasize realism, texture, and color accuracy.\n- Maintain a high-end, premium look and feel.\n- If applicable, suggest a subtle setting that enhances the product's story (e.g., a luxury kitchen counter for a high-end blender).\n\n## Output Format:\n- Write a single text-to-image prompt optimized for a professional AI image model.\n- Be direct and descriptive without using excessive words.\n- Avoid unnecessary repetition or adjectives that do not enhance the image quality.\n- Ensure the prompt is complete and ready for direct input into an AI model.\n\n## Tone:\nProfessional, precise, clean, and optimized for maximum realism and marketing impact.\n\n# Example Input:\n\"A premium wireless Bluetooth speaker in matte black, cylindrical shape, modern design.\"\n\n# Example Output:\n\"Hyper-realistic product photo of a premium matte black wireless Bluetooth speaker with a cylindrical modern design, centered on a clean white studio background, softbox lighting with natural shadows, sharp focus on texture and material, minimalistic, professional advertising shot.\"\n\n"}},"type":"@n8n/n8n-nodes-langchain.agent","typeVersion":1.9,"position":[-300,140],"id":"e97c3e70-a8f0-4098-84a4-a6b15f8e74f7","name":"Product Photography Agent"},{"parameters":{"content":"# 🛠️ Setup Guide\n**Author: [Nate Herk](https://www.youtube.com/@nateherk)**\n\nFollow these steps to complete your setup:\n\n1. **Connect Google Credentials**  \n   - Allow access to your **Google Drive** and **Gmail**.\n\n2. **Connect [OpenRouter](https://openrouter.ai/) API Key**  \n   - This will enable the chat model for your AI agent.\n\n3. **Connect [OpenAI](https://platform.openai.com/docs/overview) API Key**  \n   - Required for the **Edit Image API** functionality.\n\n4. **Connect [ImageBB](https://imgbb.com/) API Key**  \n   - Needed for the **Git URL HTTP request**.\n\n5. **Connect [Runway](https://runwayml.com/api) API Key**  \n   - Used to **generate** and **Git** the videos.\n\n---\n\nOnce all keys are connected, you're ready to start using the system!\n","height":560,"width":500},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[-1340,80],"id":"a39c5d51-236b-40cf-ad9b-858578a7a2c3","name":"Sticky Note9"},{"parameters":{"method":"POST","url":"=https://ransrzuluezigrkxjxgv.supabase.co/storage/v1/object/linekedimages/{{ $json['Product Title'] }}1.jpg","authentication":"predefinedCredentialType","nodeCredentialType":"supabaseApi","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"image/jpeg"}]},"sendBody":true,"contentType":"binaryData","inputDataFieldName":"=Product_Photo","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-500,-40],"id":"7fa85866-bc4d-410a-beee-0b4ef6b59d80","name":"HTTP Request1","credentials":{"supabaseApi":{"id":"mlKAmw9f2TXsNzyY","name":"Supabase account"}}},{"parameters":{"url":"=https://ransrzuluezigrkxjxgv.supabase.co/storage/v1/object/{{ $('HTTP Request1').item.json.Key }}","authentication":"predefinedCredentialType","nodeCredentialType":"supabaseApi","options":{"response":{"response":{"responseFormat":"file","outputPropertyName":"=data"}}}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[60,-100],"id":"0014f344-a0a8-458c-be04-4943447d1115","name":"HTTP Request3","credentials":{"supabaseApi":{"id":"mlKAmw9f2TXsNzyY","name":"Supabase account"}}},{"parameters":{"amount":30},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[1580,780],"id":"abe1abec-e6c6-4f81-9dd5-733193c25cbb","name":"Schedule Every 30s","webhookId":"reel-workflow-trigger"},{"parameters":{"databaseId":172,"tableId":700,"returnAll":true,"additionalOptions":{"filters":{"fields":[{"field":"status_field_id","value":"Draft"}]}}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[1800,780],"id":"e8a196b8-d526-4e59-9824-d3c61d400de4","name":"Get Draft Reels","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"has-reels","leftValue":"={{ $json.length }}","rightValue":0,"operator":{"type":"number","operation":"gt"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[2020,780],"id":"323e4c15-bf34-42df-a1cf-93e213b657ef","name":"Check If Reels Exist"},{"parameters":{"databaseId":172,"tableId":701,"returnAll":true,"additionalOptions":{"filters":{"fields":[{"field":"reel_link_field_id","value":"={{ $json.id }}"}]},"order":{"fields":[{"field":"image_order_field_id","direction":"+"}]}}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[2240,780],"id":"9d7e5431-fe48-4210-bba6-3f1c418949d8","name":"Get Reel Images","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"jsCode":"// Calculate timing for each image based on total count\nconst totalDuration = 15; // 15 seconds total\nconst hookTime = 3;\nconst ctaTime = 3;\nconst contentTime = totalDuration - hookTime - ctaTime; // 9 seconds for images\n\nconst images = $input.all();\nconst imageCount = images.length;\nconst timePerImage = contentTime / imageCount;\n\n// Create timing structure\nconst timingPlan = {\n  totalDuration: totalDuration,\n  hookDuration: hookTime,\n  ctaDuration: ctaTime,\n  contentDuration: contentTime,\n  timePerImage: timePerImage,\n  imageCount: imageCount,\n  images: images.map((img, index) => ({\n    ...img.json,\n    calculatedDuration: timePerImage,\n    startTime: hookTime + (index * timePerImage),\n    endTime: hookTime + ((index + 1) * timePerImage)\n  }))\n};\n\nreturn [{ json: timingPlan }];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[2460,780],"id":"0f6d6d29-dbd2-4a82-aba0-87fefef512ec","name":"Calculate Image Timing"},{"parameters":{"rules":{"values":[{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"leftValue":"={{ $('Get Processing Reels').item.json['Include Voiceover'] }}","rightValue":"Yes","operator":{"type":"string","operation":"equals"},"id":"has-voiceover"}],"combinator":"and"},"renameOutput":true,"outputKey":"Add Voiceover"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"leftValue":"={{ $('Get Processing Reels').item.json['Include Voiceover'] }}","rightValue":"No","operator":{"type":"string","operation":"equals"},"id":"no-voiceover"}],"combinator":"and"},"renameOutput":true,"outputKey":"Skip to Music"}]},"options":{}},"type":"n8n-nodes-base.switch","typeVersion":3.2,"position":[4200,1020],"id":"6beccd92-4d26-4575-b433-0c83b7644fda","name":"Check Voiceover Needed"},{"parameters":{"method":"POST","url":"https://tts.aiautomata.co.za/dev/captioned_speech","sendBody":true,"specifyBody":"json","jsonBody":"={\n  \"model\": \"kokoro\",\n  \"input\": \"{{ $('Get Draft Reels').item.json.Hook }}. {{ $('Get Draft Reels').item.json.Description }}. {{ $('Get Draft Reels').item.json.CTA }}{{ $('Get Draft Reels').item.json.Price ? '. ' + $('Get Draft Reels').item.json.Price : '' }}\",\n  \"voice\": \"{{ $('Get Draft Reels').item.json['TTS Voice'] }}\",\n  \"response_format\": \"mp3\",\n  \"download_format\": \"mp3\",\n  \"return_timestamps\": false,\n  \"speed\": 1\n}","options":{"response":{"response":{"fullResponse":true}}}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[2860,500],"id":"14de0bc7-ed34-4917-805f-60f9111f0189","name":"Generate TTS"},{"parameters":{"method":"POST","url":"https://baserow.aiautomata.co.za/api/user-files/upload-file/","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"contentType":"multipart-form-data","bodyParameters":{"parameters":[{"parameterType":"formBinaryData","name":"file","inputDataFieldName":"data"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[3060,520],"id":"55884efa-ebdd-4d35-9834-4630b2251ceb","name":"Upload TTS to Baserow","credentials":{"httpHeaderAuth":{"id":"eLr9WkAowHbRSmCb","name":"Baserow Auth account"}}},{"parameters":{"aggregate":"aggregateAllItemData","destinationFieldName":"mergedData","options":{}},"type":"n8n-nodes-base.aggregate","typeVersion":1,"position":[3240,520],"id":"931db97c-2cc7-4917-8c16-06c41ac30fff","name":"Merge TTS Paths"},{"parameters":{"operation":"update","databaseId":172,"tableId":700,"rowId":"={{ $('Get Draft Reels').item.json.id }}","fieldsUi":{"fieldValues":[{"fieldId":"tts_audio_field_id","fieldValue":"={{ $('Upload TTS to Baserow').item.json.name || null }}"},{"fieldId":"status_field_id","fieldValue":"Processing"}]}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[2880,720],"id":"c9dc5d93-e26c-4313-89c5-bb84cad04e52","name":"Update Reel Status","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"fieldToSplitOut":"images","options":{}},"type":"n8n-nodes-base.splitOut","typeVersion":1,"position":[3100,720],"id":"2fbef62c-a930-4ba0-a7e9-c19a03c0e831","name":"Split Images for Processing"},{"parameters":{"method":"POST","url":"https://nca.aiautomata.co.za/v1/image/transform/video","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"specifyBody":"json","jsonBody":"={\n  \"image_url\": \"{{ $json['Image File'][0].url }}\",\n  \"length\": {{ Math.ceil($json.calculatedDuration) }},\n  \"frame_rate\": 30,\n  \"transition_effect\": \"{{ $('Get Draft Reels').item.json['Transition Effect'].toLowerCase() }}\",\n  \"zoom_speed\": 2,\n  \"fade_duration\": 0.5,\n  \"id\": \"reel-{{ $('Get Draft Reels').item.json.id }}-img-{{ $json['Image Order'] }}\"\n}","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[3300,720],"id":"2cf4b71b-cd41-41ba-bbde-23be8f8be0a9","name":"Create Image Video Clip","credentials":{"httpHeaderAuth":{"id":"XhOG8EmUXSMMk7ct","name":"NCS-Toolkit Auth account"}}},{"parameters":{"operation":"update","databaseId":172,"tableId":701,"rowId":"={{ $json.id }}","fieldsUi":{"fieldValues":[{"fieldId":"video_clip_url_field_id","fieldValue":"={{ $json.response }}"},{"fieldId":"processed_field_id","fieldValue":true},{"fieldId":"display_duration_field_id","fieldValue":"={{ $json.calculatedDuration }}"}]}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[3540,720],"id":"d04b6a24-c5f0-4a26-a2a7-bcb1b42b1c15","name":"Update Image Record","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"databaseId":172,"tableId":700,"returnAll":true,"additionalOptions":{"filters":{"fields":[{"field":"status_field_id","value":"Processing"}]}}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[1800,1180],"id":"ebd5dcab-4543-46ba-9a71-88945529dc93","name":"Get Processing Reels","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"databaseId":172,"tableId":701,"returnAll":true,"additionalOptions":{"filters":{"fields":[{"field":"reel_link_field_id","value":"={{ $json.id }}"},{"field":"processed_field_id","value":true}]},"order":{"fields":[{"field":"image_order_field_id","direction":"+"}]}}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[2020,1180],"id":"9f6c4781-b03e-48cd-814d-8089ccc60f64","name":"Get Processed Images","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"all-processed","leftValue":"={{ $json.length }}","rightValue":"={{ $('Get Processing Reels').item.json['Images'].length }}","operator":{"type":"number","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[2240,1180],"id":"7cafae30-d0c0-411d-b040-dda7d70f05dc","name":"Check All Images Processed"},{"parameters":{"databaseId":171,"tableId":692,"returnAll":true,"additionalOptions":{}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[2460,1180],"id":"349924f6-c469-4d54-95e0-60bf99c6c642","name":"Get Music Library","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"aggregate":"aggregateAllItemData","include":"specifiedFields","fieldsToInclude":"Audio ID, Description, Music Style, Tempo, Mood","options":{}},"type":"n8n-nodes-base.aggregate","typeVersion":1,"position":[2680,1180],"id":"4c531542-341f-4b0b-b633-5b0c31b08308","name":"Aggregate Music Library"},{"parameters":{"promptType":"define","text":"=Reel Content:\nHook: {{ $('Get Processing Reels').item.json.Hook }}\nDescription: {{ $('Get Processing Reels').item.json.Description }}\nCTA: {{ $('Get Processing Reels').item.json.CTA }}\nPrice: {{ $('Get Processing Reels').item.json.Price || 'Not specified' }}\nVoiceover: {{ $('Get Processing Reels').item.json['Include Voiceover'] }}\nTransition Effect: {{ $('Get Processing Reels').item.json['Transition Effect'] }}\n\nAvailable Music Library:\n{{ $json.data.toJsonString() }}","hasOutputParser":true,"messages":{"messageValues":[{"message":"=You are a music director for 15-second promotional reels. Select the most appropriate background music from the library that matches the content, mood, and energy of this reel.\n\n**Selection Criteria:**\n- **Content Match**: Music should complement the hook, description, and CTA\n- **Energy Level**: Consider if this is high-energy product promo vs elegant/sophisticated content\n- **Voiceover Compatibility**: If voiceover is present, choose music that won't compete with spoken content\n- **Transition Effect**: Match music energy to visual transition style (Fade=gentle, Cut=dynamic, etc.)\n- **Duration**: 15-second reels need music that works well in short format\n\n**Music Guidelines by Content Type:**\n- **Product Launch**: Upbeat, energetic, modern\n- **Luxury/Premium**: Elegant, sophisticated, minimal\n- **Tech/App**: Modern electronic, innovative, clean\n- **Food/Lifestyle**: Warm, inviting, organic\n- **Fashion/Beauty**: Stylish, contemporary, confident\n- **Business/Corporate**: Professional, trustworthy, polished\n\n**JSON Output:**\n{\n  \"selectedMusicId\": \"Audio ID of best match\",\n  \"musicTitle\": \"Description of selected track\",\n  \"musicStyle\": \"Style category\",\n  \"tempo\": \"Tempo description\",\n  \"mood\": \"Mood description\",\n  \"reasoning\": \"Why this track perfectly matches the reel content, considering voiceover, transition effects, and target audience\",\n  \"volumeLevel\": \"background/full - based on whether voiceover is present\"\n}"}]}},"type":"@n8n/n8n-nodes-langchain.chainLlm","typeVersion":1.5,"position":[2840,1040],"id":"a2dd6576-4e0e-4683-a015-76d1966fee7f","name":"AI Music Selector"},{"parameters":{"model":"openai/gpt-4.1-mini","options":{"temperature":0.3}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenRouter","typeVersion":1,"position":[2780,1360],"id":"08769d92-c2af-466e-b7c7-bbdb853cec53","name":"OpenRouter - GPT-4.1 Mini","credentials":{"openRouterApi":{"id":"eni2kFdHGvy7lEd3","name":"OpenRouter account"}}},{"parameters":{"jsonSchemaExample":"{\n  \"selectedMusicId\": \"string\",\n  \"musicTitle\": \"string\",\n  \"musicStyle\": \"string\",\n  \"tempo\": \"string\",\n  \"mood\": \"string\",\n  \"reasoning\": \"string\",\n  \"volumeLevel\": \"string\"\n}"},"type":"@n8n/n8n-nodes-langchain.outputParserStructured","typeVersion":1.2,"position":[3040,1360],"id":"73569cfd-db7d-4de1-be39-8e2df5fb7dcc","name":"Music Selection Parser"},{"parameters":{"operation":"update","databaseId":172,"tableId":700,"rowId":"={{ $('Get Processing Reels').item.json.id }}","fieldsUi":{"fieldValues":[{"fieldId":"music_link_field_id","fieldValue":"={{ $json.output.selectedMusicId }}"}]}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[3120,1180],"id":"1446cd31-e925-429a-9c55-344ef10bf222","name":"Link Music to Reel","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"fieldsToAggregate":{"fieldToAggregate":[{"fieldToAggregate":"Video Clip URL"}]},"options":{}},"type":"n8n-nodes-base.aggregate","typeVersion":1,"position":[3340,1180],"id":"4eab2d03-7e5e-4571-b2ab-5ae9b767d0ac","name":"Aggregate Video Clips"},{"parameters":{"jsCode":"// Create video sequence with proper timing\nconst videoUrls = $input.first().json['Video Clip URL'] || [];\nconst reel = $('Get Processing Reels').item.json;\n\n// Format URLs for NCA Toolkit\nconst formattedClips = videoUrls.map((url, index) => ({\n  \"video_url\": url,\n  \"start_time\": 3 + (index * (9 / videoUrls.length)), // After 3s hook\n  \"duration\": 9 / videoUrls.length // Equal distribution in 9s content section\n}));\n\nreturn [{\n  json: {\n    \"video_clips\": formattedClips,\n    \"total_duration\": 15,\n    \"hook_duration\": 3,\n    \"content_duration\": 9,\n    \"cta_duration\": 3\n  }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[3560,1180],"id":"e3bf97e8-67bb-49df-a122-f9ce28df93dd","name":"Format Video Sequence"},{"parameters":{"method":"POST","url":"https://nca.aiautomata.co.za/v1/video/concatenate","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"specifyBody":"json","jsonBody":"={\n  \"video_urls\": {{ JSON.stringify($json.video_clips) }},\n  \"total_duration\": 15,\n  \"transition_effect\": \"{{ $('Get Processing Reels').item.json['Transition Effect'].toLowerCase() }}\",\n  \"id\": \"reel-{{ $('Get Processing Reels').item.json.id }}-final\"\n}","options":{"timeout":60000}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[3780,1180],"id":"3248a542-f358-4f0b-8e04-12d8cd48c514","name":"Combine Video Clips","credentials":{"httpHeaderAuth":{"id":"XhOG8EmUXSMMk7ct","name":"NCS-Toolkit Auth account"}}},{"parameters":{"method":"POST","url":"https://nca.aiautomata.co.za/v1/video/text-overlay","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"specifyBody":"json","jsonBody":"={\n  \"video_url\": \"{{ $json.response }}\",\n  \"text_overlays\": [\n    {\n      \"text\": \"{{ $('Get Processing Reels').item.json.Hook }}\",\n      \"start_time\": 0,\n      \"duration\": 3,\n      \"position\": \"center\",\n      \"font_size\": 48,\n      \"font_color\": \"#FFFFFF\",\n      \"background_color\": \"rgba(0,0,0,0.7)\",\n      \"animation\": \"fade_in\"\n    },\n    {\n      \"text\": \"{{ $('Get Processing Reels').item.json.Description }}\",\n      \"start_time\": 3,\n      \"duration\": 9,\n      \"position\": \"bottom_center\",\n      \"font_size\": 36,\n      \"font_color\": \"#FFFFFF\",\n      \"background_color\": \"rgba(0,0,0,0.5)\"\n    },\n    {\n      \"text\": \"{{ $('Get Processing Reels').item.json.CTA }}{{ $('Get Processing Reels').item.json.Price ? ' - ' + $('Get Processing Reels').item.json.Price : '' }}\",\n      \"start_time\": 12,\n      \"duration\": 3,\n      \"position\": \"center\",\n      \"font_size\": 44,\n      \"font_color\": \"#22b525\",\n      \"background_color\": \"rgba(0,0,0,0.8)\",\n      \"animation\": \"zoom_in\"\n    }\n  ],\n  \"id\": \"reel-{{ $('Get Processing Reels').item.json.id }}-text\"\n}","options":{"timeout":60000}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[4000,1180],"id":"b7ee0b75-6bea-47cd-b18f-2d1abc5f817c","name":"Add Text Overlays","credentials":{"httpHeaderAuth":{"id":"XhOG8EmUXSMMk7ct","name":"NCS-Toolkit Auth account"}}},{"parameters":{"method":"POST","url":"https://nca.aiautomata.co.za/v1/ffmpeg/compose","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"specifyBody":"json","jsonBody":"={\n  \"id\": \"voiceover-layering\",\n  \"inputs\": [\n    {\n      \"file_url\": \"{{ $json.response }}\"\n    },\n    {\n      \"file_url\": \"{{ $('Get Processing Reels').item.json['TTS Audio'][0].url }}\"\n    }\n  ],\n  \"filters\": [\n    {\n      \"filter\": \"[1:a]volume=1[voiceover];[0:a]volume=0.3[video_audio];[video_audio][voiceover]amix=inputs=2:duration=shortest[outa]\"\n    }\n  ],\n  \"outputs\": [\n    {\n      \"options\": [\n        {\n          \"option\": \"-map\",\n          \"argument\": \"0:v\"\n        },\n        {\n          \"option\": \"-map\",\n          \"argument\": \"[outa]\"\n        },\n        {\n          \"option\": \"-c:v\",\n          \"argument\": \"copy\"\n        },\n        {\n          \"option\": \"-c:a\",\n          \"argument\": \"aac\"\n        },\n        {\n          \"option\": \"-shortest\"\n        }\n      ]\n    }\n  ]\n}","options":{"timeout":60000}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[4440,920],"id":"b3f13aa5-5eb4-466b-ba11-b42200c1b511","name":"Add Voiceover","credentials":{"httpHeaderAuth":{"id":"XhOG8EmUXSMMk7ct","name":"NCS-Toolkit Auth account"}}},{"parameters":{"aggregate":"aggregateAllItemData","destinationFieldName":"mergedAudioPaths","options":{}},"type":"n8n-nodes-base.aggregate","typeVersion":1,"position":[4660,1200],"id":"18ced5b6-87c3-4f8d-bf29-54e7903a73e8","name":"Merge Audio Paths"},{"parameters":{"operation":"get","databaseId":171,"tableId":692,"rowId":"={{ $('AI Music Selector').item.json.output.selectedMusicId }}"},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[4880,1180],"id":"3e97726e-e570-497f-8ea1-98a7a02307ad","name":"Get Selected Music","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"method":"POST","url":"https://nca.aiautomata.co.za/v1/ffmpeg/compose","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"specifyBody":"json","jsonBody":"={\n  \"id\": \"background-music-layering\",\n  \"inputs\": [\n    {\n      \"file_url\": \"{{ $('Merge Audio Paths').item.json.response || $('Add Text Overlays').item.json.response }}\"\n    },\n    {\n      \"file_url\": \"{{ $json['Audio File'][0].url }}\"\n    }\n  ],\n  \"filters\": [\n    {\n      \"filter\": \"[1:a]volume={{ $('Get Processing Reels').item.json['Include Voiceover'] === 'Yes' ? '0.2' : '0.8' }}[music];[0:a][music]amix=inputs=2:duration=shortest[outa]\"\n    }\n  ],\n  \"outputs\": [\n    {\n      \"options\": [\n        {\n          \"option\": \"-map\",\n          \"argument\": \"0:v\"\n        },\n        {\n          \"option\": \"-map\",\n          \"argument\": \"[outa]\"\n        },\n        {\n          \"option\": \"-c:v\",\n          \"argument\": \"copy\"\n        },\n        {\n          \"option\": \"-c:a\",\n          \"argument\": \"aac\"\n        },\n        {\n          \"option\": \"-t\",\n          \"argument\": \"15\"\n        }\n      ]\n    }\n  ]\n}","options":{"timeout":60000}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[5100,1180],"id":"1b408e4d-3788-4e91-a90d-b97dadd6f161","name":"Add Background Music","credentials":{"httpHeaderAuth":{"id":"XhOG8EmUXSMMk7ct","name":"NCS-Toolkit Auth account"}}},{"parameters":{"url":"={{ $json.response[0].file_url }}","options":{"response":{"response":{"responseFormat":"file"}}}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[5320,1180],"id":"37061490-c953-45c1-a28d-ecf08c59eb2b","name":"Download Final Video"},{"parameters":{"method":"POST","url":"https://baserow.aiautomata.co.za/api/user-files/upload-file/","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"contentType":"multipart-form-data","bodyParameters":{"parameters":[{"parameterType":"formBinaryData","name":"file","inputDataFieldName":"data"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[5540,1180],"id":"72b00733-bfd6-4e4d-a8d8-158032a86729","name":"Upload Final Video to Baserow","credentials":{"httpHeaderAuth":{"id":"eLr9WkAowHbRSmCb","name":"Baserow Auth account"}}},{"parameters":{"operation":"update","databaseId":172,"tableId":700,"rowId":"={{ $('Get Processing Reels').item.json.id }}","fieldsUi":{"fieldValues":[{"fieldId":"final_video_field_id","fieldValue":"={{ $json.name }}"},{"fieldId":"status_field_id","fieldValue":"Complete"}]}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[5760,1180],"id":"1db8b568-8265-47a7-b1e8-a22830ea9a99","name":"Update Final Status","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"content":"## Stage 1: Content Processing & TTS Generation\n\nThis workflow:\n1. Finds reels with Status = 'Draft'\n2. Calculates timing distribution across images\n3. Generates TTS if voiceover is enabled\n4. Updates status to 'Processing'\n5. Triggers image-to-video conversion","height":200,"width":400,"color":5},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[1580,560],"id":"ceb1fb88-368a-41cb-aba7-3c12b347fc6d","name":"Stage 1 Description"},{"parameters":{"content":"## Stage 2: Final Assembly & Audio Mixing\n\nThis workflow:\n1. Finds reels with all images processed\n2. Selects appropriate background music using AI\n3. Combines video clips with transitions\n4. Adds text overlays for hook/description/CTA\n5. Mixes voiceover and background music\n6. Outputs final 15-second promotional reel","height":200,"width":400,"color":5},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[1580,960],"id":"b50c556f-95f5-465a-b220-bde0c9dc63e2","name":"Stage 2 Description"},{"parameters":{"amount":30},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[1580,1180],"id":"4a2b4b60-e8ed-4605-a499-5baf7f934b04","name":"Schedule Every 30s - Stage 2","webhookId":"reel-workflow-stage2"},{"parameters":{"jsCode":"// Calculate timing for each image based on total count\nconst totalDuration = 15; // 15 seconds total\nconst hookTime = 3;\nconst ctaTime = 3;\nconst contentTime = totalDuration - hookTime - ctaTime; // 9 seconds for images\n\nconst images = $input.all();\nconst imageCount = images.length;\nconst timePerImage = contentTime / imageCount;\n\n// Create timing structure\nconst timingPlan = {\n  totalDuration: totalDuration,\n  hookDuration: hookTime,\n  ctaDuration: ctaTime,\n  contentDuration: contentTime,\n  timePerImage: timePerImage,\n  imageCount: imageCount,\n  reelId: $('Get Draft Reels1').item.json.id,\n  includeVoiceover: $('Get Draft Reels1').item.json['Include Voiceover'],\n  ttsVoice: $('Get Draft Reels1').item.json['TTS Voice'],\n  hook: $('Get Draft Reels1').item.json.Hook,\n  description: $('Get Draft Reels1').item.json.Description,\n  cta: $('Get Draft Reels1').item.json.CTA,\n  price: $('Get Draft Reels1').item.json.Price || ''\n};\n\nreturn [{ json: timingPlan }];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[3640,3700],"id":"bb5fbb40-04ee-4593-8ed8-f2a26a563697","name":"Calculate Timing & Prepare Data"},{"parameters":{"operation":"update","databaseId":173,"tableId":698,"rowId":"={{ $('Calculate Timing & Prepare Data').item.json.reelId }}","fieldsUi":{"fieldValues":[{"fieldId":6793,"fieldValue":"={{ $json.name }}"},{"fieldId":6773,"fieldValue":"Processing"}]}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[4700,3600],"id":"c0a790cc-fc8d-491d-ac0d-52b2626b6d07","name":"Update Reel to Processing","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"amount":30},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[2700,3700],"id":"7494bd65-aef7-442e-89de-570afcc40326","name":"Schedule Every 30s1","webhookId":"stage1-content-processing"},{"parameters":{"databaseId":173,"tableId":698,"returnAll":true,"additionalOptions":{"filters":{"fields":[{"field":6773,"operator":"contains","value":"Draft"}]}}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[2920,3700],"id":"50adf5f6-1eb7-45a1-82d4-90551d15d75b","name":"Get Draft Reels1","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"databaseId":173,"tableId":700,"returnAll":true,"additionalOptions":{"filters":{"fields":[{"field":6811,"value":"={{ $json.id }}"}]},"order":{"fields":[{"field":6811}]}}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[3380,3700],"id":"0386053a-2537-4cf1-9796-90f3c3c8140d","name":"Get Reel Images1","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"rules":{"values":[{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"leftValue":"={{ $json.includeVoiceover.value }}","rightValue":"Yes","operator":{"type":"string","operation":"equals"},"id":"needs-tts"}],"combinator":"and"},"renameOutput":true,"outputKey":"Generate TTS"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"leftValue":"={{ $json.includeVoiceover.value }}","rightValue":"No","operator":{"type":"string","operation":"contains"},"id":"no-tts"}],"combinator":"and"},"renameOutput":true,"outputKey":"Skip TTS"}]},"options":{}},"type":"n8n-nodes-base.switch","typeVersion":3.2,"position":[4020,3700],"id":"992a120a-24c0-46c8-9b7e-642fcab9fac8","name":"Check Voiceover Needed1"},{"parameters":{"method":"POST","url":"https://tts.aiautomata.co.za/dev/captioned_speech","sendBody":true,"specifyBody":"json","jsonBody":"={\n  \"model\": \"kokoro\",\n  \"input\": \"{{ $json.hook }}. {{ $json.description }}. {{ $json.ctaDuration }}. {{ $json.price ? '. ' + $json.price : '' }}\",\n  \"voice\": \"{{ $json.ttsVoice.value }}\",\n  \"response_format\": \"mp3\",\n  \"download_format\": \"mp3\",\n  \"return_timestamps\": false,\n  \"speed\": 1\n}","options":{"response":{"response":{"fullResponse":true}}}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[4240,3620],"id":"aa22cf1a-8659-477d-8ce4-214a1d46337a","name":"Generate TTS1"},{"parameters":{"method":"POST","url":"https://baserow.aiautomata.co.za/api/user-files/upload-file/","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"contentType":"multipart-form-data","bodyParameters":{"parameters":[{"parameterType":"formBinaryData","name":"file","inputDataFieldName":"data"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[4460,3620],"id":"69394749-910b-4ca7-8cf2-33fc9b7ec34c","name":"Upload TTS to Baserow1","credentials":{"httpHeaderAuth":{"id":"eLr9WkAowHbRSmCb","name":"Baserow Auth account"}}},{"parameters":{"aggregate":"aggregateAllItemData","destinationFieldName":"mergedData","options":{}},"type":"n8n-nodes-base.aggregate","typeVersion":1,"position":[4460,3780],"id":"321acbef-008e-4725-85bf-fcee48c45613","name":"Merge TTS Paths1"},{"parameters":{"content":"## Stage 1: Content Processing & TTS Generation\n\nThis stage:\n1. Finds reels with Status = 'Draft'\n2. Gets associated images and calculates timing\n3. Generates TTS voiceover if requested\n4. Updates reel status to 'Processing'\n\nNext: Stage 2 will convert images to video clips","height":300,"width":400,"color":5},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[2300,3500],"id":"5279e0c9-52ae-4039-b5ae-db6f4f631440","name":"Stage 1 Description1"},{"parameters":{},"type":"n8n-nodes-base.manualTrigger","typeVersion":1,"position":[2320,4080],"id":"bd9f74a6-3fb7-4c34-8fd4-1ab387051df3","name":"When clicking ‘Test workflow’"},{"parameters":{"operation":"update","databaseId":173,"tableId":698,"rowId":"={{ $('Calculate Timing & Prepare Data').item.json.reelId }}","fieldsUi":{"fieldValues":[{"fieldId":6773,"fieldValue":"Processing"}]}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[4720,3780],"id":"3ff70003-89c8-4af8-9619-c293891ed609","name":"Update Reel to Processing1","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"fieldToSplitOut":"Images","options":{}},"type":"n8n-nodes-base.splitOut","typeVersion":1,"position":[3280,4660],"id":"e3755fe4-4860-40c3-b0f3-0fe3fee2b27e","name":"Split Reel Images"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"no-video-clip-yet","leftValue":"={{ $json['Video Clip URL'] }}","rightValue":"","operator":{"type":"string","operation":"isEmpty"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[3400,5020],"id":"348ebc59-3d9d-43d0-9c51-e1293a301093","name":"Check If Needs Video Conversion"},{"parameters":{"jsCode":"// Count images that have video clips vs total images in reel\nconst reel = $('Get Processing Reels2').item.json;\nconst allImages = reel['Images'];\nconst processedCount = allImages.filter(img => img['Video Clip URL'] && img['Video Clip URL'].trim() !== '').length;\nconst totalCount = allImages.length;\n\nconsole.log(`Processed: ${processedCount}/${totalCount} images`);\n\nreturn [{\n  json: {\n    processedCount: processedCount,\n    totalCount: totalCount,\n    allProcessed: processedCount === totalCount,\n    reelId: reel.id\n  }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[4380,4660],"id":"bf8a184e-b0f8-4211-8b62-9adcc8f73fd7","name":"Check Processing Status"},{"parameters":{"amount":30},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[2620,4660],"id":"21921210-a7dc-4b7b-9917-a2cd1a2edbd1","name":"Schedule Every 30s - Stage 3","webhookId":"stage2-image-to-video"},{"parameters":{"databaseId":173,"tableId":698,"returnAll":true,"additionalOptions":{"filters":{"fields":[{"field":6773,"operator":"contains","value":"Processing"}]}}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[2840,4660],"id":"76822841-fc05-40c1-9b7e-b8b3ab39cd01","name":"Get Processing Reels2","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"has-processing-reels","leftValue":"={{ $json.id }}","rightValue":0,"operator":{"type":"number","operation":"gt"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[3060,4660],"id":"14e81249-e837-4b57-b596-f1dc70a84241","name":"Check If Processing Reels Exist1"},{"parameters":{"jsCode":"// Calculate timing for this specific image\nconst reel = $('Get Processing Reels2').item.json;\nconst totalImages = reel['Images'].length;\nconst contentTime = 9; // 9 seconds for content section\nconst timePerImage = contentTime / totalImages;\n\n// Add timing and reel context to image data\nconst imageWithTiming = {\n  ...item.json,\n  calculatedDuration: Math.max(2, Math.ceil(timePerImage)), // Minimum 2 seconds\n  reelId: reel.id,\n  transitionEffect: reel['Transition Effect']?.value || 'fade',\n  imageOrder: ($input.all().findIndex(img => img.json.id === item.json.id) + 1)\n};\n\nreturn [{ json: imageWithTiming }];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[3620,4660],"id":"d9539c86-353b-45c4-9856-d29ef394fd83","name":"Calculate Image Timing2"},{"parameters":{"method":"POST","url":"https://nca.aiautomata.co.za/v1/image/transform/video","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"specifyBody":"json","jsonBody":"={\n  \"image_url\": \"{{ $json['Image File'][0].url }}\",\n  \"length\": {{ $json.calculatedDuration }},\n  \"frame_rate\": 30,\n  \"transition_effect\": \"{{ $json.transitionEffect.toLowerCase() }}\",\n  \"zoom_speed\": 2,\n  \"fade_duration\": 0.5,\n  \"id\": \"reel-{{ $json.reelId }}-img-{{ $json.imageOrder }}\"\n}","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[3940,4660],"id":"9b317a15-bb75-4fa8-b6fd-77178b0649a3","name":"Create Video Clip1","credentials":{"httpHeaderAuth":{"id":"XhOG8EmUXSMMk7ct","name":"NCS-Toolkit Auth account"}}},{"parameters":{"operation":"update","databaseId":173,"tableId":700,"rowId":"={{ $json.id }}","fieldsUi":{"fieldValues":[{"fieldId":6802,"fieldValue":"={{ $json.response }}"},{"fieldId":6805,"fieldValue":"{{ $json.calculatedDuration }}"}]}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[4160,4660],"id":"4da650b9-79d7-4dd9-8ad7-a4cf2dab4053","name":"Update Image with Video1","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"all-images-processed","leftValue":"={{ $json.allProcessed }}","rightValue":true,"operator":{"type":"boolean","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[4600,4660],"id":"2c9d3e15-804e-442b-9b4e-ec6292bdfca3","name":"Check All Images Processed2"},{"parameters":{"operation":"update","databaseId":173,"tableId":698,"rowId":"={{ $json.reelId }}","fieldsUi":{"fieldValues":[{"fieldId":6773,"fieldValue":"Video Ready"}]}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[4820,4660],"id":"f290bb96-4730-4a0c-a09e-5eca36b0049a","name":"Update Reel to Video Ready1","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"content":"## Stage 2: Image-to-Video Conversion\n\nThis stage:\n1. Finds reels with Status = 'Processing'\n2. Gets unprocessed images for each reel\n3. Calculates optimal timing per image\n4. Converts images to video clips via NCA Toolkit\n5. Updates image records with video URLs\n6. Checks if all images are processed\n7. Updates reel status to 'Video Ready'\n\nNext: Stage 3 will handle final assembly","height":320,"width":400,"color":5},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[2220,4460],"id":"c8b1ae79-0fa4-4fab-ac55-c120e55f7554","name":"Stage 2 Description2"},{"parameters":{"fieldToSplitOut":"Images","options":{}},"type":"n8n-nodes-base.splitOut","typeVersion":1,"position":[3140,3700],"id":"ea82809f-2780-4f2b-ac31-d94ce8950f06","name":"Split Out"},{"parameters":{"operation":"update","databaseId":173,"tableId":700},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[3820,3800],"id":"a0be4705-5cf0-4163-885f-0c1f0a1ac6e0","name":"image duration","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"jsCode":"// Calculate individual timing for each image (Hook=3s, CTA=3s, content=split remaining)\nconst reel = $('Get Draft Reels2').item.json;\nconst images = $input.all(); // All images from Get Reel Images1\nconst totalImages = images.length;\n\n// Basic timing setup\nconst totalDuration = 15;\nconst hookDuration = 3;\nconst ctaDuration = 3;\nconst contentDuration = totalDuration - hookDuration - ctaDuration; // 9 seconds\n\n// Calculate timing per image type\nlet imageTimings = [];\n\nif (totalImages === 1) {\n  // Single image gets full 15 seconds\n  imageTimings.push({\n    imageId: images[0].json.id,\n    duration: totalDuration,\n    imageType: 'single',\n    imageOrder: 1\n  });\n} else if (totalImages === 2) {\n  // First image = hook, Second = CTA  \n  imageTimings.push(\n    {\n      imageId: images[0].json.id,\n      duration: hookDuration + (contentDuration / 2), // 7.5s\n      imageType: 'hook',\n      imageOrder: 1\n    },\n    {\n      imageId: images[1].json.id,\n      duration: (contentDuration / 2) + ctaDuration, // 7.5s\n      imageType: 'cta',\n      imageOrder: 2\n    }\n  );\n} else {\n  // 3+ images: Hook + Content + CTA\n  const contentImages = totalImages - 2; // Exclude hook and CTA\n  const timePerContentImage = contentDuration / contentImages;\n  \n  // Hook image (first)\n  imageTimings.push({\n    imageId: images[0].json.id,\n    duration: hookDuration,\n    imageType: 'hook',\n    imageOrder: 1\n  });\n  \n  // Content images (middle)\n  for (let i = 1; i < totalImages - 1; i++) {\n    imageTimings.push({\n      imageId: images[i].json.id,\n      duration: Math.round(timePerContentImage * 10) / 10, // Round to 1 decimal\n      imageType: 'content',\n      imageOrder: i + 1\n    });\n  }\n  \n  // CTA image (last)\n  imageTimings.push({\n    imageId: images[totalImages - 1].json.id,\n    duration: ctaDuration,\n    imageType: 'cta',\n    imageOrder: totalImages\n  });\n}\n\n// Add reel context to each timing\nconst timingsWithContext = imageTimings.map(timing => ({\n  ...timing,\n  reelId: reel.id,\n  includeVoiceover: reel['Include Voiceover'],\n  ttsVoice: reel['TTS Voice'],\n  hook: reel.Hook,\n  description: reel.Description,\n  cta: reel.CTA,\n  price: reel.Price || '',\n  totalImages: totalImages\n}));\n\nconsole.log(`Calculated timing for ${totalImages} images:`);\ntimingsWithContext.forEach(t => {\n  console.log(`- Image ${t.imageOrder} (${t.imageType}): ${t.duration}s`);\n});\n\nreturn timingsWithContext.map(timing => ({ json: timing }));"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[3840,2940],"id":"89c1485d-064b-4be5-bd79-b9cb2ac64faf","name":"Calculate Individual Image Timing"},{"parameters":{"operation":"update","databaseId":173,"tableId":700,"rowId":"={{ $json.imageId }}","fieldsUi":{"fieldValues":[{"fieldId":6825,"fieldValue":"={{ $json.duration }}"}]}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[4020,3040],"id":"46ea78e7-2773-4969-9f8f-a25a50b54945","name":"Update Image Duration","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"amount":30},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[2900,2940],"id":"57d894c9-3346-46ab-9f43-66843319eeb3","name":"Schedule Every 30s2","webhookId":"stage1-content-processing"},{"parameters":{"databaseId":173,"tableId":698,"returnAll":true,"additionalOptions":{"filters":{"fields":[{"field":6773,"operator":"contains","value":"Draft"}]}}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[3120,2940],"id":"ff72579d-b71a-46c0-ac4f-0428f9eb530d","name":"Get Draft Reels2","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"databaseId":173,"tableId":700,"returnAll":true,"additionalOptions":{"filters":{"fields":[{"field":6811,"operator":"contains","value":"={{ $json.id }}"}]},"order":{"fields":[{"field":6811}]}}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[3580,2940],"id":"0df7c9d3-fbed-4d19-8aac-d72dff878b42","name":"Get Reel Images2","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"rules":{"values":[{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"leftValue":"={{ $('Get Draft Reels2').item.json['Include Voiceover'].value }}","rightValue":"Yes","operator":{"type":"string","operation":"equals"},"id":"needs-tts"}],"combinator":"and"},"renameOutput":true,"outputKey":"Generate TTS"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"leftValue":"={{ $('Get Draft Reels2').item.json['Include Voiceover'].value }}","rightValue":"No","operator":{"type":"string","operation":"contains"},"id":"no-tts"}],"combinator":"and"},"renameOutput":true,"outputKey":"Skip TTS"}]},"options":{}},"type":"n8n-nodes-base.switch","typeVersion":3.2,"position":[4220,2940],"id":"90768193-f865-48c0-bd9d-a5bbc22a6286","name":"Check Voiceover Needed2"},{"parameters":{"url":"https://tts.aiautomata.co.za/dev/captioned_speech","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":1,"position":[4100,3340],"id":"fa4e96e0-567f-4ea9-8125-a3e77c4800d0","name":"Generate TTS2"},{"parameters":{"method":"POST","url":"https://baserow.aiautomata.co.za/api/user-files/upload-file/","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"contentType":"multipart-form-data","bodyParameters":{"parameters":[{"parameterType":"formBinaryData","name":"file","inputDataFieldName":"data"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[4660,2860],"id":"eec6f7e4-0821-4506-97d0-c5d26aee1461","name":"Upload TTS to Baserow2","credentials":{"httpHeaderAuth":{"id":"eLr9WkAowHbRSmCb","name":"Baserow Auth account"}}},{"parameters":{"aggregate":"aggregateAllItemData","destinationFieldName":"mergedData","options":{}},"type":"n8n-nodes-base.aggregate","typeVersion":1,"position":[4660,3020],"id":"abfd7a84-5651-405e-8a6f-76f99d046030","name":"Merge TTS Paths2"},{"parameters":{"operation":"update","databaseId":173,"tableId":698,"rowId":"={{ $('Get Draft Reels2').item.json.id }}","fieldsUi":{"fieldValues":[{"fieldId":6773,"fieldValue":"Processing"},{"fieldId":6793,"fieldValue":"={{ $('Upload TTS to Baserow2').item.json.name }}"}]}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[4900,2840],"id":"565de296-a9fd-494b-84c6-a85cef021fe0","name":"Update Reel to Processing2","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"operation":"update","databaseId":173,"tableId":698,"rowId":"={{ $json.reelId }}","fieldsUi":{"fieldValues":[{"fieldId":6773,"fieldValue":"Processing"}]}},"type":"n8n-nodes-base.baserow","typeVersion":1,"position":[4920,3020],"id":"ee4f1a97-a0de-4087-a4a9-f2ae28ed986a","name":"Update Reel to Processing3","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"fieldToSplitOut":"Images","options":{}},"type":"n8n-nodes-base.splitOut","typeVersion":1,"position":[3340,2940],"id":"30580e66-952a-4e7d-a3b1-03242df09507","name":"Split Out1"},{"parameters":{"method":"POST","url":"https://tts.aiautomata.co.za/dev/captioned_speech","sendBody":true,"specifyBody":"json","jsonBody":"={\n  \"model\": \"kokoro\",\n  \"input\": \"{{ $('Calculate Individual Image Timing').item.json.hook }}. {{ $('Calculate Individual Image Timing').item.json.description }}. {{ $('Calculate Individual Image Timing').item.json.cta }}. \",\n  \"voice\": \"{{ $('Calculate Individual Image Timing').item.json.ttsVoice.value }}\",\n  \"response_format\": \"mp3\",\n  \"download_format\": \"mp3\",\n  \"return_timestamps\": false,\n  \"speed\": 1\n}","options":{"response":{"response":{"fullResponse":true}}}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[4460,2800],"id":"68844624-2e2a-4010-84ad-64a259fabc22","name":"Generate TTS3"}],"connections":{"On form submission":{"main":[[]]},"GPT 4.1":{"ai_languageModel":[[{"node":"Product Photography Agent","type":"ai_languageModel","index":0}]]},"Create Image":{"main":[[{"node":"Convert to File","type":"main","index":0}]]},"Convert to File":{"main":[[{"node":"Get URL","type":"main","index":0}]]},"Get URL":{"main":[[{"node":"Generate Video","type":"main","index":0}]]},"Generate Video":{"main":[[{"node":"60 Seconds","type":"main","index":0}]]},"If":{"main":[[{"node":"5 Secs","type":"main","index":0}],[{"node":"Send Finished Products","type":"main","index":0}]]},"5 Secs":{"main":[[{"node":"Get Video","type":"main","index":0}]]},"Get Video":{"main":[[{"node":"If","type":"main","index":0}]]},"60 Seconds":{"main":[[{"node":"Get Video","type":"main","index":0}]]},"Product Photography Agent":{"main":[[{"node":"HTTP Request3","type":"main","index":0}]]},"HTTP Request1":{"main":[[{"node":"Product Photography Agent","type":"main","index":0}]]},"HTTP Request3":{"main":[[{"node":"Create Image","type":"main","index":0}]]},"Schedule Every 30s":{"main":[[{"node":"Get Draft Reels","type":"main","index":0}]]},"Get Draft Reels":{"main":[[{"node":"Check If Reels Exist","type":"main","index":0}]]},"Check If Reels Exist":{"main":[[{"node":"Get Reel Images","type":"main","index":0}]]},"Get Reel Images":{"main":[[{"node":"Calculate Image Timing","type":"main","index":0}]]},"Calculate Image Timing":{"main":[[{"node":"Check Voiceover Needed","type":"main","index":0}]]},"Check Voiceover Needed":{"main":[[{"node":"Add Voiceover","type":"main","index":0}],[{"node":"Merge Audio Paths","type":"main","index":0}]]},"Generate TTS":{"main":[[{"node":"Upload TTS to Baserow","type":"main","index":0}]]},"Upload TTS to Baserow":{"main":[[{"node":"Merge TTS Paths","type":"main","index":0}]]},"Merge TTS Paths":{"main":[[{"node":"Update Reel Status","type":"main","index":0}]]},"Update Reel Status":{"main":[[{"node":"Split Images for Processing","type":"main","index":0}]]},"Split Images for Processing":{"main":[[{"node":"Create Image Video Clip","type":"main","index":0}]]},"Create Image Video Clip":{"main":[[{"node":"Update Image Record","type":"main","index":0}]]},"Schedule Every 30s - Stage 2":{"main":[[{"node":"Get Processing Reels","type":"main","index":0}]]},"Get Processing Reels":{"main":[[{"node":"Get Processed Images","type":"main","index":0}]]},"Get Processed Images":{"main":[[{"node":"Check All Images Processed","type":"main","index":0}]]},"Check All Images Processed":{"main":[[{"node":"Get Music Library","type":"main","index":0}]]},"Get Music Library":{"main":[[{"node":"Aggregate Music Library","type":"main","index":0}]]},"Aggregate Music Library":{"main":[[{"node":"AI Music Selector","type":"main","index":0}]]},"AI Music Selector":{"main":[[{"node":"Link Music to Reel","type":"main","index":0}]]},"OpenRouter - GPT-4.1 Mini":{"ai_languageModel":[[{"node":"AI Music Selector","type":"ai_languageModel","index":0}]]},"Music Selection Parser":{"ai_outputParser":[[{"node":"AI Music Selector","type":"ai_outputParser","index":0}]]},"Link Music to Reel":{"main":[[{"node":"Aggregate Video Clips","type":"main","index":0}]]},"Aggregate Video Clips":{"main":[[{"node":"Format Video Sequence","type":"main","index":0}]]},"Format Video Sequence":{"main":[[{"node":"Combine Video Clips","type":"main","index":0}]]},"Combine Video Clips":{"main":[[{"node":"Add Text Overlays","type":"main","index":0}]]},"Add Text Overlays":{"main":[[{"node":"Check Voiceover Needed","type":"main","index":0}]]},"Add Voiceover":{"main":[[{"node":"Merge Audio Paths","type":"main","index":0}]]},"Merge Audio Paths":{"main":[[{"node":"Get Selected Music","type":"main","index":0}]]},"Get Selected Music":{"main":[[{"node":"Add Background Music","type":"main","index":0}]]},"Add Background Music":{"main":[[{"node":"Download Final Video","type":"main","index":0}]]},"Download Final Video":{"main":[[{"node":"Upload Final Video to Baserow","type":"main","index":0}]]},"Upload Final Video to Baserow":{"main":[[{"node":"Update Final Status","type":"main","index":0}]]},"Calculate Timing & Prepare Data":{"main":[[{"node":"image duration","type":"main","index":0}]]},"Schedule Every 30s1":{"main":[[{"node":"Get Draft Reels1","type":"main","index":0}]]},"Get Draft Reels1":{"main":[[{"node":"Split Out","type":"main","index":0}]]},"Get Reel Images1":{"main":[[{"node":"Calculate Timing & Prepare Data","type":"main","index":0}]]},"Check Voiceover Needed1":{"main":[[{"node":"Generate TTS1","type":"main","index":0}],[{"node":"Merge TTS Paths1","type":"main","index":0}]]},"Generate TTS1":{"main":[[{"node":"Upload TTS to Baserow1","type":"main","index":0}]]},"Upload TTS to Baserow1":{"main":[[{"node":"Update Reel to Processing","type":"main","index":0}]]},"Merge TTS Paths1":{"main":[[{"node":"Update Reel to Processing1","type":"main","index":0}]]},"When clicking ‘Test workflow’":{"main":[[{"node":"Get Processing Reels2","type":"main","index":0}]]},"Check Processing Status":{"main":[[{"node":"Check All Images Processed2","type":"main","index":0}]]},"Schedule Every 30s - Stage 3":{"main":[[{"node":"Get Processing Reels2","type":"main","index":0}]]},"Get Processing Reels2":{"main":[[{"node":"Check If Processing Reels Exist1","type":"main","index":0}]]},"Calculate Image Timing2":{"main":[[{"node":"Create Video Clip1","type":"main","index":0}]]},"Create Video Clip1":{"main":[[{"node":"Update Image with Video1","type":"main","index":0}]]},"Check All Images Processed2":{"main":[[{"node":"Update Reel to Video Ready1","type":"main","index":0}]]},"Split Reel Images":{"main":[[{"node":"Calculate Image Timing2","type":"main","index":0}]]},"Update Image with Video1":{"main":[[{"node":"Check Processing Status","type":"main","index":0}]]},"Check If Processing Reels Exist1":{"main":[[{"node":"Split Reel Images","type":"main","index":0}]]},"Split Out":{"main":[[{"node":"Get Reel Images1","type":"main","index":0}]]},"image duration":{"main":[[{"node":"Check Voiceover Needed1","type":"main","index":0}]]},"Calculate Individual Image Timing":{"main":[[{"node":"Update Image Duration","type":"main","index":0}]]},"Update Image Duration":{"main":[[{"node":"Check Voiceover Needed2","type":"main","index":0}]]},"Schedule Every 30s2":{"main":[[{"node":"Get Draft Reels2","type":"main","index":0}]]},"Get Draft Reels2":{"main":[[{"node":"Split Out1","type":"main","index":0}]]},"Get Reel Images2":{"main":[[{"node":"Calculate Individual Image Timing","type":"main","index":0}]]},"Check Voiceover Needed2":{"main":[[{"node":"Generate TTS3","type":"main","index":0}],[{"node":"Merge TTS Paths2","type":"main","index":0}]]},"Generate TTS2":{"main":[[]]},"Upload TTS to Baserow2":{"main":[[{"node":"Update Reel to Processing2","type":"main","index":0}]]},"Merge TTS Paths2":{"main":[[{"node":"Update Reel to Processing3","type":"main","index":0}]]},"Split Out1":{"main":[[{"node":"Get Reel Images2","type":"main","index":0}]]},"Generate TTS3":{"main":[[{"node":"Upload TTS to Baserow2","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":null,"pinData":{},"versionId":"3fc22ca4-173e-4d9c-85e6-7f923f1fd4e8","triggerCount":0,"shared":[{"createdAt":"2025-06-06T03:39:41.114Z","updatedAt":"2025-06-06T03:39:41.114Z","role":"workflow:owner","workflowId":"rVcKMay5Zw60Yonm","projectId":"pRXFeKq9D8e0hAOx"}],"tags":[]},{"createdAt":"2025-08-22T10:19:11.731Z","updatedAt":"2025-08-23T05:05:59.000Z","id":"sHkb5Rk5GznjUqVm","name":"Brand Asset Generator_Old","active":false,"isArchived":false,"nodes":[],"connections":{},"settings":{"executionOrder":"v1","saveDataErrorExecution":"all","saveDataSuccessExecution":"all","saveManualExecutions":true,"saveExecutionProgress":true},"staticData":null,"meta":null,"pinData":{},"versionId":"5e0eab86-4065-4eda-8247-8c2c9acbeb40","triggerCount":1,"shared":[{"createdAt":"2025-08-22T10:19:11.739Z","updatedAt":"2025-08-22T10:19:11.739Z","role":"workflow:owner","workflowId":"sHkb5Rk5GznjUqVm","projectId":"pRXFeKq9D8e0hAOx"}],"tags":[]},{"createdAt":"2025-09-01T08:21:05.971Z","updatedAt":"2025-09-01T08:26:01.000Z","id":"tGi0Dvw5GmMBUvCv","name":"27-Page Facebook Insights Dashboard","active":false,"isArchived":false,"nodes":[{"parameters":{"rule":{"interval":[{"field":"cronExpression"}]}},"id":"schedule-trigger","name":"Daily Insights Schedule","type":"n8n-nodes-base.scheduleTrigger","position":[200,300],"typeVersion":1.2,"disabled":true},{"parameters":{},"id":"manual-trigger","name":"Manual Trigger","type":"n8n-nodes-base.manualTrigger","position":[200,500],"typeVersion":1},{"parameters":{"assignments":{"assignments":[{"id":"date-today","name":"date_today","type":"string","value":"={{ $now.format('yyyy-MM-dd') }}"},{"id":"date-yesterday","name":"date_yesterday","type":"string","value":"={{ $now.minus({days: 1}).format('yyyy-MM-dd') }}"}]},"options":{}},"id":"set-date-vars","name":"Set Date Variables","type":"n8n-nodes-base.set","position":[400,400],"typeVersion":3.4},{"parameters":{"graphApiVersion":"v23.0","node":"me/accounts","options":{}},"id":"get-all-pages","name":"Get All Your 27 Pages","type":"n8n-nodes-base.facebookGraphApi","position":[600,400],"typeVersion":1,"credentials":{"facebookGraphApi":{"id":"Zr6cRDN8mGYlfOob","name":"Facebook Graph New"}}},{"parameters":{"options":{}},"id":"loop-pages","name":"Loop Through All Pages","type":"n8n-nodes-base.splitInBatches","position":[800,400],"typeVersion":3},{"parameters":{"url":"=https://graph.facebook.com/v23.0/{{ $json.id }}/insights","sendQuery":true,"queryParameters":{"parameters":[{"name":"access_token","value":"={{ $json.access_token }}"},{"name":"metric","value":"page_fans,page_impressions,page_engaged_users,page_post_engagements,page_views_total"},{"name":"period","value":"day"},{"name":"since","value":"={{ $node['Set Date Variables'].json.date_yesterday }}"},{"name":"until","value":"={{ $node['Set Date Variables'].json.date_yesterday }}"}]},"options":{}},"id":"get-page-insights","name":"Get Page Insights with Token","type":"n8n-nodes-base.httpRequest","position":[1000,580],"typeVersion":4.2,"continueOnFail":true},{"parameters":{"language":"javascript"},"id":"process-page-data","name":"Process Page Insights","type":"n8n-nodes-base.code","position":[1200,400],"typeVersion":2},{"parameters":{"operation":"create","databaseId":"YOUR_BASEROW_DATABASE_ID","tableId":"YOUR_BASEROW_TABLE_ID"},"id":"store-in-baserow","name":"Store Page Data in Baserow","type":"n8n-nodes-base.baserow","position":[1400,400],"typeVersion":1},{"parameters":{},"id":"success-notification","name":"Success - All Pages Complete","type":"n8n-nodes-base.noOp","position":[1600,400],"typeVersion":1}],"connections":{"Manual Trigger":{"main":[[{"node":"Set Date Variables","type":"main","index":0}]]},"Store Page Data in Baserow":{"main":[[{"node":"Success - All Pages Complete","type":"main","index":0}]]},"Process Page Insights":{"main":[[{"node":"Store Page Data in Baserow","type":"main","index":0}]]},"Get Page Insights with Token":{"main":[[{"node":"Get All Your 27 Pages","type":"main","index":0}]]},"Loop Through All Pages":{"main":[[],[{"node":"Get Page Insights with Token","type":"main","index":0}]]},"Set Date Variables":{"main":[[{"node":"Get All Your 27 Pages","type":"main","index":0}]]},"Get All Your 27 Pages":{"main":[[{"node":"Loop Through All Pages","type":"main","index":0}]]},"Daily Insights Schedule":{"main":[[{"node":"Set Date Variables","type":"main","index":0}]]}},"settings":{"executionOrder":"v1","timezone":"America/New_York","saveDataErrorExecution":"all","saveDataSuccessExecution":"all","saveManualExecutions":true},"staticData":null,"meta":null,"pinData":{},"versionId":"c98fd509-4bbf-4daa-b1c5-65f050b90f7b","triggerCount":0,"shared":[{"createdAt":"2025-09-01T08:21:05.975Z","updatedAt":"2025-09-01T08:21:05.975Z","role":"workflow:owner","workflowId":"tGi0Dvw5GmMBUvCv","projectId":"pRXFeKq9D8e0hAOx"}],"tags":[]},{"createdAt":"2025-07-03T04:19:00.581Z","updatedAt":"2025-07-22T03:03:24.000Z","id":"tqHWzaUMtnxEWdGT","name":"Content Creation","active":false,"isArchived":false,"nodes":[{"parameters":{"authentication":"airtableOAuth2Api","base":{"__rl":true,"value":"appQoW8tY1s6ceKOV","mode":"list","cachedResultName":"Ebiexperts","cachedResultUrl":"https://airtable.com/appQoW8tY1s6ceKOV"},"table":{"__rl":true,"value":"tblVPzmyb3l45S0Sx","mode":"list","cachedResultName":"Content Focus Plan","cachedResultUrl":"https://airtable.com/appQoW8tY1s6ceKOV/tblVPzmyb3l45S0Sx"},"id":"={{ $json.recordId }}","options":{}},"type":"n8n-nodes-base.airtable","typeVersion":2.1,"position":[2560,1020],"id":"735962de-c4fa-4126-aa84-ecd934c66ccd","name":"Get Campaign Data","credentials":{"airtableOAuth2Api":{"id":"pOcHNkax3d1V3xqS","name":"Airtable VS Sport"}}},{"parameters":{"jsCode":"// PLATFORM-AWARE CONTENT ANGLE RANDOMIZER\n// Selects content angles based on both industry and platform\n\nconst inputData = $input.first().json;\nconst platformData = $('Process Form Data').first().json;\nconst executionId = $execution.id || Date.now();\n\nconsole.log('=== PLATFORM-AWARE CONTENT ANGLE RANDOMIZER ===');\nconsole.log('Processing campaign data for:', inputData.Business_Name);\nconsole.log('Target platform:', platformData.selected_platform);\nconsole.log('Platform field:', platformData.platform_field);\n\n// PLATFORM-SPECIFIC ANGLE PREFERENCES\nconst platformAngleMap = {\n  'LinkedIn': {\n    preferred_angles: [\n      'data_detective', 'industry_insider', 'competitive_analyst', 'future_prophet',\n      'mentor_guide', 'success_decoder', 'problem_solver'\n    ],\n    avoid_angles: ['experience_storyteller'], // Too personal for LinkedIn\n    platform_focus: 'professional_authority'\n  },\n  \n  'Facebook': {\n    preferred_angles: [\n      'experience_storyteller', 'problem_solver', 'simplicity_advocate', \n      'mentor_guide', 'success_decoder', 'trend_spotter'\n    ],\n    avoid_angles: ['data_detective', 'competitive_analyst'], // Too analytical for Facebook\n    platform_focus: 'relatable_helpful'\n  },\n  \n  'Instagram': {\n    preferred_angles: [\n      'experience_storyteller', 'trend_spotter', 'innovation_evangelist',\n      'simplicity_advocate', 'success_decoder', 'future_prophet'\n    ],\n    avoid_angles: ['data_detective', 'industry_insider'], // Too technical for Instagram\n    platform_focus: 'visual_inspiring'\n  },\n  \n  'X': {\n    preferred_angles: [\n      'contrarian_disruptor', 'trend_spotter', 'risk_revealer', 'future_prophet',\n      'competitive_analyst', 'innovation_evangelist'\n    ],\n    avoid_angles: ['mentor_guide'], // Too lengthy for X\n    platform_focus: 'quick_impactful'\n  },\n  \n  'Email': {\n    preferred_angles: [\n      'mentor_guide', 'industry_insider', 'problem_solver', 'success_decoder',\n      'data_detective', 'competitive_analyst', 'risk_revealer'\n    ],\n    avoid_angles: [], // Email can handle all angles\n    platform_focus: 'detailed_consultative'\n  },\n  \n  'Medium': {\n    preferred_angles: [\n      'data_detective', 'industry_insider', 'competitive_analyst', 'future_prophet',\n      'success_decoder', 'innovation_evangelist'\n    ],\n    avoid_angles: ['simplicity_advocate'], // Medium expects depth\n    platform_focus: 'deep_analytical'\n  }\n};\n\n// INDUSTRY ANGLE MAPPING (existing logic)\nconst industryAngleMap = {\n  'Software/SaaS': {\n    preferred_angles: [\n      'data_detective', 'future_prophet', 'industry_insider', 'problem_solver',\n      'competitive_analyst', 'risk_revealer', 'innovation_evangelist', 'success_decoder'\n    ],\n    avoid_angles: [],\n    b2b_focus: true\n  },\n  \n  'Automotive': {\n    preferred_angles: [\n      'experience_storyteller', 'problem_solver', 'trend_spotter', 'cost_calculator',\n      'simplicity_advocate', 'mistake_preventer', 'success_decoder'\n    ],\n    avoid_angles: ['data_detective', 'industry_insider'],\n    b2b_focus: false\n  },\n  \n  'Professional Services': {\n    preferred_angles: [\n      'industry_insider', 'mentor_guide', 'risk_revealer', 'competitive_analyst',\n      'success_decoder', 'mistake_preventer', 'problem_solver'\n    ],\n    avoid_angles: ['innovation_evangelist'],\n    b2b_focus: true\n  },\n  \n  'Default': {\n    preferred_angles: [\n      'problem_solver', 'experience_storyteller', 'success_decoder', 'trend_spotter',\n      'cost_calculator', 'simplicity_advocate', 'mistake_preventer'\n    ],\n    avoid_angles: ['data_detective', 'industry_insider'],\n    b2b_focus: false\n  }\n};\n\n// FULL CONTENT ANGLES ARRAY\nconst contentAngles = [\n  { angle: 'contrarian_disruptor', mood: 'boldly_challenging', hook_pattern: 'Everyone in [industry] thinks [X], but here\\'s why they\\'re completely wrong', psychology: 'pattern_disruption', narrative: 'myth_busting' },\n  { angle: 'data_detective', mood: 'analytically_curious', hook_pattern: 'I analyzed [number] [implementations/companies] and discovered something shocking', psychology: 'curiosity_gap', narrative: 'investigation_reveal' },\n  { angle: 'future_prophet', mood: 'visionary_confident', hook_pattern: 'Here\\'s exactly what [industry] will look like in [timeframe]', psychology: 'future_focus', narrative: 'prediction_story' },\n  { angle: 'industry_insider', mood: 'exclusively_revealing', hook_pattern: 'What [industry] leaders discuss privately but won\\'t say publicly', psychology: 'insider_knowledge', narrative: 'behind_scenes' },\n  { angle: 'problem_solver', mood: 'pragmatically_helpful', hook_pattern: 'Finally solved: The [specific problem] that\\'s been plaguing [audience]', psychology: 'solution_relief', narrative: 'problem_solution' },\n  { angle: 'trend_spotter', mood: 'observationally_sharp', hook_pattern: 'Three signals that [trend] is happening faster than anyone expected', psychology: 'trend_awareness', narrative: 'signal_detection' },\n  { angle: 'experience_storyteller', mood: 'vulnerably_honest', hook_pattern: 'What I learned after [specific experience] that changed everything', psychology: 'vicarious_learning', narrative: 'transformation_journey' },\n  { angle: 'competitive_analyst', mood: 'strategically_insightful', hook_pattern: 'Why [competitor/common approach] is actually helping companies lose [outcome]', psychology: 'competitive_intelligence', narrative: 'strategic_analysis' },\n  { angle: 'cost_calculator', mood: 'financially_focused', hook_pattern: 'The hidden cost of [common practice] is absolutely staggering', psychology: 'financial_impact', narrative: 'cost_revelation' },\n  { angle: 'efficiency_optimizer', mood: 'systematically_practical', hook_pattern: 'How to achieve [outcome] in [short timeframe] instead of [long timeframe]', psychology: 'efficiency_desire', narrative: 'optimization_guide' },\n  { angle: 'risk_revealer', mood: 'cautiously_protective', hook_pattern: 'The [practice/tool] that\\'s quietly putting your [asset] at serious risk', psychology: 'risk_aversion', narrative: 'warning_story' },\n  { angle: 'innovation_evangelist', mood: 'excitedly_forward_thinking', hook_pattern: 'This breakthrough technology changes everything for [audience]', psychology: 'innovation_excitement', narrative: 'breakthrough_announcement' },\n  { angle: 'simplicity_advocate', mood: 'clarifyingly_direct', hook_pattern: 'Stop overcomplicating [process/solution]. Here\\'s the simple truth', psychology: 'simplicity_relief', narrative: 'complexity_reduction' },\n  { angle: 'success_decoder', mood: 'analytically_revealing', hook_pattern: 'I analyzed [number] successful [implementations] and found the hidden pattern', psychology: 'success_modeling', narrative: 'pattern_discovery' },\n  { angle: 'mistake_preventer', mood: 'protectively_wise', hook_pattern: '[X]% of [audience] make this costly mistake. Here\\'s how to avoid it', psychology: 'mistake_avoidance', narrative: 'prevention_guide' },\n  { angle: 'mentor_guide', mood: 'wisely_protective', hook_pattern: 'After [X years] in [industry], here\\'s what I wish someone had told me', psychology: 'mentorship', narrative: 'wisdom_sharing' }\n];\n\nfunction selectPlatformAndIndustryAppropriateAngle(platform, clientIndustry, executionId, week) {\n  console.log(`🎯 Selecting angle for ${platform} in ${clientIndustry} industry`);\n  \n  // Get platform and industry configurations\n  const platformConfig = platformAngleMap[platform] || platformAngleMap['LinkedIn'];\n  const industryConfig = industryAngleMap[clientIndustry] || industryAngleMap['Default'];\n  \n  console.log(`📱 Platform preferred: ${platformConfig.preferred_angles.join(', ')}`);\n  console.log(`🏭 Industry preferred: ${industryConfig.preferred_angles.join(', ')}`);\n  \n  // Find intersection of platform and industry preferences\n  const platformPreferred = new Set(platformConfig.preferred_angles);\n  const industryPreferred = new Set(industryConfig.preferred_angles);\n  const platformAvoid = new Set(platformConfig.avoid_angles);\n  const industryAvoid = new Set(industryConfig.avoid_angles);\n  \n  // Get angles that work for BOTH platform and industry\n  const suitableAngles = industryConfig.preferred_angles.filter(angle => \n    platformPreferred.has(angle) && \n    !platformAvoid.has(angle) && \n    !industryAvoid.has(angle)\n  );\n  \n  console.log(`✅ Suitable angles for ${platform} + ${clientIndustry}: ${suitableAngles.join(', ')}`);\n  \n  // If no perfect intersection, prioritize platform over industry\n  const finalAngles = suitableAngles.length > 0 ? suitableAngles : \n    platformConfig.preferred_angles.filter(angle => !industryAvoid.has(angle));\n  \n  if (finalAngles.length === 0) {\n    console.log('⚠️ No suitable angles found, using platform defaults');\n    finalAngles.push(...platformConfig.preferred_angles.slice(0, 3));\n  }\n  \n  console.log(`🎲 Final angle pool: ${finalAngles.join(', ')}`);\n  \n  // Select from suitable angles using uniqueness logic\n  const combinedSeed = parseInt(executionId.toString().slice(-4)) + (week || 1);\n  const angleIndex = combinedSeed % finalAngles.length;\n  const selectedAngleName = finalAngles[angleIndex];\n  \n  // Get the full angle object\n  const selectedAngle = contentAngles.find(angle => angle.angle === selectedAngleName);\n  \n  console.log(`🎯 Selected: ${selectedAngleName} (${selectedAngle.mood})`);\n  \n  return {\n    ...selectedAngle,\n    platform_appropriate: true,\n    industry_appropriate: true,\n    platform_config: platformConfig,\n    industry_config: industryConfig,\n    available_count: finalAngles.length,\n    selection_rationale: `Optimized for ${platform} ${platformConfig.platform_focus} style in ${clientIndustry} context`\n  };\n}\n\n// MAIN PROCESSING\ntry {\n  const clientIndustry = inputData.Industry || 'Default';\n  const targetPlatform = platformData.selected_platform;\n  const weekNumber = inputData.Week || 1;\n  \n  // Select platform and industry appropriate angle\n  const selectedAngle = selectPlatformAndIndustryAppropriateAngle(\n    targetPlatform, \n    clientIndustry, \n    executionId, \n    weekNumber\n  );\n  \n  // Generate uniqueness seed\n  const uniquenessSeed = executionId + weekNumber + clientIndustry.replace(/\\s+/g, '') + targetPlatform;\n  \n  // Create enhanced campaign data with platform awareness\n  const enhancedCampaignData = {\n    ...inputData,\n    \n    // Platform data from form\n    platform_data: platformData,\n    \n    // Selected content angle (now platform-aware)\n    content_angle: selectedAngle,\n    \n    // Platform context\n    platform_context: {\n      target_platform: targetPlatform,\n      platform_field: platformData.platform_field,\n      platform_config: platformData.platform_config,\n      platform_focus: selectedAngle.platform_config.platform_focus,\n      character_limits: platformData.platform_config.character_limit\n    },\n    \n    // Industry context (existing)\n    industry_context: {\n      industry: clientIndustry,\n      b2b_focus: selectedAngle.industry_config.b2b_focus,\n      angle_pool_size: selectedAngle.available_count,\n      industry_appropriate: true\n    },\n    \n    // Customization for uniqueness\n    customization: {\n      execution_id: executionId,\n      week_number: weekNumber,\n      uniqueness_seed: uniquenessSeed,\n      selection_timestamp: new Date().toISOString(),\n      platform_optimized: true\n    },\n    \n    // Processing metadata\n    processing_metadata: {\n      stage: 'platform_aware_angle_selected',\n      client: inputData.Business_Name,\n      product: inputData.Product,\n      angle_selected: selectedAngle.angle,\n      platform_adapted: true,\n      industry_adapted: true,\n      ready_for_research: true,\n      target_platform: targetPlatform,\n      content_source_field: platformData.platform_field\n    }\n  };\n  \n  console.log(`📱 Platform: ${targetPlatform} (${selectedAngle.platform_config.platform_focus})`)\n  console.log(`🏭 Industry: ${clientIndustry} (${selectedAngle.industry_config.b2b_focus ? 'B2B' : 'B2C'})`)\n  console.log(`🎯 Selected: ${selectedAngle.angle} from ${selectedAngle.available_count} suitable angles`)\n  console.log(`🎲 Uniqueness Seed: ${uniquenessSeed}`)\n  console.log(`📊 Character limits: ${platformData.platform_config.character_limit.min}-${platformData.platform_config.character_limit.max}`)\n  console.log(`✅ Ready for platform-aware research phase`)\n  \n  return { json: enhancedCampaignData };\n  \n} catch (error) {\n  console.error('❌ Platform-aware angle selection failed:', error.message);\n  \n  return {\n    json: {\n      error: true,\n      errorMessage: error.message,\n      originalData: inputData,\n      platformData: platformData,\n      processing_stage: 'platform_aware_angle_selection_failed'\n    }\n  };\n}"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[2760,1020],"id":"e3f35078-8767-4d4e-97f9-71c3c92c7541","name":"1. Content Angle Randomizer"},{"parameters":{"jsCode":"// PERSONALITY MODIFIER AGENT - FIXED DATA FLOW\n// Gets original campaign data from the correct source\n\nconst researchData = $input.first().json; // Research data from Industry Research Agent\nconst originalCampaignData = $('1. Content Angle Randomizer').first().json; // Original campaign data\n\nconsole.log('=== PERSONALITY MODIFIER AGENT (FIXED DATA FLOW) ===');\nconsole.log('Research data received:', !!researchData.text);\nconsole.log('Original campaign data received:', !!originalCampaignData);\nconsole.log('Original campaign data keys:', Object.keys(originalCampaignData));\n\n// Extract and parse research data\nfunction extractResearchData(researchOutput) {\n  if (!researchOutput || !researchOutput.text) {\n    console.log('❌ No research text found');\n    return {};\n  }\n  \n  try {\n    let textContent = researchOutput.text;\n    console.log('📝 Research text length:', textContent.length);\n    \n    // Extract JSON from markdown code blocks\n    const jsonMatch = textContent.match(/```json\\s*\\n?([^`]+)\\s*\\n?```/s);\n    \n    if (jsonMatch) {\n      console.log('✅ Found research JSON in markdown');\n      const jsonText = jsonMatch[1].trim();\n      return JSON.parse(jsonText);\n    }\n    \n    console.log('❌ No markdown JSON found in research');\n    return {};\n    \n  } catch (error) {\n    console.error('❌ Failed to parse research JSON:', error.message);\n    return {};\n  }\n}\n\n// Enhanced data extraction using original campaign data\nfunction extractClientData(campaignData) {\n  console.log('🔍 === EXTRACTING FROM ORIGINAL CAMPAIGN DATA ===');\n  console.log('Campaign data keys:', Object.keys(campaignData));\n  \n  // Direct extraction from campaign data\n  const company = campaignData.Business_Name || campaignData.business_name || 'Unknown Company';\n  const product = campaignData.Product || campaignData.product || 'Unknown Product';\n  const industry = campaignData.Industry || campaignData.industry || 'Software/SaaS';\n  const uvp = campaignData.UVP || campaignData.uvp || 'UVP not specified';\n  \n  console.log('📊 === EXTRACTION RESULTS ===');\n  console.log('Company:', company);\n  console.log('Product:', product);\n  console.log('Industry:', industry);\n  console.log('UVP:', uvp ? (uvp.length > 100 ? uvp.substring(0, 100) + '...' : uvp) : 'Not found');\n  \n  return {\n    company: company,\n    product: product,\n    industry: industry,\n    uvp: uvp\n  };\n}\n\n// Extract all required fields from original campaign data\nfunction extractAllFields(campaignData) {\n  console.log('🔍 === EXTRACTING ALL FIELDS FROM CAMPAIGN DATA ===');\n  \n  const basic = extractClientData(campaignData);\n  \n  // Extract technical capabilities\n  const techCap1 = campaignData['Technical Capabilities Extracted'] || '';\n  const techCap2 = campaignData['Supported Systems'] || '';\n  const techCap3 = campaignData['Performance Specifications'] || '';\n  \n  const technical_capabilities = [techCap1, techCap2, techCap3]\n    .filter(Boolean)\n    .join(' | ')\n    .split(' | ')\n    .filter(Boolean);\n  \n  console.log('🔧 Technical capabilities found:', technical_capabilities);\n  \n  const result = {\n    ...basic,\n    \n    // Technical capabilities\n    technical_capabilities: technical_capabilities,\n    \n    // Core campaign fields\n    pain_point: campaignData.Pain_Point || campaignData.pain_point || 'business challenges',\n    solution_feature: campaignData.Solution_Feature || campaignData.solution_feature || 'innovative solutions',\n    target_audience: campaignData.Target_Audience || campaignData.target_audience || 'business professionals',\n    competitive_advantages: campaignData['Competitive Advantages'] || campaignData.competitive_advantages || 'competitive advantages',\n    \n    // Campaign context\n    week: campaignData.Week || campaignData.week || 1,\n    status: campaignData.Status || campaignData.status || 'Active',\n    objective: campaignData.Objective || campaignData.objective || 'General engagement'\n  };\n  \n  console.log('📋 All fields extracted from campaign data:', {\n    company: result.company,\n    product: result.product,\n    technical_count: result.technical_capabilities.length,\n    pain_point: result.pain_point.substring(0, 50) + '...',\n    target_audience: result.target_audience\n  });\n  \n  return result;\n}\n\n// 7 Distinct Personality Modes for Voice Variation\nconst personalityModes = {\n  'analytical_expert': {\n    traits: ['data-driven', 'methodical', 'evidence-focused', 'precise'],\n    language_style: 'precise and statistical with concrete metrics',\n    approach: 'numbers and data tell the complete story',\n    engagement_style: 'invites data sharing and analytical discussion',\n    authority_demonstration: 'through rigorous research and quantified results',\n    sentence_preference: 'structured with statistics and specific examples'\n  },\n  'passionate_advocate': {\n    traits: ['enthusiastic', 'conviction-driven', 'emotionally engaged', 'inspiring'],\n    language_style: 'energetic and compelling with strong conviction',\n    approach: 'emotion and passion drive meaningful action',\n    engagement_style: 'challenges others and inspires change',\n    authority_demonstration: 'through passionate expertise and transformational results',\n    sentence_preference: 'dynamic with strong statements and calls to action'\n  },\n  'skeptical_challenger': {\n    traits: ['questioning', 'contrarian', 'devil\\'s advocate', 'truth-seeking'],\n    language_style: 'challenging and provocative yet professional',\n    approach: 'questions everything and challenges assumptions',\n    engagement_style: 'invites debate and thoughtful disagreement',\n    authority_demonstration: 'through challenging conventional wisdom with evidence',\n    sentence_preference: 'questioning structure with contrarian observations'\n  },\n  'pragmatic_implementer': {\n    traits: ['practical', 'solution-focused', 'implementation-oriented', 'results-driven'],\n    language_style: 'direct and actionable with clear steps',\n    approach: 'focuses on what actually works in practice',\n    engagement_style: 'seeks practical experiences and implementation insights',\n    authority_demonstration: 'through proven implementations and practical results',\n    sentence_preference: 'direct and actionable with implementation focus'\n  },\n  'visionary_leader': {\n    traits: ['forward-thinking', 'big-picture', 'transformational', 'strategic'],\n    language_style: 'inspiring and future-focused with strategic insight',\n    approach: 'focuses on where the industry is heading',\n    engagement_style: 'explores future possibilities and strategic implications',\n    authority_demonstration: 'through industry vision and strategic foresight',\n    sentence_preference: 'expansive with future-focused strategic insights'\n  },\n  'mentor_guide': {\n    traits: ['guidance-focused', 'experience-sharing', 'protective', 'wisdom-oriented'],\n    language_style: 'wise and supportive with protective guidance',\n    approach: 'learning from experience and sharing hard-won insights',\n    engagement_style: 'offers advice and warns about common pitfalls',\n    authority_demonstration: 'through battle-tested experience and mentorship',\n    sentence_preference: 'guidance-oriented with protective wisdom sharing'\n  },\n  'investigative_detective': {\n    traits: ['curious', 'detail-oriented', 'truth-seeking', 'analytical'],\n    language_style: 'exploratory and revealing with investigative depth',\n    approach: 'uncovering hidden truths and revealing insights',\n    engagement_style: 'invites investigation and collaborative discovery',\n    authority_demonstration: 'through deep research and investigative insights',\n    sentence_preference: 'investigative with discovery-focused revelations'\n  }\n};\n\n// Select personality mode based on angle and uniqueness seed\nfunction selectPersonalityMode(angle, uniquenessSeed) {\n  const modeKeys = Object.keys(personalityModes);\n  const seedValue = parseInt(uniquenessSeed) || 1;\n  const modeIndex = seedValue % modeKeys.length;\n  return modeKeys[modeIndex];\n}\n\n// Extract research data from the research agent output\nconst extractedResearch = extractResearchData(researchData);\nconsole.log('✅ Research data extracted:', !!extractedResearch.angle_research);\n\n// Select personality mode based on angle and uniqueness seed from original campaign data\nconst selectedMode = selectPersonalityMode(\n  originalCampaignData.content_angle?.angle,\n  originalCampaignData.customization?.uniqueness_seed\n);\n\nconst personalityProfile = personalityModes[selectedMode];\n\n// Extract all client context from original campaign data\nconst clientContext = extractAllFields(originalCampaignData);\n\nconsole.log('✅ === FINAL EXTRACTED CLIENT CONTEXT ===');\nconsole.log('Company:', clientContext.company);\nconsole.log('Product:', clientContext.product);\nconsole.log('Industry:', clientContext.industry);\nconsole.log('UVP:', clientContext.uvp.substring(0, 100));\nconsole.log('Technical capabilities count:', clientContext.technical_capabilities.length);\nconsole.log('Technical capabilities:', clientContext.technical_capabilities);\nconsole.log('Pain point:', clientContext.pain_point);\nconsole.log('Solution feature:', clientContext.solution_feature);\nconsole.log('Target audience:', clientContext.target_audience);\nconsole.log('Week:', clientContext.week);\nconsole.log('Status:', clientContext.status);\nconsole.log('Objective:', clientContext.objective);\n\n// Validation check\nconst extractionSuccessful = clientContext.company !== 'Unknown Company' && clientContext.product !== 'Unknown Product';\n\nconsole.log('🔍 === EXTRACTION SUCCESS ANALYSIS ===');\nconsole.log('Expected to find: Business_Name, Product, Industry, etc.');\nconsole.log('Actually found:');\nconsole.log('- Company extraction successful:', clientContext.company !== 'Unknown Company');\nconsole.log('- Product extraction successful:', clientContext.product !== 'Unknown Product');\nconsole.log('- Industry extraction successful:', clientContext.industry !== 'Software/SaaS');\nconsole.log('- Technical capabilities found:', clientContext.technical_capabilities.length > 0);\nconsole.log('- Overall extraction success:', extractionSuccessful);\n\n// Create comprehensive voice profile\nconst voiceProfile = {\n  personality_mode: selectedMode,\n  personality_traits: personalityProfile.traits,\n  language_style: personalityProfile.language_style,\n  approach_focus: personalityProfile.approach,\n  engagement_style: personalityProfile.engagement_style,\n  authority_demonstration: personalityProfile.authority_demonstration,\n  sentence_preference: personalityProfile.sentence_preference,\n  \n  // Client-specific expertise integration\n  expertise_context: {\n    primary_expertise: clientContext.technical_capabilities[0] || 'data protection solutions',\n    secondary_expertise: clientContext.technical_capabilities[1] || 'backup technology',\n    company_focus: clientContext.company,\n    product_specialization: clientContext.product,\n    industry_specialization: clientContext.industry,\n    pain_point_knowledge: clientContext.pain_point,\n    solution_expertise: clientContext.solution_feature,\n    audience_understanding: clientContext.target_audience,\n    competitive_positioning: clientContext.competitive_advantages,\n    value_proposition: clientContext.uvp\n  },\n  \n  // Mode-specific content approaches\n  content_approach: {\n    opening_style: selectedMode.includes('analytical') ? 'Lead with data and research findings' :\n                   selectedMode.includes('passionate') ? 'Open with compelling conviction and energy' :\n                   selectedMode.includes('skeptical') ? 'Challenge conventional thinking immediately' :\n                   selectedMode.includes('pragmatic') ? 'Focus on practical implementation from start' :\n                   selectedMode.includes('visionary') ? 'Begin with future-focused strategic insight' :\n                   selectedMode.includes('mentor') ? 'Share protective wisdom and guidance' :\n                   'Reveal investigative insights and discoveries',\n    \n    credibility_building: selectedMode.includes('analytical') ? 'Reference specific studies, metrics, and quantified results' :\n                         selectedMode.includes('passionate') ? 'Share transformation stories and passionate expertise' :\n                         selectedMode.includes('skeptical') ? 'Challenge assumptions with contradictory evidence' :\n                         selectedMode.includes('pragmatic') ? 'Cite successful implementations and practical results' :\n                         selectedMode.includes('visionary') ? 'Demonstrate strategic foresight and industry vision' :\n                         selectedMode.includes('mentor') ? 'Reference deep experience and hard-learned lessons' :\n                         'Present investigative findings and hidden insights',\n    \n    engagement_question: selectedMode.includes('analytical') ? 'What data and metrics are you seeing in your implementations?' :\n                        selectedMode.includes('passionate') ? 'Who else is ready to make this critical transformation?' :\n                        selectedMode.includes('skeptical') ? 'What industry assumptions should we be questioning more?' :\n                        selectedMode.includes('pragmatic') ? 'What practical approaches are actually working for you?' :\n                        selectedMode.includes('visionary') ? 'Where do you see these trends taking us in the next 2 years?' :\n                        selectedMode.includes('mentor') ? 'What costly mistakes have you seen teams make in this area?' :\n                        'What patterns and insights have you uncovered in your experience?'\n  }\n};\n\n// Create uniqueness tracking using original campaign data\nconst uniquenessProfile = {\n  angle: originalCampaignData.content_angle?.angle,\n  personality: selectedMode,\n  narrative: originalCampaignData.content_angle?.narrative,\n  psychology: originalCampaignData.content_angle?.psychology,\n  client: clientContext.company,\n  week: clientContext.week,\n  unique_hash: `${originalCampaignData.content_angle?.angle}_${selectedMode}_${originalCampaignData.customization?.uniqueness_seed}_${clientContext.company.replace(/\\s+/g, '')}`\n};\n\n// Enhanced data with personality and voice profile - COMBINING ALL DATA\nconst enhancedData = {\n  ...originalCampaignData, // Keep all original campaign data\n  \n  // Add research data\n  angle_research: extractedResearch.angle_research || {},\n  industry_intelligence: extractedResearch.industry_intelligence || {},\n  content_ammunition: extractedResearch.content_ammunition || {},\n  \n  voice_profile: voiceProfile,\n  client_context: clientContext,\n  uniqueness_profile: uniquenessProfile,\n  \n  // Content generation readiness\n  content_readiness: {\n    angle_selected: originalCampaignData.content_angle?.angle,\n    personality_assigned: selectedMode,\n    voice_calibrated: true,\n    expertise_mapped: true,\n    uniqueness_ensured: true,\n    data_source: 'airtable_content_focus_plan',\n    data_extraction_successful: extractionSuccessful,\n    research_data_included: !!extractedResearch.angle_research,\n    fields_found: {\n      company: clientContext.company !== 'Unknown Company',\n      product: clientContext.product !== 'Unknown Product',\n      industry: clientContext.industry !== 'Software/SaaS',\n      technical_capabilities: clientContext.technical_capabilities.length > 0,\n      pain_point: clientContext.pain_point !== 'business challenges',\n      target_audience: clientContext.target_audience !== 'business professionals'\n    }\n  }\n};\n\nconsole.log('🎯 === FINAL PROCESSING RESULTS ===');\nconsole.log(`🎭 Personality Mode: ${selectedMode}`);\nconsole.log(`💬 Language Style: ${personalityProfile.language_style}`);\nconsole.log(`🎯 Authority Demo: ${personalityProfile.authority_demonstration}`);\nconsole.log(`🔑 Primary Expertise: ${voiceProfile.expertise_context.primary_expertise}`);\nconsole.log(`🏢 Company: ${clientContext.company}`);\nconsole.log(`📦 Product: ${clientContext.product}`);\nconsole.log(`🏭 Industry: ${clientContext.industry}`);\nconsole.log(`🎲 Uniqueness Hash: ${uniquenessProfile.unique_hash}`);\nconsole.log(`📋 Technical Capabilities Count: ${clientContext.technical_capabilities.length}`);\nconsole.log(`✅ Data Extraction Success: ${enhancedData.content_readiness.data_extraction_successful}`);\nconsole.log(`📝 Research Data Included: ${enhancedData.content_readiness.research_data_included}`);\n\n// Show detailed field extraction status\nconsole.log('🔍 === DETAILED EXTRACTION STATUS ===');\nObject.entries(enhancedData.content_readiness.fields_found).forEach(([field, found]) => {\n  console.log(`${found ? '✅' : '❌'} ${field}: ${found ? 'Found' : 'Not found'}`);\n});\n\n// Success summary\nif (enhancedData.content_readiness.data_extraction_successful) {\n  console.log('🎉 === EXTRACTION SUCCESS ===');\n  console.log(`✅ Successfully extracted campaign data for ${clientContext.company}`);\n  console.log(`✅ Product: ${clientContext.product}`);\n  console.log(`✅ Research data: ${enhancedData.content_readiness.research_data_included ? 'Included' : 'Missing'}`);\n  console.log(`✅ Ready for content generation with ${selectedMode} personality`);\n} else {\n  console.log('🚨 === EXTRACTION ISSUES ===');\n  console.log('❌ Some core fields are missing. Check campaign data source.');\n  console.log('Available original campaign keys:', Object.keys(originalCampaignData));\n}\n\nreturn { json: enhancedData };"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[4720,940],"id":"1426f2f9-1031-41c0-9d3b-6dc1eab64ba7","name":"3. Personality Modifier"},{"parameters":{"promptType":"define","text":"==🧠 ENGAGEMENT PSYCHOLOGY OPTIMIZER\n\nMISSION: Apply advanced psychological triggers for maximum LinkedIn engagement and viral potential.\n\n=== CRITICAL: TECHNICAL FOCUS PRIORITY ===\nPRIMARY EXPERTISE (Use This First): {{ $json.technical_interpretation.primary_expertise }}\nAUTHORITY CONTEXT: {{ $json.technical_interpretation.authority_context }}\nTECHNICAL CAPABILITIES: {{ $json.technical_interpretation.hook_ready_capabilities }}\n\n=== PSYCHOLOGY CONTEXT ===\nContent Angle: {{ $('1. Content Angle Randomizer').item.json.content_angle.angle }}\nPersonality Mode: {{ $json.voice_profile.personality_mode }}\nPsychology Trigger: {{ $('1. Content Angle Randomizer').item.json.content_angle.psychology }}\nClient: {{ $('1. Content Angle Randomizer').item.json.processing_metadata.client }}\nProduct: {{ $json.client_context.product }}\nTarget Audience: {{ $('1. Content Angle Randomizer').item.json.Target_Audience }}\nBusiness Model: {{ $json.adapted_voice_profile.business_model }}\nIndustry Context: {{ $json.adapted_voice_profile.industry_context }}\n\n=== RESEARCH INTELLIGENCE ===\nResearch Insights: {{ $json.angle_research.primary_insights }}\nSupporting Data: {{ $json.angle_research.supporting_data }}\nUnique Perspective: {{ $json.angle_research.unique_perspective }}\nTiming Relevance: {{ $json.angle_research.timing_relevance }}\nCredibility Builders: {{ $json.content_ammunition.credibility_builders }}\n\n## PSYCHOLOGICAL TRIGGER OPTIMIZATION\n\nBased on \"{{ $('1. Content Angle Randomizer').item.json.content_angle.psychology }}\" trigger with \"{{ $json.voice_profile.personality_mode }}\" personality:\n\n### PRIMARY TECHNICAL FOCUS: {{ $json.technical_interpretation.primary_expertise }}\n\n**CRITICAL INSTRUCTION: All psychology strategies must focus on {{ $json.technical_interpretation.primary_expertise }} as the PRIMARY subject, not secondary database technologies.**\n\n### FUTURE_FOCUS Psychology (Primary):\n- **Early Adopter Appeal**: Position {{ $('1. Content Angle Randomizer').item.json.Target_Audience }} as {{ $json.technical_interpretation.primary_expertise }} leaders\n- **Competitive Advantage**: Show how {{ $json.technical_interpretation.primary_expertise }} creates future advantage\n- **Innovation Status**: Appeal to desire to be ahead in {{ $json.technical_interpretation.primary_expertise }}\n- **Predictive Authority**: Establish credibility through {{ $json.technical_interpretation.primary_expertise }} foresight\n- **FOMO Amplification**: Fear of missing {{ $json.technical_interpretation.primary_expertise }} advancement\n\n### MENTOR_GUIDE Personality Integration:\n- **Protective Wisdom**: \"Don't let your business become another {{ $json.technical_interpretation.primary_expertise }} disaster statistic\"\n- **Experience Authority**: \"In my X years of {{ $json.technical_interpretation.primary_expertise }} implementations...\"\n- **Warning Signals**: \"Here are the warning signs I've seen repeatedly in {{ $json.technical_interpretation.primary_expertise }}...\"\n- **Guidance Framework**: \"Let me share what I've learned the hard way about {{ $json.technical_interpretation.primary_expertise }}...\"\n- **Mistake Prevention**: Share costly errors to avoid in {{ $json.technical_interpretation.primary_expertise }}\n\n### B2B SOFTWARE/SAAS Adaptation:\n- **Decision Committee Appeal**: Content that IT leaders can share upward about {{ $json.technical_interpretation.primary_expertise }}\n- **ROI Focus**: Quantifiable business impact of {{ $json.technical_interpretation.primary_expertise }}\n- **Risk Mitigation**: Enterprise-grade {{ $json.technical_interpretation.primary_expertise }} messaging\n- **Vendor Evaluation**: Position as authoritative voice in {{ $json.technical_interpretation.primary_expertise }}\n- **Implementation Reality**: Honest perspective on {{ $json.technical_interpretation.primary_expertise }} deployment challenges\n\n## VIRAL AMPLIFICATION PSYCHOLOGY\n\n### SHAREABILITY TRIGGERS (B2B Focused):\n- **Professional Status**: Content that makes sharer look informed about {{ $json.technical_interpretation.primary_expertise }}\n- **Industry Authority**: Information demonstrating {{ $('1. Content Angle Randomizer').item.json.processing_metadata.client }} {{ $json.technical_interpretation.primary_expertise }} expertise\n- **Decision Support**: Insights that help {{ $json.adapted_voice_profile.audience_language.decision_makers }} make better {{ $json.technical_interpretation.primary_expertise }} choices\n- **Risk Intelligence**: Protective information about {{ $json.technical_interpretation.primary_expertise }} implementations\n\n### COMMENT GENERATION (Mentor Style):\n- **Experience Validation**: \"What {{ $json.technical_interpretation.primary_expertise }} disasters have you witnessed firsthand?\"\n- **Implementation Stories**: \"How are you handling {{ $json.technical_interpretation.primary_expertise }} in your environment?\"\n- **Vendor Experiences**: \"What's been your experience with {{ $json.technical_interpretation.primary_expertise }} vendors?\"\n- **Lesson Sharing**: \"What hard lessons have you learned about {{ $json.technical_interpretation.primary_expertise }}?\"\n\n### ENGAGEMENT OPTIMIZATION:\n- **Reciprocity Principle**: Provide significant {{ $json.technical_interpretation.primary_expertise }} value first\n- **Authority Positioning**: Establish {{ $('1. Content Angle Randomizer').item.json.processing_metadata.client }} credibility through {{ $json.technical_interpretation.primary_expertise }}\n- **Social Proof Integration**: Reference {{ $json.angle_research.supporting_data }} peer behaviors in {{ $json.technical_interpretation.primary_expertise }}\n- **Commitment Consistency**: Invite public responses about {{ $json.technical_interpretation.primary_expertise }} strategies\n\n## PERSONALITY-PSYCHOLOGY ALIGNMENT\n\n**{{ $json.voice_profile.personality_mode }}** delivering **{{ $('1. Content Angle Randomizer').item.json.content_angle.psychology }}**:\n- **Voice Adaptation**: {{ $json.voice_profile.language_style }}\n- **Authority Method**: {{ $json.voice_profile.authority_demonstration }}\n- **Engagement Approach**: {{ $json.voice_profile.engagement_style }}\n- **Content Structure**: {{ $json.voice_profile.sentence_preference }}\n- **Industry Language**: {{ $json.adapted_voice_profile.language_focus }}\n\n## TECHNICAL AUTHORITY PSYCHOLOGY\n\n### {{ $json.technical_interpretation.primary_expertise }} Authority Building:\n- **Specific Expertise**: Demonstrate deep knowledge of {{ $json.technical_interpretation.primary_expertise }}\n- **Implementation Experience**: Reference actual {{ $json.technical_interpretation.primary_expertise }} deployment challenges and solutions\n- **Performance Metrics**: Use {{ $json.angle_research.supporting_data }} to establish {{ $json.technical_interpretation.primary_expertise }} credibility\n- **Vendor Relationships**: Leverage {{ $json.content_ammunition.credibility_builders }} in {{ $json.technical_interpretation.primary_expertise }}\n- **Problem-Solution Mapping**: Connect {{ $json.technical_interpretation.primary_expertise }} capabilities to business outcomes\n\n### Credibility Signals for {{ $json.adapted_voice_profile.business_model }}:\n- **Enterprise Experience**: \"Having implemented {{ $json.technical_interpretation.primary_expertise }} across 50+ enterprise environments...\"\n- **Vendor Partnerships**: \"Through our work with {{ $json.technical_interpretation.primary_expertise }}, we've discovered...\"\n- **Performance Data**: Reference specific {{ $json.technical_interpretation.primary_expertise }} metrics from {{ $json.angle_research.supporting_data }}\n- **Industry Recognition**: Establish thought leadership in {{ $json.technical_interpretation.primary_expertise }}\n\n## OUTPUT FORMAT\n\n```json\n{\n  \"psychology_strategy\": {\n    \"primary_trigger\": \"{{ $('1. Content Angle Randomizer').item.json.content_angle.psychology }}\",\n    \"personality_alignment\": \"{{ $json.voice_profile.personality_mode }}\",\n    \"target_emotion\": \"protective urgency combined with forward-thinking confidence about {{ $json.technical_interpretation.primary_expertise }}\",\n    \"engagement_mechanics\": [\n      \"{{ $json.technical_interpretation.primary_expertise }}-focused authority positioning\",\n      \"protective mentorship wisdom about {{ $json.technical_interpretation.primary_expertise }}\",\n      \"{{ $json.technical_interpretation.primary_expertise }} credibility demonstration\",\n      \"{{ $json.technical_interpretation.primary_expertise }} implementation experience sharing\"\n    ],\n    \"authority_positioning\": \"Experienced {{ $json.technical_interpretation.primary_expertise }} mentor protecting businesses from costly mistakes\",\n    \"shareability_psychology\": \"Professional {{ $json.technical_interpretation.primary_expertise }} intelligence that {{ $json.adapted_voice_profile.audience_language.decision_makers }} need to know\"\n  },\n  \"viral_optimization\": {\n    \"hook_psychology\": \"Future prediction that creates professional FOMO about {{ $json.technical_interpretation.primary_expertise }}\",\n    \"curiosity_creation\": [\n      \"Specific predictions about {{ $json.technical_interpretation.primary_expertise }} evolution\",\n      \"Warning signals about current {{ $json.technical_interpretation.primary_expertise }} approaches\",\n      \"Hidden costs of delayed {{ $json.technical_interpretation.primary_expertise }} adoption\"\n    ],\n    \"social_proof_strategy\": \"Reference {{ $json.angle_research.supporting_data }} and {{ $json.technical_interpretation.primary_expertise }} peer validation\",\n    \"controversy_calibration\": \"Challenge conventional {{ $json.technical_interpretation.primary_expertise }} wisdom while maintaining protective mentor tone\",\n    \"value_demonstration\": \"Specific {{ $json.technical_interpretation.primary_expertise }} insights that prevent costly mistakes\"\n  },\n  \"engagement_drivers\": {\n    \"comment_triggers\": [\n      \"Experience validation questions about {{ $json.technical_interpretation.primary_expertise }} disasters\",\n      \"{{ $json.technical_interpretation.primary_expertise }} implementation challenge discussions\",\n      \"{{ $json.technical_interpretation.primary_expertise }} vendor comparison experiences\",\n      \"Hard-learned lesson sharing about {{ $json.technical_interpretation.primary_expertise }}\"\n    ],\n    \"discussion_starters\": [\n      \"What {{ $json.technical_interpretation.primary_expertise }} disasters have shaped your approach?\",\n      \"How are you preparing for the {{ $json.angle_research.timing_relevance }} in {{ $json.technical_interpretation.primary_expertise }}?\",\n      \"What's your experience with {{ $json.technical_interpretation.primary_expertise }} vs traditional solutions?\"\n    ],\n    \"experience_invitations\": [\n      \"Share your {{ $json.technical_interpretation.primary_expertise }} war stories\",\n      \"What costly {{ $json.technical_interpretation.primary_expertise }} mistakes have you witnessed?\",\n      \"How has your {{ $json.technical_interpretation.primary_expertise }} strategy evolved?\"\n    ],\n    \"expertise_opportunities\": [\n      \"Technical validation of {{ $json.technical_interpretation.primary_expertise }} approaches\",\n      \"{{ $json.technical_interpretation.primary_expertise }} implementation best practice sharing\",\n      \"{{ $json.technical_interpretation.primary_expertise }} vendor evaluation criteria discussions\"\n    ]\n  },\n  \"linkedin_optimization\": {\n    \"scroll_stopping_elements\": [\n      \"Specific future predictions about {{ $json.technical_interpretation.primary_expertise }}\",\n      \"Protective warnings about {{ $json.technical_interpretation.primary_expertise }} disasters\",\n      \"Quantified {{ $json.technical_interpretation.primary_expertise }} benefits from {{ $json.angle_research.supporting_data }}\"\n    ],\n    \"algorithm_triggers\": [\n      \"{{ $json.technical_interpretation.primary_expertise }}-specific professional discussions\",\n      \"{{ $json.technical_interpretation.primary_expertise }} technical authority demonstration\",\n      \"Experience-based mentorship content about {{ $json.technical_interpretation.primary_expertise }}\",\n      \"Forward-looking {{ $json.technical_interpretation.primary_expertise }} insights\"\n    ],\n    \"professional_value\": \"Actionable {{ $json.technical_interpretation.primary_expertise }} intelligence that protects {{ $json.adapted_voice_profile.audience_language.decision_makers }} from costly mistakes\",\n    \"network_amplification\": \"Content spreads as protective {{ $json.technical_interpretation.primary_expertise }} intelligence that {{ $json.adapted_voice_profile.audience_language.decision_makers }} share to protect their networks\"\n  }\n}\n```\n\n**Optimize for {{ $('1. Content Angle Randomizer').item.json.content_angle.psychology }} psychological trigger delivered through {{ $json.voice_profile.personality_mode }} personality for maximum {{ $('1. Content Angle Randomizer').item.json.Target_Audience }} engagement on LinkedIn, leveraging {{ $json.technical_interpretation.primary_expertise }} authority.**\n\n## CRITICAL OUTPUT REQUIREMENT\n\n**YOU MUST RESPOND ONLY WITH THE JSON STRUCTURE - NO ADDITIONAL TEXT OR EXPLANATIONS**\n\n**DO NOT include any explanatory text, analysis, or LinkedIn post content. ONLY return the JSON structure above.**","messages":{"messageValues":[{"message":"=You are an advanced engagement psychology specialist who applies proven psychological principles to maximize professional content virality and meaningful LinkedIn engagement."}]}},"type":"@n8n/n8n-nodes-langchain.chainLlm","typeVersion":1.6,"position":[5300,740],"id":"665fac4f-cdc4-4c69-b0ce-ffe76c83c0ca","name":"4. Psychology Agent"},{"parameters":{"promptType":"define","text":"==# 📖 NARRATIVE STRUCTURE ARCHITECT\n\n**MISSION:** Create compelling story frameworks for LinkedIn professionals using the **{{ $('3. Personality Modifier').item.json.content_angle.narrative }}** narrative structure.\n\n## CRITICAL: PRIMARY TECHNICAL FOCUS\n**PRIMARY EXPERTISE (MUST FOCUS ON THIS):** {{ $('PSYCHOLOGY DATA PROCESSOR').item.json.technical_interpretation.primary_expertise }}\n**AUTHORITY CONTEXT:** {{ $('PSYCHOLOGY DATA PROCESSOR').item.json.technical_interpretation.authority_context }}\n**PRODUCT FOCUS:** {{ $('3. Personality Modifier').item.json.client_context.product }}\n\n**CRITICAL INSTRUCTION: All narrative elements must focus on {{ $('PSYCHOLOGY DATA PROCESSOR').item.json.technical_interpretation.primary_expertise }} as the PRIMARY subject, not secondary database technologies.**\n\n## NARRATIVE CONTEXT\n- **Selected Narrative:** {{ $('3. Personality Modifier').item.json.content_angle.narrative }}\n- **Content Angle:** {{ $('3. Personality Modifier').item.json.content_angle.angle }}\n- **Personality Mode:** {{ $('3. Personality Modifier').item.json.voice_profile.personality_mode }}\n- **Psychology Strategy:** {{ $('PSYCHOLOGY DATA PROCESSOR').item.json.psychology_strategy.primary_trigger }}\n- **Client:** {{ $('3. Personality Modifier').item.json.Business_Name }} - {{ $('3. Personality Modifier').item.json.Product }}\n- **PRIMARY EXPERTISE:** {{ $('PSYCHOLOGY DATA PROCESSOR').item.json.technical_interpretation.primary_expertise }}\n\n## PSYCHOLOGY INTEGRATION\n- **Primary Trigger:** {{ $('PSYCHOLOGY DATA PROCESSOR').item.json.psychology_strategy.primary_trigger }}\n- **Target Emotion:** {{ $('PSYCHOLOGY DATA PROCESSOR').item.json.psychology_strategy.target_emotion }}\n- **Authority Positioning:** {{ $('PSYCHOLOGY DATA PROCESSOR').item.json.psychology_strategy.authority_positioning }}\n- **Hook Psychology:** {{ $('PSYCHOLOGY DATA PROCESSOR').item.json.viral_optimization.hook_psychology }}\n- **Engagement Mechanics:** {{ $('PSYCHOLOGY DATA PROCESSOR').item.json.psychology_strategy.engagement_mechanics }}\n\n## PREDICTION_STORY FRAMEWORK\n\nFor **{{ $('3. Personality Modifier').item.json.content_angle.angle }}** angle with **{{ $('3. Personality Modifier').item.json.voice_profile.personality_mode }}** personality delivering **{{ $('PSYCHOLOGY DATA PROCESSOR').item.json.psychology_strategy.primary_trigger }}** psychology:\n\n### STORY PROGRESSION STRUCTURE (FOCUS ON {{ $('PSYCHOLOGY DATA PROCESSOR').item.json.technical_interpretation.primary_expertise }}):\n\n**1. FUTURE SIGNAL IDENTIFICATION**\n- Open with mentor authority: \"What I'm seeing in {{ $('PSYCHOLOGY DATA PROCESSOR').item.json.technical_interpretation.primary_expertise }} implementations concerns me for {{ $('3. Personality Modifier').item.json.client_context.target_audience }}...\"\n- Reference {{ $('PSYCHOLOGY DATA PROCESSOR').item.json.viral_optimization.curiosity_creation }}\n- Connect to {{ $('3. Personality Modifier').item.json.angle_research.supporting_data }}\n\n**2. PROTECTIVE PREDICTION DELIVERY**\n- Share specific 2025 prediction about {{ $('PSYCHOLOGY DATA PROCESSOR').item.json.technical_interpretation.primary_expertise }}\n- Apply {{ $('PSYCHOLOGY DATA PROCESSOR').item.json.psychology_strategy.target_emotion }}\n- Use mentor voice: \"The businesses that survive vs those that don't in {{ $('PSYCHOLOGY DATA PROCESSOR').item.json.technical_interpretation.primary_expertise }}...\"\n\n**3. EXPERIENCE-BASED CREDIBILITY**\n- \"In my years of {{ $('PSYCHOLOGY DATA PROCESSOR').item.json.technical_interpretation.primary_expertise }} implementations...\"\n- Reference specific {{ $('PSYCHOLOGY DATA PROCESSOR').item.json.technical_interpretation.primary_expertise }} deployment experiences\n- Demonstrate {{ $('PSYCHOLOGY DATA PROCESSOR').item.json.psychology_strategy.authority_positioning }}\n\n**4. WARNING SIGNALS REVELATION**\n- Share what separates prepared businesses from vulnerable ones in {{ $('PSYCHOLOGY DATA PROCESSOR').item.json.technical_interpretation.primary_expertise }}\n- Connect to {{ $('3. Personality Modifier').item.json.client_context.pain_point }}\n- Use protective wisdom tone about {{ $('PSYCHOLOGY DATA PROCESSOR').item.json.technical_interpretation.primary_expertise }}\n\n**5. PROTECTIVE GUIDANCE**\n- Provide actionable steps for {{ $('PSYCHOLOGY DATA PROCESSOR').item.json.technical_interpretation.primary_expertise }} in {{ $('3. Personality Modifier').item.json.angle_research.timing_relevance }}\n- Connect to {{ $('3. Personality Modifier').item.json.client_context.solution_feature }}\n- Maintain {{ $('3. Personality Modifier').item.json.voice_profile.language_style }}\n\n**6. EXPERIENCE INVITATION**\n- Ask {{ $('PSYCHOLOGY DATA PROCESSOR').item.json.engagement_drivers.discussion_starters }}\n- Invite {{ $('PSYCHOLOGY DATA PROCESSOR').item.json.technical_interpretation.primary_expertise }} implementation war stories\n- Create protective community discussion about {{ $('PSYCHOLOGY DATA PROCESSOR').item.json.technical_interpretation.primary_expertise }}\n\n## TENSION MOMENTS\n\nCreate professional anticipation through:\n- Future threats to unprepared businesses in {{ $('Technical Capability Interpreter').item.json.technical_interpretation.primary_expertise }}\n- Hidden costs of delayed {{ $('Technical Capability Interpreter').item.json.technical_interpretation.primary_expertise }} adoption\n- Competitive disadvantages of outdated {{ $('Technical Capability Interpreter').item.json.technical_interpretation.primary_expertise }} strategies\n- Urgency of 2025 {{ $('Technical Capability Interpreter').item.json.technical_interpretation.primary_expertise }} transformation\n\n## CREDIBILITY ANCHORS\n\nEstablish {{ $('3. Personality Modifier').item.json.Business_Name }} authority through:\n- Specific {{ $('Technical Capability Interpreter').item.json.technical_interpretation.primary_expertise }} implementation experience\n- Reference to {{ $('3. Personality Modifier').item.json.content_ammunition.credibility_builders }}\n- Real-world {{ $('Technical Capability Interpreter').item.json.technical_interpretation.primary_expertise }} disaster prevention stories\n- Technical expertise in {{ $('Technical Capability Interpreter').item.json.technical_interpretation.primary_expertise }}\n\n## ENGAGEMENT TRIGGERS\n\nDrive meaningful professional responses:\n- Experience validation questions about {{ $('Technical Capability Interpreter').item.json.technical_interpretation.primary_expertise }} disasters\n- {{ $('Technical Capability Interpreter').item.json.technical_interpretation.primary_expertise }} vs traditional solution comparisons\n- {{ $('Technical Capability Interpreter').item.json.technical_interpretation.primary_expertise }} implementation challenge sharing\n- Future {{ $('Technical Capability Interpreter').item.json.technical_interpretation.primary_expertise }} preparation strategy discussions\n\n## OUTPUT REQUIREMENTS\n\n**YOU MUST RESPOND ONLY WITH THIS JSON STRUCTURE:**\n\n```json\n{\n  \"narrative_structure\": {\n    \"framework_type\": \"{{ $('3. Personality Modifier').item.json.content_angle.narrative }}\",\n    \"story_progression\": [\n      \"Future signal identification: Mentor observes concerning {{ $('Technical Capability Interpreter').item.json.technical_interpretation.primary_expertise }} adoption trends\",\n      \"Protective prediction: Specific 2025 forecast about {{ $('Technical Capability Interpreter').item.json.technical_interpretation.primary_expertise }} necessity\",\n      \"Experience-based credibility: Share {{ $('Technical Capability Interpreter').item.json.technical_interpretation.primary_expertise }} implementation wisdom and battle-tested insights\",\n      \"Warning signals revelation: Distinguish prepared businesses from vulnerable ones in {{ $('Technical Capability Interpreter').item.json.technical_interpretation.primary_expertise }}\",\n      \"Protective guidance: Actionable steps for {{ $('Technical Capability Interpreter').item.json.technical_interpretation.primary_expertise }} adoption and preparation\",\n      \"Experience invitation: Ask for {{ $('Technical Capability Interpreter').item.json.technical_interpretation.primary_expertise }} disaster stories and implementation challenges\"\n    ],\n    \"psychology_integration\": [\n      \"{{ $('Technical Capability Interpreter').item.json.technical_interpretation.primary_expertise }}-focused authority positioning throughout narrative\",\n      \"Protective mentorship wisdom in {{ $('Technical Capability Interpreter').item.json.technical_interpretation.primary_expertise }} prediction delivery\",\n      \"{{ $('Technical Capability Interpreter').item.json.technical_interpretation.primary_expertise }} credibility demonstration via experience\",\n      \"{{ $('Technical Capability Interpreter').item.json.technical_interpretation.primary_expertise }} implementation experience sharing for trust building\"\n    ],\n    \"tension_moments\": [\n      \"Reveal hidden dangers of traditional {{ $('Technical Capability Interpreter').item.json.technical_interpretation.primary_expertise }} approaches\",\n      \"Expose competitive vulnerabilities from delayed {{ $('Technical Capability Interpreter').item.json.technical_interpretation.primary_expertise }} adoption\",\n      \"Highlight urgency of 2025 {{ $('Technical Capability Interpreter').item.json.technical_interpretation.primary_expertise }} transformation timeline\",\n      \"Show cost of inaction vs early {{ $('Technical Capability Interpreter').item.json.technical_interpretation.primary_expertise }} preparation\"\n    ],\n    \"credibility_anchors\": [\n      \"Reference specific {{ $('Technical Capability Interpreter').item.json.technical_interpretation.primary_expertise }} deployment experience\",\n      \"Share {{ $('Technical Capability Interpreter').item.json.technical_interpretation.primary_expertise }} disaster prevention success stories\",\n      \"Mention {{ $('3. Personality Modifier').item.json.Business_Name }} expertise in {{ $('Technical Capability Interpreter').item.json.technical_interpretation.primary_expertise }}\",\n      \"Demonstrate {{ $('Technical Capability Interpreter').item.json.technical_interpretation.primary_expertise }} expertise through specific examples\"\n    ],\n    \"engagement_triggers\": [\n      \"Experience validation questions about {{ $('Technical Capability Interpreter').item.json.technical_interpretation.primary_expertise }} failures\",\n      \"{{ $('Technical Capability Interpreter').item.json.technical_interpretation.primary_expertise }} implementation challenge discussions\",\n      \"Future {{ $('Technical Capability Interpreter').item.json.technical_interpretation.primary_expertise }} preparation strategy sharing\",\n      \"{{ $('Technical Capability Interpreter').item.json.technical_interpretation.primary_expertise }} technical comparison and evaluation requests\"\n    ],\n    \"viral_elements\": [\n      \"Quotable 2025 prediction about {{ $('Technical Capability Interpreter').item.json.technical_interpretation.primary_expertise }} industry transformation\",\n      \"Memorable warning about businesses that don't prepare for {{ $('Technical Capability Interpreter').item.json.technical_interpretation.primary_expertise }}\",\n      \"Shareable {{ $('Technical Capability Interpreter').item.json.technical_interpretation.primary_expertise }} performance statistics\",\n      \"Protective {{ $('Technical Capability Interpreter').item.json.technical_interpretation.primary_expertise }} wisdom that makes readers look informed\"\n    ],\n    \"resolution_elements\": [\n      \"Clear path forward with {{ $('Technical Capability Interpreter').item.json.technical_interpretation.primary_expertise }} adoption\",\n      \"Specific next steps for {{ $('Technical Capability Interpreter').item.json.technical_interpretation.primary_expertise }} strategy improvement\",\n      \"Community invitation for continued {{ $('Technical Capability Interpreter').item.json.technical_interpretation.primary_expertise }} discussion\",\n      \"Authority establishment for ongoing {{ $('Technical Capability Interpreter').item.json.technical_interpretation.primary_expertise }} guidance\"\n    ]\n  },\n  \"linkedin_optimization\": {\n    \"scroll_stopping_opening\": \"Lead with protective mentor concern: 'What I'm seeing in 2025 {{ $('Technical Capability Interpreter').item.json.technical_interpretation.primary_expertise }} implementations should worry every {{ $('3. Personality Modifier').item.json.client_context.target_audience }}'\",\n    \"authority_establishment\": \"Reference specific {{ $('Technical Capability Interpreter').item.json.technical_interpretation.primary_expertise }} deployment experience early in story\",\n    \"psychology_application\": \"Apply {{ $('PSYCHOLOGY DATA PROCESSOR').item.json.psychology_strategy.target_emotion }} throughout {{ $('Technical Capability Interpreter').item.json.technical_interpretation.primary_expertise }} narrative\",\n    \"technical_integration\": \"Weave {{ $('Technical Capability Interpreter').item.json.technical_interpretation.primary_expertise }} technical capabilities naturally into prediction narrative\",\n    \"value_delivery\": \"Ensure {{ $('3. Personality Modifier').item.json.client_context.target_audience }} gain actionable {{ $('Technical Capability Interpreter').item.json.technical_interpretation.primary_expertise }} strategy insights\",\n    \"discussion_invitation\": \"End with {{ $('Technical Capability Interpreter').item.json.technical_interpretation.primary_expertise }} experience-sharing question that drives meaningful professional engagement\"\n  },\n  \"professional_elements\": {\n    \"industry_relevance\": \"Direct connection to current {{ $('3. Personality Modifier').item.json.client_context.target_audience }} {{ $('Technical Capability Interpreter').item.json.technical_interpretation.primary_expertise }} challenges and 2025 trends\",\n    \"expertise_demonstration\": \"{{ $('3. Personality Modifier').item.json.Business_Name }} authority shines through {{ $('Technical Capability Interpreter').item.json.technical_interpretation.primary_expertise }} technical knowledge and implementation wisdom\",\n    \"practical_application\": \"Specific, implementable {{ $('Technical Capability Interpreter').item.json.technical_interpretation.primary_expertise }} strategy insights for {{ $('3. Personality Modifier').item.json.client_context.target_audience }} environments\",\n    \"credibility_building\": \"Experience-based trust signals throughout {{ $('Technical Capability Interpreter').item.json.technical_interpretation.primary_expertise }} prediction narrative\",\n    \"shareability_psychology\": \"Professional {{ $('Technical Capability Interpreter').item.json.technical_interpretation.primary_expertise }} intelligence that {{ $('3. Personality Modifier').item.json.client_context.target_audience }} share to protect peer networks\"\n  }\n}\n```\n\n**CRITICAL: Respond ONLY with the JSON structure above. Do NOT include any explanatory text, analysis, or additional content. The JSON must be valid and complete.**","messages":{"messageValues":[{"message":"=You are a professional narrative architect who creates compelling LinkedIn story structures that captivate business audiences while maintaining credibility and driving meaningful engagement."}]}},"type":"@n8n/n8n-nodes-langchain.chainLlm","typeVersion":1.6,"position":[5320,1100],"id":"42151687-6eca-4e0d-92d9-af16ae39d94f","name":"5. Narrative Agent"},{"parameters":{"jsCode":"// PLATFORM-AWARE QUALITY VALIDATOR\n// Validates content quality based on platform-specific criteria\n\nconst inputData = $input.first().json;\n\nconsole.log('=== PLATFORM-AWARE QUALITY VALIDATOR ===');\nconsole.log('Validating content for:', inputData.client_context?.company || 'Unknown Client');\nconsole.log('Target platform:', inputData.content_metadata?.selected_platform || 'Unknown Platform');\n\n// Extract platform and content data\nconst selectedPlatform = inputData.content_metadata?.selected_platform || 'LinkedIn';\nconst enhancedPosts = inputData.enhanced_posts || {};\nconst originalContext = inputData;\n\nconsole.log(`📱 Validating ${Object.keys(enhancedPosts).length} posts for ${selectedPlatform}`);\n\n// PLATFORM-SPECIFIC QUALITY CRITERIA\nconst platformCriteria = {\n  'LinkedIn': {\n    character_limits: { min: 600, max: 900 },\n    required_elements: ['professional_tone', 'industry_insights', 'questions'],\n    avoid_elements: ['emojis_overuse', 'casual_language', 'hashtag_spam'],\n    engagement_focus: 'professional_discussion',\n    authority_weight: 30, // Higher weight for professional authority\n    technical_weight: 25,\n    engagement_weight: 25,\n    authenticity_weight: 20\n  },\n  'Facebook': {\n    character_limits: { min: 400, max: 700 },\n    required_elements: ['conversational_tone', 'social_proof', 'relatability'],\n    avoid_elements: ['corporate_jargon', 'technical_overload', 'sales_language'],\n    engagement_focus: 'community_discussion',\n    authority_weight: 15, // Lower weight for authority, higher for relatability\n    technical_weight: 10,\n    engagement_weight: 35,\n    authenticity_weight: 40\n  },\n  'X': {\n    character_limits: { min: 200, max: 400 },\n    required_elements: ['conciseness', 'strong_opinion', 'shareability'],\n    avoid_elements: ['unnecessary_words', 'weak_language', 'long_explanations'],\n    engagement_focus: 'viral_potential',\n    authority_weight: 25,\n    technical_weight: 15,\n    engagement_weight: 40, // High weight for viral potential\n    authenticity_weight: 20\n  },\n  'Instagram': {\n    character_limits: { min: 300, max: 500 },\n    required_elements: ['visual_description', 'lifestyle_integration', 'hashtags'],\n    avoid_elements: ['text_heavy', 'corporate_speak', 'no_visual_appeal'],\n    engagement_focus: 'visual_storytelling',\n    authority_weight: 10, // Lowest weight for authority\n    technical_weight: 5,\n    engagement_weight: 35,\n    authenticity_weight: 50 // Highest weight for authenticity\n  }\n};\n\nconst criteria = platformCriteria[selectedPlatform] || platformCriteria['LinkedIn'];\n\n// PLATFORM-SPECIFIC QUALITY ASSESSMENT\nfunction assessPlatformPostQuality(postContent, postName, hashtags = '', platform) {\n  if (!postContent || postContent.trim() === '') {\n    return {\n      score: 0,\n      issues: ['Post content is empty'],\n      checks: [],\n      character_count: 0,\n      platform_optimized: false\n    };\n  }\n  \n  let score = 0;\n  const checks = [];\n  const issues = [];\n  const platformChecks = [];\n  \n  console.log(`Assessing ${postName} for ${platform}: ${postContent.length} characters`);\n  \n  // 1. Platform-specific character limits\n  const totalLength = postContent.length + (hashtags ? hashtags.length : 0);\n  if (totalLength >= criteria.character_limits.min && totalLength <= criteria.character_limits.max) {\n    score += 20;\n    checks.push(`✅ Optimal length for ${platform} (${totalLength} chars)`);\n  } else if (totalLength < criteria.character_limits.min) {\n    issues.push(`❌ Too short for ${platform} (${totalLength} chars)`);\n  } else {\n    issues.push(`❌ Too long for ${platform} (${totalLength} chars)`);\n  }\n  \n  // 2. Platform-specific authenticity check\n  const aiBuzzwords = ['game-changer', 'paradigm shift', 'cutting-edge', 'world-class', 'industry-leading'];\n  const hasAILanguage = aiBuzzwords.some(phrase => \n    postContent.toLowerCase().includes(phrase.toLowerCase())\n  );\n  \n  if (!hasAILanguage) {\n    score += criteria.authenticity_weight;\n    checks.push(`✅ No AI buzzwords for ${platform}`);\n  } else {\n    issues.push(`❌ Contains AI language inappropriate for ${platform}`);\n  }\n  \n  // 3. Platform-specific technical authority\n  let technicalScore = 0;\n  const clientTechCapabilities = originalContext['Technical Capabilities Extracted'] || '';\n  const productName = originalContext.Product || '';\n  \n  if (postContent.includes(productName)) technicalScore += criteria.technical_weight * 0.4;\n  if (clientTechCapabilities && postContent.toLowerCase().includes(clientTechCapabilities.toLowerCase().split(',')[0])) {\n    technicalScore += criteria.technical_weight * 0.6;\n  }\n  \n  score += technicalScore;\n  if (technicalScore >= criteria.technical_weight * 0.7) {\n    checks.push(`✅ Good technical content for ${platform}`);\n  }\n  \n  // 4. Platform-specific engagement elements\n  let engagementScore = 0;\n  \n  if (platform === 'LinkedIn') {\n    const hasQuestion = postContent.includes('?');\n    const hasIndustryInsight = /industry|business|professional|enterprise/i.test(postContent);\n    const hasPersonalExperience = /I've|my experience|we've seen/i.test(postContent);\n    \n    if (hasQuestion) engagementScore += criteria.engagement_weight * 0.3;\n    if (hasIndustryInsight) engagementScore += criteria.engagement_weight * 0.4;\n    if (hasPersonalExperience) engagementScore += criteria.engagement_weight * 0.3;\n    \n  } else if (platform === 'Facebook') {\n    const hasPersonalTouch = /I|my|we|our|you/i.test(postContent);\n    const hasCommunityAppeal = /friends|family|community|local|together/i.test(postContent);\n    const hasShareWorthy = /share|tag|tell|recommend/i.test(postContent);\n    \n    if (hasPersonalTouch) engagementScore += criteria.engagement_weight * 0.4;\n    if (hasCommunityAppeal) engagementScore += criteria.engagement_weight * 0.3;\n    if (hasShareWorthy) engagementScore += criteria.engagement_weight * 0.3;\n    \n  } else if (platform === 'X') {\n    const hasStrongOpinion = /but|however|wrong|right|truth|fact/i.test(postContent);\n    const hasViralPotential = /shocking|surprising|hidden|secret|truth/i.test(postContent);\n    const isQuotable = postContent.length <= 250; // Quotable length\n    \n    if (hasStrongOpinion) engagementScore += criteria.engagement_weight * 0.4;\n    if (hasViralPotential) engagementScore += criteria.engagement_weight * 0.3;\n    if (isQuotable) engagementScore += criteria.engagement_weight * 0.3;\n    \n  } else if (platform === 'Instagram') {\n    const hasVisualElement = /see|look|show|behind|aesthetic|beautiful/i.test(postContent);\n    const hasLifestyleIntegration = /life|daily|routine|workspace|home/i.test(postContent);\n    const hasHashtags = hashtags && hashtags.length > 0;\n    \n    if (hasVisualElement) engagementScore += criteria.engagement_weight * 0.3;\n    if (hasLifestyleIntegration) engagementScore += criteria.engagement_weight * 0.4;\n    if (hasHashtags) engagementScore += criteria.engagement_weight * 0.3;\n  }\n  \n  score += engagementScore;\n  \n  // 5. Platform-specific authority scoring\n  let authorityScore = 0;\n  const hasSpecificData = /\\d+%|\\$\\d+|\\d+ hours|\\d+ minutes/i.test(postContent);\n  const hasExpertise = /experience|expertise|years|proven|tested/i.test(postContent);\n  \n  if (hasSpecificData) authorityScore += criteria.authority_weight * 0.5;\n  if (hasExpertise) authorityScore += criteria.authority_weight * 0.5;\n  \n  score += authorityScore;\n  \n  // Platform-specific bonus checks\n  if (platform === 'Instagram' && hashtags) {\n    const hashtagCount = (hashtags.match(/#/g) || []).length;\n    if (hashtagCount >= 8 && hashtagCount <= 15) {\n      score += 5;\n      platformChecks.push(`✅ Optimal hashtag count for Instagram (${hashtagCount})`);\n    }\n  }\n  \n  if (platform === 'X' && postContent.length <= 280) {\n    score += 5;\n    platformChecks.push('✅ Perfect for X character limit');\n  }\n  \n  return {\n    score: Math.min(score, 100), // Cap at 100\n    checks: [...checks, ...platformChecks],\n    issues: issues,\n    character_count: postContent.length,\n    hashtag_count: hashtags ? (hashtags.match(/#/g) || []).length : 0,\n    platform_optimized: score >= 70,\n    grade: score >= 80 ? 'A' : score >= 70 ? 'B' : score >= 60 ? 'C' : score >= 50 ? 'D' : 'F'\n  };\n}\n\n// Validate each post with platform-specific criteria\nconst postValidations = {};\nlet totalScore = 0;\nlet bestPost = { name: '', score: 0, content: '' };\n\nObject.entries(enhancedPosts).forEach(([postName, postData]) => {\n  const postContent = postData.content || '';\n  const hashtags = postData.hashtags || '';\n  \n  const validation = assessPlatformPostQuality(postContent, postName, hashtags, selectedPlatform);\n  \n  postValidations[postName] = {\n    ...validation,\n    focus: postData.focus || 'Unknown focus',\n    content_preview: postContent.substring(0, 100) + '...',\n    platform: selectedPlatform\n  };\n  \n  totalScore += validation.score;\n  \n  if (validation.score > bestPost.score) {\n    bestPost = {\n      name: postName,\n      score: validation.score,\n      content: postContent,\n      character_count: validation.character_count,\n      hashtags: hashtags\n    };\n  }\n  \n  console.log(`${postName}: ${validation.score}/100 (${validation.grade}) - ${selectedPlatform} optimized: ${validation.platform_optimized}`);\n});\n\nconst averageScore = Math.round(totalScore / Object.keys(enhancedPosts).length);\nconst overallGrade = averageScore >= 80 ? 'A' : averageScore >= 70 ? 'B' : averageScore >= 60 ? 'C' : 'D';\n\n// Create final output\nconst finalOutput = {\n  // Best performing post for main display\n  final_content: {\n    [`${selectedPlatform}_Post`]: bestPost.content,\n    hashtags: bestPost.hashtags || '',\n    metadata: {\n      post_type: bestPost.name,\n      character_count: bestPost.character_count,\n      platform: selectedPlatform,\n      client: inputData.client_context?.company || originalContext.Business_Name || 'Unknown',\n      total_posts_generated: Object.keys(enhancedPosts).length\n    }\n  },\n  \n  // Individual post validations\n  post_validations: postValidations,\n  \n  // Platform-aware quality metrics\n  quality_assessment: {\n    overall_score: averageScore,\n    grade: overallGrade,\n    platform: selectedPlatform,\n    best_post: bestPost.name,\n    best_score: bestPost.score,\n    total_posts: Object.keys(enhancedPosts).length,\n    platform_optimized_count: Object.values(postValidations).filter(v => v.platform_optimized).length,\n    publication_ready_count: Object.values(postValidations).filter(v => v.score >= 70).length\n  },\n  \n  // All posts for storage\n  all_posts: enhancedPosts,\n  \n  // Processing summary\n  processing_summary: {\n    processed_at: new Date().toISOString(),\n    platform: selectedPlatform,\n    client: inputData.client_context?.company || originalContext.Business_Name || 'Unknown',\n    posts_generated: Object.keys(enhancedPosts).length,\n    average_quality: averageScore,\n    best_performing_post: bestPost.name,\n    platform_criteria_applied: true\n  }\n};\n\nconsole.log('=== PLATFORM-AWARE VALIDATION COMPLETE ===');\nconsole.log(`📱 Platform: ${selectedPlatform}`);\nconsole.log(`📊 Average Score: ${averageScore}/100 (${overallGrade})`);\nconsole.log(`🏆 Best Post: ${bestPost.name} (${bestPost.score}/100)`);\nconsole.log(`✅ Platform Optimized: ${finalOutput.quality_assessment.platform_optimized_count}/${Object.keys(enhancedPosts).length}`);\nconsole.log(`📝 Publication Ready: ${finalOutput.quality_assessment.publication_ready_count}/${Object.keys(enhancedPosts).length}`);\n\nreturn { json: finalOutput };"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[7160,900],"id":"fb1b615d-a812-4550-b473-ab79d50766fd","name":"7. Quality Validator"},{"parameters":{"authentication":"airtableOAuth2Api","operation":"create","base":{"__rl":true,"value":"appQoW8tY1s6ceKOV","mode":"list","cachedResultName":"Ebiexperts"},"table":{"__rl":true,"value":"tblht1ivQa3A7OzTy","mode":"list","cachedResultName":"Content Pipeline","cachedResultUrl":"https://airtable.com/appQoW8tY1s6ceKOV/tblht1ivQa3A7OzTy"},"columns":{"mappingMode":"defineBelow","value":{"Platform":"={{ $json.Content_Type }}","Post":"={{ $json.LinkedIn_Post }}","Status":"Waiting"},"matchingColumns":[],"schema":[{"id":"Hook","displayName":"Hook","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Post","displayName":"Post","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Platform","displayName":"Platform","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"options","options":[{"name":"Facebook","value":"Facebook"},{"name":"LinkedIn","value":"LinkedIn"},{"name":"X","value":"X"},{"name":"Medium","value":"Medium"},{"name":"Instagram","value":"Instagram"}],"readOnly":false,"removed":false},{"id":"Image","displayName":"Image","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"array","readOnly":false,"removed":false},{"id":"Image Generate","displayName":"Image Generate","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Angle","displayName":"Angle","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Intent","displayName":"Intent","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Comments","displayName":"Comments","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Content Type","displayName":"Content Type","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"array","options":[{"name":"Image","value":"Image"},{"name":"Video","value":"Video"}],"readOnly":false,"removed":false},{"id":"Status","displayName":"Status","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"options","options":[{"name":"Approved","value":"Approved"},{"name":"Not Approved","value":"Not Approved"},{"name":"Waiting","value":"Waiting"}],"readOnly":false,"removed":false},{"id":"Date Send","displayName":"Date Send","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"dateTime","readOnly":false,"removed":false},{"id":"Schedule Date","displayName":"Schedule Date","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"dateTime","readOnly":false,"removed":false},{"id":"Schedule Send","displayName":"Schedule Send","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"dateTime","readOnly":false,"removed":false},{"id":"Temperature","displayName":"Temperature","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false}],"attemptToConvertTypes":false,"convertFieldsToString":false},"options":{}},"type":"n8n-nodes-base.airtable","typeVersion":2.1,"position":[7560,900],"id":"0357e51f-dcb2-4e60-90b4-c762b4c600d7","name":"8. Save to Airtable","credentials":{"airtableOAuth2Api":{"id":"pOcHNkax3d1V3xqS","name":"Airtable VS Sport"}}},{"parameters":{"jsCode":"// PLATFORM-AWARE FORM DATA PROCESSOR\n// Processes campaign record ID, platform selection, and variation count\n\nconst formData = $input.first().json;\n\nconsole.log('=== PLATFORM-AWARE FORM DATA PROCESSOR ===');\nconsole.log('Form submission received:', Object.keys(formData));\n\n// Extract and validate form fields\nconst recordId = formData['Campaign Record ID'];\nconst platform = formData['Platform'];\nconst variationCount = formData['Number of Variations'];\n\nconsole.log('Form data:', {\n  recordId: recordId,\n  platform: platform,\n  variations: variationCount\n});\n\n// Validation\nconst errors = [];\n\n// Validate Campaign Record ID\nif (!recordId) {\n  errors.push('Campaign Record ID is required');\n} else {\n  const cleanRecordId = recordId.trim();\n  if (!cleanRecordId.startsWith('rec')) {\n    errors.push('Invalid Airtable record ID format. Should start with \"rec\"');\n  }\n}\n\n// Validate Platform\nif (!platform) {\n  errors.push('Platform selection is required');\n} else {\n  const validPlatforms = ['LinkedIn', 'Facebook', 'Instagram', 'X', 'Email', 'Medium'];\n  if (!validPlatforms.includes(platform)) {\n    errors.push(`Invalid platform. Must be one of: ${validPlatforms.join(', ')}`);\n  }\n}\n\n// Validate Number of Variations\nif (!variationCount) {\n  errors.push('Number of variations is required');\n} else {\n  const validCounts = ['3', '5', '7'];\n  if (!validCounts.includes(variationCount)) {\n    errors.push(`Invalid variation count. Must be one of: ${validCounts.join(', ')}`);\n  }\n}\n\n// If there are errors, throw them\nif (errors.length > 0) {\n  throw new Error('Form validation failed: ' + errors.join(', '));\n}\n\n// Map platform to Airtable field names\nconst platformFieldMap = {\n  'LinkedIn': 'LinkedIn_Focus',\n  'Facebook': 'Facebook_Focus',\n  'Instagram': 'Instagram_Focus',\n  'X': 'X_Focus',\n  'Email': 'Email_Focus',\n  'Medium': 'Medium_Focus'\n};\n\nconst platformField = platformFieldMap[platform];\n\n// Create platform configuration\nconst platformConfig = {\n  'LinkedIn': {\n    character_limit: { min: 600, max: 900 },\n    engagement_style: 'professional_discussion',\n    tone: 'thought_leadership',\n    features: ['questions', 'industry_insights', 'professional_experience']\n  },\n  'Facebook': {\n    character_limit: { min: 400, max: 700 },\n    engagement_style: 'conversational',\n    tone: 'friendly_helpful',\n    features: ['social_proof', 'relatable_stories', 'visual_friendly']\n  },\n  'Instagram': {\n    character_limit: { min: 300, max: 600 },\n    engagement_style: 'visual_storytelling',\n    tone: 'inspiring_authentic',\n    features: ['hashtags', 'visual_descriptions', 'lifestyle_connection']\n  },\n  'X': {\n    character_limit: { min: 200, max: 400 },\n    engagement_style: 'concise_impactful',\n    tone: 'direct_confident',\n    features: ['brevity', 'threading_potential', 'shareability']\n  },\n  'Email': {\n    character_limit: { min: 800, max: 1200 },\n    engagement_style: 'detailed_personal',\n    tone: 'consultative_expert',\n    features: ['subject_line', 'detailed_explanation', 'clear_cta']\n  },\n  'Medium': {\n    character_limit: { min: 1000, max: 1500 },\n    engagement_style: 'educational_deep',\n    tone: 'authoritative_educational',\n    features: ['detailed_insights', 'industry_analysis', 'thought_leadership']\n  }\n};\n\nconsole.log('✅ Form validation passed');\nconsole.log(`📱 Platform: ${platform} (${platformField})`);\nconsole.log(`🔢 Variations: ${variationCount}`);\nconsole.log(`📊 Character limits: ${platformConfig[platform].character_limit.min}-${platformConfig[platform].character_limit.max}`);\n\n// Output processed data\nreturn {\n  json: {\n    // Original form data\n    recordId: recordId.trim(),\n    \n    // Platform configuration\n    selected_platform: platform,\n    platform_field: platformField,\n    platform_config: platformConfig[platform],\n    \n    // Content configuration\n    variation_count: parseInt(variationCount),\n    \n    // Processing metadata\n    processing_timestamp: new Date().toISOString(),\n    form_validation_passed: true,\n    \n    // Workflow configuration\n    workflow_mode: 'platform_aware',\n    target_platform: platform,\n    content_source_field: platformField\n  }\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[2280,1020],"id":"cb8da144-1a1a-43ef-9d9b-bb8fcf423694","name":"Process Form Data"},{"parameters":{"model":"openai/gpt-4o","options":{"maxTokens":3000,"temperature":0.4}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenRouter","typeVersion":1,"position":[3500,1440],"id":"baada5cb-1ae5-4c3c-b904-6d73480443ea","name":"Research Model","credentials":{"openRouterApi":{"id":"eni2kFdHGvy7lEd3","name":"OpenRouter account"}}},{"parameters":{"model":"anthropic/claude-3.7-sonnet","options":{"maxTokens":3000,"temperature":0.3}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenRouter","typeVersion":1,"position":[5320,940],"id":"ec2159ab-5fe3-46c8-9040-61e863b33a78","name":"Psychology Model","credentials":{"openRouterApi":{"id":"eni2kFdHGvy7lEd3","name":"OpenRouter account"}}},{"parameters":{"model":"openai/gpt-4o","options":{"maxTokens":3000,"temperature":0.5}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenRouter","typeVersion":1,"position":[5360,1260],"id":"ef3deade-b0b4-4409-acdd-5960fca26605","name":"Narrative Model","credentials":{"openRouterApi":{"id":"eni2kFdHGvy7lEd3","name":"OpenRouter account"}}},{"parameters":{"model":"anthropic/claude-sonnet-4","options":{"maxTokens":4000,"temperature":0.2}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenRouter","typeVersion":1,"position":[6200,1200],"id":"a67b0fcd-c5fe-48b6-bf00-1fa62f959644","name":"Generation Model","credentials":{"openRouterApi":{"id":"eni2kFdHGvy7lEd3","name":"OpenRouter account"}}},{"parameters":{"jsCode":"// ENHANCED PSYCHOLOGY DATA PROCESSOR - OPTIMIZED VERSION\n// Improves data extraction and ensures consistent structure\n\nconst inputData = $input.first().json;\n\nconsole.log('=== ENHANCED PSYCHOLOGY DATA PROCESSOR (OPTIMIZED) ===');\n\n// Function to extract psychology data with better error handling\nfunction extractPsychologyData(aiResponse) {\n  try {\n    let textContent = aiResponse.text || aiResponse.content || JSON.stringify(aiResponse);\n    \n    console.log('Processing AI response...');\n    console.log('Response length:', textContent.length);\n    \n    // Method 1: Extract JSON from markdown code blocks\n    const jsonMatch = textContent.match(/```json\\s*\\n?([^`]+)\\s*\\n?```/s);\n    \n    if (jsonMatch) {\n      console.log('Found JSON in markdown, parsing...');\n      const jsonText = jsonMatch[1].trim();\n      return JSON.parse(jsonText);\n    }\n    \n    // Method 2: Try parsing the whole thing as JSON\n    try {\n      console.log('Attempting direct JSON parse...');\n      return JSON.parse(textContent);\n    } catch (parseError) {\n      console.log('Direct JSON parse failed, using intelligent extraction...');\n    }\n    \n    // Method 3: Intelligent extraction based on actual content\n    console.log('Using intelligent content analysis...');\n    return extractFromContent(textContent, inputData);\n    \n  } catch (error) {\n    console.error('Failed to extract psychology data:', error.message);\n    return createIntelligentFallback(inputData);\n  }\n}\n\n// Enhanced content analysis with better pattern matching\nfunction extractFromContent(textContent, inputData) {\n  console.log('🧠 Analyzing content for psychology patterns...');\n  \n  // Detect actual psychology trigger from content\n  let detectedTrigger = inputData.content_angle?.psychology || 'future_focus';\n  \n  // More sophisticated trigger detection\n  const triggerPatterns = {\n    'future_focus': /\\b(2025|future|will look like|predictions?|trends?|evolution|next year)\\b/i,\n    'curiosity_gap': /\\b(analyzed|data shows|discovered|research|investigated|study)\\b/i,\n    'vicarious_learning': /\\b(experience|learned|witnessed|seen|journey|transformation)\\b/i,\n    'authority_principle': /\\b(expert|authority|certified|proven|established)\\b/i,\n    'social_proof': /\\b(others|peers|companies|clients|customers|testimonials)\\b/i\n  };\n  \n  for (const [trigger, pattern] of Object.entries(triggerPatterns)) {\n    if (pattern.test(textContent)) {\n      detectedTrigger = trigger;\n      console.log(`✅ Detected ${trigger} psychology from content patterns`);\n      break;\n    }\n  }\n  \n  // Detect personality from voice patterns\n  let detectedPersonality = inputData.voice_profile?.personality_mode || 'mentor_guide';\n  \n  const personalityPatterns = {\n    'mentor_guide': /\\b(experience|learned the hard way|witnessed|protect|avoid|mistakes)\\b/i,\n    'analytical_expert': /\\b(data|research|analysis|metrics|statistics|benchmarks)\\b/i,\n    'visionary_leader': /\\b(future|vision|transform|innovate|lead|strategic)\\b/i,\n    'pragmatic_implementer': /\\b(practical|implement|deploy|execute|real-world)\\b/i\n  };\n  \n  for (const [personality, pattern] of Object.entries(personalityPatterns)) {\n    if (pattern.test(textContent)) {\n      detectedPersonality = personality;\n      console.log(`✅ Detected ${personality} personality from content patterns`);\n      break;\n    }\n  }\n  \n  console.log(`🎯 Using: ${detectedTrigger} psychology + ${detectedPersonality} personality`);\n  \n  return {\n    psychology_strategy: {\n      primary_trigger: detectedTrigger,\n      personality_alignment: detectedPersonality,\n      target_emotion: generateTargetEmotion(detectedTrigger, detectedPersonality),\n      engagement_mechanics: generateEngagementMechanics(detectedTrigger, detectedPersonality),\n      authority_positioning: generateAuthorityPositioning(inputData, detectedPersonality),\n      shareability_psychology: generateShareabilityPsychology(detectedTrigger, inputData)\n    },\n    viral_optimization: {\n      hook_psychology: generateHookPsychology(detectedTrigger, inputData),\n      curiosity_creation: generateCuriosityElements(detectedTrigger, inputData),\n      social_proof_strategy: generateSocialProofStrategy(inputData),\n      controversy_calibration: generateControversyLevel(detectedPersonality),\n      value_demonstration: generateValueDemo(inputData)\n    },\n    engagement_drivers: {\n      comment_triggers: generateCommentTriggers(detectedPersonality, inputData),\n      discussion_starters: generateDiscussionStarters(detectedPersonality, inputData),\n      experience_invitations: generateExperienceInvitations(detectedPersonality),\n      expertise_opportunities: generateExpertiseOpportunities(inputData)\n    },\n    linkedin_optimization: {\n      scroll_stopping_elements: generateScrollStoppers(detectedTrigger, inputData),\n      algorithm_triggers: generateAlgorithmTriggers(detectedPersonality),\n      professional_value: generateProfessionalValue(inputData),\n      network_amplification: generateNetworkAmplification(detectedTrigger, inputData)\n    },\n    extraction_metadata: {\n      method: 'intelligent_content_analysis',\n      confidence: 'high',\n      detected_psychology: {\n        trigger: detectedTrigger,\n        personality: detectedPersonality\n      },\n      content_analysis_successful: true\n    }\n  };\n}\n\n// Enhanced helper functions with better context awareness\nfunction generateTargetEmotion(trigger, personality) {\n  const emotionMap = {\n    'future_focus_mentor_guide': 'protective urgency combined with forward-thinking confidence',\n    'future_focus_analytical_expert': 'data-driven anticipation with strategic confidence',\n    'curiosity_gap_analytical_expert': 'investigative excitement with analytical authority',\n    'curiosity_gap_mentor_guide': 'protective curiosity with experience-based insight',\n    'vicarious_learning_mentor_guide': 'protective wisdom sharing with experience validation',\n    'authority_principle_analytical_expert': 'confident expertise with data-backed authority'\n  };\n  \n  const key = `${trigger}_${personality}`;\n  return emotionMap[key] || 'professional engagement and strategic thinking';\n}\n\nfunction generateEngagementMechanics(trigger, personality) {\n  const mechanicsMap = {\n    'future_focus': [\n      'future-focused authority positioning',\n      'trend prediction and preparation',\n      'competitive advantage framing',\n      'urgency creation through timing'\n    ],\n    'curiosity_gap': [\n      'data-driven insight revelation',\n      'investigative methodology sharing',\n      'surprising finding presentation',\n      'research-backed credibility building'\n    ],\n    'vicarious_learning': [\n      'experience-based story sharing',\n      'transformation journey mapping',\n      'lesson extraction and application',\n      'relatable challenge navigation'\n    ]\n  };\n  \n  const baseMechanics = mechanicsMap[trigger] || ['credibility building', 'value demonstration', 'discussion invitation'];\n  \n  // Add personality-specific enhancements\n  if (personality === 'mentor_guide') {\n    baseMechanics.push('protective wisdom sharing', 'mistake prevention guidance');\n  } else if (personality === 'analytical_expert') {\n    baseMechanics.push('data-driven validation', 'metric-based proof');\n  }\n  \n  return baseMechanics;\n}\n\nfunction generateAuthorityPositioning(inputData, personality) {\n  const company = inputData.Business_Name || 'the company';\n  const expertise = inputData.technical_interpretation?.primary_expertise || \n                   inputData.voice_profile?.expertise_context?.primary_expertise || \n                   'technical solutions';\n  \n  const positioningMap = {\n    'mentor_guide': `Experienced ${expertise} mentor protecting businesses from costly mistakes`,\n    'analytical_expert': `Data-driven ${expertise} analyst providing evidence-based insights`,\n    'visionary_leader': `Forward-thinking ${expertise} strategist shaping industry direction`,\n    'pragmatic_implementer': `Results-focused ${expertise} practitioner delivering proven solutions`\n  };\n  \n  return positioningMap[personality] || `Establish ${company} as ${expertise} thought leader`;\n}\n\nfunction generateHookPsychology(trigger, inputData) {\n  const expertise = inputData.technical_interpretation?.primary_expertise || 'technology';\n  \n  const hookMap = {\n    'future_focus': `Future prediction that creates professional FOMO about ${expertise} trends`,\n    'curiosity_gap': `Investigative revelation that challenges assumptions about ${expertise}`,\n    'vicarious_learning': `Transformation story that resonates with ${expertise} challenges`,\n    'authority_principle': `Expert insight that establishes ${expertise} credibility`,\n    'social_proof': `Peer validation that confirms ${expertise} best practices`\n  };\n  \n  return hookMap[trigger] || 'Immediate professional relevance and curiosity';\n}\n\n// [Additional helper functions continue with similar enhancements...]\n\n// Main processing with improved error handling\ntry {\n  const extractedPsychology = extractPsychologyData(inputData);\n  \n  // Get original campaign data with better fallback handling\n  const originalCampaignData = $('3. Personality Modifier').first()?.json || inputData;\n  \n  // Enhanced data merging with validation\n  const enhancedData = {\n    ...originalCampaignData,\n    \n    // Add the extracted/corrected psychology strategy\n    psychology_strategy: extractedPsychology.psychology_strategy,\n    viral_optimization: extractedPsychology.viral_optimization,\n    engagement_drivers: extractedPsychology.engagement_drivers,\n    linkedin_optimization: extractedPsychology.linkedin_optimization,\n    \n    // Enhanced processing metadata\n    psychology_processing: {\n      extraction_successful: true,\n      extraction_method: extractedPsychology.extraction_metadata?.method || 'enhanced_analysis',\n      processed_at: new Date().toISOString(),\n      primary_trigger: extractedPsychology.psychology_strategy.primary_trigger,\n      personality_alignment: extractedPsychology.psychology_strategy.personality_alignment,\n      confidence: extractedPsychology.extraction_metadata?.confidence || 'high',\n      data_quality_score: calculateDataQuality(extractedPsychology),\n      validation_status: 'passed'\n    }\n  };\n  \n  // Data quality validation\n  function calculateDataQuality(psychData) {\n    let score = 0;\n    if (psychData.psychology_strategy?.primary_trigger) score += 25;\n    if (psychData.psychology_strategy?.engagement_mechanics?.length >= 3) score += 25;\n    if (psychData.viral_optimization?.curiosity_creation?.length >= 2) score += 25;\n    if (psychData.engagement_drivers?.discussion_starters?.length >= 2) score += 25;\n    return score;\n  }\n  \n  console.log('Enhanced Psychology data processed successfully');\n  console.log('Primary trigger:', enhancedData.psychology_strategy.primary_trigger);\n  console.log('Personality alignment:', enhancedData.psychology_strategy.personality_alignment);\n  console.log('Data quality score:', enhancedData.psychology_processing.data_quality_score + '/100');\n  \n  return { json: enhancedData };\n  \n} catch (error) {\n  console.error('❌ Psychology processing failed:', error.message);\n  \n  return {\n    json: {\n      error: true,\n      errorMessage: error.message,\n      errorStage: 'psychology_data_processing',\n      originalData: inputData,\n      fallback_psychology: createEmergencyFallback(inputData)\n    }\n  };\n}\n\nfunction createEmergencyFallback(inputData) {\n  return {\n    psychology_strategy: {\n      primary_trigger: 'future_focus',\n      personality_alignment: 'mentor_guide',\n      target_emotion: 'professional engagement',\n      engagement_mechanics: ['credibility building', 'value demonstration'],\n      authority_positioning: 'Industry expert',\n      shareability_psychology: 'Professional value'\n    },\n    viral_optimization: {\n      hook_psychology: 'Professional insight',\n      curiosity_creation: ['Industry trends', 'Expert insights'],\n      social_proof_strategy: 'Peer validation',\n      controversy_calibration: 'Thoughtful discussion',\n      value_demonstration: 'Actionable insights'\n    },\n    processing_metadata: {\n      fallback_used: true,\n      reason: 'Emergency fallback due to processing error'\n    }\n  };\n}"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[5700,740],"id":"7f99769f-e96d-437a-b966-8d7bed6adaa7","name":"PSYCHOLOGY DATA PROCESSOR"},{"parameters":{"jsCode":"// B2B vs B2C VOICE ADAPTATION\n// Modifies personality traits and language patterns based on business model\n\nconst b2bVoiceModifications = {\n  'analytical_expert': {\n    language_focus: 'ROI metrics, implementation data, enterprise-scale insights',\n    authority_signals: 'industry benchmarks, compliance standards, enterprise experience',\n    engagement_style: 'peer-to-peer professional discussion, implementation challenges',\n    proof_points: 'case studies, vendor evaluations, technical specifications',\n    decision_context: 'committee decisions, budget approvals, implementation timelines'\n  },\n  'passionate_advocate': {\n    language_focus: 'business transformation, competitive advantages, industry leadership',\n    authority_signals: 'industry vision, strategic implementations, market positioning',\n    engagement_style: 'inspiring change, challenging status quo, driving innovation',\n    proof_points: 'transformation results, competitive intelligence, market trends',\n    decision_context: 'strategic initiatives, competitive positioning, market opportunities'\n  },\n  'skeptical_challenger': {\n    language_focus: 'vendor claims, implementation realities, hidden costs',\n    authority_signals: 'due diligence experience, vendor evaluation, risk assessment',\n    engagement_style: 'questioning assumptions, validating claims, sharing cautionary insights',\n    proof_points: 'implementation failures, vendor comparisons, hidden cost analysis',\n    decision_context: 'risk mitigation, vendor selection, implementation planning'\n  },\n  'pragmatic_implementer': {\n    language_focus: 'deployment strategies, integration challenges, operational efficiency',\n    authority_signals: 'hands-on implementation, technical deployment, operational optimization',\n    engagement_style: 'sharing practical approaches, discussing implementation challenges',\n    proof_points: 'deployment timelines, integration successes, operational metrics',\n    decision_context: 'implementation planning, resource allocation, operational efficiency'\n  },\n  'visionary_leader': {\n    language_focus: 'industry transformation, future competitive landscape, strategic positioning',\n    authority_signals: 'market foresight, strategic planning, industry leadership',\n    engagement_style: 'exploring future scenarios, strategic implications, market evolution',\n    proof_points: 'market predictions, strategic frameworks, industry analysis',\n    decision_context: 'strategic planning, market positioning, future readiness'\n  },\n  'mentor_guide': {\n    language_focus: 'implementation lessons, vendor relationships, project management',\n    authority_signals: 'enterprise experience, vendor management, project leadership',\n    engagement_style: 'sharing hard-learned lessons, protecting against common pitfalls',\n    proof_points: 'project experiences, vendor relationships, implementation wisdom',\n    decision_context: 'project risk, vendor selection, implementation strategy'\n  },\n  'investigative_detective': {\n    language_focus: 'vendor analysis, market research, competitive intelligence',\n    authority_signals: 'market research, vendor analysis, competitive benchmarking',\n    engagement_style: 'uncovering market insights, sharing research findings',\n    proof_points: 'market data, vendor comparisons, competitive analysis',\n    decision_context: 'market research, vendor evaluation, competitive analysis'\n  }\n};\n\nconst b2cVoiceModifications = {\n  'analytical_expert': {\n    language_focus: 'consumer research, usage patterns, value comparisons',\n    authority_signals: 'consumer testing, usage experience, value analysis',\n    engagement_style: 'helping consumers make informed decisions, sharing insights',\n    proof_points: 'user reviews, testing results, value comparisons',\n    decision_context: 'personal choice, family decisions, value for money'\n  },\n  'passionate_advocate': {\n    language_focus: 'life improvement, personal benefits, transformative experiences',\n    authority_signals: 'personal experience, consumer advocacy, lifestyle expertise',\n    engagement_style: 'inspiring personal transformation, sharing passionate beliefs',\n    proof_points: 'personal stories, user testimonials, lifestyle improvements',\n    decision_context: 'personal investment, lifestyle choice, family benefit'\n  },\n  'skeptical_challenger': {\n    language_focus: 'marketing claims, hidden costs, consumer protection',\n    authority_signals: 'consumer advocacy, testing experience, marketplace knowledge',\n    engagement_style: 'questioning marketing claims, protecting consumer interests',\n    proof_points: 'independent testing, cost analysis, consumer warnings',\n    decision_context: 'purchase protection, value verification, avoiding mistakes'\n  },\n  'pragmatic_implementer': {\n    language_focus: 'practical usage, everyday benefits, real-world application',\n    authority_signals: 'hands-on experience, practical usage, everyday application',\n    engagement_style: 'sharing practical tips, discussing real-world usage',\n    proof_points: 'usage experience, practical benefits, everyday applications',\n    decision_context: 'practical needs, everyday usage, family requirements'\n  },\n  'visionary_leader': {\n    language_focus: 'lifestyle trends, future possibilities, personal transformation',\n    authority_signals: 'trend awareness, lifestyle expertise, future vision',\n    engagement_style: 'exploring lifestyle possibilities, personal growth opportunities',\n    proof_points: 'trend analysis, lifestyle improvements, personal development',\n    decision_context: 'lifestyle goals, personal growth, future planning'\n  },\n  'mentor_guide': {\n    language_focus: 'consumer guidance, purchase decisions, usage wisdom',\n    authority_signals: 'consumer experience, purchase wisdom, usage expertise',\n    engagement_style: 'guiding consumer decisions, sharing purchase wisdom',\n    proof_points: 'purchase experiences, usage tips, consumer guidance',\n    decision_context: 'purchase guidance, usage optimization, consumer protection'\n  },\n  'investigative_detective': {\n    language_focus: 'product research, comparison shopping, consumer investigation',\n    authority_signals: 'product research, comparison analysis, consumer investigation',\n    engagement_style: 'uncovering product insights, sharing research findings',\n    proof_points: 'product testing, comparison data, research findings',\n    decision_context: 'informed purchase, product comparison, research-based decisions'\n  }\n};\n\nfunction adaptVoiceForBusinessModel(personalityMode, isB2B, industry) {\n  console.log(`🎭 Adapting ${personalityMode} voice for ${isB2B ? 'B2B' : 'B2C'} in ${industry}`);\n  \n  const voiceModifications = isB2B ? b2bVoiceModifications : b2cVoiceModifications;\n  const adaptations = voiceModifications[personalityMode] || voiceModifications['pragmatic_implementer'];\n  \n  // Industry-specific adjustments\n  let industryAdjustments = {};\n  \n  if (industry === 'Automotive' && !isB2B) {\n    industryAdjustments = {\n      language_focus: adaptations.language_focus.replace('consumer', 'car buyer').replace('usage', 'driving experience'),\n      authority_signals: adaptations.authority_signals.replace('consumer', 'automotive').replace('testing', 'road testing'),\n      decision_context: 'vehicle purchase, family transportation, driving needs'\n    };\n  } else if (industry === 'Software/SaaS' && isB2B) {\n    industryAdjustments = {\n      language_focus: adaptations.language_focus + ', software implementation, digital transformation',\n      authority_signals: adaptations.authority_signals + ', software deployment, tech integration',\n      decision_context: adaptations.decision_context + ', software selection, IT strategy'\n    };\n  }\n  \n  const adaptedVoice = {\n    ...adaptations,\n    ...industryAdjustments,\n    business_model: isB2B ? 'B2B' : 'B2C',\n    industry_context: industry,\n    \n    // Audience-specific language patterns\n    audience_language: isB2B ? {\n      decision_makers: 'executives, managers, IT leaders, procurement teams',\n      pain_language: 'operational efficiency, ROI, competitive advantage, scalability',\n      value_language: 'business impact, strategic advantage, operational excellence',\n      urgency_language: 'market demands, competitive pressure, regulatory requirements',\n      social_proof: 'industry leaders, enterprise clients, benchmark studies'\n    } : {\n      decision_makers: 'individuals, families, consumers, users',\n      pain_language: 'daily frustrations, personal challenges, lifestyle limitations',\n      value_language: 'personal benefit, life improvement, convenience, satisfaction',\n      urgency_language: 'limited time, seasonal needs, life changes',\n      social_proof: 'customer reviews, user testimonials, personal recommendations'\n    }\n  };\n  \n  console.log(`✅ Voice adapted for ${adaptedVoice.business_model} ${industry} audience`);\n  \n  return adaptedVoice;\n}\n\n// Usage in workflow\nconst inputData = $input.first().json;\nconst personalityMode = inputData.voice_profile?.personality_mode || 'pragmatic_implementer';\nconst industry = inputData.Industry || 'Default';\nconst isB2B = inputData.industry_context?.b2b_focus !== false; // Default to B2B unless explicitly B2C\n\nconst adaptedVoice = adaptVoiceForBusinessModel(personalityMode, isB2B, industry);\n\nconst enhancedData = {\n  ...inputData,\n  adapted_voice_profile: adaptedVoice,\n  voice_adaptation: {\n    business_model: adaptedVoice.business_model,\n    industry_adapted: true,\n    original_personality: personalityMode,\n    adaptation_timestamp: new Date().toISOString()\n  }\n};\n\nreturn { json: enhancedData };"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[4920,940],"id":"a7a281f9-c133-41c6-a644-4da618b4745e","name":"B2B/B2C Voice Adapter"},{"parameters":{"jsCode":"// UNIVERSAL TECHNICAL CAPABILITY INTERPRETER\n// Processes technical capabilities for ANY industry (Software, Automotive, Professional Services, etc.)\n\nconst inputData = $input.first().json;\n\nconsole.log('=== UNIVERSAL TECHNICAL CAPABILITY INTERPRETER ===');\nconsole.log('Processing data for:', inputData.Business_Name);\nconsole.log('Industry:', inputData.Industry);\n\n// EXTRACTION FUNCTIONS - All required functions defined\n\nfunction extractDatabases(techData) {\n  const dbPattern = /(Oracle|SQL Server|MySQL|PostgreSQL|MongoDB|Redis)[\\s\\d\\.+]*/gi;\n  return techData.join(' ').match(dbPattern) || [];\n}\n\nfunction extractPerformanceMetrics(techData) {\n  const perfPattern = /(real-time|synchronous|\\d+\\s*second|\\d+\\s*ms|instant|continuous)/gi;\n  return techData.join(' ').match(perfPattern) || [];\n}\n\nfunction extractIntegrations(techData) {\n  const integPattern = /(API|REST|GraphQL|webhook|integration|connector|plugin|add-on)/gi;\n  return techData.join(' ').match(integPattern) || [];\n}\n\nfunction extractCompliance(techData) {\n  const compliancePattern = /(ISO\\s*\\d+|SOC\\s*\\d|GDPR|HIPAA|PCI\\s*DSS|compliance|certified|audit)/gi;\n  return techData.join(' ').match(compliancePattern) || [];\n}\n\nfunction extractAutomotiveSpecs(techData, category) {\n  const patterns = {\n    engine: /(V\\d+|\\d+L|\\d+\\.\\d+L|turbo|hybrid|electric|diesel|petrol)/gi,\n    safety: /(airbag|ABS|stability|traction|collision|lane|parking)/gi,\n    tech: /(bluetooth|GPS|touchscreen|android|apple|wifi|USB)/gi,\n    performance: /(\\d+hp|\\d+kW|\\d+km\\/h|\\d+mph|acceleration|\\d+s)/gi\n  };\n  \n  const pattern = patterns[category];\n  if (!pattern) return [];\n  \n  return techData.join(' ').match(pattern) || [];\n}\n\nfunction extractMethodologies(techData) {\n  const methodPattern = /(ISO|Six Sigma|Lean|Agile|ITIL|PMI|Scrum|methodology|framework)/gi;\n  return techData.join(' ').match(methodPattern) || [];\n}\n\nfunction extractCertifications(techData) {\n  const certPattern = /(certified|certification|ISO\\s*\\d+|SOC\\s*\\d|compliance|accredited)/gi;\n  return techData.join(' ').match(certPattern) || [];\n}\n\nfunction extractFrameworks(techData) {\n  const frameworkPattern = /(framework|methodology|standard|protocol|architecture)/gi;\n  return techData.join(' ').match(frameworkPattern) || [];\n}\n\nfunction extractGeneralFeatures(techData) {\n  const featurePattern = /(feature|capability|function|tool|component|module)/gi;\n  return techData.join(' ').match(featurePattern) || [];\n}\n\nfunction extractGeneralBenefits(techData) {\n  const benefitPattern = /(benefit|advantage|improvement|optimization|enhancement)/gi;\n  return techData.join(' ').match(benefitPattern) || [];\n}\n\nfunction extractGeneralSpecs(techData) {\n  const specPattern = /(\\d+%|\\d+\\.\\d+|\\d+x|version\\s*\\d+|\\d+\\s*users?|\\d+\\s*hours?)/gi;\n  return techData.join(' ').match(specPattern) || [];\n}\n\n// CONTENT FORMATTING FUNCTIONS\n\nfunction formatForHooks(capabilities, industry) {\n  const hooks = [];\n  \n  if (industry === 'Software/SaaS') {\n    if (capabilities.databases?.length > 0) {\n      hooks.push(`supporting ${capabilities.databases.slice(0, 3).join(', ')} out-of-the-box`);\n    }\n    if (capabilities.performance?.length > 0) {\n      hooks.push(`delivering ${capabilities.performance[0]} performance`);\n    }\n  } else if (industry === 'Automotive') {\n    if (capabilities.engines?.length > 0) {\n      hooks.push(`featuring ${capabilities.engines[0]} engine technology`);\n    }\n    if (capabilities.safety?.length > 0) {\n      hooks.push(`equipped with advanced ${capabilities.safety.slice(0, 2).join(' and ')} systems`);\n    }\n  } else {\n    // Default/Professional Services\n    if (capabilities.methodologies?.length > 0) {\n      hooks.push(`implementing ${capabilities.methodologies[0]} best practices`);\n    }\n    if (capabilities.certifications?.length > 0) {\n      hooks.push(`certified in ${capabilities.certifications[0]} standards`);\n    }\n  }\n  \n  return hooks;\n}\n\nfunction formatForCredibility(pattern, techData, industry) {\n  const statements = [];\n  \n  if (industry === 'Software/SaaS') {\n    statements.push('Extensive experience with enterprise database implementations');\n    statements.push('Proven track record in real-time data protection solutions');\n  } else if (industry === 'Automotive') {\n    statements.push('Deep expertise in automotive technology integration');\n    statements.push('Comprehensive understanding of vehicle performance optimization');\n  } else {\n    statements.push('Specialized knowledge in industry-specific methodologies');\n    statements.push('Certified expertise in professional service delivery');\n  }\n  \n  return statements;\n}\n\nfunction formatForComparison(capabilities, industry) {\n  const comparisons = [];\n  \n  Object.entries(capabilities).forEach(([category, items]) => {\n    if (Array.isArray(items) && items.length > 0) {\n      comparisons.push(`${category}: ${items.slice(0, 2).join(' vs ')}`);\n    }\n  });\n  \n  return comparisons;\n}\n\nfunction generatePrimaryExpertise(pattern, techData) {\n  const topCapability = Object.values(pattern.capability_categories)\n    .find(category => Array.isArray(category) && category.length > 0);\n  \n  if (topCapability && topCapability.length > 0) {\n    return `${topCapability[0]} integration and optimization`;\n  }\n  \n  return pattern.authority_context;\n}\n\nfunction generateSecondaryExpertise(pattern, techData) {\n  const capabilities = Object.values(pattern.capability_categories)\n    .filter(category => Array.isArray(category) && category.length > 0)\n    .flat();\n  \n  if (capabilities.length > 1) {\n    return `${capabilities[1]} implementation`;\n  }\n  \n  return 'technical solution deployment';\n}\n\n// MAIN INTERPRETATION FUNCTION\n\nfunction interpretTechnicalCapabilities(rawCapabilities, supportedSystems, performanceSpecs, industry, businessModel) {\n  console.log(`🔧 Interpreting technical capabilities for ${industry} (${businessModel})`);\n  console.log('Raw capabilities:', rawCapabilities);\n  console.log('Supported systems:', supportedSystems);\n  console.log('Performance specs:', performanceSpecs);\n  \n  // Combine all technical data sources\n  const allTechData = [\n    rawCapabilities || '',\n    supportedSystems || '',\n    performanceSpecs || ''\n  ].join(' | ').split('|').map(item => item.trim()).filter(Boolean);\n  \n  // Industry-specific interpretation patterns\n  const interpretationPatterns = {\n    'Software/SaaS': {\n      technical_authority_phrases: [\n        'Oracle 19c+ implementation experience',\n        'Real-time synchronous backup architecture',\n        'Enterprise database integration',\n        'Sub-second latency optimization',\n        'Multi-platform compatibility'\n      ],\n      capability_categories: {\n        databases: extractDatabases(allTechData),\n        performance: extractPerformanceMetrics(allTechData),\n        integrations: extractIntegrations(allTechData),\n        compliance: extractCompliance(allTechData)\n      },\n      authority_context: 'enterprise software implementation',\n      credibility_signals: ['version numbers', 'performance metrics', 'integration capabilities'],\n      technical_depth: 'high'\n    },\n    \n    'Automotive': {\n      technical_authority_phrases: [\n        'Advanced engine technology',\n        'Safety feature integration',\n        'Performance optimization',\n        'Modern infotainment systems',\n        'Fuel efficiency engineering'\n      ],\n      capability_categories: {\n        engines: extractAutomotiveSpecs(allTechData, 'engine'),\n        safety: extractAutomotiveSpecs(allTechData, 'safety'),\n        technology: extractAutomotiveSpecs(allTechData, 'tech'),\n        performance: extractAutomotiveSpecs(allTechData, 'performance')\n      },\n      authority_context: 'automotive technology and customer experience',\n      credibility_signals: ['technical specifications', 'safety ratings', 'performance data'],\n      technical_depth: 'medium'\n    },\n    \n    'Professional Services': {\n      technical_authority_phrases: [\n        'Proven methodology implementation',\n        'Industry compliance expertise',\n        'Strategic framework application',\n        'Best practice integration',\n        'Quality assurance protocols'\n      ],\n      capability_categories: {\n        methodologies: extractMethodologies(allTechData),\n        certifications: extractCertifications(allTechData),\n        frameworks: extractFrameworks(allTechData),\n        compliance: extractCompliance(allTechData)\n      },\n      authority_context: 'professional methodology and industry expertise',\n      credibility_signals: ['certifications', 'methodologies', 'compliance standards'],\n      technical_depth: 'medium'\n    },\n    \n    'Default': {\n      technical_authority_phrases: [\n        'Specialized solution implementation',\n        'Industry-specific expertise',\n        'Technical optimization',\n        'Performance enhancement',\n        'Quality assurance'\n      ],\n      capability_categories: {\n        features: extractGeneralFeatures(allTechData),\n        benefits: extractGeneralBenefits(allTechData),\n        specifications: extractGeneralSpecs(allTechData)\n      },\n      authority_context: 'industry expertise and solution implementation',\n      credibility_signals: ['specifications', 'performance data', 'feature sets'],\n      technical_depth: 'medium'\n    }\n  };\n  \n  const pattern = interpretationPatterns[industry] || interpretationPatterns['Default'];\n  \n  // Generate industry-appropriate technical narrative\n  const technicalNarrative = {\n    primary_expertise: generatePrimaryExpertise(pattern, allTechData),\n    secondary_expertise: generateSecondaryExpertise(pattern, allTechData),\n    authority_phrases: pattern.technical_authority_phrases,\n    capability_categories: pattern.capability_categories,\n    credibility_approach: pattern.credibility_signals,\n    technical_depth: pattern.technical_depth,\n    \n    // Content integration ready\n    hook_ready_capabilities: formatForHooks(pattern.capability_categories, industry),\n    credibility_ready_statements: formatForCredibility(pattern, allTechData, industry),\n    comparison_ready_points: formatForComparison(pattern.capability_categories, industry)\n  };\n  \n  console.log('✅ Technical interpretation complete');\n  console.log(`Primary expertise: ${technicalNarrative.primary_expertise}`);\n  console.log(`Authority phrases: ${technicalNarrative.authority_phrases.length}`);\n  \n  return technicalNarrative;\n}\n\n// MAIN PROCESSING\ntry {\n  const technicalInterpretation = interpretTechnicalCapabilities(\n    inputData['Technical Capabilities Extracted'],\n    inputData['Supported Systems'],\n    inputData['Performance Specifications'],\n    inputData.Industry || 'Default',\n    inputData.industry_context?.b2b_focus ? 'B2B' : 'B2C'\n  );\n  \n  const enhancedData = {\n    ...inputData,\n    technical_interpretation: technicalInterpretation,\n    universal_tech_ready: true,\n    processing_timestamp: new Date().toISOString()\n  };\n  \n  console.log('🎯 Processing completed successfully');\n  console.log(`Primary expertise identified: ${technicalInterpretation.primary_expertise}`);\n  console.log(`Hook-ready capabilities: ${technicalInterpretation.hook_ready_capabilities.length}`);\n  \n  return { json: enhancedData };\n  \n} catch (error) {\n  console.error('❌ Technical interpretation failed:', error.message);\n  \n  return {\n    json: {\n      error: true,\n      errorMessage: error.message,\n      originalData: inputData,\n      processing_stage: 'technical_interpretation_failed'\n    }\n  };\n}"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[2980,1020],"id":"84457549-4323-47fc-a00f-a86d088fde50","name":"Uniqueness validation logic"},{"parameters":{"jsCode":"// ENHANCED TECHNICAL CAPABILITY INTERPRETER - POWER BI PRIORITY FIX\n// Properly identifies Power BI as primary capability when present\n\nconst inputData = $input.first().json;\n\nconsole.log('=== ENHANCED TECHNICAL CAPABILITY INTERPRETER ===');\nconsole.log('Processing data for:', inputData.Business_Name);\nconsole.log('Product:', inputData.Product);\nconsole.log('UVP:', inputData.UVP);\nconsole.log('Supported Systems:', inputData['Supported Systems']);\n\n// POWER BI DETECTION FUNCTION\nfunction detectPrimaryProduct(inputData) {\n  const uvp = (inputData.UVP || '').toLowerCase();\n  const supportedSystems = (inputData['Supported Systems'] || '').toLowerCase();\n  const product = (inputData.Product || '').toLowerCase();\n  \n  // Check for Power BI indicators\n  if (uvp.includes('power bi') || supportedSystems.includes('power bi') || product.includes('power bi')) {\n    return 'PowerBI';\n  }\n  \n  // Check for other specific products\n  if (product.includes('wip active') && (uvp.includes('backup') || supportedSystems.includes('oracle'))) {\n    return 'PowerBI'; // Wip Active is Power BI backup solution\n  }\n  \n  // Default to industry-based detection\n  return inputData.Industry || 'Default';\n}\n\n// ENHANCED INTERPRETATION PATTERNS WITH POWER BI PRIORITY\nfunction interpretTechnicalCapabilities(inputData) {\n  const primaryProduct = detectPrimaryProduct(inputData);\n  \n  console.log(`🎯 Detected primary product: ${primaryProduct}`);\n  \n  // Combine all technical data sources\n  const allTechData = [\n    inputData['Technical Capabilities Extracted'] || '',\n    inputData['Supported Systems'] || '',\n    inputData['Performance Specifications'] || '',\n    inputData.UVP || ''\n  ].join(' | ').split('|').map(item => item.trim()).filter(Boolean);\n  \n  console.log('All tech data combined:', allTechData);\n  \n  // POWER BI SPECIFIC INTERPRETATION\n  if (primaryProduct === 'PowerBI') {\n    console.log('✅ Using Power BI interpretation pattern');\n    \n    return {\n      primary_expertise: 'Power BI backup and data protection',\n      secondary_expertise: 'Enterprise database integration',\n      technical_authority_phrases: [\n        'Power BI backup automation expertise',\n        'Microsoft Power BI data protection',\n        'Real-time Power BI synchronization',\n        'Enterprise Power BI governance',\n        'Power BI disaster recovery'\n      ],\n      capability_categories: {\n        powerbi_features: extractPowerBIFeatures(allTechData),\n        database_support: extractDatabaseSupport(allTechData),\n        performance_metrics: extractPerformanceMetrics(allTechData),\n        automation_features: extractAutomationFeatures(allTechData)\n      },\n      authority_context: 'Power BI backup and enterprise data protection',\n      credibility_signals: ['Power BI expertise', 'backup automation', 'enterprise integration'],\n      technical_depth: 'high',\n      \n      // Content integration ready\n      hook_ready_capabilities: [\n        'automated Power BI backup',\n        'real-time Power BI protection',\n        'enterprise database support (Oracle 19c+, SQL Server 2019+, MySQL 8.0+)'\n      ],\n      credibility_ready_statements: [\n        'Extensive experience with Power BI backup automation',\n        'Proven track record in enterprise Power BI data protection',\n        'Deep expertise in Power BI governance and disaster recovery'\n      ],\n      comparison_ready_points: [\n        'Power BI backup: automated vs manual',\n        'Real-time sync vs scheduled backups',\n        'Enterprise integration vs standalone solutions'\n      ]\n    };\n  }\n  \n  // SOFTWARE/SAAS INTERPRETATION (for other products)\n  if (inputData.Industry === 'Software/SaaS') {\n    return {\n      primary_expertise: 'enterprise software implementation',\n      secondary_expertise: 'database integration and optimization',\n      technical_authority_phrases: [\n        'Oracle 19c+ implementation experience',\n        'Real-time synchronous backup architecture',\n        'Enterprise database integration',\n        'Sub-second latency optimization',\n        'Multi-platform compatibility'\n      ],\n      capability_categories: {\n        databases: extractDatabases(allTechData),\n        performance: extractPerformanceMetrics(allTechData),\n        integrations: extractIntegrations(allTechData),\n        compliance: extractCompliance(allTechData)\n      },\n      authority_context: 'enterprise software implementation',\n      credibility_signals: ['version numbers', 'performance metrics', 'integration capabilities'],\n      technical_depth: 'high'\n    };\n  }\n  \n  // DEFAULT FALLBACK\n  return createDefaultInterpretation(allTechData, inputData.Industry);\n}\n\n// POWER BI SPECIFIC EXTRACTION FUNCTIONS\nfunction extractPowerBIFeatures(techData) {\n  const powerBIPattern = /(Power BI|PowerBI|backup|synchronous|automated|real-time|dashboard|report)/gi;\n  return techData.join(' ').match(powerBIPattern) || ['Power BI backup', 'automated protection'];\n}\n\nfunction extractDatabaseSupport(techData) {\n  const dbPattern = /(Oracle 19c\\+|SQL Server 2019\\+|MySQL 8\\.0\\+|Oracle|SQL Server|MySQL)/gi;\n  return techData.join(' ').match(dbPattern) || [];\n}\n\nfunction extractPerformanceMetrics(techData) {\n  const perfPattern = /(real-time|synchronous|\\d+\\s*second|<1 second|instant|continuous)/gi;\n  return techData.join(' ').match(perfPattern) || [];\n}\n\nfunction extractAutomationFeatures(techData) {\n  const autoPattern = /(automated|automatic|synchronous|real-time|continuous)/gi;\n  return techData.join(' ').match(autoPattern) || [];\n}\n\n// [Include other extraction functions for non-Power BI products]\nfunction extractDatabases(techData) {\n  const dbPattern = /(Oracle|SQL Server|MySQL|PostgreSQL|MongoDB|Redis)[\\s\\d\\.+]*/gi;\n  return techData.join(' ').match(dbPattern) || [];\n}\n\nfunction extractIntegrations(techData) {\n  const integPattern = /(API|REST|GraphQL|webhook|integration|connector|plugin|add-on)/gi;\n  return techData.join(' ').match(integPattern) || [];\n}\n\nfunction extractCompliance(techData) {\n  const compliancePattern = /(ISO\\s*\\d+|SOC\\s*\\d|GDPR|HIPAA|PCI\\s*DSS|compliance|certified|audit)/gi;\n  return techData.join(' ').match(compliancePattern) || [];\n}\n\nfunction createDefaultInterpretation(allTechData, industry) {\n  return {\n    primary_expertise: 'industry expertise and solution implementation',\n    secondary_expertise: 'technical solution deployment',\n    technical_authority_phrases: [\n      'Specialized solution implementation',\n      'Industry-specific expertise',\n      'Technical optimization',\n      'Performance enhancement',\n      'Quality assurance'\n    ],\n    capability_categories: {\n      features: allTechData.filter(item => item.includes('feature')),\n      benefits: allTechData.filter(item => item.includes('benefit')),\n      specifications: allTechData.filter(item => /\\d+/.test(item))\n    },\n    authority_context: 'industry expertise and solution implementation',\n    credibility_signals: ['specifications', 'performance data', 'feature sets'],\n    technical_depth: 'medium'\n  };\n}\n\n// MAIN PROCESSING\ntry {\n  const technicalInterpretation = interpretTechnicalCapabilities(inputData);\n  \n  const enhancedData = {\n    ...inputData,\n    technical_interpretation: technicalInterpretation,\n    technical_processing: {\n      interpretation_successful: true,\n      primary_product_detected: detectPrimaryProduct(inputData),\n      industry_adapted: true,\n      business_model_adapted: true,\n      processed_at: new Date().toISOString(),\n      primary_expertise: technicalInterpretation.primary_expertise,\n      hook_count: technicalInterpretation.hook_ready_capabilities?.length || 0\n    }\n  };\n  \n  console.log('🎯 Enhanced Technical Capability Interpreter completed successfully');\n  console.log(`✅ Primary expertise: ${technicalInterpretation.primary_expertise}`);\n  console.log(`✅ Hook-ready capabilities: ${technicalInterpretation.hook_ready_capabilities?.length || 0}`);\n  console.log(`✅ Authority context: ${technicalInterpretation.authority_context}`);\n  console.log(`✅ Ready for Psychology Agent with Power BI focus`);\n  \n  return { json: enhancedData };\n  \n} catch (error) {\n  console.error('❌ Technical interpretation failed:', error.message);\n  \n  return {\n    json: {\n      error: true,\n      errorMessage: error.message,\n      originalData: inputData,\n      processing_stage: 'enhanced_technical_capability_interpretation_failed'\n    }\n  };\n}"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[5100,940],"id":"4f844f62-c741-4de8-a9d7-83364919a158","name":"Technical Capability Interpreter"},{"parameters":{"jsCode":"// NARRATIVE DATA PROCESSOR - VERIFICATION VERSION\n// Ensures proper extraction of the new narrative structure\n\nconst inputData = $input.first().json;\n\nconsole.log('=== NARRATIVE DATA PROCESSOR VERIFICATION ===');\n\n// Function to extract JSON from markdown code blocks\nfunction extractNarrativeData(aiResponse) {\n  try {\n    let textContent = aiResponse.text || aiResponse.content || JSON.stringify(aiResponse);\n    \n    console.log('Processing Narrative AI response...');\n    console.log('Response length:', textContent.length);\n    console.log('Contains narrative_structure:', textContent.includes('narrative_structure'));\n    \n    // Extract JSON from markdown code blocks\n    const jsonMatch = textContent.match(/```json\\s*\\n?([^`]+)\\s*\\n?```/s);\n    \n    if (jsonMatch) {\n      console.log('✅ Found JSON in markdown, parsing...');\n      const jsonText = jsonMatch[1].trim();\n      const parsed = JSON.parse(jsonText);\n      \n      // Validate narrative structure\n      if (parsed.narrative_structure) {\n        console.log('✅ narrative_structure found');\n        console.log('✅ framework_type:', parsed.narrative_structure.framework_type);\n        console.log('✅ story_progression steps:', parsed.narrative_structure.story_progression?.length || 0);\n        console.log('✅ tension_moments:', parsed.narrative_structure.tension_moments?.length || 0);\n        console.log('✅ credibility_anchors:', parsed.narrative_structure.credibility_anchors?.length || 0);\n      } else {\n        console.log('❌ narrative_structure missing!');\n      }\n      \n      return parsed;\n    }\n    \n    console.log('❌ No markdown JSON found');\n    return createFallback();\n    \n  } catch (error) {\n    console.error('❌ Failed to extract narrative data:', error.message);\n    return createFallback();\n  }\n}\n\nfunction createFallback() {\n  return {\n    narrative_structure: {\n      framework_type: 'prediction_story',\n      story_progression: ['Fallback story progression'],\n      psychology_integration: ['Fallback psychology integration'],\n      tension_moments: ['Fallback tension moments'],\n      credibility_anchors: ['Fallback credibility anchors'],\n      engagement_triggers: ['Fallback engagement triggers'],\n      viral_elements: ['Fallback viral elements'],\n      resolution_elements: ['Fallback resolution elements']\n    },\n    linkedin_optimization: {\n      scroll_stopping_opening: 'Fallback opening strategy',\n      authority_establishment: 'Fallback authority building',\n      psychology_application: 'Fallback psychology application',\n      technical_integration: 'Fallback technical integration',\n      value_delivery: 'Fallback value delivery',\n      discussion_invitation: 'Fallback discussion invitation'\n    },\n    professional_elements: {\n      industry_relevance: 'Fallback industry relevance',\n      expertise_demonstration: 'Fallback expertise demonstration',\n      practical_application: 'Fallback practical application',\n      credibility_building: 'Fallback credibility building',\n      shareability_psychology: 'Fallback shareability psychology'\n    },\n    extraction_status: 'fallback_data_used',\n    parsing_error: 'Failed to extract narrative structure'\n  };\n}\n\n// Extract narrative data from the AI response\nconst narrativeData = extractNarrativeData(inputData);\n\n// Get data from previous nodes\nconst psychologyData = $('PSYCHOLOGY DATA PROCESSOR').first().json;\nconst personalityData = $('3. Personality Modifier').first().json;\n\n// Validate that we have all required data\nconsole.log('=== DATA VALIDATION ===');\nconsole.log('Psychology data available:', !!psychologyData?.psychology_strategy);\nconsole.log('Personality data available:', !!personalityData?.voice_profile);\nconsole.log('Narrative data extracted:', !!narrativeData?.narrative_structure);\n\n// Merge all data together with validation\nconst enhancedData = {\n  // Keep all original data\n  ...personalityData,\n  \n  // Add psychology data\n  psychology_strategy: psychologyData?.psychology_strategy || {},\n  viral_optimization: psychologyData?.viral_optimization || {},\n  engagement_drivers: psychologyData?.engagement_drivers || {},\n  linkedin_optimization: psychologyData?.linkedin_optimization || {},\n  \n  // Add the extracted narrative data\n  narrative_structure: narrativeData?.narrative_structure || {},\n  linkedin_narrative_optimization: narrativeData?.linkedin_optimization || {},\n  professional_elements: narrativeData?.professional_elements || {},\n  \n  // Processing metadata\n  narrative_processing: {\n    extraction_successful: !!narrativeData?.narrative_structure?.framework_type,\n    extraction_method: narrativeData?.parsing_error ? 'fallback' : 'markdown_json',\n    processed_at: new Date().toISOString(),\n    framework_type: narrativeData?.narrative_structure?.framework_type || 'unknown',\n    story_steps: narrativeData?.narrative_structure?.story_progression?.length || 0,\n    validation_checks: {\n      has_narrative_structure: !!narrativeData?.narrative_structure,\n      has_story_progression: !!(narrativeData?.narrative_structure?.story_progression?.length > 0),\n      has_tension_moments: !!(narrativeData?.narrative_structure?.tension_moments?.length > 0),\n      has_credibility_anchors: !!(narrativeData?.narrative_structure?.credibility_anchors?.length > 0),\n      has_linkedin_optimization: !!narrativeData?.linkedin_optimization\n    }\n  }\n};\n\n// Final validation\nconst validationScore = Object.values(enhancedData.narrative_processing.validation_checks)\n  .filter(Boolean).length;\n\nconsole.log('=== FINAL RESULTS ===');\nconsole.log('✅ Narrative data processed successfully');\nconsole.log('📊 Validation score:', validationScore + '/5 checks passed');\nconsole.log('🎭 Framework type:', enhancedData.narrative_structure?.framework_type || 'Not found');\nconsole.log('📖 Story progression steps:', enhancedData.narrative_structure?.story_progression?.length || 0);\nconsole.log('⚡ Tension moments:', enhancedData.narrative_structure?.tension_moments?.length || 0);\nconsole.log('🏆 Credibility anchors:', enhancedData.narrative_structure?.credibility_anchors?.length || 0);\nconsole.log('🚀 Ready for Content Generator:', validationScore >= 4);\n\nreturn { json: enhancedData };"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[5720,1100],"id":"88d2fa37-70a5-412b-ad0d-60f77fd4c91d","name":"NARRATIVE DATA PROCESSOR"},{"parameters":{"jsCode":"// SPLIT 5 POSTS FOR INDIVIDUAL AIRTABLE RECORDS\n// Creates separate records for each generated post\n\nconst qualityValidatorOutput = $input.first().json;\n\nconsole.log('=== SPLITTING POSTS FOR AIRTABLE ===');\n\n// Check for errors\nif (qualityValidatorOutput.error) {\n  console.error('❌ Error in quality validator output:', qualityValidatorOutput.message);\n  return {\n    json: {\n      error: true,\n      message: 'Quality validator contains errors: ' + qualityValidatorOutput.message,\n      originalError: qualityValidatorOutput\n    }\n  };\n}\n\n// Check for posts\nif (!qualityValidatorOutput.all_posts || Object.keys(qualityValidatorOutput.all_posts).length === 0) {\n  console.error('❌ No posts found in quality validator output');\n  return {\n    json: {\n      error: true,\n      message: 'No posts to process',\n      available_data: Object.keys(qualityValidatorOutput)\n    }\n  };\n}\n\nconst allPosts = qualityValidatorOutput.all_posts;\nconst postValidations = qualityValidatorOutput.post_validations;\nconst processingSummary = qualityValidatorOutput.processing_summary;\n\nconsole.log(`📊 Processing ${Object.keys(allPosts).length} posts for Airtable`);\n\n// Create individual records for each post\nconst outputRecords = [];\n\nObject.entries(allPosts).forEach(([postKey, postData], index) => {\n  const validation = postValidations[postKey];\n  const postNumber = index + 1;\n  \n  // Clean post type name for display\n  const postTypeName = postKey\n    .replace('post_', '')\n    .replace(/_/g, ' ')\n    .replace(/\\b\\w/g, l => l.toUpperCase());\n  \n  console.log(`Processing ${postKey}: ${postTypeName}`);\n  \n  const record = {\n    // Core content\n    \"Client\": processingSummary.client,\n    \"Content_Type\": processingSummary.platform || \"LinkedIn\",\n    \"Post_Variation\": postTypeName,\n    \"Post_Number\": postNumber,\n    \"LinkedIn_Post\": postData.content,\n    \"Character_Count\": parseInt(postData.character_count) || postData.content.length,\n    \"Focus_Area\": postData.focus || 'Unknown focus',\n    \n    // Quality metrics\n    \"Quality_Score\": validation.score,\n    \"Quality_Grade\": validation.grade,\n    \"Technical_Terms_Found\": validation.technical_terms_found || 0,\n    \"Engagement_Score\": calculateEngagementScore(validation.checks),\n    \n    // Status and readiness\n    \"Publication_Ready\": validation.score >= 70,\n    \"Status\": validation.score >= 80 ? 'Excellent' : \n              validation.score >= 70 ? 'Ready' : \n              validation.score >= 60 ? 'Needs Review' : 'Poor',\n    \n    // Campaign context\n    \"Campaign_Date\": processingSummary.processed_at,\n    \"Total_Posts_Generated\": Object.keys(allPosts).length,\n    \"Best_Post_In_Set\": postKey === qualityValidatorOutput.quality_assessment.best_post,\n    \"Campaign_Average_Score\": qualityValidatorOutput.quality_assessment.overall_score,\n    \n    // Validation details\n    \"Quality_Checks_Passed\": validation.checks.length,\n    \"Issues_Found\": validation.issues.length,\n    \"Quality_Details\": [\n      ...validation.checks,\n      ...validation.issues.map(issue => issue)\n    ].join('\\n'),\n    \n    // Metadata\n    \"Created_Date\": new Date().toISOString(),\n    \"Post_Key\": postKey\n  };\n  \n  outputRecords.push({\n    json: record,\n    pairedItem: 0\n  });\n  \n  console.log(`✅ ${postTypeName}: ${validation.score}/100 (${validation.grade}) - ${validation.character_count || postData.content.length} chars`);\n});\n\n// Helper function to calculate engagement score\nfunction calculateEngagementScore(checks) {\n  let engagementScore = 0;\n  checks.forEach(check => {\n    if (check.includes('Strong engagement')) engagementScore += 3;\n    else if (check.includes('engagement')) engagementScore += 1;\n  });\n  return engagementScore;\n}\n\n// Summary logging\nconsole.log('=== AIRTABLE SPLITTING COMPLETE ===');\nconsole.log(`📊 Created ${outputRecords.length} individual post records`);\nconsole.log(`🏆 Best post: ${qualityValidatorOutput.quality_assessment.best_post}`);\nconsole.log(`📈 Campaign average: ${qualityValidatorOutput.quality_assessment.overall_score}/100`);\nconsole.log(`✅ Publication ready: ${qualityValidatorOutput.quality_assessment.publication_ready_count}/${Object.keys(allPosts).length}`);\n\n// Show record summary\noutputRecords.forEach((record, index) => {\n  const data = record.json;\n  console.log(`${index + 1}. ${data.Post_Variation}: ${data.Quality_Score}/100 (${data.Status})`);\n});\n\nreturn outputRecords;"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[7320,900],"id":"bf24add9-d0f8-4244-999f-d34a61d4b536","name":"Code"},{"parameters":{"path":"generate-linkedin-post","formTitle":"🚀 Viral Social Media Post Generator","formDescription":"Generate unique, engaging posts for any platform from your campaign content","formFields":{"values":[{"fieldLabel":"Campaign Record ID","fieldType":"string","placeholder":"Enter the Airtable record ID from your Content Focus Plan"},{"fieldLabel":"Platform","fieldType":"dropdown","fieldOptions":{"values":[{"option":"LinkedIn"},{"option":"Facebook"},{"option":"Instagram"},{"option":"X"},{"option":"Medium"}]}},{"fieldLabel":"Number of Variations","fieldType":"dropdown","fieldOptions":{"values":[{"option":"3"},{"option":"5"},{"option":"7"}]}}]},"options":{"appendAttribution":false,"buttonLabel":"Generate LinkedIn Post"}},"type":"n8n-nodes-base.formTrigger","typeVersion":2.1,"position":[1940,1020],"id":"562587ec-4afc-4b65-ae51-1a6932ada155","name":"Viral Social Media Post Generator","webhookId":"linkedin-post-generator"},{"parameters":{"rules":{"values":[{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"leftValue":"={{ $('Process Form Data').item.json.selected_platform }}","rightValue":"LinkedIn","operator":{"type":"string","operation":"equals"},"id":"d87e8e44-cb31-4c72-a3ac-503ac9758b2e"}],"combinator":"and"},"renameOutput":true,"outputKey":"LinkedIn"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"5edaad04-556f-4cfa-b0ec-6c3ab4c26527","leftValue":"={{ $('Process Form Data').item.json.selected_platform }}","rightValue":"Facebook","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"Facebook"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"1c07f712-4bc6-4868-a89e-ac5cdaadf796","leftValue":"={{ $('Process Form Data').item.json.selected_platform }}","rightValue":"Instagram","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"Instagram"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"a1def562-7f98-4648-aaa3-6243593217df","leftValue":"={{ $('Process Form Data').item.json.selected_platform }}","rightValue":"X","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"X"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"2dad682f-0a04-41bc-9ccd-088c954c79f8","leftValue":"={{ $('Process Form Data').item.json.selected_platform }}","rightValue":"Email","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"Email"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"97cfd9c0-c9e4-46b4-80e0-8c4fe77f098c","leftValue":"={{ $('Process Form Data').item.json.platform_field }}","rightValue":"Medium","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"Medium"}]},"options":{}},"type":"n8n-nodes-base.switch","typeVersion":3.2,"position":[3200,960],"id":"90a8925a-c615-444f-b789-81f60d93406c","name":"Switch"},{"parameters":{"promptType":"define","text":"==🔍 CURRENT INDUSTRY RESEARCH AGENT\n\nMISSION: Generate fresh, angle-specific industry insights that make content compelling and timely.\n\n=== RESEARCH CONTEXT ===\nSelected Angle: {{ $json.content_angle.angle }}\nPsychology Trigger: {{ $json.content_angle.psychology }}\nNarrative Structure: {{ $json.content_angle.narrative }}\nClient: {{ $json.Business_Name }}\nProduct: {{ $json.Product }}\nIndustry: {{ $json.Industry }} ({{ $json.industry_context.b2b_focus ? 'B2B' : 'B2C' }} Focus)\nTechnical Focus: {{ $json['Technical Capabilities Extracted'] }}\nEnhanced Technical Expertise: {{ $json.technical_interpretation.primary_expertise }}\nPain Point: {{ $json.Pain_Point }}\nSolution: {{ $json.Solution_Feature }}\nTarget Audience: {{ $json.Target_Audience }}\n\n## ANGLE-SPECIFIC RESEARCH MISSION\n\nBased on the \"{{ $json.content_angle.angle }}\" approach, research and provide current insights:\n\n### FOR DATA_DETECTIVE:\n- Recent studies or surveys with surprising findings about {{ $json.Product }} solutions\n- Hidden patterns in {{ $json.Industry }} adoption or failure rates\n- Counterintuitive statistics about database backup solutions that most miss\n- Data-driven insights about {{ $json['Technical Capabilities Extracted'] }} implementations\n- Performance benchmarks that contradict popular beliefs\n\n### FOR PROBLEM_SOLVER:\n- Current specific problems with {{ $json.Pain_Point }} in {{ $json.Industry }}\n- Why existing backup solutions fail {{ $json.Target_Audience }}\n- Success stories of companies solving {{ $json.Pain_Point }} with {{ $json['Technical Capabilities Extracted'] }}\n- Implementation approaches that actually work for {{ $json.Industry }}\n- Gap analysis between current market solutions and {{ $json.Solution_Feature }}\n\n### FOR INDUSTRY_INSIDER:\n- Behind-the-scenes practices in {{ $json.Industry }} {{ $json.Product }} implementations\n- What {{ $json.Target_Audience }} discuss privately about backup solutions\n- Vendor selection criteria that aren't publicly discussed for {{ $json['Technical Capabilities Extracted'] }}\n- Implementation challenges that companies don't admit in {{ $json.Industry }}\n- Real-world deployment experiences with Oracle/SQL Server backup solutions\n\n### FOR COMPETITIVE_ANALYST:\n- Competitor strategies in {{ $json.Product }} space that are backfiring\n- Market positioning mistakes being made in database backup solutions\n- Gaps in competitive offerings for {{ $json['Technical Capabilities Extracted'] }}\n- Strategic opportunities competitors are missing in {{ $json.Industry }}\n- {{ $json.Solution_Feature }} advantages that competitors can't match\n\n### FOR FUTURE_PROPHET:\n- Emerging technologies in {{ $json.Product }} space for {{ $json.Industry }}\n- Database backup trends happening faster than expected\n- {{ $json['Technical Capabilities Extracted'] }} adoption curves accelerating\n- Industry predictions from credible analysts about data protection\n- Technology shifts affecting {{ $json.Target_Audience }} backup strategies\n\n### FOR RISK_REVEALER:\n- Emerging compliance or security risks in {{ $json.Industry }} data management\n- Database backup practices that seem safe but create vulnerabilities\n- Risk mitigation strategies for {{ $json['Technical Capabilities Extracted'] }}\n- Warning signs {{ $json.Target_Audience }} should watch for\n- Hidden costs of poor {{ $json.Product }} implementations\n\n### FOR CONTRARIAN_DISRUPTOR:\n- Industry conventional wisdom about {{ $json.Product }} that's actually outdated\n- Recent data contradicting popular beliefs about database backup\n- Examples of companies succeeding by doing opposite of standard backup practices\n- Controversial positions about {{ $json['Technical Capabilities Extracted'] }} implementations\n\n### FOR EXPERIENCE_STORYTELLER:\n- Transformation stories from {{ $json.Target_Audience }} implementing {{ $json.Solution_Feature }}\n- Before/after scenarios with {{ $json['Technical Capabilities Extracted'] }}\n- Personal experiences of IT teams switching to modern backup solutions\n- Journey narratives from manual to automated {{ $json.Product }}\n\n## TECHNICAL DEPTH INTEGRATION\n\nBased on {{ $json.technical_interpretation.technical_depth }} technical depth for {{ $json.Industry }}:\n\n**High-Tech Focus (Software/SaaS)**:\n- Specific version compatibility issues (Oracle 19c+, SQL Server 2019+)\n- Performance optimization techniques for real-time backup\n- Integration challenges with enterprise database environments\n- Technical specifications that matter for {{ $json.Target_Audience }}\n\n**Medium-Tech Focus (Other Industries)**:\n- Business impact of technical capabilities\n- Implementation ease and user experience\n- Cost-benefit analysis of technical features\n- Risk mitigation through technical solutions\n\n## OUTPUT FORMAT\n\n```json\n{\n  \"angle_research\": {\n    \"primary_insights\": [\"3-5 current insights specific to {{ $json.content_angle.angle }} and {{ $json.Business_Name }} context\"],\n    \"supporting_data\": [\"recent statistics, studies, examples validating the {{ $json.content_angle.angle }} approach\"],\n    \"unique_perspective\": \"what makes this angle compelling for {{ $json.Target_Audience }} right now\",\n    \"controversy_potential\": \"why this perspective might challenge conventional thinking in {{ $json.Industry }}\",\n    \"timing_relevance\": \"why this angle matters specifically in 2025 for {{ $json.Product }} solutions\",\n    \"technical_integration\": [\"how {{ $json['Technical Capabilities Extracted'] }} supports this angle\"]\n  },\n  \"industry_intelligence\": {\n    \"current_pain_points\": [\"specific problems {{ $json.Target_Audience }} face with {{ $json.Pain_Point }}\"],\n    \"market_trends\": [\"trends affecting {{ $json.Product }} adoption in {{ $json.Industry }}\"],\n    \"competitive_landscape\": [\"what competitors are doing wrong with {{ $json['Technical Capabilities Extracted'] }}\"],\n    \"technology_shifts\": [\"technical developments relevant to {{ $json.Solution_Feature }}\"],\n    \"regulatory_considerations\": [\"compliance or security factors affecting {{ $json.Industry }}\"]\n  },\n  \"content_ammunition\": {\n    \"hook_elements\": [\"specific current events, stats, trends for compelling {{ $json.content_angle.angle }} hooks\"],\n    \"credibility_builders\": [\"recent developments establishing {{ $json.Business_Name }} authority in {{ $json.technical_interpretation.primary_expertise }}\"],\n    \"engagement_triggers\": [\"current topics driving professional discussion in {{ $json.Industry }}\"],\n    \"proof_points\": [\"recent evidence validating {{ $json.Solution_Feature }} approach\"],\n    \"technical_authority_signals\": [\"ways to demonstrate {{ $json['Technical Capabilities Extracted'] }} expertise\"]\n  },\n  \"research_confidence\": \"1-10 rating of research quality and currency\"\n}\n```\n\n**Focus on generating insights that make the \"{{ $json.content_angle.angle }}\" angle feel urgent, relevant, and compelling for {{ $json.Target_Audience }} in the current {{ $json.Industry }} market, while showcasing {{ $json.technical_interpretation.primary_expertise }}.**","messages":{"messageValues":[{"message":"=You are a senior industry research analyst specializing in current market intelligence. Generate angle-specific insights that make content compelling and immediately relevant."}]}},"type":"@n8n/n8n-nodes-langchain.chainLlm","typeVersion":1.6,"position":[3840,640],"id":"00a001cb-7113-47d2-9f51-e4257bcc3191","name":"LinkedIn Research Agent"},{"parameters":{"promptType":"define","text":"===🔍 FACEBOOK COMMUNITY RESEARCH AGENT\n\nMISSION: Generate community-focused, relatable insights that drive Facebook engagement and social sharing.\n\n=== RESEARCH CONTEXT ===\nSelected Angle: {{ $json.content_angle.angle }}\nPsychology Trigger: {{ $json.content_angle.psychology }}\nClient: {{ $json.Business_Name }}\nProduct: {{ $json.Product }}\nIndustry: {{ $json.Industry }}\nTarget Audience: {{ $json.Target_Audience }}\nPlatform Focus: Facebook (community-driven, social sharing, relatable content)\n\n## FACEBOOK-SPECIFIC RESEARCH MISSION\n\nBased on the \"{{ $json.content_angle.angle }}\" approach, research community and social insights:\n\n### FOR FACEBOOK ENGAGEMENT:\n- Real customer stories and testimonials about {{ $json.Product }}\n- Community discussions and common concerns in {{ $json.Industry }}\n- Local business success stories using {{ $json.Product }} solutions\n- Family/lifestyle impact of {{ $json.Pain_Point }}\n- Social proof from actual users and their experiences\n- Visual-friendly examples and relatable scenarios\n\n### FOR SOCIAL SHARING:\n- Stories that make people tag friends or share with family\n- Local community relevance for {{ $json.Target_Audience }}\n- Relatable problems that resonate with everyday experiences\n- Success stories people want to celebrate and share\n- Tips and advice that help friends and family\n- Behind-the-scenes content that builds authentic connection\n\n### FOR FACEBOOK ALGORITHM:\n- Content that generates meaningful comments and conversations\n- Stories that encourage people to share personal experiences\n- Questions that prompt community discussion\n- Relatable scenarios that drive engagement\n- Local relevance and community connection\n- Authentic, personal tone that feels genuine\n\n## OUTPUT FORMAT\n\n```json\n{\n  \"facebook_community_research\": {\n    \"relatable_stories\": [\"2-3 customer stories that feel authentic and shareable\"],\n    \"community_discussions\": [\"current conversations in Facebook groups about {{ $json.Product }} solutions\"],\n    \"local_relevance\": [\"how {{ $json.Product }} impacts local businesses and families\"],\n    \"social_proof_examples\": [\"real testimonials and success stories from actual users\"],\n    \"conversation_starters\": [\"topics that get people talking and sharing experiences\"],\n    \"visual_content_opportunities\": [\"scenarios that work well with photos/videos on Facebook\"]\n  },\n  \"engagement_intelligence\": {\n    \"comment_triggers\": [\"questions and topics that generate meaningful comments\"],\n    \"sharing_motivations\": [\"why people would share this content with friends/family\"],\n    \"community_connection\": [\"how content builds authentic relationships\"],\n    \"local_business_angle\": [\"relevance to local {{ $json.Industry }} businesses\"],\n    \"family_impact\": [\"how {{ $json.Product }} affects daily life and family decisions\"]\n  },\n  \"facebook_optimization\": {\n    \"authentic_voice\": [\"how to sound genuine and relatable, not corporate\"],\n    \"community_building\": [\"content that strengthens community connections\"],\n    \"social_sharing_hooks\": [\"elements that make content shareable\"],\n    \"conversation_topics\": [\"subjects that generate meaningful discussions\"],\n    \"visual_storytelling\": [\"stories that work well with Facebook's visual format\"]\n  }\n}","messages":{"messageValues":[{"message":"=You are a senior industry research analyst specializing in current market intelligence. Generate angle-specific insights that make content compelling and immediately relevant."}]}},"type":"@n8n/n8n-nodes-langchain.chainLlm","typeVersion":1.6,"position":[3860,820],"id":"28d312f7-3573-4616-b475-e701a456fc0c","name":"Facebook Research Agent1"},{"parameters":{"promptType":"define","text":"===🔍 INSTAGRAM VISUAL RESEARCH AGENT\n\nMISSION: Generate visual-first, lifestyle-focused insights that drive Instagram engagement and aesthetic appeal.\n\n=== RESEARCH CONTEXT ===\nSelected Angle: {{ $json.content_angle.angle }}\nPsychology Trigger: {{ $json.content_angle.psychology }}\nClient: {{ $json.Business_Name }}\nProduct: {{ $json.Product }}\nIndustry: {{ $json.Industry }}\nTarget Audience: {{ $json.Target_Audience }}\nPlatform Focus: Instagram (visual storytelling, lifestyle inspiration, hashtag discovery)\n\n## INSTAGRAM-SPECIFIC RESEARCH MISSION\n\nBased on the \"{{ $json.content_angle.angle }}\" approach, research visual and lifestyle insights:\n\n### FOR VISUAL STORYTELLING:\n- Behind-the-scenes moments with {{ $json.Product }} in action\n- Before/after transformations using {{ $json.Product }}\n- Day-in-the-life content showing {{ $json.Product }} integration\n- Aesthetic setups and workspace inspiration featuring {{ $json.Product }}\n- User-generated content opportunities and customer showcases\n- Visual metaphors that explain {{ $json.Product }} benefits\n\n### FOR LIFESTYLE CONNECTION:\n- How {{ $json.Product }} fits into daily routines and lifestyle goals\n- Aspirational content that {{ $json.Target_Audience }} wants to achieve\n- Seasonal relevance and trending lifestyle themes\n- Workspace aesthetics and productivity inspiration\n- Success journeys and personal growth stories\n- Community and culture around {{ $json.Industry }}\n\n### FOR HASHTAG STRATEGY:\n- Trending hashtags in {{ $json.Industry }} and {{ $json.Product }} space\n- Lifestyle hashtags that {{ $json.Target_Audience }} follows\n- Niche community hashtags for engaged audiences\n- Location-based hashtags for local discovery\n- Branded hashtag opportunities for user-generated content\n- Trending topics that align with {{ $json.Product }} messaging\n\n## OUTPUT FORMAT\n\n```json\n{\n  \"instagram_visual_research\": {\n    \"visual_story_ideas\": [\"3-4 visual content ideas that showcase {{ $json.Product }} in lifestyle context\"],\n    \"behind_scenes_opportunities\": [\"authentic moments that build connection and trust\"],\n    \"transformation_stories\": [\"before/after scenarios that inspire and motivate\"],\n    \"aesthetic_inspiration\": [\"visual styles and setups that resonate with {{ $json.Target_Audience }}\"],\n    \"user_content_opportunities\": [\"ways customers can create and share content about {{ $json.Product }}\"],\n    \"visual_metaphors\": [\"imagery that makes {{ $json.Product }} benefits instantly understandable\"]\n  },\n  \"lifestyle_intelligence\": {\n    \"daily_integration\": [\"how {{ $json.Product }} naturally fits into {{ $json.Target_Audience }} lifestyle\"],\n    \"aspirational_content\": [\"lifestyle goals and achievements {{ $json.Target_Audience }} wants\"],\n    \"seasonal_relevance\": [\"timely lifestyle themes and seasonal connections\"],\n    \"community_culture\": [\"visual trends and aesthetics in {{ $json.Industry }} community\"],\n    \"workspace_inspiration\": [\"productivity and workspace aesthetics featuring {{ $json.Product }}\"]\n  },\n  \"instagram_optimization\": {\n    \"trending_hashtags\": [\"current popular hashtags relevant to {{ $json.Product }} and {{ $json.Industry }}\"],\n    \"niche_hashtags\": [\"smaller, engaged hashtag communities for discovery\"],\n    \"story_vs_feed_content\": [\"what works better in Stories vs main feed\"],\n    \"caption_style\": [\"Instagram-native caption styles that drive engagement\"],\n    \"visual_consistency\": [\"aesthetic approaches that build recognizable brand presence\"],\n    \"engagement_patterns\": [\"when and how {{ $json.Target_Audience }} engages on Instagram\"]\n  }\n}","messages":{"messageValues":[{"message":"=You are a senior industry research analyst specializing in current market intelligence. Generate angle-specific insights that make content compelling and immediately relevant."}]}},"type":"@n8n/n8n-nodes-langchain.chainLlm","typeVersion":1.6,"position":[3860,1060],"id":"fc6e4417-efd3-4af0-bb7b-038e68a95a4d","name":"Instagram Research Agent"},{"parameters":{"promptType":"define","text":"===🔍 X REAL-TIME RESEARCH AGENT\n\nMISSION: Generate trending, conversation-sparking insights optimized for X's fast-paced, real-time engagement.\n\n=== RESEARCH CONTEXT ===\nSelected Angle: {{ $json.content_angle.angle }}\nPsychology Trigger: {{ $json.content_angle.psychology }}\nClient: {{ $json.Business_Name }}\nProduct: {{ $json.Product }}\nIndustry: {{ $json.Industry }}\nTarget Audience: {{ $json.Target_Audience }}\nPlatform Focus: X (real-time trends, quick insights, viral potential, threading)\n\n## X-SPECIFIC RESEARCH MISSION\n\nBased on the \"{{ $json.content_angle.angle }}\" approach, research trending and viral insights:\n\n### FOR REAL-TIME RELEVANCE:\n- Breaking news and current events affecting {{ $json.Industry }}\n- Trending topics that connect to {{ $json.Product }} solutions\n- Industry hot takes and controversial opinions about {{ $json.Product }}\n- Live events, conferences, or announcements in {{ $json.Industry }}\n- Current debates and discussions around {{ $json.Pain_Point }}\n- Viral moments that can be leveraged for {{ $json.Product }} messaging\n\n### FOR VIRAL POTENTIAL:\n- Contrarian takes on common {{ $json.Industry }} practices\n- Shocking statistics about {{ $json.Pain_Point }} that spark discussion\n- Quick wins and \"aha moments\" related to {{ $json.Product }}\n- Industry myths that need debunking\n- Quotable insights that get retweeted\n- Thread-worthy deep dives on {{ $json.Product }} topics\n\n### FOR X ENGAGEMENT:\n- Questions that generate quote tweets and replies\n- Data points that spark \"this you?\" moments\n- Industry observations that get people talking\n- Quick tips that provide immediate value\n- Predictions that age well (or controversially)\n- Behind-the-scenes insights that feel exclusive\n\n## OUTPUT FORMAT\n\n```json\n{\n  \"x_trending_research\": {\n    \"hot_takes\": [\"2-3 contrarian or surprising positions about {{ $json.Product }} or {{ $json.Industry }}\"],\n    \"viral_statistics\": [\"shocking data points about {{ $json.Pain_Point }} that spark discussion\"],\n    \"trending_connections\": [\"how current trending topics connect to {{ $json.Product }}\"],\n    \"debate_starters\": [\"controversial industry opinions that generate healthy debate\"],\n    \"quotable_insights\": [\"memorable one-liners about {{ $json.Product }} that get retweeted\"],\n    \"thread_opportunities\": [\"topics that deserve 5-10 tweet thread treatment\"]\n  },\n  \"real_time_intelligence\": {\n    \"breaking_relevance\": [\"recent news or events that {{ $json.Product }} can comment on\"],\n    \"industry_conversations\": [\"what {{ $json.Industry }} professionals are discussing right now\"],\n    \"trending_hashtags\": [\"current trending tags relevant to {{ $json.Product }}\"],\n    \"viral_moments\": [\"recent viral content patterns that {{ $json.Product }} can adapt\"],\n    \"live_opportunities\": [\"real-time events where {{ $json.Product }} can join conversation\"]\n  },\n  \"x_optimization\": {\n    \"character_efficiency\": [\"how to pack maximum impact into limited characters\"],\n    \"engagement_triggers\": [\"X-specific language that drives replies and retweets\"],\n    \"thread_structure\": [\"how to break complex {{ $json.Product }} topics into digestible threads\"],\n    \"timing_insights\": [\"when {{ $json.Target_Audience }} is most active on X\"],\n    \"conversation_hijacking\": [\"how to respectfully join trending conversations with {{ $json.Product }} perspective\"],\n    \"quote_tweet_bait\": [\"content designed to generate quote tweet discussions\"]\n  }\n}","messages":{"messageValues":[{"message":"=You are a senior industry research analyst specializing in current market intelligence. Generate angle-specific insights that make content compelling and immediately relevant."}]}},"type":"@n8n/n8n-nodes-langchain.chainLlm","typeVersion":1.6,"position":[3860,1280],"id":"2e55bb5c-b76c-4d4b-b1d2-1708e2de5dc6","name":"X Research Agent1"},{"parameters":{"jsCode":"// RESEARCH MERGER NODE - FIXED FOR UNEXECUTED NODES\n// Safely handles unexecuted research agents\n\nconsole.log('=== RESEARCH MERGER NODE (FIXED) ===');\n\n// Get the original campaign data (contains platform selection)\nconst originalCampaignData = $('1. Content Angle Randomizer').first().json;\nconst selectedPlatform = originalCampaignData.platform_data?.selected_platform;\n\nconsole.log('Selected platform:', selectedPlatform);\nconsole.log('Merging research from executed agents...');\n\n// Function to safely get data from potentially unexecuted node\nfunction safelyGetNodeData(nodeName) {\n  try {\n    const nodeData = $input.all().find(item => \n      item.json && (item.json.source_node === nodeName || item.json.node_name === nodeName)\n    );\n    if (nodeData) return nodeData.json;\n    \n    // Try alternative method\n    const allItems = $input.all();\n    console.log(`Checking ${allItems.length} input items for ${nodeName} data`);\n    \n    // Since we're coming from a router, we should have the executed agent's data in input\n    return $input.first().json;\n  } catch (error) {\n    console.log(`⚠️ Node ${nodeName} not executed or accessible:`, error.message);\n    return null;\n  }\n}\n\n// Since we're coming through the router, the input should contain the executed research agent's data\nconst executedResearchData = $input.first().json;\nconsole.log('Received research data:', !!executedResearchData);\n\n// Function to extract research data from AI response\nfunction extractResearchData(researchOutput, platformName) {\n  if (!researchOutput) {\n    console.log(`❌ No ${platformName} research output received`);\n    return null;\n  }\n  \n  try {\n    let textContent = researchOutput.text || researchOutput.content || JSON.stringify(researchOutput);\n    \n    console.log(`📝 ${platformName} research length:`, textContent.length);\n    \n    // Extract JSON from markdown code blocks\n    const jsonMatch = textContent.match(/```json\\s*\\n?([^`]+)\\s*\\n?```/s);\n    \n    if (jsonMatch) {\n      console.log(`✅ Found ${platformName} JSON in markdown`);\n      const jsonText = jsonMatch[1].trim();\n      return JSON.parse(jsonText);\n    }\n    \n    console.log(`❌ No markdown JSON found in ${platformName} research`);\n    return { raw_content: textContent, platform: platformName };\n    \n  } catch (error) {\n    console.error(`❌ Failed to parse ${platformName} research:`, error.message);\n    return { parsing_error: error.message, platform: platformName };\n  }\n}\n\n// Extract research from the executed agent\nconst selectedResearch = extractResearchData(executedResearchData, selectedPlatform);\n\nconsole.log(`🎯 Using research from: ${selectedPlatform} Research Agent`);\nconsole.log(`📊 Research quality:`, selectedResearch ? 'Good' : 'Missing');\n\n// Create fallback research if selected research is missing\nif (!selectedResearch || selectedResearch.parsing_error) {\n  console.log('🚨 Creating fallback research data');\n  selectedResearch = {\n    angle_research: {\n      primary_insights: [`Current ${selectedPlatform} trends affecting ${originalCampaignData.Product || 'the product'}`],\n      supporting_data: [`${selectedPlatform} engagement patterns for ${originalCampaignData.Industry || 'the industry'}`],\n      unique_perspective: `${selectedPlatform}-specific perspective on ${originalCampaignData.Pain_Point || 'customer challenges'}`,\n      timing_relevance: `Why this matters for ${selectedPlatform} audience right now`,\n      technical_integration: [`How ${originalCampaignData.Product || 'the solution'} aligns with ${selectedPlatform} user behavior`]\n    },\n    industry_intelligence: {\n      current_pain_points: [`${selectedPlatform} user challenges with ${originalCampaignData.Pain_Point || 'current solutions'}`],\n      market_trends: [`${selectedPlatform} trends in ${originalCampaignData.Industry || 'the industry'}`],\n      competitive_landscape: [`How competitors perform on ${selectedPlatform}`],\n      technology_shifts: [`${selectedPlatform} algorithm and feature changes`]\n    },\n    content_ammunition: {\n      hook_elements: [`${selectedPlatform}-optimized hooks and openings`],\n      credibility_builders: [`${selectedPlatform} authority signals`],\n      engagement_triggers: [`${selectedPlatform} engagement best practices`],\n      proof_points: [`${selectedPlatform} success metrics and social proof`]\n    },\n    research_confidence: 5,\n    fallback_used: true,\n    fallback_reason: 'Research parsing failed or unavailable'\n  };\n}\n\n// Merge research with original campaign data\nconst mergedData = {\n  ...originalCampaignData,\n  \n  // Add platform-specific research\n  angle_research: selectedResearch.angle_research || \n                  selectedResearch.linkedin_research || \n                  selectedResearch.facebook_community_research ||\n                  selectedResearch.x_trending_research ||\n                  selectedResearch.instagram_visual_research || {},\n  \n  industry_intelligence: selectedResearch.industry_intelligence || \n                        selectedResearch.engagement_intelligence || {},\n  \n  content_ammunition: selectedResearch.content_ammunition || \n                     selectedResearch.x_optimization ||\n                     selectedResearch.facebook_optimization ||\n                     selectedResearch.instagram_optimization || {},\n  \n  // Research metadata\n  research_metadata: {\n    selected_platform: selectedPlatform,\n    research_source: `${selectedPlatform} Research Agent`,\n    research_quality: selectedResearch && !selectedResearch.fallback_used ? 'good' : 'fallback',\n    merger_timestamp: new Date().toISOString(),\n    fallback_used: !!selectedResearch?.fallback_used,\n    input_method: 'router_passthrough'\n  }\n};\n\nconsole.log('=== RESEARCH MERGER COMPLETE ===');\nconsole.log(`🎯 Platform: ${selectedPlatform}`);\nconsole.log(`📊 Research Source: ${selectedPlatform} Research Agent`);\nconsole.log(`✅ Research Quality: ${mergedData.research_metadata.research_quality}`);\nconsole.log(`🚀 Ready for Personality Modifier`);\n\nreturn { json: mergedData };"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[4500,940],"id":"1c3298ae-8f36-4ff3-866c-5d6cdf5a4c22","name":"Research Merger"},{"parameters":{"rules":{"values":[{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"leftValue":"={{ $('Process Form Data').item.json.selected_platform }}","rightValue":"LinkedIn","operator":{"type":"string","operation":"equals"},"id":"d87e8e44-cb31-4c72-a3ac-503ac9758b2e"}],"combinator":"and"},"renameOutput":true,"outputKey":"LinkedIn"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"5edaad04-556f-4cfa-b0ec-6c3ab4c26527","leftValue":"={{ $('Process Form Data').item.json.selected_platform }}","rightValue":"Facebook","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"Facebook"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"1c07f712-4bc6-4868-a89e-ac5cdaadf796","leftValue":"={{ $('Process Form Data').item.json.selected_platform }}","rightValue":"Instagram","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"Instagram"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"a1def562-7f98-4648-aaa3-6243593217df","leftValue":"={{ $('Process Form Data').item.json.selected_platform }}","rightValue":"X","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"X"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"2dad682f-0a04-41bc-9ccd-088c954c79f8","leftValue":"={{ $('Process Form Data').item.json.selected_platform }}","rightValue":"Email","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"Email"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"97cfd9c0-c9e4-46b4-80e0-8c4fe77f098c","leftValue":"={{ $('Process Form Data').item.json.platform_field }}","rightValue":"Medium","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"Medium"}]},"options":{}},"type":"n8n-nodes-base.switch","typeVersion":3.2,"position":[5980,840],"id":"af43d91c-9b6f-42da-a7e3-ba36da083826","name":"Switch1"},{"parameters":{"promptType":"define","text":"=**MISSION:** Take existing LinkedIn_Focus content and create multiple enhanced variations using personality, psychology, and research intelligence.\n\n## 📊 BASE CONTENT (Use as Foundation)\n**Existing LinkedIn Content:** {{ $json.LinkedIn_Focus }}\n**Core UVP:** {{ $json.UVP }}\n**Technical Capabilities:** {{ $json['Technical Capabilities Extracted'] }}\n**Product:** {{ $json.Product }}\n**Company:** {{ $json.Business_Name }}\n**Pain Point:** {{ $json.Pain_Point }}\n**Solution Feature:** {{ $json.Solution_Feature }}\n\n## 🎭 ENHANCEMENT LAYERS\n**Personality Mode:** {{ $json.voice_profile.personality_mode }}\n**Psychology Trigger:** {{ $json.psychology_strategy.primary_trigger }}\n**Content Angle:** {{ $json.content_angle.angle }}\n**Research Insights:** {{ $json.angle_research.primary_insights }}\n\n## 🚫 STRICTLY FORBIDDEN AI LANGUAGE\n**NEVER USE:** game-changer, unlock, paradigm shift, digital transformation, mission-critical, forward-thinking, cutting-edge, innovative solutions, next level, dive deep, leverage, synergy, disruptive, game-changing, revolutionary, seamless, robust, scalable, enterprise-grade, world-class, best-in-class, industry-leading, state-of-the-art, end-to-end, turnkey, holistic, strategic, optimize, maximize, streamline (unless in original content), empower, enable, facilitate, expedite, \"the future belongs to\", \"join organizations\", \"leaders in the space\", \"we've witnessed\", \"engineered\", \"our analysis reveals\"\n\n**WRITE LIKE:** A real person explaining their actual product to a colleague over coffee\n\n## 🚀 GENERATION REQUIREMENTS\n\n### POST 1: Enhanced Original\n- Start with: {{ $json.LinkedIn_Focus }}\n- Add: {{ $json.voice_profile.personality_mode }} voice\n- Integrate: {{ $json.UVP }} naturally\n- Keep: Original tone and message\n- Length: 600-800 characters\n\n### POST 2: UVP-Focused\n- Lead with: {{ $json.UVP }}\n- Apply: {{ $json.psychology_strategy.primary_trigger }}\n- Include: {{ $json['Technical Capabilities Extracted'] }}\n- Sound: Like someone explaining why their product matters\n- Length: 600-800 characters\n\n### POST 3: Angle Variation\n- Use: {{ $json.content_angle.angle }} approach\n- Base: {{ $json.LinkedIn_Focus }} core message\n- Add: {{ $json.angle_research.primary_insights }}\n- Voice: Natural, conversational expertise\n- Length: 600-800 characters\n\n### POST 4: Pain Point Focus\n- Start with: {{ $json.Pain_Point }}\n- Show: How {{ $json.Product }} solves this specific problem\n- Include: {{ $json.Solution_Feature }}\n- Voice: Empathetic problem-solver\n- Length: 600-800 characters\n\n### POST 5: Competitive Advantage\n- Highlight: What {{ $json.Product }} does differently\n- Use: {{ $json.Solution_Feature }} as differentiator\n- Include: Specific technical capabilities\n- Voice: Confident expertise without arrogance\n- Length: 600-800 characters\n\n## 📋 AUTHENTICITY RULES\n- Write as {{ $json.Business_Name }} would actually speak\n- NO corporate buzzwords or AI phrases\n- NO Unicode formatting or weird symbols\n- NO \"ALARMING TREND\" or clickbait language\n- Use simple, direct language\n- Sound like a real person, not a marketing bot\n- Focus on actual product benefits, not vague promises\n\n## 📤 OUTPUT FORMAT\n\n```json\n{\n  \"enhanced_posts\": {\n    \"post_1_enhanced_original\": {\n      \"content\": \"Enhanced version of LinkedIn_Focus with personality\",\n      \"focus\": \"Original message + personality enhancement\",\n      \"character_count\": \"exact count\"\n    },\n    \"post_2_uvp_focused\": {\n      \"content\": \"UVP-led post with psychology triggers\",\n      \"focus\": \"Core value proposition emphasis\", \n      \"character_count\": \"exact count\"\n    },\n    \"post_3_angle_variation\": {\n      \"content\": \"Content angle applied to base message\",\n      \"focus\": \"Research insights + unique angle\",\n      \"character_count\": \"exact count\"\n    },\n    \"post_4_pain_point_focus\": {\n      \"content\": \"Pain point problem-solving approach\",\n      \"focus\": \"Specific problem + solution demonstration\",\n      \"character_count\": \"exact count\"\n    },\n    \"post_5_competitive_advantage\": {\n      \"content\": \"What makes this product different\",\n      \"focus\": \"Unique differentiators + technical capabilities\",\n      \"character_count\": \"exact count\"\n    }\n  },\n  \"client_context\": {\n    \"company\": \"{{ $json.Business_Name }}\",\n    \"product\": \"{{ $json.Product }}\",\n    \"original_content_preserved\": true,\n    \"enhancement_applied\": true\n  }\n}","messages":{"messageValues":[{"message":"=You are synthesizing multiple specialized elements into viral LinkedIn content. Write authentically as {{ $json.Business_Name }} using their specific expertise while applying advanced engagement psychology and narrative structure for maximum professional virality."}]}},"type":"@n8n/n8n-nodes-langchain.chainLlm","typeVersion":1.6,"position":[6420,640],"id":"d96dc47b-0b13-4866-86e2-6a00116060b4","name":"LinkedIn Content Generator"},{"parameters":{"promptType":"define","text":"=**MISSION:** Create authentic, technically credible Facebook content that works for ANY client using their specific technical capabilities.\n\n## 🚫 NO FABRICATION RULES (Add after MISSION)\n**CRITICAL AUTHENTICITY REQUIREMENTS:**\n- ❌ NO fake client testimonials or stories\n- ❌ NO made-up business scenarios (\"local coffee shop owner told me...\")  \n- ❌ NO fictional statistics or claims\n- ❌ NO false \"one of our clients\" references\n- ❌ NO invented \"last month\" or timing-specific fabrications\n- ✅ Use ONLY verified product features and capabilities\n- ✅ Mark hypothetical scenarios clearly as \"What if\" or \"Imagine\"\n- ✅ Focus on authentic product benefits and technical specifications\n- ✅ Use {{ $json.Business_Name }}'s actual expertise and knowledge\n\n\n## 📊 CLIENT-SPECIFIC TECHNICAL DATA (Dynamic for Each Client)\n**Existing Facebook Content:** {{ $json.Facebook_Focus }}\n**Company:** {{ $json.Business_Name }}\n**Product:** {{ $json.Product }}\n**Core UVP:** {{ $json.UVP }}\n\n**CRITICAL - USE THESE EXACT TECHNICAL SPECS:**\n**Technical Capabilities:** {{ $json['Technical Capabilities Extracted'] }}\n**Supported Systems:** {{ $json['Supported Systems'] }}\n**Performance Specifications:** {{ $json['Performance Specifications'] }}\n**Primary Expertise:** {{ $json.voice_profile.expertise_context.primary_expertise }}\n\n**Campaign Context:**\n**Pain Point:** {{ $json.Pain_Point }}\n**Solution Feature:** {{ $json.Solution_Feature }}\n**Target Audience:** {{ $json.Target_Audience }}\n**Competitive Advantages:** {{ $json['Competitive Advantages'] }}\n\n## 🎭 PERSONALITY & PSYCHOLOGY LAYERS\n**Personality Mode:** {{ $json.voice_profile.personality_mode }}\n**Psychology Trigger:** {{ $json.psychology_strategy.primary_trigger }}\n**Content Angle:** {{ $json.content_angle.angle }}\n\n## 🎯 FACEBOOK PRODUCT-FIRST RULES (Universal)\n\n### CRITICAL: PRODUCT vs WHAT IT SUPPORTS\n- **{{ $json.Product }}** = THE PRODUCT (what we're selling)\n- **{{ $json['Technical Capabilities Extracted'] }}** = WHAT THE PRODUCT SUPPORTS/BACKS UP\n- **{{ $json['Supported Systems'] }}** = SYSTEMS THE PRODUCT WORKS WITH\n\n### CORRECT LANGUAGE PATTERNS:\n✅ \"{{ $json.Product }} backs up {{ $json['Supported Systems'] }}\"\n✅ \"{{ $json.Product }} supports {{ $json['Technical Capabilities Extracted'] }}\"\n✅ \"{{ $json.Product }} works with {{ $json['Supported Systems'] }} databases\"\n❌ NEVER say \"{{ $json['Technical Capabilities Extracted'] }} backup system\"\n❌ NEVER make databases sound like the product\n\n### MUST INCLUDE:\n1. **{{ $json.Product }}** as the main subject in every post\n2. **What it backs up**: {{ $json['Supported Systems'] }} and {{ $json['Technical Capabilities Extracted'] }}\n3. **Performance**: {{ $json['Performance Specifications'] }} of the product\n4. **Company**: {{ $json.Business_Name }} who makes the product\n\n### FACEBOOK TONE TRANSLATION:\n- **Product-First**: \"Wip Active Backup protects Oracle 19c+ databases\" not \"Oracle 19c+ backup\"\n- **Support Language**: \"{{ $json.Product }} backs up {{ $json['Supported Systems'] }}\" not \"{{ $json['Supported Systems'] }} protection\"\n- **Performance Focus**: \"{{ $json.Product }} delivers {{ $json['Performance Specifications'] }}\" not technical specs as product\n- **Company Authority**: \"{{ $json.Business_Name }} built {{ $json.Product }} to support {{ $json['Technical Capabilities Extracted'] }}\"\n\n### EXAMPLE TRANSFORMATIONS:\n❌ **WRONG**: \"Oracle 19c+ synchronous backup system\"\n✅ **CORRECT**: \"Wip Active Backup with synchronous Oracle 19c+ support\"\n\n❌ **WRONG**: \"Power BI backup methods\"  \n✅ **CORRECT**: \"Wip Active Backup for Power BI environments\"\n\n## 🚫 FORBIDDEN LANGUAGE (Universal)\n**NEVER USE:** \"solutions,\" \"leverage,\" \"synergy,\" \"paradigm,\" \"cutting-edge,\" \"world-class,\" \"game-changer,\" \"next level\"\n**WRITE LIKE:** A knowledgeable friend explaining their specific technical product\n\n## 🚀 FACEBOOK GENERATION REQUIREMENTS\n\n### POST 1: Enhanced Original  \n- Start with: {{ $json.Facebook_Focus }}\n- FOCUS: {{ $json.Product }} as the main subject\n- ADD: What {{ $json.Product }} backs up ({{ $json['Technical Capabilities Extracted'] }}, {{ $json['Supported Systems'] }})\n- INCLUDE: {{ $json.Product }}'s performance ({{ $json['Performance Specifications'] }})\n- Sound: Explaining what {{ $json.Product }} does for businesses\n- Length: 400-600 characters\n\n### POST 2: Community Technical Story\n- Lead with: Local business success with {{ $json.Product }}\n- SHOW: How {{ $json.Product }} protected their {{ $json['Supported Systems'] }} data\n- INCLUDE: {{ $json.Product }}'s {{ $json['Performance Specifications'] }} that saved them\n- Voice: Community member explaining {{ $json.Product }} success story\n- Length: 400-600 characters\n\n### POST 3: Problem-Solution with Specifics\n- Start with: Business problem from {{ $json.Pain_Point }}\n- SOLVE: How {{ $json.Product }} handles {{ $json['Technical Capabilities Extracted'] }} protection\n- PROVE: {{ $json.Product }}'s {{ $json['Performance Specifications'] }} performance\n- Voice: {{ $json.Business_Name }} explaining how {{ $json.Product }} solved this\n- Length: 400-600 characters\n\n### POST 4: Technical Comparison Story\n- Compare: Old backup methods vs {{ $json.Product }}\n- HIGHLIGHT: What {{ $json.Product }} does better for {{ $json['Technical Capabilities Extracted'] }}\n- QUANTIFY: {{ $json.Product }}'s {{ $json['Performance Specifications'] }} advantages\n- Voice: Showing why {{ $json.Product }} is superior\n- Length: 400-600 characters\n\n### POST 5: Social Sharing with Technical Proof\n- Hook: \"Friends need to know about {{ $json.Product }}\"\n- EXPLAIN: How {{ $json.Product }} protects {{ $json['Supported Systems'] }}\n- PROOF: {{ $json.Product }}'s {{ $json['Performance Specifications'] }} results\n- Voice: Excited to share {{ $json.Product }} discovery\n- Length: 400-600 characters\n\n## 📋 TECHNICAL AUTHENTICITY RULES (Universal)\n\n### REQUIRED IN EVERY POST:\n- ✅ {{ $json.Product }} mentioned by exact name\n- ✅ At least 1 item from {{ $json['Technical Capabilities Extracted'] }}\n- ✅ At least 1 item from {{ $json['Supported Systems'] }} \n- ✅ At least 1 metric from {{ $json['Performance Specifications'] }}\n- ✅ {{ $json.Business_Name }} company reference\n\n### FACEBOOK VOICE GUIDELINES:\n✅ Use authentic engagement: \"Have you experienced...\" \"What if your business...\"\n✅ Reference general industry challenges: \"Many businesses struggle with...\"\n✅ Share genuine product capabilities: \"{{ $json.Product }} handles...\"\n✅ Use hypothetical scenarios clearly: \"Imagine if...\" \"Consider this scenario...\"\n✅ Focus on {{ $json.Business_Name }}'s real expertise in {{ $json.Product }}\n✅ Ask questions that prompt engagement: \"How does your team currently...\"\n\n## 📤 OUTPUT FORMAT\n\n```json\n{\n  \"enhanced_posts\": {\n    \"post_1_enhanced_original\": {\n      \"content\": \"Enhanced {{ $json.Facebook_Focus }} with {{ $json['Technical Capabilities Extracted'] }} specifics\",\n      \"focus\": \"Original + technical credibility\",\n      \"character_count\": \"exact count\"\n    },\n    \"post_2_community_technical_story\": {\n      \"content\": \"Local success story featuring {{ $json['Supported Systems'] }} and {{ $json['Performance Specifications'] }}\",\n      \"focus\": \"Community proof + technical specifics\", \n      \"character_count\": \"exact count\"\n    },\n    \"post_3_problem_solution_specifics\": {\n      \"content\": \"{{ $json.Pain_Point }} solved with specific {{ $json['Technical Capabilities Extracted'] }}\",\n      \"focus\": \"Problem + technical solution\",\n      \"character_count\": \"exact count\"\n    },\n    \"post_4_technical_comparison\": {\n      \"content\": \"Before/after comparison highlighting {{ $json['Technical Capabilities Extracted'] }} advantages\",\n      \"focus\": \"Technical superiority demonstration\",\n      \"character_count\": \"exact count\"\n    },\n    \"post_5_social_technical_proof\": {\n      \"content\": \"Share-worthy content with {{ $json['Performance Specifications'] }} proof points\",\n      \"focus\": \"Viral + technical credibility\",\n      \"character_count\": \"exact count\"\n    }\n  },\n  \"client_context\": {\n    \"company\": \"{{ $json.Business_Name }}\",\n    \"product\": \"{{ $json.Product }}\",\n    \"platform\": \"Facebook\",\n    \"technical_specs_included\": true,\n    \"universal_generator\": true\n  }\n}","messages":{"messageValues":[{"message":"=You are synthesizing multiple specialized elements into viral LinkedIn content. Write authentically as {{ $json.Business_Name }} using their specific expertise while applying advanced engagement psychology and narrative structure for maximum professional virality."}]}},"type":"@n8n/n8n-nodes-langchain.chainLlm","typeVersion":1.6,"position":[6420,800],"id":"b00b825e-6cfb-4a59-aee8-9fc30c94e25b","name":"Facebook Content Generator"},{"parameters":{"promptType":"define","text":"=**MISSION:** Take existing X_Focus content and create multiple enhanced variations using personality, psychology, and research intelligence.\n\n## 🚫 NO FABRICATION RULES \n**CRITICAL AUTHENTICITY REQUIREMENTS:**\n- ❌ NO fake statistics or made-up data points\n- ❌ NO invented industry claims or false metrics  \n- ❌ NO fictional client testimonials or success stories\n- ❌ NO fabricated \"shocking statistics\" or false numbers\n- ❌ NO made-up research findings or false studies\n- ✅ Use ONLY verified product features and real capabilities\n- ✅ Base controversial takes on genuine industry observations\n- ✅ Mark hypothetical scenarios clearly as \"What if\" or \"Imagine\"\n- ✅ Use authentic {{ $json.Business_Name }} expertise and knowledge\n- ✅ If citing statistics, use only verifiable/real data or clearly mark as hypothetical\n\n## 📊 BASE CONTENT (Use as Foundation)\n**Existing X Content:** {{ $json.X_Focus }}\n**Core UVP:** {{ $json.UVP }}\n**Technical Capabilities:** {{ $json['Technical Capabilities Extracted'] }}\n**Product:** {{ $json.Product }}\n**Company:** {{ $json.Business_Name }}\n**Pain Point:** {{ $json.Pain_Point }}\n**Solution Feature:** {{ $json.Solution_Feature }}\n\n## 🎭 ENHANCEMENT LAYERS\n**Personality Mode:** {{ $json.voice_profile.personality_mode }}\n**Psychology Trigger:** {{ $json.psychology_strategy.primary_trigger }}\n**Content Angle:** {{ $json.content_angle.angle }}\n**Research Insights:** {{ $json.angle_research.primary_insights }}\n\n## 🚫 X-SPECIFIC FORBIDDEN LANGUAGE\n**NEVER USE:** Corporate fluff, unnecessary words, \"solutions,\" \"synergy,\" \"paradigm,\" \"leverage,\" \"cutting-edge,\" \"world-class,\" \"industry-leading,\" \"comprehensive,\" \"holistic\"\n**WRITE LIKE:** Someone dropping truth bombs with confidence and brevity\n\n## 🚀 X GENERATION REQUIREMENTS\n\n### POST 1: Enhanced Original\n- Start with: {{ $json.X_Focus }}\n- Add: Punchy, confident tone\n- Include: Controversial edge or hot take (based on real industry observations)\n- Sound: Direct expert dropping knowledge\n- Length: 200-350 characters\n\n### POST 2: Hot Take Version\n- Lead with: Contrarian position about {{ $json.Product }} or industry (based on authentic expertise)\n- Apply: Confidence backed by real product capabilities\n- Include: Debate-starting angle (truthful but provocative)\n- Voice: Industry insider with strong opinion\n- Length: 200-350 characters\n\n### POST 3: Thread Starter\n- Use: \"🧵 Thread:\" format\n- Base: {{ $json.X_Focus }} expanded into thread premise\n- Add: Promise of valuable insights (that you can actually deliver)\n- Voice: Expert sharing inside knowledge\n- Length: 200-350 characters\n\n### POST 4: Authentic Insight Attack\n- Start with: Genuine industry observation about {{ $json.Pain_Point }}\n- Show: Why {{ $json.Product }} matters now (using real capabilities)\n- Include: Quotable insight based on actual expertise\n- Voice: Knowledgeable truth teller (no fake stats)\n- Length: 200-350 characters\n\n### POST 5: Quote Tweet Bait\n- Highlight: Authentic controversial industry opinion\n- Use: \"Unpopular opinion:\" or similar hook\n- Include: Strong stance on {{ $json.Product }} (based on real features)\n- Voice: Confident contrarian (truthful controversy)\n- Length: 200-350 characters\n\n## 📋 X AUTHENTICITY RULES\n- Cut every unnecessary word\n- Be direct and confident, not humble\n- Embrace controversial takes (respectfully and truthfully)\n- Use only real data and verified capabilities to back up claims\n- Make it quotable and retweetable (but authentic)\n- Include specific real numbers/features when possible (no fabrication)\n- Avoid hashtag spam (max 1-2 relevant hashtags)\n- Write for retweets and quote tweets\n- Base all claims on {{ $json.Business_Name }}'s actual expertise\n- If unsure about a statistic or claim, use \"What if\" or skip it entirely\n\n## 📤 OUTPUT FORMAT\n```json\n{\n  \"enhanced_posts\": {\n    \"post_1_enhanced_original\": {\n      \"content\": \"Enhanced version of X_Focus with punchy confidence\",\n      \"focus\": \"Original message + direct authority\",\n      \"character_count\": \"exact count\"\n    },\n    \"post_2_hot_take_version\": {\n      \"content\": \"Authentic contrarian take on industry or product approach\",\n      \"focus\": \"Truthful debate-starting contrarian position\", \n      \"character_count\": \"exact count\"\n    },\n    \"post_3_thread_starter\": {\n      \"content\": \"Thread premise promising deliverable valuable insights\",\n      \"focus\": \"Thread hook + genuine knowledge promise\",\n      \"character_count\": \"exact count\"\n    },\n    \"post_4_authentic_insight_attack\": {\n      \"content\": \"Real industry observation leading to product relevance\",\n      \"focus\": \"Genuine insight + product connection\",\n      \"character_count\": \"exact count\"\n    },\n    \"post_5_quote_tweet_bait\": {\n      \"content\": \"Authentic controversial opinion designed for quote tweets\",\n      \"focus\": \"Truthful strong stance + discussion trigger\",\n      \"character_count\": \"exact count\"\n    }\n  },\n  \"client_context\": {\n    \"company\": \"{{ $json.Business_Name }}\",\n    \"product\": \"{{ $json.Product }}\",\n    \"platform\": \"X\",\n    \"original_content_preserved\": true,\n    \"viral_optimization_applied\": true,\n    \"authenticity_verified\": true\n  }\n}\n```","messages":{"messageValues":[{"message":"=You are synthesizing multiple specialized elements into viral LinkedIn content. Write authentically as {{ $json.Business_Name }} using their specific expertise while applying advanced engagement psychology and narrative structure for maximum professional virality."}]}},"type":"@n8n/n8n-nodes-langchain.chainLlm","typeVersion":1.6,"position":[6440,1120],"id":"f74bd5f5-3524-45e4-9745-1b7aeca9d943","name":"X Content Generator"},{"parameters":{"promptType":"define","text":"=**MISSION:** Take existing X_Focus content and create multiple enhanced variations using personality, psychology, and research intelligence.\n\n## 🚫 NO FABRICATION RULES \n**CRITICAL AUTHENTICITY REQUIREMENTS:**\n- ❌ NO fake statistics or made-up data points\n- ❌ NO invented industry claims or false metrics  \n- ❌ NO fictional client testimonials or success stories\n- ❌ NO fabricated \"shocking statistics\" or false numbers\n- ❌ NO made-up research findings or false studies\n- ✅ Use ONLY verified product features and real capabilities\n- ✅ Base controversial takes on genuine industry observations\n- ✅ Mark hypothetical scenarios clearly as \"What if\" or \"Imagine\"\n- ✅ Use authentic {{ $json.Business_Name }} expertise and knowledge\n- ✅ If citing statistics, use only verifiable/real data or clearly mark as hypothetical\n\n## 📊 BASE CONTENT (Use as Foundation)\n**Existing X Content:** {{ $json.X_Focus }}\n**Core UVP:** {{ $json.UVP }}\n**Technical Capabilities:** {{ $json['Technical Capabilities Extracted'] }}\n**Product:** {{ $json.Product }}\n**Company:** {{ $json.Business_Name }}\n**Pain Point:** {{ $json.Pain_Point }}\n**Solution Feature:** {{ $json.Solution_Feature }}\n\n## 🎭 ENHANCEMENT LAYERS\n**Personality Mode:** {{ $json.voice_profile.personality_mode }}\n**Psychology Trigger:** {{ $json.psychology_strategy.primary_trigger }}\n**Content Angle:** {{ $json.content_angle.angle }}\n**Research Insights:** {{ $json.angle_research.primary_insights }}\n\n## 🚫 X-SPECIFIC FORBIDDEN LANGUAGE\n**NEVER USE:** Corporate fluff, unnecessary words, \"solutions,\" \"synergy,\" \"paradigm,\" \"leverage,\" \"cutting-edge,\" \"world-class,\" \"industry-leading,\" \"comprehensive,\" \"holistic\"\n**WRITE LIKE:** Someone dropping truth bombs with confidence and brevity\n\n## 🚀 X GENERATION REQUIREMENTS\n\n### POST 1: Enhanced Original\n- Start with: {{ $json.X_Focus }}\n- Add: Punchy, confident tone\n- Include: Controversial edge or hot take (based on real industry observations)\n- Sound: Direct expert dropping knowledge\n- Length: 200-350 characters\n\n### POST 2: Hot Take Version\n- Lead with: Contrarian position about {{ $json.Product }} or industry (based on authentic expertise)\n- Apply: Confidence backed by real product capabilities\n- Include: Debate-starting angle (truthful but provocative)\n- Voice: Industry insider with strong opinion\n- Length: 200-350 characters\n\n### POST 3: Thread Starter\n- Use: \"🧵 Thread:\" format\n- Base: {{ $json.X_Focus }} expanded into thread premise\n- Add: Promise of valuable insights (that you can actually deliver)\n- Voice: Expert sharing inside knowledge\n- Length: 200-350 characters\n\n### POST 4: Authentic Insight Attack\n- Start with: Genuine industry observation about {{ $json.Pain_Point }}\n- Show: Why {{ $json.Product }} matters now (using real capabilities)\n- Include: Quotable insight based on actual expertise\n- Voice: Knowledgeable truth teller (no fake stats)\n- Length: 200-350 characters\n\n### POST 5: Quote Tweet Bait\n- Highlight: Authentic controversial industry opinion\n- Use: \"Unpopular opinion:\" or similar hook\n- Include: Strong stance on {{ $json.Product }} (based on real features)\n- Voice: Confident contrarian (truthful controversy)\n- Length: 200-350 characters\n\n## 📋 X AUTHENTICITY RULES\n- Cut every unnecessary word\n- Be direct and confident, not humble\n- Embrace controversial takes (respectfully and truthfully)\n- Use only real data and verified capabilities to back up claims\n- Make it quotable and retweetable (but authentic)\n- Include specific real numbers/features when possible (no fabrication)\n- Avoid hashtag spam (max 1-2 relevant hashtags)\n- Write for retweets and quote tweets\n- Base all claims on {{ $json.Business_Name }}'s actual expertise\n- If unsure about a statistic or claim, use \"What if\" or skip it entirely\n\n## 📤 OUTPUT FORMAT\n```json\n{\n  \"enhanced_posts\": {\n    \"post_1_enhanced_original\": {\n      \"content\": \"Enhanced version of X_Focus with punchy confidence\",\n      \"focus\": \"Original message + direct authority\",\n      \"character_count\": \"exact count\"\n    },\n    \"post_2_hot_take_version\": {\n      \"content\": \"Authentic contrarian take on industry or product approach\",\n      \"focus\": \"Truthful debate-starting contrarian position\", \n      \"character_count\": \"exact count\"\n    },\n    \"post_3_thread_starter\": {\n      \"content\": \"Thread premise promising deliverable valuable insights\",\n      \"focus\": \"Thread hook + genuine knowledge promise\",\n      \"character_count\": \"exact count\"\n    },\n    \"post_4_authentic_insight_attack\": {\n      \"content\": \"Real industry observation leading to product relevance\",\n      \"focus\": \"Genuine insight + product connection\",\n      \"character_count\": \"exact count\"\n    },\n    \"post_5_quote_tweet_bait\": {\n      \"content\": \"Authentic controversial opinion designed for quote tweets\",\n      \"focus\": \"Truthful strong stance + discussion trigger\",\n      \"character_count\": \"exact count\"\n    }\n  },\n  \"client_context\": {\n    \"company\": \"{{ $json.Business_Name }}\",\n    \"product\": \"{{ $json.Product }}\",\n    \"platform\": \"X\",\n    \"original_content_preserved\": true,\n    \"viral_optimization_applied\": true,\n    \"authenticity_verified\": true\n  }\n}\n```","messages":{"messageValues":[{"message":"=You are synthesizing multiple specialized elements into viral LinkedIn content. Write authentically as {{ $json.Business_Name }} using their specific expertise while applying advanced engagement psychology and narrative structure for maximum professional virality."}]}},"type":"@n8n/n8n-nodes-langchain.chainLlm","typeVersion":1.6,"position":[6440,960],"id":"e117fc62-c519-4629-9826-3a6d2d61f06c","name":"Instagram Content Generator"},{"parameters":{"jsCode":"// CONTENT MERGER NODE - FIXED FOR UNEXECUTED NODES\n// Safely handles content from router input\n\nconsole.log('=== CONTENT MERGER NODE (FIXED) ===');\n\n// Get the original campaign data (contains platform selection)\n// We'll get this from the input data since it should be passed through\nconst inputData = $input.first().json;\nconst formData = $('Process Form Data').first().json;\nconst selectedPlatform = formData.selected_platform || 'LinkedIn';\n\nconsole.log('Selected platform:', selectedPlatform);\nconsole.log('Processing content from executed generator...');\n\n// The input should contain the executed content generator's output\nconst executedContentData = inputData;\n\nconsole.log('Received content data:', !!executedContentData);\nconsole.log('Has enhanced_posts:', !!executedContentData.enhanced_posts);\n\n// Function to extract content data from AI response\nfunction extractContentData(contentOutput, platformName) {\n  if (!contentOutput) {\n    console.log(`❌ No ${platformName} content output received`);\n    return null;\n  }\n  \n  try {\n    // If it's already in the right format, return it\n    if (contentOutput.enhanced_posts) {\n      console.log(`✅ Found ${platformName} enhanced_posts directly`);\n      return contentOutput;\n    }\n    \n    // Try to extract from text field if it's an AI response\n    let textContent = contentOutput.text || contentOutput.content || JSON.stringify(contentOutput);\n    \n    console.log(`📝 ${platformName} content length:`, textContent.length);\n    \n    // Extract JSON from markdown code blocks\n    const jsonMatch = textContent.match(/```json\\s*\\n?([^`]+)\\s*\\n?```/s);\n    \n    if (jsonMatch) {\n      console.log(`✅ Found ${platformName} JSON in markdown`);\n      const jsonText = jsonMatch[1].trim();\n      return JSON.parse(jsonText);\n    }\n    \n    console.log(`❌ No markdown JSON found in ${platformName} content`);\n    return { raw_content: textContent, platform: platformName };\n    \n  } catch (error) {\n    console.error(`❌ Failed to parse ${platformName} content:`, error.message);\n    return { parsing_error: error.message, platform: platformName };\n  }\n}\n\n// Extract content from the executed generator\nconst selectedContent = extractContentData(executedContentData, selectedPlatform);\n\nconsole.log(`🎯 Using content from: ${selectedPlatform} Content Generator`);\nconsole.log(`📊 Content quality:`, selectedContent ? 'Good' : 'Missing');\n\n// Create fallback content if selected content is missing\nif (!selectedContent || selectedContent.parsing_error || !selectedContent.enhanced_posts) {\n  console.log('🚨 Creating fallback content data');\n  \n  // Get platform field name for fallback\n  const platformFields = {\n    'LinkedIn': 'LinkedIn_Focus',\n    'Facebook': 'Facebook_Focus',\n    'X': 'X_Focus',\n    'Instagram': 'Instagram_Focus'\n  };\n  \n  const platformField = platformFields[selectedPlatform] || 'LinkedIn_Focus';\n  const originalContent = inputData[platformField] || \n                          `Enhanced ${selectedPlatform} content for ${inputData.Product || 'the product'}`;\n  \n  selectedContent = {\n    enhanced_posts: {\n      post_1_enhanced_original: {\n        content: originalContent,\n        focus: `Original ${selectedPlatform} content`,\n        character_count: originalContent.length.toString()\n      },\n      post_2_variation: {\n        content: `${originalContent} - Enhanced for ${selectedPlatform}`,\n        focus: `${selectedPlatform} variation`,\n        character_count: (originalContent.length + 20).toString()\n      },\n      post_3_alternative: {\n        content: `Alternative approach: ${originalContent}`,\n        focus: `${selectedPlatform} alternative`,\n        character_count: (originalContent.length + 25).toString()\n      },\n      post_4_focused: {\n        content: `Focused message: ${originalContent}`,\n        focus: `${selectedPlatform} focused`,\n        character_count: (originalContent.length + 18).toString()\n      },\n      post_5_optimized: {\n        content: `Optimized for ${selectedPlatform}: ${originalContent}`,\n        focus: `${selectedPlatform} optimized`,\n        character_count: (originalContent.length + selectedPlatform.length + 15).toString()\n      }\n    },\n    client_context: {\n      company: inputData.Business_Name,\n      product: inputData.Product,\n      platform: selectedPlatform,\n      fallback_used: true\n    },\n    fallback_used: true,\n    fallback_reason: 'Content extraction failed or enhanced_posts missing'\n  };\n}\n\n// Merge content with original campaign data\nconst mergedData = {\n  ...inputData,\n  \n  // Add the generated content variations\n  enhanced_posts: selectedContent.enhanced_posts || {},\n  client_context: selectedContent.client_context || {\n    company: inputData.Business_Name,\n    product: inputData.Product,\n    platform: selectedPlatform\n  },\n  \n  // Content generation metadata\n  content_metadata: {\n    selected_platform: selectedPlatform,  // Now correctly uses form data\n    content_source: `${selectedPlatform} Content Generator`,\n    content_quality: selectedContent && !selectedContent.fallback_used ? 'good' : 'fallback',\n    merger_timestamp: new Date().toISOString(),\n    fallback_used: !!selectedContent?.fallback_used,\n    post_variations_count: Object.keys(selectedContent?.enhanced_posts || {}).length,\n    input_method: 'router_passthrough'\n  }\n};\n\nconsole.log('=== CONTENT MERGER COMPLETE ===');\nconsole.log(`🎯 Platform: ${selectedPlatform}`);\nconsole.log(`📊 Content Source: ${selectedPlatform} Content Generator`);\nconsole.log(`✅ Content Quality: ${mergedData.content_metadata.content_quality}`);\nconsole.log(`📝 Post Variations: ${mergedData.content_metadata.post_variations_count}`);\nconsole.log(`🚀 Ready for Quality Validator`);\n\nreturn { json: mergedData };"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[6980,900],"id":"648c5d28-8bf8-4fb0-a815-27a41d02c738","name":"Content Merger"},{"parameters":{"path":"human-content-test","formTitle":"🎯 Human-Like Content Generator - Test","formDescription":"Test the new human-like content system","formFields":{"values":[{"fieldLabel":"Line Item Record ID","fieldType":"string","placeholder":"Enter Record ID (e.g., recXXXXXXXXXXXXXX)"},{"fieldLabel":"Target Platform","fieldType":"dropdown","fieldOptions":{"values":[{"option":"LinkedIn"},{"option":"Facebook"},{"option":"X"},{"option":"Instagram"}]}},{"fieldLabel":"Number of Variations","fieldType":"dropdown","fieldOptions":{"values":[{"option":"3"},{"option":"5"},{"option":"7"}]}}]},"options":{}},"type":"n8n-nodes-base.formTrigger","typeVersion":2.1,"position":[4120,3580],"id":"55d0e5b2-ee8d-4cd1-ba88-4a5e71eb3665","name":"Test Form","webhookId":"human-content-test"},{"parameters":{"authentication":"airtableOAuth2Api","base":{"__rl":true,"value":"appQoW8tY1s6ceKOV","mode":"list","cachedResultName":"Ebiexperts"},"table":{"__rl":true,"value":"tblVPzmyb3l45S0Sx","mode":"list","cachedResultName":"Content Focus Plan"},"id":"={{ $json.lineItemId }}","options":{}},"type":"n8n-nodes-base.airtable","typeVersion":2.1,"position":[4520,3580],"id":"ea7e5ac8-3dcf-449c-9333-8dc21a14fb72","name":"Get Line Item Data2","credentials":{"airtableOAuth2Api":{"id":"pOcHNkax3d1V3xqS","name":"Airtable VS Sport"}}},{"parameters":{"jsCode":"// FORM PROCESSOR\nconst formData = $input.first().json;\n\nconsole.log('=== FORM PROCESSOR ===');\n\nconst lineItemId = formData['Line Item Record ID'];\nconst targetPlatform = formData['Target Platform'];\nconst variationCount = parseInt(formData['Number of Variations']) || 3;\n\n// Basic validation\nif (!lineItemId || !lineItemId.startsWith('rec')) {\n  throw new Error('Invalid Line Item Record ID');\n}\n\nif (!targetPlatform) {\n  throw new Error('Target Platform required');\n}\n\nconsole.log(`Processing: ${lineItemId} for ${targetPlatform}`);\n\nreturn {\n  json: {\n    lineItemId: lineItemId.trim(),\n    targetPlatform: targetPlatform,\n    variationCount: variationCount,\n    timestamp: new Date().toISOString()\n  }\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[4320,3580],"id":"a3bb4cc3-4c1b-4002-ac5e-5ff75d745f61","name":"Form Processor1"},{"parameters":{"jsCode":"// FIXED VOICE INTELLIGENCE PROCESSOR\n// Remove the problematic reference to Form Processor\n\nconst inputData = $input.first().json;\n\nconsole.log('=== VOICE INTELLIGENCE PROCESSOR ===');\nconsole.log('Input data received:', Object.keys(inputData));\n\n// Extract line item context directly from input\nconst lineItemContext = {\n  companyName: inputData['Company Name'] || 'Unknown Company',\n  productService: inputData['Product/Service'] || 'Unknown Product',\n  contentTheme: inputData['Content Theme'] || 'General Theme',\n  psychologicalTrigger: inputData['Psychological Trigger'] || 'General Appeal',\n  primaryUVP: inputData['Primary UVP'] || 'Value proposition not specified',\n  targetMarket: inputData['Target Market'] || 'General market',\n  // Also check for processed data from previous nodes\n  targetPlatform: inputData.targetPlatform || 'LinkedIn',\n  lineItemId: inputData.lineItemId || 'unknown',\n  variationCount: inputData.variationCount || 3\n};\n\n// Detect personality based on content\nfunction detectPersonality(context) {\n  const analysis = `${context.primaryUVP} ${context.psychologicalTrigger} ${context.contentTheme}`.toLowerCase();\n  \n  console.log('Analyzing for personality:', analysis.substring(0, 100) + '...');\n  \n  if (analysis.includes('protection') || analysis.includes('security') || analysis.includes('backup')) {\n    return 'protective_mentor';\n  } else if (analysis.includes('efficiency') || analysis.includes('optimization') || analysis.includes('performance')) {\n    return 'pragmatic_implementer';\n  } else if (analysis.includes('data') || analysis.includes('analysis') || analysis.includes('metrics')) {\n    return 'analytical_expert';\n  } else if (analysis.includes('innovation') || analysis.includes('future') || analysis.includes('advanced')) {\n    return 'visionary_leader';\n  }\n  return 'trusted_advisor';\n}\n\nconst personalityMode = detectPersonality(lineItemContext);\n\n// Generate conversation hooks based on personality\nconst conversationHooks = {\n  'protective_mentor': [\n    \"Here's what I learned the hard way about\",\n    \"Three mistakes I see companies make with\",\n    \"The thing nobody tells you about\",\n    \"After watching too many businesses lose data\"\n  ],\n  'pragmatic_implementer': [\n    \"Cut through the noise: here's what actually works for\",\n    \"Skip the theory. Here's the practical reality of\",\n    \"Stop overcomplicating. The simple truth about\",\n    \"I've implemented this at several companies\"\n  ],\n  'analytical_expert': [\n    \"The data tells an interesting story about\",\n    \"I analyzed several implementations and found\",\n    \"The numbers don't lie:\",\n    \"Here's what the metrics reveal about\"\n  ],\n  'visionary_leader': [\n    \"The future of [industry] is already here\",\n    \"While everyone debates [topic], smart companies are\",\n    \"Three trends that will reshape\",\n    \"What if I told you that\"\n  ],\n  'trusted_advisor': [\n    \"Having consulted for years, I can tell you\",\n    \"The conversation I have with every client:\",\n    \"The question every leader should ask:\",\n    \"This keeps coming up in strategy sessions\"\n  ]\n};\n\n// Extract technical elements from UVP\nfunction extractTechnicalElements(uvp) {\n  const text = uvp.toLowerCase();\n  \n  const technicalElements = {\n    hasSpecificTech: false,\n    versions: [],\n    platforms: [],\n    performance: []\n  };\n  \n  // Look for version numbers\n  const versionMatches = uvp.match(/\\b\\w+\\s+\\d+[\\.\\d]*\\+?\\b/g) || [];\n  if (versionMatches.length > 0) {\n    technicalElements.versions = versionMatches;\n    technicalElements.hasSpecificTech = true;\n  }\n  \n  // Look for platforms\n  const platformMatches = uvp.match(/\\b(oracle|sql server|mysql|postgresql|docker|kubernetes|aws|azure|power bi)\\b/gi) || [];\n  if (platformMatches.length > 0) {\n    technicalElements.platforms = platformMatches;\n    technicalElements.hasSpecificTech = true;\n  }\n  \n  // Look for performance metrics\n  const performanceMatches = uvp.match(/\\b\\d+\\s*(second|minute|hour|gb|tb|%|millisecond)\\b/gi) || [];\n  if (performanceMatches.length > 0) {\n    technicalElements.performance = performanceMatches;\n    technicalElements.hasSpecificTech = true;\n  }\n  \n  return technicalElements;\n}\n\nconst technicalElements = extractTechnicalElements(lineItemContext.primaryUVP);\n\n// Create voice profile\nconst voiceProfile = {\n  personality_mode: personalityMode,\n  conversation_hooks: conversationHooks[personalityMode],\n  technical_storytelling: technicalElements,\n  authenticity_markers: {\n    use_contractions: true,\n    personal_pronouns: true,\n    vary_sentence_length: true,\n    reference_experience: true,\n    industry_specific_language: technicalElements.hasSpecificTech\n  },\n  voice_characteristics: {\n    formality_level: personalityMode === 'analytical_expert' ? 'professional' : 'conversational',\n    enthusiasm_level: personalityMode === 'visionary_leader' ? 'high' : 'moderate',\n    confidence_level: personalityMode === 'pragmatic_implementer' ? 'high' : 'measured'\n  }\n};\n\nconsole.log(`🎭 Detected personality: ${personalityMode}`);\nconsole.log(`🔧 Technical elements found: ${technicalElements.hasSpecificTech}`);\nconsole.log(`📊 Processing for platform: ${lineItemContext.targetPlatform}`);\n\nreturn {\n  json: {\n    // Pass through all input data\n    ...inputData,\n    // Add our intelligence\n    lineItemContext: lineItemContext,\n    voiceProfile: voiceProfile,\n    voice_processing_complete: true,\n    voice_timestamp: new Date().toISOString()\n  }\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[4960,3580],"id":"46d8d449-2d80-4ebd-9072-8d9a85062110","name":"Voice Intelligence Processor"},{"parameters":{"model":"anthropic/claude-sonnet-4","options":{"maxTokens":4000,"temperature":0.3}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenRouter","typeVersion":1,"position":[5500,4380],"id":"b2ea4010-c7b2-4c11-bac2-ffb17ad50ba5","name":"Content Generation Model2","credentials":{"openRouterApi":{"id":"eni2kFdHGvy7lEd3","name":"OpenRouter account"}}},{"parameters":{"authentication":"airtableOAuth2Api","operation":"create","base":{"__rl":true,"value":"appQoW8tY1s6ceKOV","mode":"list","cachedResultName":"Ebiexperts"},"table":{"__rl":true,"value":"tblht1ivQa3A7OzTy","mode":"list","cachedResultName":"Content Pipeline"},"columns":{"mappingMode":"defineBelow","value":{"Platform":"={{ $json.Platform }}","Post":"={{ $json.Post }}","Angle":"={{ $json.Angle }}","Status":"Waiting","Hook":"={{ $json.Hook }}","Intent":"={{ $json.Intent }}","Comments":"="},"matchingColumns":[],"schema":[{"id":"Hook","displayName":"Hook","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Post","displayName":"Post","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Platform","displayName":"Platform","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"options","options":[{"name":"Facebook","value":"Facebook"},{"name":"LinkedIn","value":"LinkedIn"},{"name":"X","value":"X"},{"name":"Medium","value":"Medium"},{"name":"Instagram","value":"Instagram"}],"readOnly":false,"removed":false},{"id":"Image","displayName":"Image","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"array","readOnly":false,"removed":false},{"id":"Image Generate","displayName":"Image Generate","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Angle","displayName":"Angle","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Intent","displayName":"Intent","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Comments","displayName":"Comments","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Content Type","displayName":"Content Type","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"array","options":[{"name":"Image","value":"Image"},{"name":"Video","value":"Video"}],"readOnly":false,"removed":false},{"id":"Status","displayName":"Status","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"options","options":[{"name":"Approved","value":"Approved"},{"name":"Not Approved","value":"Not Approved"},{"name":"Waiting","value":"Waiting"}],"readOnly":false,"removed":false},{"id":"Date Send","displayName":"Date Send","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"dateTime","readOnly":false,"removed":false},{"id":"Schedule Date","displayName":"Schedule Date","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"dateTime","readOnly":false,"removed":false},{"id":"Schedule Send","displayName":"Schedule Send","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"dateTime","readOnly":false,"removed":false},{"id":"Temperature","displayName":"Temperature","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false}],"attemptToConvertTypes":false,"convertFieldsToString":false},"options":{}},"type":"n8n-nodes-base.airtable","typeVersion":2.1,"position":[6680,3560],"id":"f0d196fd-ba05-4d20-a4c0-cefe9ec5fde0","name":"Store Enhanced Content1","credentials":{"airtableOAuth2Api":{"id":"pOcHNkax3d1V3xqS","name":"Airtable VS Sport"}}},{"parameters":{"jsCode":"// CONTENT ANALYSIS ENGINE - Analyzes rich Content Focus Plan data\nconst inputData = $input.first().json;\n\nconsole.log('=== CONTENT ANALYSIS ENGINE ===');\nconsole.log('Analyzing rich Content Focus Plan data...');\n\n// Extract ALL the valuable data from your Content Focus Plan\nconst contentPlanData = {\n  linkedinContent: inputData['LinkedIn Content'] || '',\n  primaryUVP: inputData['Primary UVP'] || '',\n  psychologicalTrigger: inputData['Psychological Trigger'] || '',\n  contentTheme: inputData['Content Theme'] || '',\n  engagementObjective: inputData['Engagement Objective'] || '',\n  // Also capture other valuable fields\n  companyName: inputData['Company Name'] || '',\n  productService: inputData['Product/Service'] || '',\n  targetMarket: inputData['Target Market'] || '',\n  dayNumber: inputData['Day Number'] || 1,\n  weekNumber: inputData['Week Number'] || 1\n};\n\nconsole.log('📊 LinkedIn Content length:', contentPlanData.linkedinContent.length);\nconsole.log('🎯 UVP:', contentPlanData.primaryUVP.substring(0, 100) + '...');\nconsole.log('🧠 Psychology:', contentPlanData.psychologicalTrigger);\nconsole.log('🎭 Theme:', contentPlanData.contentTheme);\nconsole.log('🎪 Engagement:', contentPlanData.engagementObjective);\n\n// ANALYZE LINKEDIN CONTENT STRUCTURE\nfunction analyzeLinkedInContent(content) {\n  if (!content || content.length < 50) {\n    return {\n      hasContent: false,\n      structure: 'empty',\n      keyElements: [],\n      hook: '',\n      mainMessage: '',\n      cta: ''\n    };\n  }\n\n  // Extract the hook (first sentence/paragraph)\n  const sentences = content.split('.').filter(s => s.trim().length > 10);\n  const hook = sentences[0] ? sentences[0].trim() + '.' : '';\n  \n  // Identify main message (middle content)\n  const mainMessage = sentences.slice(1, -1).join('. ').trim();\n  \n  // Extract CTA (last sentence or question)\n  const lastSentence = sentences[sentences.length - 1] ? sentences[sentences.length - 1].trim() : '';\n  const cta = lastSentence.includes('?') ? lastSentence : '';\n  \n  // Identify key elements\n  const keyElements = [];\n  if (content.toLowerCase().includes('client') || content.toLowerCase().includes('customer')) {\n    keyElements.push('client_story');\n  }\n  if (content.includes('?')) {\n    keyElements.push('question_engagement');\n  }\n  if (content.toLowerCase().includes('data') || content.toLowerCase().includes('report')) {\n    keyElements.push('technical_focus');\n  }\n  if (content.toLowerCase().includes('learn') || content.toLowerCase().includes('mistake')) {\n    keyElements.push('lesson_sharing');\n  }\n  \n  return {\n    hasContent: true,\n    structure: keyElements.includes('client_story') ? 'story_driven' : 'insight_driven',\n    keyElements: keyElements,\n    hook: hook,\n    mainMessage: mainMessage,\n    cta: cta,\n    wordCount: content.split(' ').length,\n    tone: content.toLowerCase().includes('hard way') ? 'protective' : 'informative'\n  };\n}\n\n// ANALYZE UVP FOR TECHNICAL ELEMENTS\nfunction analyzeUVP(uvp) {\n  if (!uvp || uvp.length < 20) {\n    return {\n      hasUVP: false,\n      technicalElements: [],\n      businessBenefits: [],\n      differentiators: []\n    };\n  }\n\n  // Extract technical elements\n  const technicalElements = [];\n  const technicalPatterns = [\n    /\\b(real-time|realtime)\\b/gi,\n    /\\b(backup|restore|recovery)\\b/gi,\n    /\\b(monitoring|tracking|auditing)\\b/gi,\n    /\\b(power bi|powerbi|tableau|qlik)\\b/gi,\n    /\\b(database|sql|oracle|mysql)\\b/gi,\n    /\\b(version control|git|versioning)\\b/gi,\n    /\\b(governance|compliance|security)\\b/gi,\n    /\\b(automation|automated|automatic)\\b/gi\n  ];\n\n  technicalPatterns.forEach(pattern => {\n    const matches = uvp.match(pattern);\n    if (matches) {\n      technicalElements.push(...matches.map(m => m.toLowerCase()));\n    }\n  });\n\n  // Extract business benefits\n  const businessBenefits = [];\n  const benefitPatterns = [\n    /\\b(save|saving|saves)\\s+\\w+/gi,\n    /\\b(reduce|reducing|reduces)\\s+\\w+/gi,\n    /\\b(increase|increasing|increases)\\s+\\w+/gi,\n    /\\b(improve|improving|improves)\\s+\\w+/gi,\n    /\\b(peace of mind|confidence|trust)\\b/gi,\n    /\\b(productivity|efficiency|performance)\\b/gi\n  ];\n\n  benefitPatterns.forEach(pattern => {\n    const matches = uvp.match(pattern);\n    if (matches) {\n      businessBenefits.push(...matches);\n    }\n  });\n\n  // Extract differentiators (what makes it unique)\n  const differentiators = [];\n  if (uvp.toLowerCase().includes('no manual')) differentiators.push('no_manual_processes');\n  if (uvp.toLowerCase().includes('automatic')) differentiators.push('automatic_operation');\n  if (uvp.toLowerCase().includes('real-time')) differentiators.push('real_time_capability');\n  if (uvp.toLowerCase().includes('instant')) differentiators.push('instant_results');\n\n  return {\n    hasUVP: true,\n    technicalElements: [...new Set(technicalElements)], // Remove duplicates\n    businessBenefits: businessBenefits.slice(0, 5), // Top 5 benefits\n    differentiators: differentiators,\n    complexity: uvp.split(' ').length > 50 ? 'complex' : 'simple'\n  };\n}\n\n// MAP PSYCHOLOGICAL TRIGGERS TO CONTENT STRATEGIES\nfunction mapPsychologyStrategy(trigger) {\n  const strategyMap = {\n    'Fear & Security': {\n      emotionalApproach: 'risk_awareness',\n      contentFocus: 'problem_prevention',\n      languageStyle: 'protective_warning',\n      storyElements: ['disaster_scenarios', 'close_calls', 'what_could_go_wrong'],\n      engagementType: 'concern_validation'\n    },\n    'Authority & Expertise': {\n      emotionalApproach: 'credibility_building',\n      contentFocus: 'knowledge_sharing',\n      languageStyle: 'confident_expert',\n      storyElements: ['experience_stories', 'industry_insights', 'professional_observations'],\n      engagementType: 'expertise_demonstration'\n    },\n    'Efficiency & Productivity': {\n      emotionalApproach: 'optimization_desire',\n      contentFocus: 'time_saving',\n      languageStyle: 'results_focused',\n      storyElements: ['before_after', 'time_comparisons', 'efficiency_gains'],\n      engagementType: 'improvement_motivation'\n    },\n    'Innovation & Competitive Edge': {\n      emotionalApproach: 'advancement_excitement',\n      contentFocus: 'future_positioning',\n      languageStyle: 'forward_thinking',\n      storyElements: ['trend_analysis', 'competitive_advantages', 'innovation_benefits'],\n      engagementType: 'aspiration_building'\n    }\n  };\n\n  return strategyMap[trigger] || strategyMap['Authority & Expertise'];\n}\n\n// ANALYZE CONTENT THEME FOR NARRATIVE STRUCTURE\nfunction analyzeContentTheme(theme) {\n  const themeStrategies = {\n    'Real-Time Monitoring Mastery': {\n      narrativeStructure: 'technical_capability_story',\n      focusPoints: ['monitoring_challenges', 'real_time_benefits', 'technical_superiority'],\n      contentAngles: ['behind_scenes_tech', 'performance_comparison', 'technical_deep_dive']\n    },\n    'Total Asset Protection': {\n      narrativeStructure: 'security_focused_story',\n      focusPoints: ['asset_vulnerabilities', 'protection_strategies', 'peace_of_mind'],\n      contentAngles: ['risk_scenarios', 'protection_stories', 'security_confidence']\n    },\n    'Governance and Compliance Excellence': {\n      narrativeStructure: 'compliance_authority_story',\n      focusPoints: ['regulatory_challenges', 'compliance_solutions', 'audit_readiness'],\n      contentAngles: ['compliance_expertise', 'audit_stories', 'governance_benefits']\n    },\n    'Unmatched Continuity and Flexibility': {\n      narrativeStructure: 'flexibility_advantage_story',\n      focusPoints: ['business_continuity', 'flexible_solutions', 'adaptability'],\n      contentAngles: ['continuity_stories', 'flexibility_benefits', 'adaptation_success']\n    }\n  };\n\n  return themeStrategies[theme] || {\n    narrativeStructure: 'general_benefit_story',\n    focusPoints: ['problem_solving', 'solution_benefits', 'user_success'],\n    contentAngles: ['practical_benefits', 'user_stories', 'solution_focus']\n  };\n}\n\n// MAP ENGAGEMENT OBJECTIVES TO INTERACTION STRATEGIES\nfunction mapEngagementStrategy(objective) {\n  const engagementMap = {\n    'Drive Comments': {\n      ctaStyle: 'open_ended_question',\n      engagementTactics: ['controversial_opinion', 'experience_sharing_request', 'advice_seeking'],\n      questionTypes: ['experience_based', 'opinion_seeking', 'story_sharing']\n    },\n    'Generate Shares': {\n      ctaStyle: 'shareworthy_insight',\n      engagementTactics: ['valuable_tips', 'surprising_statistics', 'helpful_resources'],\n      questionTypes: ['tag_someone', 'share_if_helpful', 'spread_awareness']\n    },\n    'Build Authority': {\n      ctaStyle: 'thought_leadership',\n      engagementTactics: ['expert_insights', 'industry_predictions', 'professional_observations'],\n      questionTypes: ['industry_trends', 'professional_challenges', 'expert_opinions']\n    },\n    'Lead Generation': {\n      ctaStyle: 'value_driven_offer',\n      engagementTactics: ['problem_solution', 'consultation_offer', 'resource_sharing'],\n      questionTypes: ['problem_identification', 'solution_interest', 'help_offering']\n    }\n  };\n\n  return engagementMap[objective] || engagementMap['Drive Comments'];\n}\n\n// PERFORM ALL ANALYSES\nconst linkedinAnalysis = analyzeLinkedInContent(contentPlanData.linkedinContent);\nconst uvpAnalysis = analyzeUVP(contentPlanData.primaryUVP);\nconst psychologyStrategy = mapPsychologyStrategy(contentPlanData.psychologicalTrigger);\nconst themeStrategy = analyzeContentTheme(contentPlanData.contentTheme);\nconst engagementStrategy = mapEngagementStrategy(contentPlanData.engagementObjective);\n\n// Create comprehensive content intelligence\nconst contentIntelligence = {\n  // Raw data\n  rawData: contentPlanData,\n  \n  // Analyzed components\n  linkedinAnalysis: linkedinAnalysis,\n  uvpAnalysis: uvpAnalysis,\n  psychologyStrategy: psychologyStrategy,\n  themeStrategy: themeStrategy,\n  engagementStrategy: engagementStrategy,\n  \n  // Meta information\n  dataQuality: {\n    hasLinkedinContent: linkedinAnalysis.hasContent,\n    hasRichUVP: uvpAnalysis.hasUVP,\n    hasPsychologyTrigger: !!contentPlanData.psychologicalTrigger,\n    hasContentTheme: !!contentPlanData.contentTheme,\n    hasEngagementObjective: !!contentPlanData.engagementObjective,\n    completenessScore: [\n      linkedinAnalysis.hasContent,\n      uvpAnalysis.hasUVP,\n      !!contentPlanData.psychologicalTrigger,\n      !!contentPlanData.contentTheme,\n      !!contentPlanData.engagementObjective\n    ].filter(Boolean).length\n  }\n};\n\nconsole.log('🔍 Content Analysis Complete:');\nconsole.log(`📊 LinkedIn Analysis: ${linkedinAnalysis.hasContent ? 'RICH' : 'LIMITED'}`);\nconsole.log(`🎯 UVP Analysis: ${uvpAnalysis.hasUVP ? 'DETAILED' : 'BASIC'}`);\nconsole.log(`🧠 Psychology Strategy: ${psychologyStrategy.emotionalApproach}`);\nconsole.log(`🎭 Theme Strategy: ${themeStrategy.narrativeStructure}`);\nconsole.log(`🎪 Engagement Strategy: ${engagementStrategy.ctaStyle}`);\nconsole.log(`📈 Data Completeness: ${contentIntelligence.dataQuality.completenessScore}/5`);\n\nreturn {\n  json: {\n    // Pass through all previous data\n    ...inputData,\n    \n    // Add rich content intelligence\n    contentIntelligence: contentIntelligence,\n    \n    // Processing metadata\n    contentAnalysisComplete: true,\n    analysisTimestamp: new Date().toISOString()\n  }\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[5180,3580],"id":"22267929-d9d4-470e-b878-92d65d67f8f8","name":"Content Analysis Engine"},{"parameters":{"jsCode":"// FIXED AIRTABLE MAPPING FOR PLATFORM AGENTS\nconst contentArray = $input.all(); // Get content from platform agent\nconsole.log('=== FIXED AIRTABLE MAPPING ===');\nconsole.log(`Processing ${contentArray.length} content variations`);\n\n// Debug: Log the actual data structure\nconsole.log('First item structure:', Object.keys(contentArray[0] || {}));\nconsole.log('First item data:', contentArray[0]);\n\n// Get platform from the data (should be passed through from form)\nconst platform = contentArray[0]?.targetPlatform || \n                contentArray[0]?.json?.targetPlatform ||\n                $('Form Processor1').first().json.targetPlatform ||\n                'LinkedIn'; // Ultimate fallback\n\nconsole.log('Platform detected:', platform);\n\n// Helper function to extract the hook (first sentence or paragraph)\nfunction extractHook(content) {\n  if (!content) return 'No content available';\n  \n  const hookPatterns = [\n    /^[^.!?]*(?:Having worked|Most backup solutions|Something I keep seeing|Here's what|After watching|Three mistakes)[^.!?]*[.!?]/i,\n    /^[^.!?]*[.!?]/ // Fallback to first sentence\n  ];\n  \n  for (const pattern of hookPatterns) {\n    const match = content.match(pattern);\n    if (match) {\n      return match[0].trim();\n    }\n  }\n  \n  return content.substring(0, 100) + (content.length > 100 ? '...' : '');\n}\n\n// Helper function to get angle based on variation\nfunction getAngle(variationNumber, variationData) {\n  if (variationData && variationData.unique_angle) {\n    return variationData.unique_angle;\n  }\n  \n  const angles = {\n    1: \"Technical Authority + LinkedIn Foundation\",\n    2: \"Deep Technical Capability Demonstration\", \n    3: \"Market-Focused Engagement Optimization\"\n  };\n  return angles[variationNumber] || \"Technical Expertise\";\n}\n\n// Helper function to get intent based on variation\nfunction getIntent(variationNumber, variationData) {\n  if (variationData && variationData.target_emotion) {\n    return variationData.target_emotion;\n  }\n  \n  const intents = {\n    1: \"Build credibility through technical expertise\",\n    2: \"Demonstrate comprehensive technical capabilities\",\n    3: \"Drive engagement through market relevance\"\n  };\n  return intents[variationNumber] || \"Establish technical authority\";\n}\n\n// Process each content variation\nconst airtableRecords = contentArray.map((item, index) => {\n  // FIXED: Handle different data structures from LLM Chain nodes\n  const content = item.text ||              // Direct from LLM Chain\n                 item.json?.text ||         // Nested in json\n                 item.content ||            // Alternative content field\n                 item.json?.content ||      // Nested content\n                 '';                        // Fallback\n  \n  const variationNumber = index + 1;\n  const variationData = item.json || item; // Handle both structures\n  \n  console.log(`Processing Variation ${variationNumber}:`);\n  console.log(`Content length: ${content.length} characters`);\n  console.log(`Content preview: ${content.substring(0, 100)}...`);\n  \n  const hook = extractHook(content);\n  const angle = getAngle(variationNumber, variationData);\n  const intent = getIntent(variationNumber, variationData);\n  \n  console.log(`Hook: ${hook.substring(0, 50)}...`);\n  console.log(`Angle: ${angle}`);\n  console.log(`Intent: ${intent}`);\n  \n  return {\n    json: {\n      \"Hook\": hook,\n      \"Post\": content,\n      \"Platform\": platform,  // ✅ Now properly defined\n      \"Angle\": angle,\n      \"Intent\": intent\n    }\n  };\n});\n\nconsole.log('=== PROCESSING COMPLETE ===');\nconsole.log(`✅ Successfully processed ${airtableRecords.length} records`);\n\nreturn airtableRecords;"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[6440,3560],"id":"192f63f2-5bf7-46b6-8397-3ca383fcab4b","name":"Airtable processing"},{"parameters":{"jsCode":"// UVP INTELLIGENCE EXTRACTOR - Mines your 8,248 character UVP for unique content\nconst inputData = $input.first().json;\nconst formProcessor = $('Form Processor1').first().json;\nconst targetPlatform = formProcessor.targetPlatform;\nconst variationCount = formProcessor.variationCount;\nconst lineItemId = formProcessor.lineItemId;\n\nconsole.log('=== UVP INTELLIGENCE EXTRACTOR ===');\nconsole.log('Mining UVP for unique content elements...');\n\nconst uvpText = inputData['Primary UVP'] || '';\nconsole.log(`UVP Length: ${uvpText.length} characters`);\n\n// Extract ACTUAL technical capabilities from UVP\nfunction extractTechnicalCapabilities(uvp) {\n  const capabilities = {\n    monitoring: [],\n    backup: [],\n    security: [],\n    integration: [],\n    performance: [],\n    deployment: []\n  };\n  \n  // Monitoring capabilities - Extract full sentences\n  const monitoringPatterns = [\n    /Synchronous Monitoring Engine[^.]*\\./gi,\n    /real-time[^.]*monitoring[^.]*\\./gi,\n    /continuous[^.]*monitor[^.]*\\./gi,\n    /tracking[^.]*changes[^.]*\\./gi\n  ];\n  \n  monitoringPatterns.forEach(pattern => {\n    const matches = uvp.match(pattern) || [];\n    capabilities.monitoring.push(...matches.map(m => m.trim()));\n  });\n  \n  // Backup capabilities\n  const backupPatterns = [\n    /Automated Synchronous Backup[^.]*\\./gi,\n    /Complete Asset Coverage[^.]*\\./gi,\n    /Retention Policy[^.]*\\./gi,\n    /Instant Restore[^.]*\\./gi,\n    /Rollback Functionality[^.]*\\./gi\n  ];\n  \n  backupPatterns.forEach(pattern => {\n    const matches = uvp.match(pattern) || [];\n    capabilities.backup.push(...matches.map(m => m.trim()));\n  });\n  \n  // Integration capabilities\n  const integrationPatterns = [\n    /Works with Oracle, SQL[^.]*\\./gi,\n    /Docker container[^.]*\\./gi,\n    /Azure, AWS[^.]*Google Cloud[^.]*\\./gi,\n    /Seamless integration[^.]*\\./gi\n  ];\n  \n  integrationPatterns.forEach(pattern => {\n    const matches = uvp.match(pattern) || [];\n    capabilities.integration.push(...matches.map(m => m.trim()));\n  });\n  \n  return capabilities;\n}\n\n// Extract ACTUAL business benefits from the UVP\nfunction extractBusinessBenefits(uvp) {\n  const benefits = {\n    timeSavings: [],\n    riskReduction: [],\n    compliance: [],\n    productivity: [],\n    governance: []\n  };\n  \n  // Find specific benefit statements\n  const sections = uvp.split('\\n\\n');\n  sections.forEach(section => {\n    if (section.includes('eliminat') || section.includes('without requiring')) {\n      const sentences = section.match(/[^.!?]+[.!?]/g) || [];\n      benefits.timeSavings.push(...sentences.filter(s => \n        s.includes('eliminat') || s.includes('without requiring') || s.includes('automat')\n      ).map(s => s.trim()));\n    }\n    \n    if (section.includes('protect') || section.includes('safeguard')) {\n      const sentences = section.match(/[^.!?]+[.!?]/g) || [];\n      benefits.riskReduction.push(...sentences.filter(s => \n        s.includes('protect') || s.includes('safeguard') || s.includes('ensure')\n      ).map(s => s.trim()));\n    }\n    \n    if (section.includes('complian') || section.includes('audit')) {\n      const sentences = section.match(/[^.!?]+[.!?]/g) || [];\n      benefits.compliance.push(...sentences.filter(s => \n        s.includes('complian') || s.includes('audit') || s.includes('governance')\n      ).map(s => s.trim()));\n    }\n  });\n  \n  return benefits;\n}\n\n// Extract use cases\nfunction extractUseCases(uvp) {\n  const useCases = {\n    primary: [],\n    scenarios: [],\n    problems: []\n  };\n  \n  // Find the \"Primary use cases include:\" section\n  const useCaseMatch = uvp.match(/Primary use cases include:([\\s\\S]*?)(?=\\n##|\\n\\*\\*|$)/);\n  if (useCaseMatch) {\n    const useCaseText = useCaseMatch[1];\n    const cases = useCaseText.match(/- \\*\\*[^:]+\\*\\*:[^-]*/g) || [];\n    useCases.primary = cases.map(c => c.replace(/^- /, '').trim());\n  }\n  \n  // Extract problem scenarios\n  const problemPatterns = [\n    /accidental deletion[^.]*\\./gi,\n    /data loss[^.]*\\./gi,\n    /compliance requirements[^.]*\\./gi,\n    /version control issues[^.]*\\./gi\n  ];\n  \n  problemPatterns.forEach(pattern => {\n    const matches = uvp.match(pattern) || [];\n    useCases.problems.push(...matches.map(m => m.trim()));\n  });\n  \n  return useCases;\n}\n\n// Extract competitive differentiators\nfunction extractDifferentiators(uvp) {\n  const differentiators = [];\n  \n  // Find comparison section\n  const comparisonMatch = uvp.match(/Comparison with manual backup approaches([\\s\\S]*?)(?=\\n##|$)/);\n  if (comparisonMatch) {\n    const bullets = comparisonMatch[1].match(/- \\*\\*[^*]+\\*\\*[^-]*/g) || [];\n    differentiators.push(...bullets.map(b => b.replace(/^- /, '').trim()));\n  }\n  \n  // Also look for \"unlike\" statements\n  const unlikeMatches = uvp.match(/[Uu]nlike[^.]*\\./g) || [];\n  differentiators.push(...unlikeMatches.map(m => m.trim()));\n  \n  return [...new Set(differentiators)];\n}\n\n// Extract metrics and numbers\nfunction extractMetrics(uvp) {\n  const metrics = [];\n  \n  // Find all numbers with context\n  const metricPatterns = [\n    /\\d+[-\\s]?(hour|minute|second)[^.]*\\./gi,\n    /\\d+\\s*%[^.]*\\./gi,\n    /\\d+[-\\s]?\\d+\\s*employees[^.]*\\./gi\n  ];\n  \n  metricPatterns.forEach(pattern => {\n    const matches = uvp.match(pattern) || [];\n    metrics.push(...matches.map(m => m.trim()));\n  });\n  \n  return [...new Set(metrics)];\n}\n\n// Process the UVP\nconst technicalCapabilities = extractTechnicalCapabilities(uvpText);\nconst businessBenefits = extractBusinessBenefits(uvpText);\nconst useCases = extractUseCases(uvpText);\nconst differentiators = extractDifferentiators(uvpText);\nconst metrics = extractMetrics(uvpText);\n\n// Create the intelligence object\nconst uvpIntelligence = {\n  technicalCapabilities,\n  businessBenefits,\n  useCases,\n  differentiators,\n  metrics,\n  stats: {\n    totalCapabilities: Object.values(technicalCapabilities).flat().length,\n    totalBenefits: Object.values(businessBenefits).flat().length,\n    totalUseCases: Object.values(useCases).flat().length,\n    totalDifferentiators: differentiators.length,\n    totalMetrics: metrics.length\n  }\n};\n\nconsole.log('\\n📊 UVP Intelligence Extracted:');\nconsole.log(`   Technical Capabilities: ${uvpIntelligence.stats.totalCapabilities}`);\nconsole.log(`   Business Benefits: ${uvpIntelligence.stats.totalBenefits}`);\nconsole.log(`   Use Cases: ${uvpIntelligence.stats.totalUseCases}`);\nconsole.log(`   Differentiators: ${uvpIntelligence.stats.totalDifferentiators}`);\nconsole.log(`   Metrics: ${uvpIntelligence.stats.totalMetrics}`);\n\n// Show sample extractions\nconsole.log('\\n🔍 Sample Extractions:');\nif (technicalCapabilities.monitoring.length > 0) {\n  console.log('Monitoring:', technicalCapabilities.monitoring[0].substring(0, 100) + '...');\n}\nif (businessBenefits.timeSavings.length > 0) {\n  console.log('Benefit:', businessBenefits.timeSavings[0].substring(0, 100) + '...');\n}\nif (differentiators.length > 0) {\n  console.log('Differentiator:', differentiators[0].substring(0, 100) + '...');\n}\n\nreturn {\n  json: {\n    ...inputData,\n    targetPlatform: targetPlatform,\n    variationCount: variationCount,\n    lineItemId: lineItemId,\n    uvpIntelligence: uvpIntelligence,\n    uvp_extraction_complete: true,\n    extraction_timestamp: new Date().toISOString()    \n    \n  }\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[4740,3580],"id":"20413820-6e43-4362-9dfc-00f30cf85354","name":"UVP Intelligence Extractor"},{"parameters":{"jsCode":"// DYNAMIC CONTENT MATRIX GENERATOR - Creates unique content DNA\nconst inputData = $input.first().json;\n\nconsole.log('=== DYNAMIC CONTENT MATRIX GENERATOR ===');\nconsole.log('Creating unique content DNA for each variation...');\n\n// Extract all the data we need\nconst contentIntelligence = inputData.contentIntelligence;\nconst uvpIntelligence = inputData.uvpIntelligence;\nconst variationCount = inputData.variationCount || 3;\n\n// NEW FIELDS FROM CONTENT FOCUS PLAN\nconst contentAngle = inputData['Content Angle'] || 'Technical Deep Dive';\nconst narrativeVoice = inputData['Narrative Voice'] || 'Concerned Expert';\nconst contentDepth = inputData['Content Depth'] || 'Medium';\n\nconsole.log(`📐 Content Angle: ${contentAngle}`);\nconsole.log(`🎭 Narrative Voice: ${narrativeVoice}`);\nconsole.log(`📊 Variations to create: ${variationCount}`);\n\n// OPENING PATTERNS BY VOICE\nconst OPENING_PATTERNS = {\n  'Concerned Expert': [\n    \"I'm seeing too many companies struggle with Power BI backup gaps that\",\n    \"Here's what keeps me up at night about Power BI protection:\",\n    \"After reviewing dozens of Power BI disasters, I'm concerned about\",\n    \"The gap I'm noticing in enterprise BI backup strategies is\",\n    \"Something troubling I discovered while auditing Power BI environments:\"\n  ],\n  'Excited Innovator': [\n    \"Just discovered a game-changing approach to Power BI protection that\",\n    \"The future of Power BI backup just got incredibly interesting because\",\n    \"I'm genuinely excited about this breakthrough in BI asset protection:\",\n    \"What if I told you there's now a way to eliminate backup gaps entirely?\",\n    \"The possibilities this opens up for Power BI governance are\"\n  ],\n  'Practical Advisor': [\n    \"Here's the step-by-step approach that's working for Power BI backup:\",\n    \"Let me break down exactly how to solve Power BI protection gaps:\",\n    \"The practical reality of Power BI backup is simpler than you think:\",\n    \"Skip the complexity - here's what actually matters for BI protection:\",\n    \"Three actionable steps to immediately improve your Power BI backup:\"\n  ],\n  'Industry Veteran': [\n    \"After 15 years watching BI platforms evolve, here's what's different:\",\n    \"I've implemented Power BI solutions since 2015, and\",\n    \"Having seen every iteration of BI backup technology, I can tell you\",\n    \"In my experience across hundreds of Power BI deployments,\",\n    \"The pattern I've observed over decades in business intelligence is\"\n  ],\n  'Challenger': [\n    \"Why are we still accepting manual Power BI backups as normal?\",\n    \"Everyone's doing Power BI protection wrong, and here's the proof:\",\n    \"The conventional wisdom about BI backup is costing you dearly.\",\n    \"Time to challenge the status quo on Power BI governance:\",\n    \"Stop following outdated backup advice that no longer works because\"\n  ]\n};\n\n// Create different variation strategies\nfunction createVariationStrategy(index, uvpIntel, contentIntel) {\n  // Rotate through different approaches for each variation\n  const strategies = [\n    {\n      // Variation 1: Focus on primary capability from theme\n      focus: \"capability_showcase\",\n      priority: \"technical_depth\",\n      approach: \"demonstrate_expertise\"\n    },\n    {\n      // Variation 2: Focus on business benefits\n      focus: \"benefit_emphasis\",\n      priority: \"business_value\",\n      approach: \"roi_demonstration\"\n    },\n    {\n      // Variation 3: Focus on problem/pain points\n      focus: \"problem_agitation\",\n      priority: \"pain_points\",\n      approach: \"solution_reveal\"\n    },\n    {\n      // Variation 4: Focus on competitive differentiation\n      focus: \"competitive_edge\",\n      priority: \"unique_advantages\",\n      approach: \"comparison_highlight\"\n    },\n    {\n      // Variation 5: Focus on use cases\n      focus: \"use_case_scenarios\",\n      priority: \"practical_application\",\n      approach: \"story_telling\"\n    }\n  ];\n  \n  return strategies[index % strategies.length];\n}\n\n// Generate variations with unique DNA\nconst variations = [];\n\nfor (let i = 0; i < variationCount; i++) {\n  const strategy = createVariationStrategy(i, uvpIntelligence, contentIntelligence);\n  \n  // Select different elements for each variation\n  let primaryCapability = '';\n  let primaryBenefit = '';\n  let primaryUseCase = '';\n  let primaryMetric = '';\n  let differentiator = '';\n  \n  // Based on strategy, select different elements\n  switch (strategy.focus) {\n    case 'capability_showcase':\n      const capCategories = Object.keys(uvpIntelligence.technicalCapabilities);\n      const capCategory = capCategories[i % capCategories.length];\n      const caps = uvpIntelligence.technicalCapabilities[capCategory];\n      primaryCapability = caps[i % caps.length] || 'Synchronous monitoring capability';\n      break;\n      \n    case 'benefit_emphasis':\n      const benCategories = Object.keys(uvpIntelligence.businessBenefits);\n      const benCategory = benCategories[i % benCategories.length];\n      const bens = uvpIntelligence.businessBenefits[benCategory];\n      primaryBenefit = bens[i % bens.length] || 'Eliminates manual backup processes';\n      break;\n      \n    case 'problem_agitation':\n      const problems = uvpIntelligence.useCases.problems;\n      primaryUseCase = problems[i % problems.length] || 'Prevents accidental deletion disasters';\n      break;\n      \n    case 'competitive_edge':\n      differentiator = uvpIntelligence.differentiators[i % uvpIntelligence.differentiators.length] || \n        'Continuous Protection versus intermittent snapshots';\n      break;\n      \n    case 'use_case_scenarios':\n      const cases = uvpIntelligence.useCases.primary;\n      primaryUseCase = cases[i % cases.length] || 'Disaster Recovery Preparation';\n      break;\n  }\n  \n  // Always grab some elements even if not primary focus\n  if (!primaryCapability) {\n    const allCaps = Object.values(uvpIntelligence.technicalCapabilities).flat();\n    primaryCapability = allCaps[i] || 'Real-time synchronous monitoring';\n  }\n  if (!primaryBenefit) {\n    const allBens = Object.values(uvpIntelligence.businessBenefits).flat();\n    primaryBenefit = allBens[i] || 'Comprehensive governance capabilities';\n  }\n  if (!primaryMetric) {\n    primaryMetric = uvpIntelligence.metrics[i] || '10-hour gap elimination';\n  }\n  \n  // Create unique opening pattern\n  const openingPattern = OPENING_PATTERNS[narrativeVoice][i % OPENING_PATTERNS[narrativeVoice].length];\n  \n  // Create content DNA\n  const contentDNA = {\n    // Identity\n    variation_number: i + 1,\n    theme: contentIntelligence.rawData.contentTheme,\n    angle: contentAngle,\n    narrativeVoice: narrativeVoice,\n    contentDepth: contentDepth,\n    \n    // Strategy\n    strategy: strategy,\n    \n    // Unique elements\n    primaryCapability: primaryCapability,\n    primaryBenefit: primaryBenefit,\n    primaryUseCase: primaryUseCase,\n    primaryMetric: primaryMetric,\n    differentiator: differentiator,\n    \n    // Opening and structure\n    openingPattern: openingPattern,\n    \n    // Metadata\n    contentFingerprint: `${contentIntelligence.rawData.contentTheme}_${strategy.focus}_v${i+1}`\n  };\n  \n  variations.push({\n    json: {\n      ...inputData,\n      ...contentDNA, // Flatten contentDNA into main object for easier access in prompt\n      contentDNA: contentDNA,\n      variation_metadata: {\n        total_variations: variationCount,\n        variation_index: i,\n        strategy_used: strategy.focus\n      }\n    }\n  });\n}\n\nconsole.log('\\n📊 UNIQUE CONTENT VARIATIONS CREATED:');\nvariations.forEach((v, i) => {\n  const dna = v.json.contentDNA;\n  console.log(`\\nVariation ${i + 1} (${dna.strategy.focus}):`);\n  console.log(`  Opening: \"${dna.openingPattern}\"`);\n  console.log(`  Capability: ${dna.primaryCapability?.substring(0, 60)}...`);\n  console.log(`  Benefit: ${dna.primaryBenefit?.substring(0, 60)}...`);\n  console.log(`  Strategy: ${dna.strategy.approach}`);\n});\n\nreturn variations;"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[5360,3580],"id":"4e2382da-3730-4591-8ceb-58b5bc74bb61","name":"Dynamic Content Matrix Generator"},{"parameters":{"promptType":"define","text":"==# DYNAMIC CONTENT GENERATION WITH CONTENT DNA\n\nYou are creating content based on a unique Content DNA profile. Each piece must be distinctly different from any other.\n\n## 🧬 CONTENT DNA PROFILE\n**Theme Focus**: {{ $json.theme }} \n**Angle**: {{ $json.angle }}\n**Voice**: {{ $json.narrativeVoice }}\n**Depth Level**: {{ $json.contentDepth }}\n**Strategy Focus**: {{ $json.strategy.focus }}\n\n## 🎯 UNIQUE ELEMENTS FOR THIS PIECE\n**Primary Capability**: {{ $json.primaryCapability }}\n**Primary Benefit**: {{ $json.primaryBenefit }}\n**Use Case**: {{ $json.primaryUseCase }}\n**Opening Pattern**: {{ $json.openingPattern }}\n**Differentiator**: {{ $json.differentiator }}\n**Metric**: {{ $json.primaryMetric }}\n\n## 📊 CONTENT GENERATION RULES\n\nGenerate a LinkedIn post that:\n1. STARTS with the exact opening pattern provided\n2. FOCUSES primarily on the strategy focus ({{ $json.strategy.focus }})\n3. Naturally incorporates the primary capability and benefit\n4. Maintains the {{ $json.narrativeVoice }} voice throughout\n5. Stays between 600-900 characters\n6. Ends with an engaging question\n\n## 🚫 NEVER USE THESE GENERIC PHRASES\n- \"Most companies\"\n- \"Having worked with\"\n- \"Traditional approaches\"\n- \"Manual processes\" (unless specifically in the differentiator)\n\n## ✅ MUST INCLUDE\n- The specific technical capability provided\n- The exact business benefit mentioned\n- Natural, conversational language with contractions\n- An ending question that drives engagement\n\nGenerate the unique LinkedIn post now:","messages":{"messageValues":[{"message":"=You are synthesizing multiple specialized elements into viral LinkedIn content. Write authentically as {{ $json[\"Company Name\"] }} using their specific expertise while applying advanced engagement psychology and narrative structure for maximum professional virality."}]},"batching":{}},"type":"@n8n/n8n-nodes-langchain.chainLlm","typeVersion":1.7,"position":[5920,3580],"id":"99d94ee5-2151-479a-ab4a-7a9403ffad03","name":"LinkedIn Agent"},{"parameters":{"promptType":"define","text":"==# DYNAMIC CONTENT GENERATION WITH CONTENT DNA\n\nYou are creating content based on a unique Content DNA profile. Each piece must be distinctly different from any other.\n\n## 🧬 CONTENT DNA PROFILE\n**Theme Focus**: {{ $json.theme }} \n**Angle**: {{ $json.angle }}\n**Voice**: {{ $json.narrativeVoice }}\n**Depth Level**: {{ $json.contentDepth }}\n**Strategy Focus**: {{ $json.strategy.focus }}\n\n## 🎯 UNIQUE ELEMENTS FOR THIS PIECE\n**Primary Capability**: {{ $json.primaryCapability }}\n**Primary Benefit**: {{ $json.primaryBenefit }}\n**Use Case**: {{ $json.primaryUseCase }}\n**Opening Pattern**: {{ $json.openingPattern }}\n**Differentiator**: {{ $json.differentiator }}\n**Metric**: {{ $json.primaryMetric }}\n\n## 📊 CONTENT GENERATION RULES\n\nGenerate a Facebook post that:\n1. Uses conversational, friendly tone\n2. Includes social proof or relatable story  \n3. Stays between 400-700 characters\n4. Ends with a community-building question\n5. Incorporates {{ $json.primaryCapability }} naturally\n\n## 🚫 NEVER USE THESE GENERIC PHRASES\n- \"Most companies\"\n- \"Having worked with\"\n- \"Traditional approaches\"\n- \"Manual processes\" (unless specifically in the differentiator)\n\n## ✅ MUST INCLUDE\n- The specific technical capability provided\n- The exact business benefit mentioned\n- Natural, conversational language with contractions\n- An ending question that drives engagement\n\nGenerate the unique LinkedIn post now:","messages":{"messageValues":[{"message":"=You are synthesizing multiple specialized elements into viral LinkedIn content. Write authentically as {{ $json[\"Company Name\"] }} using their specific expertise while applying advanced engagement psychology and narrative structure for maximum professional virality."}]},"batching":{}},"type":"@n8n/n8n-nodes-langchain.chainLlm","typeVersion":1.7,"position":[5920,3760],"id":"18eb967d-1fe9-4194-9d26-accb3a445fe0","name":"Facebook Agent"},{"parameters":{"promptType":"define","text":"==# DYNAMIC CONTENT GENERATION WITH CONTENT DNA\n\nYou are creating content based on a unique Content DNA profile. Each piece must be distinctly different from any other.\n\n## 🧬 CONTENT DNA PROFILE\n**Theme Focus**: {{ $json.theme }} \n**Angle**: {{ $json.angle }}\n**Voice**: {{ $json.narrativeVoice }}\n**Depth Level**: {{ $json.contentDepth }}\n**Strategy Focus**: {{ $json.strategy.focus }}\n\n## 🎯 UNIQUE ELEMENTS FOR THIS PIECE\n**Primary Capability**: {{ $json.primaryCapability }}\n**Primary Benefit**: {{ $json.primaryBenefit }}\n**Use Case**: {{ $json.primaryUseCase }}\n**Opening Pattern**: {{ $json.openingPattern }}\n**Differentiator**: {{ $json.differentiator }}\n**Metric**: {{ $json.primaryMetric }}\n\n## 📊 CONTENT GENERATION RULES\n\nGenerate a concise X post that:\n1. Delivers maximum impact in 200-400 characters\n2. Uses bold, confident language\n3. Creates shareability through controversy or insight  \n4. Includes {{ $json.primaryCapability }} as proof point\n5. NO questions - end with a strong statement\n\n## 🚫 NEVER USE THESE GENERIC PHRASES\n- \"Most companies\"\n- \"Having worked with\"\n- \"Traditional approaches\"\n- \"Manual processes\" (unless specifically in the differentiator)\n\n## ✅ MUST INCLUDE\n- The specific technical capability provided\n- The exact business benefit mentioned\n- Natural, conversational language with contractions\n- An ending question that drives engagement\n\nGenerate the unique LinkedIn post now:","messages":{"messageValues":[{"message":"=You are synthesizing multiple specialized elements into viral LinkedIn content. Write authentically as {{ $json[\"Company Name\"] }} using their specific expertise while applying advanced engagement psychology and narrative structure for maximum professional virality."}]},"batching":{}},"type":"@n8n/n8n-nodes-langchain.chainLlm","typeVersion":1.7,"position":[5960,3980],"id":"15810134-4976-4ca0-b398-2ed9b9f368b3","name":"X Agent"},{"parameters":{"promptType":"define","text":"==# DYNAMIC CONTENT GENERATION WITH CONTENT DNA\n\nYou are creating content based on a unique Content DNA profile. Each piece must be distinctly different from any other.\n\n## 🧬 CONTENT DNA PROFILE\n**Theme Focus**: {{ $json.theme }} \n**Angle**: {{ $json.angle }}\n**Voice**: {{ $json.narrativeVoice }}\n**Depth Level**: {{ $json.contentDepth }}\n**Strategy Focus**: {{ $json.strategy.focus }}\n\n## 🎯 UNIQUE ELEMENTS FOR THIS PIECE\n**Primary Capability**: {{ $json.primaryCapability }}\n**Primary Benefit**: {{ $json.primaryBenefit }}\n**Use Case**: {{ $json.primaryUseCase }}\n**Opening Pattern**: {{ $json.openingPattern }}\n**Differentiator**: {{ $json.differentiator }}\n**Metric**: {{ $json.primaryMetric }}\n\n## 📊 CONTENT GENERATION RULES\n\nGenerate an Instagram post that:\n1. Visual-friendly and lifestyle-focused tone\n2. Includes relevant hashtags (3-5 max)\n3. Stays between 300-600 characters  \n4. Ends with engagement-driving question\n5. Incorporates {{ $json.primaryCapability }} naturally\n\n## 🚫 NEVER USE THESE GENERIC PHRASES\n- \"Most companies\"\n- \"Having worked with\"\n- \"Traditional approaches\"\n- \"Manual processes\" (unless specifically in the differentiator)\n\n## ✅ MUST INCLUDE\n- The specific technical capability provided\n- The exact business benefit mentioned\n- Natural, conversational language with contractions\n- An ending question that drives engagement\n\nGenerate the unique LinkedIn post now:","messages":{"messageValues":[{"message":"=You are synthesizing multiple specialized elements into viral LinkedIn content. Write authentically as {{ $json[\"Company Name\"] }} using their specific expertise while applying advanced engagement psychology and narrative structure for maximum professional virality."}]},"batching":{}},"type":"@n8n/n8n-nodes-langchain.chainLlm","typeVersion":1.7,"position":[5960,4220],"id":"19f7aa01-fd7d-44b2-8e5f-186db29dbda2","name":"Instagram Agen"},{"parameters":{"rules":{"values":[{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"leftValue":"={{ $json.targetPlatform }}","rightValue":"LinkedIn","operator":{"type":"string","operation":"equals"},"id":"d7e8b3de-5355-4401-ae63-37e2445ea483"}],"combinator":"and"},"renameOutput":true,"outputKey":"LinkedIn"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"ff3f56f6-b63f-400e-aa59-a3879f0fcfdb","leftValue":"={{ $json.targetPlatform }}","rightValue":"Facebook","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"Facebook"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"a33e2553-1930-422e-b11e-def45b04629d","leftValue":"={{ $json.targetPlatform }}","rightValue":"X","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"X"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"8ccede30-fee4-4a71-b41c-48a2fba72e13","leftValue":"={{ $json.targetPlatform }}","rightValue":"Instagram","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"Instagram"}]},"options":{}},"type":"n8n-nodes-base.switch","typeVersion":3.2,"position":[5600,3580],"id":"718b24e7-9e45-446e-b70a-c17b128dcff9","name":"Switch2"}],"connections":{"Process Form Data":{"main":[[{"node":"Get Campaign Data","type":"main","index":0}]]},"Get Campaign Data":{"main":[[{"node":"1. Content Angle Randomizer","type":"main","index":0}]]},"1. Content Angle Randomizer":{"main":[[{"node":"Uniqueness validation logic","type":"main","index":0}]]},"3. Personality Modifier":{"main":[[{"node":"B2B/B2C Voice Adapter","type":"main","index":0}]]},"4. Psychology Agent":{"main":[[{"node":"PSYCHOLOGY DATA PROCESSOR","type":"main","index":0}]]},"5. Narrative Agent":{"main":[[{"node":"NARRATIVE DATA PROCESSOR","type":"main","index":0}]]},"7. Quality Validator":{"main":[[{"node":"Code","type":"main","index":0}]]},"Research Model":{"ai_languageModel":[[{"node":"LinkedIn Research Agent","type":"ai_languageModel","index":0},{"node":"Facebook Research Agent1","type":"ai_languageModel","index":0},{"node":"Instagram Research Agent","type":"ai_languageModel","index":0},{"node":"X Research Agent1","type":"ai_languageModel","index":0}]]},"Psychology Model":{"ai_languageModel":[[{"node":"4. Psychology Agent","type":"ai_languageModel","index":0}]]},"Narrative Model":{"ai_languageModel":[[{"node":"5. Narrative Agent","type":"ai_languageModel","index":0}]]},"Generation Model":{"ai_languageModel":[[{"node":"LinkedIn Content Generator","type":"ai_languageModel","index":0},{"node":"Facebook Content Generator","type":"ai_languageModel","index":0},{"node":"Instagram Content Generator","type":"ai_languageModel","index":0},{"node":"X Content Generator","type":"ai_languageModel","index":0}]]},"PSYCHOLOGY DATA PROCESSOR":{"main":[[{"node":"5. Narrative Agent","type":"main","index":0}]]},"B2B/B2C Voice Adapter":{"main":[[{"node":"Technical Capability Interpreter","type":"main","index":0}]]},"Uniqueness validation logic":{"main":[[{"node":"Switch","type":"main","index":0}]]},"Technical Capability Interpreter":{"main":[[{"node":"4. Psychology Agent","type":"main","index":0}]]},"NARRATIVE DATA PROCESSOR":{"main":[[{"node":"Switch1","type":"main","index":0}]]},"Code":{"main":[[{"node":"8. Save to Airtable","type":"main","index":0}]]},"Viral Social Media Post Generator":{"main":[[{"node":"Process Form Data","type":"main","index":0}]]},"Switch":{"main":[[{"node":"LinkedIn Research Agent","type":"main","index":0}],[{"node":"Facebook Research Agent1","type":"main","index":0}],[{"node":"Instagram Research Agent","type":"main","index":0}],[{"node":"X Research Agent1","type":"main","index":0}],[],[]]},"LinkedIn Research Agent":{"main":[[{"node":"Research Merger","type":"main","index":0}]]},"Research Merger":{"main":[[{"node":"3. Personality Modifier","type":"main","index":0}]]},"Facebook Research Agent1":{"main":[[{"node":"Research Merger","type":"main","index":0}]]},"Instagram Research Agent":{"main":[[{"node":"Research Merger","type":"main","index":0}]]},"X Research Agent1":{"main":[[{"node":"Research Merger","type":"main","index":0}]]},"Switch1":{"main":[[{"node":"LinkedIn Content Generator","type":"main","index":0}],[{"node":"Facebook Content Generator","type":"main","index":0}],[{"node":"Instagram Content Generator","type":"main","index":0}],[{"node":"X Content Generator","type":"main","index":0}]]},"LinkedIn Content Generator":{"main":[[{"node":"Content Merger","type":"main","index":0}]]},"Content Merger":{"main":[[{"node":"7. Quality Validator","type":"main","index":0}]]},"Facebook Content Generator":{"main":[[{"node":"Content Merger","type":"main","index":0}]]},"Instagram Content Generator":{"main":[[{"node":"Content Merger","type":"main","index":0}]]},"X Content Generator":{"main":[[{"node":"Content Merger","type":"main","index":0}]]},"Test Form":{"main":[[{"node":"Form Processor1","type":"main","index":0}]]},"Form Processor1":{"main":[[{"node":"Get Line Item Data2","type":"main","index":0}]]},"Get Line Item Data2":{"main":[[{"node":"UVP Intelligence Extractor","type":"main","index":0}]]},"Voice Intelligence Processor":{"main":[[{"node":"Content Analysis Engine","type":"main","index":0}]]},"Content Generation Model2":{"ai_languageModel":[[{"node":"LinkedIn Agent","type":"ai_languageModel","index":0},{"node":"Facebook Agent","type":"ai_languageModel","index":0},{"node":"X Agent","type":"ai_languageModel","index":0},{"node":"Instagram Agen","type":"ai_languageModel","index":0}]]},"Content Analysis Engine":{"main":[[{"node":"Dynamic Content Matrix Generator","type":"main","index":0}]]},"Airtable processing":{"main":[[{"node":"Store Enhanced Content1","type":"main","index":0}]]},"UVP Intelligence Extractor":{"main":[[{"node":"Voice Intelligence Processor","type":"main","index":0}]]},"Dynamic Content Matrix Generator":{"main":[[{"node":"Switch2","type":"main","index":0}]]},"LinkedIn Agent":{"main":[[{"node":"Airtable processing","type":"main","index":0}]]},"Switch2":{"main":[[{"node":"LinkedIn Agent","type":"main","index":0}],[{"node":"Facebook Agent","type":"main","index":0}],[{"node":"X Agent","type":"main","index":0}],[{"node":"Instagram Agen","type":"main","index":0}]]},"Facebook Agent":{"main":[[{"node":"Airtable processing","type":"main","index":0}]]},"X Agent":{"main":[[{"node":"Airtable processing","type":"main","index":0}]]},"Instagram Agen":{"main":[[{"node":"Airtable processing","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":null,"pinData":{},"versionId":"a5379370-a9b2-4505-8dab-631c4aa153cc","triggerCount":0,"shared":[{"createdAt":"2025-07-03T04:19:00.594Z","updatedAt":"2025-07-03T04:19:00.594Z","role":"workflow:owner","workflowId":"tqHWzaUMtnxEWdGT","projectId":"pRXFeKq9D8e0hAOx"}],"tags":[]},{"createdAt":"2025-06-23T02:41:48.111Z","updatedAt":"2025-07-16T13:07:40.000Z","id":"v3WOfexKJ941DhAb","name":"UVP Preparation","active":false,"isArchived":false,"nodes":[{"parameters":{"jsCode":"// PRODUCT INTELLIGENCE RECORD CREATOR\n// Creates clean product intelligence records without content elements\n\nconst formData = $('Product Intelligence Form1').first().json;\nconst masterIntelligence = $('Master Product Intelligence1').first().json;\nconst extractedElements = $('Intelligence Extractor1').first().json;\n\nconsole.log('=== PRODUCT INTELLIGENCE RECORD CREATION ===');\nconsole.log('Company:', formData['Business Name']);\nconsole.log('Product:', formData['Product/Service Name']);\nconsole.log('Industry:', formData['Industry Category']);\n\n// Helper functions\nfunction extractTextContent(agentOutput) {\n  if (agentOutput && agentOutput.text) {\n    return agentOutput.text;\n  }\n  return 'Intelligence generation pending';\n}\n\nfunction extractJSONContent(agentOutput) {\n  try {\n    if (agentOutput && agentOutput.text) {\n      const jsonMatch = agentOutput.text.match(/```json\\s*([\\s\\S]*?)\\s*```/);\n      if (jsonMatch) {\n        return JSON.parse(jsonMatch[1]);\n      }\n    }\n    return null;\n  } catch (error) {\n    console.log('Could not parse JSON content:', error.message);\n    return null;\n  }\n}\n\nfunction arrayToString(arr, fallback = 'Analysis pending') {\n  if (Array.isArray(arr) && arr.length > 0) {\n    return arr.join(' | ');\n  }\n  return fallback;\n}\n\nfunction safeExtract(value, fallback = 'Analysis pending') {\n  return value || fallback;\n}\n\n// Extract data\nconst intelligenceDoc = extractTextContent(masterIntelligence);\nconst extractedData = extractJSONContent(extractedElements);\n\n// Create product intelligence record\nfunction createProductIntelligenceRecord(formData, intelligenceDoc, extractedData) {\n  const timestamp = new Date().toISOString();\n  \n  return {\n    // === CORE IDENTITY ===\n    \"Company Name\": formData['Business Name'],\n    \"Product/Service\": formData['Product/Service Name'],\n    \"Industry\": formData['Industry Category'],\n    \"Target Audience\": formData['Target Customer'],\n    \n    // === MASTER INTELLIGENCE DOCUMENT ===\n    \"Product Intelligence Document\": intelligenceDoc,\n    \n    // === EXTRACTED UVP VARIATIONS ===\n    \"Primary UVP\": safeExtract(extractedData?.extracted_uvps?.primary_uvp),\n    \"Technical UVP\": safeExtract(extractedData?.extracted_uvps?.technical_uvp),\n    \"Benefit UVP\": safeExtract(extractedData?.extracted_uvps?.benefit_uvp),\n    \"Competitive UVP\": safeExtract(extractedData?.extracted_uvps?.competitive_uvp),\n    \n    // === CORE ELEMENTS ===\n    \"Core Functionality\": safeExtract(extractedData?.core_elements?.core_functionality),\n    \"Key Capabilities\": arrayToString(extractedData?.core_elements?.key_capabilities),\n    \"Technical Architecture\": safeExtract(extractedData?.core_elements?.technical_architecture),\n    \"Enterprise Features\": arrayToString(extractedData?.core_elements?.enterprise_features),\n    \"Competitive Advantages\": arrayToString(extractedData?.core_elements?.competitive_advantages),\n    \"Business Value\": safeExtract(extractedData?.core_elements?.business_value),\n    \"Primary Use Cases\": arrayToString(extractedData?.core_elements?.primary_use_cases),\n    \"Implementation Requirements\": arrayToString(extractedData?.core_elements?.implementation_requirements),\n    \"Target Market\": safeExtract(extractedData?.core_elements?.target_market),\n    \n    // === MESSAGING FOUNDATION ===\n    \"Customer Pain Points\": arrayToString(extractedData?.messaging_foundation?.customer_pain_points),\n    \"Emotional Triggers\": arrayToString(extractedData?.messaging_foundation?.emotional_triggers),\n    \"Credibility Signals\": arrayToString(extractedData?.messaging_foundation?.credibility_signals),\n    \"Proof Points\": arrayToString(extractedData?.messaging_foundation?.proof_points),\n    \"Urgency Factors\": arrayToString(extractedData?.messaging_foundation?.urgency_factors),\n    \n    // === COMPETITIVE INTELLIGENCE ===\n    \"Main Competitors\": arrayToString(extractedData?.competitive_intelligence?.main_competitors),\n    \"Competitive Positioning\": safeExtract(extractedData?.competitive_intelligence?.competitive_positioning),\n    \"Market Differentiation\": arrayToString(extractedData?.competitive_intelligence?.market_differentiation),\n    \"Competitive Gaps\": arrayToString(extractedData?.competitive_intelligence?.competitive_gaps),\n    \n    // === ORIGINAL FORM DATA ===\n    \"Original Problem Solved\": formData['Primary Problem Solved'],\n    \"Original Key Differentiator\": formData['Key Differentiator'],\n    \"Original Competitors\": formData['Main Competitors'],\n    \"Customer Voice\": formData['Customer Language'] || 'No customer language provided',\n    \n    // === QUALITY METRICS ===\n    \"Document Quality\": safeExtract(extractedData?.document_analysis?.document_quality),\n    \"Completeness Score\": safeExtract(extractedData?.document_analysis?.completeness_score),\n    \"Word Count\": safeExtract(extractedData?.document_analysis?.word_count),\n    \n    // === METADATA ===\n    \"Intelligence ID\": `${formData['Business Name']}_${formData['Product/Service Name']}_${timestamp}`.replace(/[^a-zA-Z0-9_]/g, '_'),\n    \"Status\": intelligenceDoc.length > 1000 ? 'Active' : 'Draft',\n    \"Created Date\": timestamp,\n    \"Last Updated\": timestamp,\n    \"Website URL\": formData['Product/Service URL'] || '',\n    \"Processing Version\": 'Intelligence_v1.0'\n  };\n}\n\nconst intelligenceRecord = createProductIntelligenceRecord(formData, intelligenceDoc, extractedData);\n\nconsole.log('=== PRODUCT INTELLIGENCE RECORD COMPLETE ===');\nconsole.log('Intelligence ID:', intelligenceRecord['Intelligence ID']);\nconsole.log('Document Length:', intelligenceDoc.length);\nconsole.log('Quality Score:', intelligenceRecord['Completeness Score']);\nconsole.log('Status:', intelligenceRecord['Status']);\n\nreturn { json: intelligenceRecord };"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[5412,-380],"id":"a6e59dc8-fba5-4def-af03-489d7cd0b025","name":"Product Intelligence Record Creator"},{"parameters":{"authentication":"airtableOAuth2Api","operation":"create","base":{"__rl":true,"value":"appQoW8tY1s6ceKOV","mode":"list","cachedResultName":"Ebiexperts","cachedResultUrl":"https://airtable.com/appQoW8tY1s6ceKOV"},"table":{"__rl":true,"value":"tblw4J7WN8ssrSFY0","mode":"list","cachedResultName":"UVP ProductService","cachedResultUrl":"https://airtable.com/appQoW8tY1s6ceKOV/tblw4J7WN8ssrSFY0"},"columns":{"mappingMode":"defineBelow","value":{"Company Name":"={{ $json['Company Name'] }}","Product/Service":"={{ $json['Product/Service'] }}","Industry":"={{ $json['Industry'] }}","Target Audience":"={{ $json['Target Audience'] }}","Product Intelligence Document":"={{ $json['Product Intelligence Document'] }}","Primary UVP":"={{ $json['Primary UVP'] }}","Technical UVP":"={{ $json['Technical UVP'] }}","Benefit UVP":"={{ $json['Benefit UVP'] }}","Competitive UVP":"={{ $json['Competitive UVP'] }}","Core Functionality":"={{ $json['Core Functionality'] }}","Key Capabilities":"={{ $json['Key Capabilities'] }}","Technical Architecture":"={{ $json['Technical Architecture'] }}","Enterprise Features":"={{ $json['Enterprise Features'] }}","Competitive Advantages":"={{ $json['Competitive Advantages'] }}","Business Value":"={{ $json['Business Value'] }}","Primary Use Cases":"={{ $json['Primary Use Cases'] }}","Implementation Requirements":"={{ $json['Implementation Requirements'] }}","Target Market":"={{ $json['Target Market'] }}","Customer Pain Points":"={{ $json['Customer Pain Points'] }}","Emotional Triggers":"={{ $json['Emotional Triggers'] }}","Credibility Signals":"={{ $json['Credibility Signals'] }}","Proof Points":"={{ $json['Proof Points'] }}","Urgency Factors":"={{ $json['Urgency Factors'] }}","Main Competitors":"={{ $json['Main Competitors'] }}","Competitive Positioning":"={{ $json['Competitive Positioning'] }}","Market Differentiation":"={{ $json['Market Differentiation'] }}","Competitive Gaps":"={{ $json['Competitive Gaps'] }}","Customer Voice":"={{ $json['Customer Voice'] }}","Document Quality":"={{ $json['Document Quality'] }}","Status":"={{ $json['Status'] }}","Website URL":"={{ $json['Website URL'] }}"},"matchingColumns":[],"schema":[{"id":"Product/Service","displayName":"Product/Service","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Company Name","displayName":"Company Name","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Industry","displayName":"Industry","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Target Audience","displayName":"Target Audience","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Product Intelligence Document","displayName":"Product Intelligence Document","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Primary UVP","displayName":"Primary UVP","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Technical UVP","displayName":"Technical UVP","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Benefit UVP","displayName":"Benefit UVP","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Competitive UVP","displayName":"Competitive UVP","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Core Functionality","displayName":"Core Functionality","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Key Capabilities","displayName":"Key Capabilities","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Technical Architecture","displayName":"Technical Architecture","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Enterprise Features","displayName":"Enterprise Features","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Competitive Advantages","displayName":"Competitive Advantages","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Business Value","displayName":"Business Value","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Primary Use Cases","displayName":"Primary Use Cases","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Implementation Requirements","displayName":"Implementation Requirements","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Target Market","displayName":"Target Market","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Customer Pain Points","displayName":"Customer Pain Points","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Emotional Triggers","displayName":"Emotional Triggers","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Credibility Signals","displayName":"Credibility Signals","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Proof Points","displayName":"Proof Points","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Urgency Factors","displayName":"Urgency Factors","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Main Competitors","displayName":"Main Competitors","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Competitive Positioning","displayName":"Competitive Positioning","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Market Differentiation","displayName":"Market Differentiation","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Competitive Gaps","displayName":"Competitive Gaps","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Customer Voice","displayName":"Customer Voice","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Document Quality","displayName":"Document Quality","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false},{"id":"Status","displayName":"Status","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"options","options":[{"name":"Active","value":"Active"},{"name":"Draft","value":"Draft"},{"name":"Archived","value":"Archived"}],"readOnly":false,"removed":false},{"id":"Creation Date","displayName":"Creation Date","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"dateTime","readOnly":false,"removed":false},{"id":"Website URL","displayName":"Website URL","required":false,"defaultMatch":false,"canBeUsedToMatch":true,"display":true,"type":"string","readOnly":false,"removed":false}],"attemptToConvertTypes":false,"convertFieldsToString":false},"options":{}},"type":"n8n-nodes-base.airtable","typeVersion":2.1,"position":[5632,-380],"id":"d8182d91-a943-4cb3-8e96-f3f445930acd","name":"Save Product Intelligence","credentials":{"airtableOAuth2Api":{"id":"pOcHNkax3d1V3xqS","name":"Airtable VS Sport"}}},{"parameters":{"path":"5be7924f-9e75-407a-aa62-77c5540f575e","formTitle":"Comprehensive Product Intelligence Generator","formDescription":"Generate detailed product intelligence documents for any industry - Software, Automotive, Services, Manufacturing","formFields":{"values":[{"fieldLabel":"Business Name","fieldType":"dropdown","fieldOptions":{"values":[{"option":"Ebiexperts"},{"option":"Onicavox"},{"option":"Modern Management"},{"option":"Jetour"},{"option":"JAC"},{"option":"Mitsubishi"},{"option":"JAC Westrand"},{"option":"VS. Sports"},{"option":"RevDev"},{"option":"MG Bryanston"},{"option":"MG Ruimsig"},{"option":"JAC Middelburg"},{"option":"CBRM"},{"option":"Octogas"}]}},{"fieldLabel":"Product/Service Name","placeholder":"e.g., MG ZS, Wip Active Backup, Marketing Consultation"},{"fieldLabel":"Product/Service URL","placeholder":"https://www.company.com/product-page"},{"fieldLabel":"Industry Category","fieldType":"dropdown","fieldOptions":{"values":[{"option":"Automotive"},{"option":"Software/SaaS"},{"option":"Professional Services"},{"option":"Manufacturing"},{"option":"Healthcare"},{"option":"Financial Services"},{"option":"E-commerce/Retail"},{"option":"Real Estate"},{"option":"Education"},{"option":"Other"}]}},{"fieldLabel":"Target Customer","fieldType":"dropdown","fieldOptions":{"values":[{"option":"Individual Consumers"},{"option":"Small Business Owners (1-50 employees)"},{"option":"Mid-Market Companies (51-500 employees)"},{"option":"Enterprise (500+ employees)"},{"option":"Industry Professionals"},{"option":"C-Level Executives"}]}},{"fieldLabel":"Primary Problem Solved","fieldType":"textarea","placeholder":"What specific problem does this product/service solve for customers?"},{"fieldLabel":"Key Differentiator","fieldType":"textarea","placeholder":"What makes this different/better than alternatives?"},{"fieldLabel":"Main Competitors","fieldType":"textarea","placeholder":"List 2-3 main competitors with their strengths"},{"fieldLabel":"Customer Language","placeholder":"Any actual quotes from customers (optional)"}]},"options":{"appendAttribution":false,"buttonLabel":"Generate Intelligence"}},"type":"n8n-nodes-base.formTrigger","typeVersion":2.1,"position":[4220,-380],"id":"e2c67f6b-4d76-494e-9711-51720be76296","name":"Product Intelligence Form1","webhookId":"5be7924f-9e75-407a-aa62-77c5540f575e"},{"parameters":{"url":"=https://r.jina.ai/{{ $json['Product/Service URL'] }}","sendHeaders":true,"headerParameters":{"parameters":[{"name":"User-Agent","value":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[4440,-380],"id":"9bdeb615-3b30-41d4-aedb-b70bad4e74d2","name":"Website Content Fetch2"},{"parameters":{"promptType":"define","text":"=## MASTER PRODUCT INTELLIGENCE ANALYST\n\nYou are a world-class product intelligence analyst who creates comprehensive, authoritative product intelligence documents for enterprise marketing, sales, and content teams.\n\n### INPUT DATA:\n**Company:** {{ $('Product Intelligence Form1').item.json['Business Name'] }}\n**Product:** {{ $('Product Intelligence Form1').item.json['Product/Service Name'] }}\n**Industry:** {{ $('Product Intelligence Form1').item.json['Industry Category'] }}\n**Target Customer:** {{ $('Product Intelligence Form1').item.json['Target Customer'] }}\n**Problem Solved:** {{ $('Product Intelligence Form1').item.json['Primary Problem Solved'] }}\n**Key Differentiator:** {{ $('Product Intelligence Form1').item.json['Key Differentiator'] }}\n**Competitors:** {{ $('Product Intelligence Form1').item.json['Main Competitors'] }}\n**Customer Language:** {{ $('Product Intelligence Form1').item.json['Customer Language'] }}\n\n**Website Content:** {{ $('Website Content Fetch2').item.json.data }}\n\n### MISSION:\nCreate a comprehensive product intelligence document that serves as the master reference for all marketing, sales, and content creation activities. This should be equivalent to what leading enterprise companies use for product positioning and sales enablement.\n\n### INDUSTRY-ADAPTIVE ANALYSIS:\n\n**FOR AUTOMOTIVE:** Focus on performance specifications, safety features, technology, fuel efficiency, comfort, value proposition, market positioning\n**FOR SOFTWARE/SAAS:** Focus on technical capabilities, integrations, performance metrics, security, deployment, scalability, enterprise features\n**FOR PROFESSIONAL SERVICES:** Focus on methodologies, certifications, expertise areas, delivery processes, outcomes, competitive advantages\n**FOR MANUFACTURING:** Focus on production capabilities, quality standards, materials, capacity, certifications, competitive positioning\n**FOR HEALTHCARE:** Focus on clinical capabilities, regulatory compliance, safety protocols, efficacy data, patient outcomes\n**FOR FINANCIAL SERVICES:** Focus on service offerings, regulatory compliance, performance history, risk management, client outcomes\n\n### OUTPUT FORMAT:\nCreate a comprehensive markdown document with these sections:\n\n# [Product Name] by [Company]\n\n**[Product] is a [comprehensive description]** that [primary value proposition]. [Brief positioning statement].\n\n## **Core functionality and capabilities**\n\n[Detailed description of what the product does, how it works, and key operational details. Include specific features, processes, and capabilities.]\n\n[For each major capability, provide details on:\n- How it works\n- What it covers/supports\n- Unique aspects vs alternatives\n- Performance characteristics]\n\n## **Technical architecture and integration**\n\n[Technical details appropriate for the industry:\n- Automotive: Engine, transmission, chassis, electronics, safety systems\n- Software: Architecture, APIs, databases, deployment, security\n- Services: Methodology, process, tools, frameworks\n- Manufacturing: Production systems, quality controls, materials]\n\n**Key technical components include:**\n- **[Component 1]**: [Description and purpose]\n- **[Component 2]**: [Description and purpose]\n- **[Component 3]**: [Description and purpose]\n- **[Component 4]**: [Description and purpose]\n\n[Integration capabilities, compatibility, deployment options]\n\n## **Enterprise features and governance**\n\n[Enterprise-level capabilities:\n- Automotive: Warranty, service network, financing\n- Software: Security, compliance, scalability, governance\n- Services: Quality assurance, project management, reporting\n- Manufacturing: Quality systems, capacity management, compliance]\n\n**Advanced [industry-appropriate] features include:**\n- **[Feature 1]** with [specific capabilities]\n- **[Feature 2]** with [specific capabilities] \n- **[Feature 3]** with [specific capabilities]\n- **[Feature 4]** with [specific capabilities]\n- **[Feature 5]** with [specific capabilities]\n\n## **Comparison with [main competitor/alternative approach]**\n\n**[Main competitor's] approach** [describe their approach, limitations, requirements]. This approach [specific limitations and pain points].\n\n**[Company's] solution offers several advantages:**\n- **[Advantage 1]** [specific details]\n- **[Advantage 2]** [specific details]\n- **[Advantage 3]** [specific details]\n- **[Advantage 4]** [specific details]\n- **[Advantage 5]** [specific details]\n- **[Advantage 6]** [specific details]\n\n## **Business value and use cases**\n\nOrganizations using [Company's] solution report that **[key business value statement]**. The solution is particularly valuable for [target market characteristics].\n\n**Primary use cases include:**\n- **[Use case 1]** [detailed scenario]\n- **[Use case 2]** [detailed scenario]\n- **[Use case 3]** [detailed scenario]\n- **[Use case 4]** [detailed scenario]\n- **[Use case 5]** [detailed scenario]\n\n## **Implementation considerations**\n\nThe solution requires **[specific requirements]**. [Implementation details, setup requirements, technical prerequisites].\n\n**System requirements include:**\n- [Requirement 1]\n- [Requirement 2]\n- [Requirement 3]\n- [Requirement 4]\n\n## **Target market and positioning**\n\n[Product] is **positioned for [target market]** with [specific characteristics and requirements]. The solution is particularly suitable for [ideal customer characteristics].\n\n**Ideal customers include:**\n- [Customer type 1] with [specific needs]\n- [Customer type 2] with [specific needs]\n- [Customer type 3] with [specific needs]\n- [Customer type 4] with [specific needs]\n- [Customer type 5] with [specific needs]\n\n[Company's] [Product] represents a **[positioning statement]** that [competitive advantages] while providing [key benefits] required for [target market needs].\n\n### CRITICAL INSTRUCTIONS:\n1. **INDUSTRY-SPECIFIC LANGUAGE**: Use terminology and focus areas appropriate for the detected industry\n2. **COMPREHENSIVE DEPTH**: Provide the same level of detail as your example WIP Active Backup document\n3. **COMPETITIVE CONTEXT**: Include detailed comparison with main alternatives\n4. **BUSINESS VALUE**: Connect features to clear business outcomes and ROI\n5. **IMPLEMENTATION REALITY**: Include practical deployment and setup considerations\n6. **ENTERPRISE FOCUS**: Address scalability, governance, and enterprise requirements\n7. **PROOF-DRIVEN**: Support claims with specific capabilities and evidence","messages":{"messageValues":[{"message":"=You are a world-class product intelligence analyst who creates comprehensive, enterprise-grade product intelligence documents. You understand how to create authoritative analysis that serves as the master reference for marketing, sales, and content teams across any industry."}]}},"type":"@n8n/n8n-nodes-langchain.chainLlm","typeVersion":1.6,"position":[4660,-380],"id":"edca7276-803c-4ad3-b125-37ad28a391a6","name":"Master Product Intelligence1"},{"parameters":{"model":"anthropic/claude-3.7-sonnet","options":{"maxTokens":8000,"temperature":0.3}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenRouter","typeVersion":1,"position":[4748,-160],"id":"c4bca175-c2ed-43f9-8aad-6664a8b0d572","name":"Claude 3.5 Sonnet1","credentials":{"openRouterApi":{"id":"eni2kFdHGvy7lEd3","name":"OpenRouter account"}}},{"parameters":{"promptType":"define","text":"=## INTELLIGENCE EXTRACTION SPECIALIST\n\nYou are an expert at extracting structured elements from comprehensive product intelligence documents for marketing and content creation use.\n\n### INPUT:\nComprehensive Product Intelligence Document:\n{{ $('Master Product Intelligence1').item.json.text }}\n\n### ORIGINAL FORM DATA:\n**Company:** {{ $('Product Intelligence Form1').item.json['Business Name'] }}\n**Product:** {{ $('Product Intelligence Form1').item.json['Product/Service Name'] }}\n**Industry:** {{ $('Product Intelligence Form1').item.json['Industry Category'] }}\n**Target Customer:** {{ $('Product Intelligence Form1').item.json['Target Customer'] }}\n\n### MISSION:\nExtract structured, usable elements from the comprehensive document for immediate use in content creation, campaigns, and sales activities.\n\n### OUTPUT FORMAT:\n```json\n{\n  \"document_analysis\": {\n    \"industry_detected\": \"industry classification from document\",\n    \"document_quality\": \"HIGH|MEDIUM|LOW\",\n    \"word_count\": \"approximate word count\",\n    \"completeness_score\": \"1-10 rating of document completeness\"\n  },\n  \"extracted_uvps\": {\n    \"primary_uvp\": \"Main value proposition extracted from document\",\n    \"technical_uvp\": \"Technical-focused value proposition\",\n    \"benefit_uvp\": \"Benefit/outcome-focused value proposition\",\n    \"competitive_uvp\": \"Competitive advantage-focused value proposition\"\n  },\n  \"core_elements\": {\n    \"core_functionality\": \"What the product does (concise summary)\",\n    \"key_capabilities\": [\"capability 1\", \"capability 2\", \"capability 3\", \"capability 4\", \"capability 5\"],\n    \"technical_architecture\": \"How it works technically (summary)\",\n    \"enterprise_features\": [\"enterprise feature 1\", \"enterprise feature 2\", \"enterprise feature 3\"],\n    \"competitive_advantages\": [\"advantage 1\", \"advantage 2\", \"advantage 3\", \"advantage 4\", \"advantage 5\"],\n    \"business_value\": \"Key business outcomes and ROI\",\n    \"primary_use_cases\": [\"use case 1\", \"use case 2\", \"use case 3\", \"use case 4\"],\n    \"implementation_requirements\": [\"requirement 1\", \"requirement 2\", \"requirement 3\"],\n    \"target_market\": \"Ideal customer profile and positioning\"\n  },\n  \"messaging_foundation\": {\n    \"customer_pain_points\": [\"pain point 1\", \"pain point 2\", \"pain point 3\"],\n    \"emotional_triggers\": [\"trigger 1\", \"trigger 2\", \"trigger 3\"],\n    \"credibility_signals\": [\"credibility 1\", \"credibility 2\", \"credibility 3\"],\n    \"proof_points\": [\"proof 1\", \"proof 2\", \"proof 3\", \"proof 4\"],\n    \"urgency_factors\": [\"urgency 1\", \"urgency 2\", \"urgency 3\"]\n  },\n  \"competitive_intelligence\": {\n    \"main_competitors\": [\"competitor analysis from document\"],\n    \"competitive_positioning\": \"How this positions vs alternatives\",\n    \"market_differentiation\": [\"differentiator 1\", \"differentiator 2\", \"differentiator 3\"],\n    \"competitive_gaps\": [\"gap 1\", \"gap 2\", \"gap 3\"]\n  }\n}\n```\n\n### EXTRACTION GUIDELINES:\n1. **CONCISE BUT COMPLETE**: Extract key points without losing critical detail\n2. **MARKETING-READY**: Ensure extracted elements are immediately usable for content\n3. **INDUSTRY-APPROPRIATE**: Maintain industry-specific language and focus\n4. **PROOF-DRIVEN**: Include specific evidence and capabilities, not generic claims\n5. **COMPETITIVE CONTEXT**: Clearly identify what makes this unique vs alternatives","messages":{"messageValues":[{"message":"=You are a marketing intelligence specialist who extracts structured, usable elements from comprehensive product documents. You understand what content creators, marketers, and sales teams need for immediate use."}]}},"type":"@n8n/n8n-nodes-langchain.chainLlm","typeVersion":1.6,"position":[5036,-380],"id":"64c1a2a3-46e7-46a5-b3ed-d99d02e721ba","name":"Intelligence Extractor1"}],"connections":{"Product Intelligence Record Creator":{"main":[[{"node":"Save Product Intelligence","type":"main","index":0}]]},"Product Intelligence Form1":{"main":[[{"node":"Website Content Fetch2","type":"main","index":0}]]},"Website Content Fetch2":{"main":[[{"node":"Master Product Intelligence1","type":"main","index":0}]]},"Master Product Intelligence1":{"main":[[{"node":"Intelligence Extractor1","type":"main","index":0}]]},"Claude 3.5 Sonnet1":{"ai_languageModel":[[{"node":"Master Product Intelligence1","type":"ai_languageModel","index":0},{"node":"Intelligence Extractor1","type":"ai_languageModel","index":0}]]},"Intelligence Extractor1":{"main":[[{"node":"Product Intelligence Record Creator","type":"main","index":0}]]}},"settings":{"executionOrder":"v1","timezone":"Africa/Johannesburg","callerPolicy":"workflowsFromSameOwner"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"2bcc1627-6a7b-4522-8dac-a8f4bd308306","triggerCount":0,"shared":[{"createdAt":"2025-06-23T02:41:48.121Z","updatedAt":"2025-06-23T02:41:48.121Z","role":"workflow:owner","workflowId":"v3WOfexKJ941DhAb","projectId":"pRXFeKq9D8e0hAOx"}],"tags":[]},{"createdAt":"2025-06-25T02:22:45.367Z","updatedAt":"2025-06-27T06:27:48.000Z","id":"vXPzkjde2EMyjzvd","name":"Campaign Creation","active":false,"isArchived":false,"nodes":[{"parameters":{"path":"enhancedcampaign","formTitle":"Enhanced Campaign & Focus Plan Creator","formDescription":"Create campaigns with UVP intelligence for human-expert content creation","formFields":{"values":[{"fieldLabel":"Campaign Name","requiredField":true},{"fieldLabel":"Business Name","fieldType":"dropdown","fieldOptions":{"values":[{"option":"Ebiexperts"},{"option":"Onicavox"},{"option":"MG Bryanston"},{"option":"MG Ruimsig"},{"option":"JAC Westrand"},{"option":"Jetour "},{"option":"Mitsubishi"},{"option":"VS. Sports"},{"option":"RevDev"},{"option":"Modern Management"},{"option":"CBRM"},{"option":"JAC Middelburg"},{"option":"Octogas"}]}},{"fieldLabel":"Platform","fieldType":"dropdown","fieldOptions":{"values":[{"option":"Facebook"},{"option":"X"},{"option":"Instagram"},{"option":"LinkedIn"},{"option":"Blog"},{"option":"Email"}]},"multiselect":true},{"fieldLabel":"Post Type","fieldType":"dropdown","fieldOptions":{"values":[{"option":"Image"},{"option":"Video"},{"option":"Carousel"},{"option":"Text"}]}},{"fieldLabel":"Duration","fieldType":"dropdown","fieldOptions":{"values":[{"option":"1 Week"},{"option":"2 Weeks"},{"option":"3 Weeks"},{"option":"4 Weeks"},{"option":"Single Post"}]}},{"fieldLabel":"Campaign Objective","fieldType":"dropdown","fieldOptions":{"values":[{"option":"Brand Awareness"},{"option":"Lead Generation"},{"option":"Competitive Positioning"},{"option":"Product Education"},{"option":"Thought Leadership"}]}},{"fieldLabel":"Content Focus Priority","fieldType":"dropdown","fieldOptions":{"values":[{"option":"Competitive Differentiation"},{"option":"Expert Authority Building"},{"option":"Problem-Solution Education"},{"option":"Customer Success Stories"},{"option":"Industry Insights"}]}},{"fieldLabel":"Target Audience Override (Optional)","placeholder":"Leave empty to use UVP profile audience, or specify custom audience"},{"fieldLabel":"Product/Service","placeholder":"e.g., Wip Active Backup, Social Media Management"},{"fieldLabel":"Additional Context","placeholder":"Any specific campaign requirements, competitive situations, or messaging needs?"}]},"responseMode":"lastNode","options":{"buttonLabel":"Next"}},"id":"bdd19542-ab43-424e-aa01-775185925677","name":"Campaign Creation","type":"n8n-nodes-base.formTrigger","position":[-180,-120],"webhookId":"234db673-8586-430a-9a9f-dd48600fb889","typeVersion":2.1},{"parameters":{"jsCode":"// Form Data Processing & UVP Profile Lookup Preparation\nconst formData = $input.first().json;\n\nconsole.log('=== PROCESSING ENHANCED CAMPAIGN FORM ===');\nconsole.log('Form Data:', JSON.stringify(formData, null, 2));\n\n// Extract and validate form data\nconst campaignData = {\n  businessName: formData['Business Name'],\n  productService: formData['Product/Service'],\n  campaignName: formData['Campaign Name'],\n  platforms: Array.isArray(formData.Platform) ? formData.Platform : [formData.Platform],\n  postType: formData['Post Type'],\n  duration: formData.Duration,\n  objective: formData['Campaign Objective'],\n  contentFocus: formData['Content Focus Priority'],\n  targetAudienceOverride: formData['Target Audience Override (Optional)'] || '',\n  additionalContext: formData['Additional Context'] || '',\n  timestamp: new Date().toISOString()\n};\n\n// Validate required fields\nconst requiredFields = ['businessName', 'productService', 'campaignName', 'platforms', 'duration', 'objective'];\nconst missingFields = requiredFields.filter(field => \n  !campaignData[field] || \n  (Array.isArray(campaignData[field]) && campaignData[field].length === 0)\n);\n\nif (missingFields.length > 0) {\n  console.error('Missing required fields:', missingFields);\n  return {\n    json: {\n      error: 'Missing required fields',\n      missingFields: missingFields,\n      received: campaignData\n    }\n  };\n}\n\n// Prepare UVP profile lookup criteria\nconst uvpLookupCriteria = {\n  company: campaignData.businessName,\n  product: campaignData.productService,\n  searchString: `${campaignData.businessName}-${campaignData.productService}`.toLowerCase().replace(/\\s+/g, '-')\n};\n\nconsole.log('UVP Lookup Criteria:', uvpLookupCriteria);\n\n// Enhanced campaign structure for downstream processing\nconst enhancedCampaignData = {\n  ...campaignData,\n  uvpLookup: uvpLookupCriteria,\n  needsUVPProfile: true,\n  processingStage: 'UVP_LOOKUP_REQUIRED'\n};\n\nconsole.log('✅ Enhanced campaign data prepared');\nconsole.log(`📋 Campaign: ${campaignData.campaignName}`);\nconsole.log(`🏢 Business: ${campaignData.businessName}`);\nconsole.log(`📦 Product: ${campaignData.productService}`);\nconsole.log(`📅 Duration: ${campaignData.duration}`);\nconsole.log(`🎯 Objective: ${campaignData.objective}`);\nconsole.log(`📍 Platforms: ${campaignData.platforms.join(', ')}`);\n\nreturn { json: enhancedCampaignData };"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[40,-120],"id":"083a2fec-1d31-4819-8d0e-b47f8e7df4ca","name":"Form Data Processing"},{"parameters":{"rules":{"values":[{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"leftValue":"={{ $json.businessName }}","rightValue":"Ebiexperts","operator":{"type":"string","operation":"equals"},"id":"6059d289-7453-4097-acdc-b058a06840ad"}],"combinator":"and"}},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"e8fa45fb-d8b3-4d59-ab7d-f3f7197c6f5d","leftValue":"={{ $json['Business Name'] }}","rightValue":"Onicavox","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"}},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"3095a73a-3296-497d-86f1-972432ba7465","leftValue":"={{ $json['Business Name'] }}","rightValue":"Modern Management","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"}},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"92fd768d-3ed5-401b-9837-31d0c297a23d","leftValue":"={{ $json['Business Name'] }}","rightValue":"Jetour","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"}},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"e80e343b-dbd7-42aa-8f8c-26badfb21258","leftValue":"={{ $json['Business Name'] }}","rightValue":"JAC","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"}},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"f59c4059-51e2-4520-a4b9-b26f5685eab6","leftValue":"={{ $json['Business Name'] }}","rightValue":"Mitsubishi","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"}},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"193447b3-3ff4-408a-bbca-788b0a6a7c58","leftValue":"={{ $json['Business Name'] }}","rightValue":"JAC Westrand","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"}},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"b4d39370-f92e-4edb-b627-5044bcc16424","leftValue":"={{ $json['Business Name'] }}","rightValue":"VS. Sports","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"VS. Sports"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"e501993d-1922-4cd3-840f-80dc292d0fd6","leftValue":"={{ $json['Business Name'] }}","rightValue":"RevDev","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"}},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"7fa8f19a-ec00-4ad8-95d6-76492d21d68d","leftValue":"={{ $json['Business Name'] }}","rightValue":"CBRM","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"}},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"706033fc-8cac-4caa-aa50-68f87403c899","leftValue":"={{ $json['Business Name'] }}","rightValue":"MG Bryanston","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"MG Bryanston"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"095fd86b-e237-40d7-ab96-8157c9778ea3","leftValue":"={{ $json['Business Name'] }}","rightValue":"MG Ruimsig","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"MG Ruimsig"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"2c7a54ed-057e-4d7b-920c-1bea47051f02","leftValue":"={{ $json['Business Name'] }}","rightValue":"JAC Middelburg","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"JAC Middelburg"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"a07c3700-a895-4213-bfcc-61ebf9814eee","leftValue":"={{ $json['Business Name'] }}","rightValue":"Octogas","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"Octogas"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"42ae8052-d63d-4762-9988-0c3080e4cae9","leftValue":"","rightValue":"","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"}}]},"options":{}},"type":"n8n-nodes-base.switch","typeVersion":3.2,"position":[300,-360],"id":"30bd63ae-621e-4bee-bf67-aa9ec9acc08a","name":"Switch1"},{"parameters":{"authentication":"airtableOAuth2Api","operation":"search","base":{"__rl":true,"value":"appQoW8tY1s6ceKOV","mode":"list","cachedResultName":"Ebiexperts","cachedResultUrl":"https://airtable.com/appQoW8tY1s6ceKOV"},"table":{"__rl":true,"value":"tbl2iLgCMrHXhl0s5","mode":"list","cachedResultName":"Product UVP","cachedResultUrl":"https://airtable.com/appQoW8tY1s6ceKOV/tbl2iLgCMrHXhl0s5"},"filterByFormula":"=AND({company_name}='{{$json.businessName}}', {product_service}='{{$json.productService}}')","options":{}},"type":"n8n-nodes-base.airtable","typeVersion":2.1,"position":[620,-380],"id":"e49ec962-e57e-4e40-899f-d8f8986b68a5","name":"Ebiexperts Airtable1","credentials":{"airtableOAuth2Api":{"id":"pOcHNkax3d1V3xqS","name":"Airtable VS Sport"}}},{"parameters":{"jsCode":"// Production UVP Profile Integration & Data Merge\nconst campaignData = $('Form Data Processing').first().json;\nconst uvpResults = $input.all();\n\nconsole.log('=== PRODUCTION UVP PROFILE INTEGRATION ===');\nconsole.log('Campaign data:', campaignData.businessName, '-', campaignData.productService);\nconsole.log('UVP lookup results:', uvpResults.length, 'profiles found');\n\nlet uvpProfile = null;\nlet uvpStatus = 'NOT_FOUND';\n\n// Process Airtable UVP lookup results\nif (uvpResults.length > 0) {\n  console.log('✅ UVP profile(s) found in Airtable');\n  \n  // Take the first/best match from Airtable\n  const uvpRecord = uvpResults[0].json;\n  console.log('UVP Record keys:', Object.keys(uvpRecord));\n  \n  // Extract UVP data from Airtable record\n  uvpProfile = {\n    id: uvpRecord.id,\n    company_name: uvpRecord.company_name,\n    product_service: uvpRecord.product_service,\n    primary_uvp: uvpRecord.primary_uvp,\n    target_persona_role: uvpRecord.target_persona_role,\n    target_pain_points: uvpRecord.target_pain_points,\n    buying_triggers: uvpRecord.buying_triggers,\n    primary_differentiators: uvpRecord.primary_differentiators,\n    competitive_advantages: uvpRecord.competitive_advantages,\n    market_positioning: uvpRecord.market_positioning,\n    primary_message: uvpRecord.primary_message,\n    supporting_messages: uvpRecord.supporting_messages,\n    brand_voice: uvpRecord.brand_voice,\n    content_pillars: uvpRecord.content_pillars,\n    expert_insights: uvpRecord.expert_insights,\n    industry_analogies: uvpRecord.industry_analogies,\n    storytelling_angles: uvpRecord.storytelling_angles,\n    primary_keywords: uvpRecord.primary_keywords,\n    question_keywords: uvpRecord.question_keywords,\n    content_opportunities: uvpRecord.content_opportunities,\n    quality_score: uvpRecord.quality_score || 0,\n    creation_date: uvpRecord.creation_date\n  };\n  \n  uvpStatus = 'FOUND';\n  console.log(`📊 UVP Quality Score: ${uvpProfile.quality_score}/10`);\n  console.log(`🎯 Primary UVP: ${uvpProfile.primary_uvp?.substring(0, 100)}...`);\n} else {\n  console.log('❌ No UVP profile found in Airtable');\n  uvpStatus = 'NOT_FOUND';\n  \n  // Create intelligent fallback for businesses without UVP profiles yet\n  uvpProfile = {\n    company_name: campaignData.businessName,\n    product_service: campaignData.productService,\n    primary_uvp: `Advanced ${campaignData.productService} solution by ${campaignData.businessName}`,\n    target_persona_role: 'Business Decision Maker',\n    target_pain_points: 'Need for reliable business solutions',\n    buying_triggers: 'Business efficiency requirements',\n    primary_differentiators: 'Professional service delivery',\n    competitive_advantages: 'Proven business solutions',\n    market_positioning: `Trusted ${campaignData.productService} provider`,\n    primary_message: `${campaignData.businessName} delivers reliable ${campaignData.productService} solutions`,\n    brand_voice: 'Professional and reliable',\n    content_pillars: `${campaignData.productService}, Business Solutions, Professional Service`,\n    expert_insights: 'Industry-focused business solutions',\n    needs_creation: true,\n    quality_score: 3\n  };\n  \n  console.log('🔄 Created fallback UVP profile - recommend creating full UVP profile');\n}\n\n// Merge campaign data with UVP intelligence\nconst enhancedCampaignPlan = {\n  // Original campaign parameters\n  campaign: {\n    name: campaignData.campaignName,\n    business: campaignData.businessName,\n    product: campaignData.productService,\n    platforms: campaignData.platforms,\n    postType: campaignData.postType,\n    duration: campaignData.duration,\n    objective: campaignData.objective,\n    contentFocus: campaignData.contentFocus,\n    targetAudienceOverride: campaignData.targetAudienceOverride,\n    additionalContext: campaignData.additionalContext,\n    timestamp: campaignData.timestamp\n  },\n  \n  // UVP Intelligence from Airtable\n  uvp: {\n    status: uvpStatus,\n    profile: uvpProfile,\n    quality_score: uvpProfile.quality_score || 0,\n    source: uvpStatus === 'FOUND' ? 'Airtable' : 'Fallback'\n  },\n  \n  // Enhanced targeting (UVP override or fallback)\n  targeting: {\n    primary_audience: campaignData.targetAudienceOverride || uvpProfile.target_persona_role || 'Business Decision Makers',\n    pain_points: uvpProfile.target_pain_points || 'Business efficiency challenges',\n    buying_triggers: uvpProfile.buying_triggers || 'Need for better solutions'\n  },\n  \n  // Content intelligence for Focus Plan\n  content_intelligence: {\n    primary_uvp: uvpProfile.primary_uvp,\n    primary_message: uvpProfile.primary_message,\n    brand_voice: uvpProfile.brand_voice,\n    expert_insights: uvpProfile.expert_insights,\n    competitive_advantages: uvpProfile.competitive_advantages,\n    industry_analogies: uvpProfile.industry_analogies,\n    content_pillars: uvpProfile.content_pillars,\n    primary_differentiators: uvpProfile.primary_differentiators,\n    market_positioning: uvpProfile.market_positioning,\n    storytelling_angles: uvpProfile.storytelling_angles,\n    primary_keywords: uvpProfile.primary_keywords,\n    content_opportunities: uvpProfile.content_opportunities\n  },\n  \n  // Processing metadata\n  processing: {\n    stage: 'UVP_INTEGRATED',\n    ready_for_focus_plan: true,\n    needs_manual_review: uvpStatus === 'NOT_FOUND',\n    uvp_source: uvpStatus === 'FOUND' ? 'Production Airtable' : 'Intelligent Fallback',\n    integration_timestamp: new Date().toISOString()\n  }\n};\n\nconsole.log('=== INTEGRATION COMPLETE ===');\nconsole.log(`🎯 Campaign: ${enhancedCampaignPlan.campaign.name}`);\nconsole.log(`📊 UVP Status: ${uvpStatus} (${enhancedCampaignPlan.processing.uvp_source})`);\nconsole.log(`👤 Target Audience: ${enhancedCampaignPlan.targeting.primary_audience}`);\nconsole.log(`🚀 Ready for Focus Plan: ${enhancedCampaignPlan.processing.ready_for_focus_plan}`);\n\nif (uvpStatus === 'FOUND') {\n  console.log('✅ Using production UVP data from Airtable');\n  console.log(`🎯 Primary UVP: ${enhancedCampaignPlan.content_intelligence.primary_uvp?.substring(0, 100)}...`);\n  console.log(`🏆 Competitive Advantages: ${enhancedCampaignPlan.content_intelligence.competitive_advantages?.substring(0, 100)}...`);\n} else {\n  console.log('⚠️ Using intelligent fallback - recommend creating UVP profile');\n  console.log('💡 Run UVP Intelligence Generator for this business + product combination');\n}\n\nreturn { json: enhancedCampaignPlan };"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[840,-380],"id":"ec9121e5-5e8c-4997-a653-84c044462d07","name":"UVP Integration"}],"connections":{"Campaign Creation":{"main":[[{"node":"Form Data Processing","type":"main","index":0}]]},"Form Data Processing":{"main":[[{"node":"Switch1","type":"main","index":0}]]},"Switch1":{"main":[[{"node":"Ebiexperts Airtable1","type":"main","index":0}],[],[],[],[],[],[],[],[],[],[],[],[],[]]},"Ebiexperts Airtable1":{"main":[[{"node":"UVP Integration","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"e122dccd-3733-4f16-8d78-429a9b27e635","triggerCount":0,"shared":[{"createdAt":"2025-06-25T02:22:45.484Z","updatedAt":"2025-06-25T02:22:45.484Z","role":"workflow:owner","workflowId":"vXPzkjde2EMyjzvd","projectId":"pRXFeKq9D8e0hAOx"}],"tags":[]},{"createdAt":"2025-07-14T11:28:14.845Z","updatedAt":"2025-07-14T12:50:28.000Z","id":"voRS7ldmqOEFFUgW","name":"create-ad-subflow","active":false,"isArchived":false,"nodes":[{"parameters":{"path":"create-ad","options":{}},"type":"n8n-nodes-base.webhook","typeVersion":2,"position":[-240,60],"id":"d9cd8c76-3c4c-4ea3-b434-b19238e3049e","name":"Webhook Trigger","webhookId":"create-ad-webhook"},{"parameters":{"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[-20,60],"id":"e25df623-e008-479d-b5d3-9c4feb2674a7","name":"Set Config"},{"parameters":{"jsCode":"// Extract and validate input parameters\nconst body = $input.first().json.body;\nconst config = $('Set Config').first().json;\n\n// Validate required parameters\nif (!body.ad_name) {\n  throw new Error('Missing required parameter: ad_name');\n}\n\nif (!body.facebook_campaign_id || !body.facebook_adset_id || !body.facebook_creative_id) {\n  throw new Error('Missing required parameters: facebook_campaign_id, facebook_adset_id, or facebook_creative_id');\n}\n\n// Validate that IDs look like Facebook IDs (numeric strings)\nconst validateFacebookId = (id, name) => {\n  if (typeof id !== 'string' || !/^\\d+$/.test(id)) {\n    throw new Error(`${name} must be a numeric string (Facebook ID format)`);\n  }\n};\n\nvalidateFacebookId(body.facebook_campaign_id, 'facebook_campaign_id');\nvalidateFacebookId(body.facebook_adset_id, 'facebook_adset_id');\nvalidateFacebookId(body.facebook_creative_id, 'facebook_creative_id');\n\nreturn [{\n  json: {\n    ad_name: body.ad_name,\n    facebook_campaign_id: body.facebook_campaign_id,\n    facebook_adset_id: body.facebook_adset_id,\n    facebook_creative_id: body.facebook_creative_id,\n    ad_account_id: config.FACEBOOK_AD_ACCOUNT_ID,\n    status: 'PAUSED' // Start ads in paused state for safety\n  }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[200,60],"id":"42ec9710-f620-4e37-a889-1a37da055012","name":"Validate Input"},{"parameters":{"method":"POST","url":"=https://graph.facebook.com/v18.0/act_{{ $json.ad_account_id }}/ads","authentication":"predefinedCredentialType","nodeCredentialType":"facebookGraphApi","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"application/json"}]},"sendBody":true,"bodyParameters":{"parameters":[{"name":"name","value":"={{ $json.ad_name }}"},{"name":"campaign_id","value":"={{ $json.facebook_campaign_id }}"},{"name":"adset_id","value":"={{ $json.facebook_adset_id }}"},{"name":"creative","value":"={\"creative_id\": \"{{ $json.facebook_creative_id }}\"}"},{"name":"status","value":"={{ $json.status }}"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[420,60],"id":"3edfe559-31a8-4aba-baef-4ebe199670bc","name":"Create Facebook Ad","credentials":{"facebookGraphApi":{"id":"l4pIP1rC506QwuLu","name":"Facebook Graph account"}},"onError":"continueErrorOutput"},{"parameters":{"jsCode":"// Process Facebook ad creation response\nconst adResponse = $input.first().json;\nconst inputData = $('Validate Input').first().json;\n\nif (!adResponse.id) {\n  throw new Error('Failed to create Facebook ad - no ID returned');\n}\n\n// Get additional ad details if available\nconst adDetails = {\n  facebook_ad_id: adResponse.id,\n  ad_name: inputData.ad_name,\n  facebook_campaign_id: inputData.facebook_campaign_id,\n  facebook_adset_id: inputData.facebook_adset_id,\n  facebook_creative_id: inputData.facebook_creative_id,\n  status: inputData.status,\n  success: true,\n  message: `Successfully created Facebook ad: ${adResponse.id}`,\n  created_at: new Date().toISOString()\n};\n\n// Add any additional response data from Facebook\nif (adResponse.status) {\n  adDetails.facebook_status = adResponse.status;\n}\nif (adResponse.effective_status) {\n  adDetails.effective_status = adResponse.effective_status;\n}\n\nreturn [{ json: adDetails }];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[640,60],"id":"adbd3451-6ecb-4f71-9107-65dcaac28b8c","name":"Process Ad Response"},{"parameters":{"respondWith":"json","responseBody":"={\n  \"success\": true,\n  \"facebook_ad_id\": \"{{ $json.facebook_ad_id }}\",\n  \"message\": \"{{ $json.message }}\",\n  \"ad_details\": {\n    \"name\": \"{{ $json.ad_name }}\",\n    \"campaign_id\": \"{{ $json.facebook_campaign_id }}\",\n    \"adset_id\": \"{{ $json.facebook_adset_id }}\",\n    \"creative_id\": \"{{ $json.facebook_creative_id }}\",\n    \"status\": \"{{ $json.status }}\",\n    \"created_at\": \"{{ $json.created_at }}\"\n  }\n}","options":{}},"type":"n8n-nodes-base.respondToWebhook","typeVersion":1,"position":[860,60],"id":"a8cbb051-90ff-409a-aba7-b1ab47e21d7f","name":"Success Response"},{"parameters":{"jsCode":"// Handle errors and prepare detailed error response\nconst error = $input.first().json;\nconst inputData = $('Validate Input').first()?.json || {};\n\nconst errorMessage = error.message || error.error?.message || 'Unknown error occurred creating ad';\n\nconsole.error('Facebook ad creation failed:', errorMessage);\nconsole.error('Input data was:', JSON.stringify(inputData, null, 2));\n\n// Provide specific error guidance based on error type\nlet detailedError = errorMessage;\nlet troubleshooting = [];\n\nif (errorMessage.includes('campaign') || errorMessage.includes('Campaign')) {\n  detailedError = `Campaign error: ${errorMessage}`;\n  troubleshooting.push('Verify the campaign ID exists and is accessible');\n  troubleshooting.push('Check that the campaign status allows ad creation');\n}\n\nif (errorMessage.includes('adset') || errorMessage.includes('AdSet')) {\n  detailedError = `AdSet error: ${errorMessage}`;\n  troubleshooting.push('Verify the ad set ID exists and belongs to the campaign');\n  troubleshooting.push('Check that the ad set has a valid budget and targeting');\n}\n\nif (errorMessage.includes('creative') || errorMessage.includes('Creative')) {\n  detailedError = `Creative error: ${errorMessage}`;\n  troubleshooting.push('Verify the creative ID exists and is approved');\n  troubleshooting.push('Check that the creative format matches the ad set objective');\n}\n\nif (errorMessage.includes('permission') || errorMessage.includes('access')) {\n  detailedError = `Permission error: ${errorMessage}`;\n  troubleshooting.push('Check Facebook API permissions and token validity');\n  troubleshooting.push('Verify access to the ad account and page');\n}\n\nif (errorMessage.includes('limit') || errorMessage.includes('quota')) {\n  detailedError = `API limit error: ${errorMessage}`;\n  troubleshooting.push('Facebook API rate limit reached - try again later');\n  troubleshooting.push('Consider reducing the frequency of ad creation calls');\n}\n\nreturn [{\n  json: {\n    success: false,\n    error: detailedError,\n    troubleshooting: troubleshooting,\n    input_data: {\n      ad_name: inputData.ad_name || 'unknown',\n      campaign_id: inputData.facebook_campaign_id || 'unknown',\n      adset_id: inputData.facebook_adset_id || 'unknown',\n      creative_id: inputData.facebook_creative_id || 'unknown'\n    },\n    timestamp: new Date().toISOString()\n  }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[640,260],"id":"588a0b2d-7add-4e82-9ae6-d78baf827736","name":"Handle Error"},{"parameters":{"respondWith":"json","responseBody":"={{ JSON.stringify($json, null, 2) }}","options":{"responseCode":400}},"type":"n8n-nodes-base.respondToWebhook","typeVersion":1,"position":[860,260],"id":"56f625fa-a938-4b2b-a854-a3b92bcca793","name":"Error Response"}],"connections":{"Webhook Trigger":{"main":[[{"node":"Set Config","type":"main","index":0}]]},"Set Config":{"main":[[{"node":"Validate Input","type":"main","index":0}]]},"Validate Input":{"main":[[{"node":"Create Facebook Ad","type":"main","index":0}]]},"Create Facebook Ad":{"main":[[{"node":"Process Ad Response","type":"main","index":0}],[{"node":"Handle Error","type":"main","index":0}]]},"Process Ad Response":{"main":[[{"node":"Success Response","type":"main","index":0}]]},"Handle Error":{"main":[[{"node":"Error Response","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":null,"pinData":{},"versionId":"3485c993-bd1a-4d99-977f-c5fb06bb3015","triggerCount":0,"shared":[{"createdAt":"2025-07-14T11:28:14.851Z","updatedAt":"2025-07-14T11:28:14.851Z","role":"workflow:owner","workflowId":"voRS7ldmqOEFFUgW","projectId":"pRXFeKq9D8e0hAOx"}],"tags":[]},{"createdAt":"2025-09-22T08:04:59.818Z","updatedAt":"2025-09-22T08:05:32.000Z","id":"xkablILCn175uUxJ","name":"blog-creation-mvp","active":false,"isArchived":false,"nodes":[{"parameters":{"path":"blog-creation-mvp","options":{}},"type":"n8n-nodes-base.webhook","typeVersion":2.1,"position":[0,0],"id":"0ee7f019-dd51-450c-a569-b3aa9183d942","name":"Webhook","webhookId":"06da0f2e-661b-4ce9-af16-e6cda1de6fd5"}],"connections":{},"settings":{"executionOrder":"v1"},"staticData":null,"meta":null,"pinData":{},"versionId":"7e27e8b6-7b17-4d73-8ff8-2f6c573575a0","triggerCount":0,"shared":[{"createdAt":"2025-09-22T08:04:59.828Z","updatedAt":"2025-09-22T08:04:59.828Z","role":"workflow:owner","workflowId":"xkablILCn175uUxJ","projectId":"pRXFeKq9D8e0hAOx"}],"tags":[]},{"createdAt":"2025-06-16T16:28:53.612Z","updatedAt":"2025-06-23T02:03:59.000Z","id":"z2REPW3Q1U2m4Qvb","name":"VS. Sport Email Campaign","active":true,"isArchived":false,"nodes":[{"parameters":{"formTitle":"VS Sports Email Campaign Creator","formDescription":"Create professional sports analytics email campaigns with comprehensive customization options","formFields":{"values":[{"fieldLabel":"Campaign Name","placeholder":"e.g., Tennis Championship Congrats - May 2024","requiredField":true},{"fieldLabel":"Email Type","fieldType":"dropdown","fieldOptions":{"values":[{"option":"Educational/Analytics Insight"},{"option":"Congratulatory/Achievement"},{"option":"Promotional/Special Offer"},{"option":"General Engagement/Season Update"},{"option":"Performance Analysis Report"},{"option":"Training Tips & Techniques"}]},"requiredField":true},{"fieldLabel":"Sport Category","fieldType":"dropdown","fieldOptions":{"values":[{"option":"Tennis"},{"option":"Rugby"},{"option":"Hockey"},{"option":"Netball"},{"option":"Waterpolo"},{"option":"Pickleball"},{"option":"All Sports"}]},"requiredField":true},{"fieldLabel":"Target Audience","fieldType":"dropdown","fieldOptions":{"values":[{"option":"Coaches"},{"option":"Players"},{"option":"Athletic Directors"},{"option":"Program Administrators"},{"option":"Mixed Audience"},{"option":"Parents/Guardians"},{"option":"Sponsors/Partners"}]},"requiredField":true},{"fieldLabel":"Email Focus/Description","fieldType":"textarea","placeholder":"Describe the main message and purpose of this email campaign. Include key points, achievements, or insights you want to highlight...","requiredField":true},{"fieldLabel":"Campaign Priority","fieldType":"dropdown","fieldOptions":{"values":[{"option":"High"},{"option":"Medium"},{"option":"Low"}]}},{"fieldLabel":"Send Date","fieldType":"date"},{"fieldLabel":"Header Image Upload","fieldType":"file","multipleFiles":false,"acceptFileTypes":".jpg,.jpeg,.png,.gif,.webp"},{"fieldLabel":"Header Image URL","placeholder":"https://example.com/header-image.gif"},{"fieldLabel":"Section 1 (Hook) Image Upload","fieldType":"file","multipleFiles":false,"acceptFileTypes":".jpg,.jpeg,.png,.gif,.webp"},{"fieldLabel":"Section 1 (Hook) Image URL","placeholder":"https://example.com/hook-image.png"},{"fieldLabel":"Section 2 (Information) Image Upload","fieldType":"file","multipleFiles":false,"acceptFileTypes":".jpg,.jpeg,.png,.gif,.webp"},{"fieldLabel":"Section 2 (Information) Image URL","placeholder":"https://example.com/info-image.png"},{"fieldLabel":"CTA Section Image Upload","fieldType":"file","multipleFiles":false,"acceptFileTypes":".jpg,.jpeg,.png,.gif,.webp"},{"fieldLabel":"CTA Section Image URL","placeholder":"https://example.com/cta-image.png"},{"fieldLabel":"Additional Notes","fieldType":"textarea","placeholder":"Any additional requirements, special instructions, or context for this campaign..."}]},"responseMode":"lastNode","options":{"appendAttribution":true,"buttonLabel":"Create Campaign"}},"type":"n8n-nodes-base.formTrigger","typeVersion":2.2,"position":[-260,-80],"id":"bbc87668-dbd9-459d-9f66-e840a4a81c54","name":"VS Sports Email Campaign Form","webhookId":"0af73e59-d6ae-4e0f-8c73-f4d7b0a4ffe5"},{"parameters":{"model":"anthropic/claude-opus-4","options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenRouter","typeVersion":1,"position":[-60,160],"id":"5c8358be-672b-455d-bcc5-38dd81a1e421","name":"OpenRouter Chat Model2","credentials":{"openRouterApi":{"id":"eni2kFdHGvy7lEd3","name":"OpenRouter account"}}},{"parameters":{"jsonSchemaExample":"{\n  \"subject_line\": \"Example Subject Line\",\n  \"hook\": \"Hook section content (50-100 words)\",\n  \"information\": \"Information section content (150-200 words)\",\n  \"details\": \"Details section content (150-200 words)\",\n  \"cta\": \"Call to action content (max 50 words)\"\n}"},"type":"@n8n/n8n-nodes-langchain.outputParserStructured","typeVersion":1.2,"position":[180,160],"id":"f8d7984d-fbab-4400-a883-15b1ddc78002","name":"VS Sports Email Structure Parser"},{"parameters":{"promptType":"define","text":"=### Campaign Details\n- **Campaign Name**: \"{{ $json['Campaign Name'] }}\"\n- **Email Type**: \"{{ $json['Email Type'] }}\"\n- **Sport Category**: \"{{ $json['Sport Category'] }}\"\n- **Target Audience**: \"{{ $json['Target Audience'] }}\"\n- **Email Focus/Description**: \"{{ $json['Email Focus/Description'] }}\"\n- **Campaign Priority**: \"{{ $json['Campaign Priority'] || 'Medium' }}\"\n- **Send Date**: \"{{ $json['Send Date'] || 'Not specified' }}\"\n","hasOutputParser":true,"options":{"systemMessage":"=You are VS. Sports' expert email content creator, specializing in professional sports analytics communications. Your task is to create compelling, structured email content that maintains VS. Sports' brand voice while delivering value to sports professionals.\n\n### VS. Sports Brand Guidelines\n- **Tone**: Professional yet approachable, data-driven, supportive of athletic excellence\n- **Voice**: Expert authority in sports analytics, encouraging, results-focused\n- **Style**: Clean, modern, emphasizes performance improvement and competitive advantage\n- **Colors**: Blue highlights, black/blue feature boxes (mentioned in design)\n- **Focus**: Performance analytics, achievement recognition, competitive edge through data\n\n### Content Structure Requirements\nGenerate exactly 5 distinct components with specific word counts:\n\n**1. SUBJECT LINE (35-50 characters)**\n- Compelling and concise\n- Includes sport or key benefit when possible\n- Optimized for mobile preview\n- Creates curiosity or urgency\n\n**2. HOOK (50-100 words)**\n- Attention-grabbing opening that immediately connects with the target audience\n- Sport-specific and relevant to the email type\n- Creates urgency or curiosity\n- Addresses a key pain point or opportunity\n\n**3. INFORMATION (150-200 words)**\n- Main content section with core message\n- Include relevant stats, insights, or educational content\n- Sport-specific analytics or performance data when applicable\n- Educational value that positions VS Sports as the expert\n\n**4. DETAILS (150-200 words)**\n- Supporting information and additional benefits\n- Deeper insights, features, or supporting evidence\n- Social proof, case studies, or success stories when relevant\n- Technical details made accessible to the target audience\n\n**5. CTA (50 words maximum)**\n- Clear, compelling call-to-action\n- Action-oriented language\n- Creates urgency or FOMO\n- Specific next step for the reader\n\n### Email Type Specific Guidelines\n\n**Educational/Analytics Insight:**\n- Focus on data visualization concepts and performance metrics\n- Include specific statistics or analytical insights\n- Position VS Sports as the analytics authority\n- Emphasize learning and improvement\n\n**Congratulatory/Achievement:**\n- Celebrate specific accomplishments or milestones\n- Include performance highlights and achievements\n- Create emotional connection through recognition\n- Showcase success stories\n\n**Promotional/Special Offer:**\n- Highlight pricing, discounts, or limited-time offers\n- Create urgency with time-sensitive language\n- Emphasize value proposition and ROI\n- Include clear benefit statements\n\n**General Engagement/Season Update:**\n- Focus on relationship building and community\n- Share season highlights and upcoming events\n- Maintain engagement without hard selling\n- Build anticipation for future content\n\n**Performance Analysis Report:**\n- Deep dive into specific performance metrics\n- Technical insights made accessible\n- Comparative analysis and benchmarking\n- Actionable recommendations\n\n**Training Tips & Techniques:**\n- Practical, actionable advice\n- Evidence-based training methodologies\n- Progressive skill development concepts\n- Performance optimization strategies\n\n### Sport-Specific Adaptations\n\n**Tennis:** Focus on individual performance, technique analysis, match strategy\n**Rugby:** Team dynamics, physical conditioning, tactical analysis\n**Hockey:** Speed and agility, team coordination, game intelligence\n**Netball:** Precision and accuracy, team positioning, fitness optimization\n**Waterpolo:** Endurance and strength, tactical positioning, technique refinement\n**Pickleball:** Accessibility and fun, technique improvement, community building\n**All Sports:** Universal performance principles, cross-sport analytics, versatility\n\n### Target Audience Adaptations\n\n**Coaches:** Focus on team improvement, analytical insights, coaching tools\n**Players:** Individual performance enhancement, personal goals, skill development\n**Athletic Directors:** Program management, budget efficiency, overall program success\n**Program Administrators:** Operational efficiency, reporting capabilities, program oversight\n**Mixed Audience:** Balanced approach covering multiple perspectives\n**Parents/Guardians:** Player development, safety, progress tracking\n**Sponsors/Partners:** ROI demonstration, partnership value, brand association\n\n### Output Requirements\nYou MUST return a valid JSON object with exactly these 5 fields:\n{\n  \"subject_line\": \"[35-50 character compelling subject line]\",\n  \"hook\": \"[50-100 words attention-grabbing opening]\",\n  \"information\": \"[150-200 words main content with analytics/insights]\",\n  \"details\": \"[150-200 words supporting information and benefits]\",\n  \"cta\": \"[50 words maximum clear call-to-action]\"\n}\n\n### Quality Standards\n- Write in active voice with strong, action-oriented language\n- Use sport-specific terminology appropriately for the target audience\n- Include performance metrics, percentages, or data points when relevant\n- Maintain professional credibility while being engaging\n- Ensure each section flows logically to the next\n- Create content that positions VS Sports as the industry leader\n- Make technical concepts accessible without dumbing down\n- Include emotional connection points relevant to sports achievement\n\nGenerate professional, compelling email content that will drive engagement and position VS Sports as the premier sports analytics platform."}},"type":"@n8n/n8n-nodes-langchain.agent","typeVersion":1.8,"position":[-20,-80],"id":"dc57b4ff-0984-4629-97a3-bad38e84c247","name":"VS Sports Email Content Generator"},{"parameters":{"jsCode":"// Header Image Decision Logic - FIXED\n// Get form data and AI content\nconst formData = $('VS Sports Email Campaign Form').first().json;\nconst aiContent = $('VS Sports Email Content Generator').first().json;\n\n// Check for uploaded header image\nconst headerImageUpload = formData['Header Image Upload'];\nconst headerImageURL = formData['Header Image URL'];\n\n// Priority 1: Use uploaded image (check for object with filename)\nif (headerImageUpload && typeof headerImageUpload === 'object' && headerImageUpload.filename) {\n  return {\n    json: {\n      section: 'header',\n      imageSource: 'upload',\n      imageData: headerImageUpload,\n      imageUrl: null,\n      needsPrompt: false,\n      // Pass through data for other nodes\n      campaignName: formData['Campaign Name'],\n      emailType: formData['Email Type'],\n      sportCategory: formData['Sport Category'],\n      targetAudience: formData['Target Audience'],\n      subjectLine: aiContent.subject_line,\n      fileName: headerImageUpload.filename,\n      fileType: headerImageUpload.mimetype,\n      fileSize: headerImageUpload.size\n    }\n  };\n}\n\n// Priority 2: Use provided URL\nif (headerImageURL && headerImageURL.trim() !== '') {\n  return {\n    json: {\n      section: 'header',\n      imageSource: 'url',\n      imageData: null,\n      imageUrl: headerImageURL.trim(),\n      needsPrompt: false,\n      // Pass through data for other nodes\n      campaignName: formData['Campaign Name'],\n      emailType: formData['Email Type'],\n      sportCategory: formData['Sport Category'],\n      targetAudience: formData['Target Audience'],\n      subjectLine: aiContent.subject_line\n    }\n  };\n}\n\n// Priority 3: Need to generate image\nreturn {\n  json: {\n    section: 'header',\n    imageSource: 'generate',\n    imageData: null,\n    imageUrl: null,\n    needsPrompt: true,\n    // Pass through data for prompt generation\n    campaignName: formData['Campaign Name'],\n    emailType: formData['Email Type'],\n    sportCategory: formData['Sport Category'],\n    targetAudience: formData['Target Audience'],\n    subjectLine: aiContent.subject_line,\n    sectionContent: aiContent.subject_line\n  }\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[540,-300],"id":"7c82f54a-efb1-440a-b4fc-d985fa53a2ff","name":"Header Image Logic"},{"parameters":{"jsCode":"// Hook Image Decision Logic\n// Get form data and AI content\nconst formData = $('VS Sports Email Campaign Form').first().json;\nconst aiContent = $('VS Sports Email Content Generator').first().json;\n\n// Check for uploaded hook image\nconst hookImageUpload = formData['Section 1 (Hook) Image Upload'];\nconst hookImageURL = formData['Section 1 (Hook) Image URL'];\n\n// Priority 1: Use uploaded image (check for object with filename)\nif (hookImageUpload && typeof hookImageUpload === 'object' && hookImageUpload.filename) {\n  return {\n    json: {\n      section: 'hook',\n      imageSource: 'upload',\n      imageData: hookImageUpload,\n      imageUrl: null,\n      needsPrompt: false,\n      // Pass through data for other nodes\n      campaignName: formData['Campaign Name'],\n      emailType: formData['Email Type'],\n      sportCategory: formData['Sport Category'],\n      targetAudience: formData['Target Audience'],\n      hookContent: aiContent.hook,\n      fileName: hookImageUpload.filename,\n      fileType: hookImageUpload.mimetype,\n      fileSize: hookImageUpload.size\n    }\n  };\n}\n\n// Priority 2: Use provided URL\nif (hookImageURL && hookImageURL.trim() !== '') {\n  return {\n    json: {\n      section: 'hook',\n      imageSource: 'url',\n      imageData: null,\n      imageUrl: hookImageURL.trim(),\n      needsPrompt: false,\n      // Pass through data for other nodes\n      campaignName: formData['Campaign Name'],\n      emailType: formData['Email Type'],\n      sportCategory: formData['Sport Category'],\n      targetAudience: formData['Target Audience'],\n      hookContent: aiContent.hook\n    }\n  };\n}\n\n// Priority 3: Need to generate image\nreturn {\n  json: {\n    section: 'hook',\n    imageSource: 'generate',\n    imageData: null,\n    imageUrl: null,\n    needsPrompt: true,\n    // Pass through data for prompt generation\n    campaignName: formData['Campaign Name'],\n    emailType: formData['Email Type'],\n    sportCategory: formData['Sport Category'],\n    targetAudience: formData['Target Audience'],\n    hookContent: aiContent.hook,\n    sectionContent: aiContent.hook\n  }\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[540,-140],"id":"56adefa5-03d8-4576-afad-eac4dc1f261e","name":"Hook Image Logic"},{"parameters":{"jsCode":"// Information Image Decision Logic\n// Get form data and AI content\nconst formData = $('VS Sports Email Campaign Form').first().json;\nconst aiContent = $('VS Sports Email Content Generator').first().json;\n\n// Check for uploaded information image\nconst infoImageUpload = formData['Section 2 (Information) Image Upload'];\nconst infoImageURL = formData['Section 2 (Information) Image URL'];\n\n// Priority 1: Use uploaded image (check for object with filename)\nif (infoImageUpload && typeof infoImageUpload === 'object' && infoImageUpload.filename) {\n  return {\n    json: {\n      section: 'information',\n      imageSource: 'upload',\n      imageData: infoImageUpload,\n      imageUrl: null,\n      needsPrompt: false,\n      // Pass through data for other nodes\n      campaignName: formData['Campaign Name'],\n      emailType: formData['Email Type'],\n      sportCategory: formData['Sport Category'],\n      targetAudience: formData['Target Audience'],\n      informationContent: aiContent.information,\n      fileName: infoImageUpload.filename,\n      fileType: infoImageUpload.mimetype,\n      fileSize: infoImageUpload.size\n    }\n  };\n}\n\n// Priority 2: Use provided URL\nif (infoImageURL && infoImageURL.trim() !== '') {\n  return {\n    json: {\n      section: 'information',\n      imageSource: 'url',\n      imageData: null,\n      imageUrl: infoImageURL.trim(),\n      needsPrompt: false,\n      // Pass through data for other nodes\n      campaignName: formData['Campaign Name'],\n      emailType: formData['Email Type'],\n      sportCategory: formData['Sport Category'],\n      targetAudience: formData['Target Audience'],\n      informationContent: aiContent.information\n    }\n  };\n}\n\n// Priority 3: Need to generate image\nreturn {\n  json: {\n    section: 'information',\n    imageSource: 'generate',\n    imageData: null,\n    imageUrl: null,\n    needsPrompt: true,\n    // Pass through data for prompt generation\n    campaignName: formData['Campaign Name'],\n    emailType: formData['Email Type'],\n    sportCategory: formData['Sport Category'],\n    targetAudience: formData['Target Audience'],\n    informationContent: aiContent.information,\n    sectionContent: aiContent.information\n  }\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[540,0],"id":"9f5e31df-4823-4e8e-9b09-057186530693","name":"Information Image Logic"},{"parameters":{"jsCode":"// CTA Image Decision Logic\n// Get form data and AI content\nconst formData = $('VS Sports Email Campaign Form').first().json;\nconst aiContent = $('VS Sports Email Content Generator').first().json;\n\n// Check for uploaded CTA image\nconst ctaImageUpload = formData['CTA Section Image Upload'];\nconst ctaImageURL = formData['CTA Section Image URL'];\n\n// Priority 1: Use uploaded image (check for object with filename)\nif (ctaImageUpload && typeof ctaImageUpload === 'object' && ctaImageUpload.filename) {\n  return {\n    json: {\n      section: 'cta',\n      imageSource: 'upload',\n      imageData: ctaImageUpload,\n      imageUrl: null,\n      needsPrompt: false,\n      // Pass through data for other nodes\n      campaignName: formData['Campaign Name'],\n      emailType: formData['Email Type'],\n      sportCategory: formData['Sport Category'],\n      targetAudience: formData['Target Audience'],\n      ctaContent: aiContent.cta,\n      fileName: ctaImageUpload.filename,\n      fileType: ctaImageUpload.mimetype,\n      fileSize: ctaImageUpload.size\n    }\n  };\n}\n\n// Priority 2: Use provided URL\nif (ctaImageURL && ctaImageURL.trim() !== '') {\n  return {\n    json: {\n      section: 'cta',\n      imageSource: 'url',\n      imageData: null,\n      imageUrl: ctaImageURL.trim(),\n      needsPrompt: false,\n      // Pass through data for other nodes\n      campaignName: formData['Campaign Name'],\n      emailType: formData['Email Type'],\n      sportCategory: formData['Sport Category'],\n      targetAudience: formData['Target Audience'],\n      ctaContent: aiContent.cta\n    }\n  };\n}\n\n// Priority 3: Need to generate image\nreturn {\n  json: {\n    section: 'cta',\n    imageSource: 'generate',\n    imageData: null,\n    imageUrl: null,\n    needsPrompt: true,\n    // Pass through data for prompt generation\n    campaignName: formData['Campaign Name'],\n    emailType: formData['Email Type'],\n    sportCategory: formData['Sport Category'],\n    targetAudience: formData['Target Audience'],\n    ctaContent: aiContent.cta,\n    sectionContent: aiContent.cta\n  }\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[540,160],"id":"4142834c-4416-40f3-9bd9-4f15bae02bb8","name":"CTA Image Logic"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":1},"conditions":[{"id":"upload_condition","leftValue":"={{ $json.imageSource }}","rightValue":"upload","operator":{"type":"string","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2,"position":[740,-300],"id":"0d111e6a-6626-4a60-b208-9ff0dd9ef281","name":"Header Image Router"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict"},"conditions":[{"id":"upload_condition","leftValue":"={{ $json.imageSource }}","rightValue":"upload","operator":{"type":"string","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2,"position":[740,-140],"id":"36ad56c5-764e-4aa6-9332-33b4e8212256","name":"Hook Image Router"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":1},"conditions":[{"id":"upload_condition","leftValue":"={{ $json.imageSource }}","rightValue":"upload","operator":{"type":"string","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2,"position":[740,0],"id":"039f1cea-e9b0-4763-9031-a445f465c122","name":"Info Image Router"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict"},"conditions":[{"id":"upload_condition","leftValue":"={{ $json.imageSource }}","rightValue":"upload","operator":{"type":"string","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2,"position":[740,160],"id":"f1725d2c-00eb-468d-bcf6-718246e87699","name":"CTA Image Router"},{"parameters":{"jsCode":"// Process multiple image URLs from merge node\nconst allInputs = $input.all();\nconst processedImages = [];\n\n// Process each URL input\nallInputs.forEach(input => {\n  const inputData = input.json;\n  \n  // Get the image URL from the correct property\n  const imageUrl = inputData.imageUrl;\n  const section = inputData.section;\n\n  if (!imageUrl || imageUrl.trim() === '') {\n    throw new Error(`No image URL provided for ${section} section`);\n  }\n\n  // Basic URL validation\n  const urlPattern = /^https?:\\/\\/.+\\.(jpg|jpeg|png|gif|webp)(\\?.*)?$/i;\n  if (!urlPattern.test(imageUrl)) {\n    throw new Error(`Invalid image URL format for ${section} section: ${imageUrl}`);\n  }\n\n  // Extract file information from URL\n  const urlParts = imageUrl.split('/');\n  const fileName = urlParts[urlParts.length - 1].split('?')[0] || `${section}_url_image.jpg`;\n  const fileExtension = fileName.split('.').pop().toLowerCase();\n\n  // Determine MIME type\n  let mimeType = 'image/jpeg';\n  switch (fileExtension) {\n    case 'png':\n      mimeType = 'image/png';\n      break;\n    case 'gif':\n      mimeType = 'image/gif';\n      break;\n    case 'webp':\n      mimeType = 'image/webp';\n      break;\n  }\n\n  // Add processed image to array\n  processedImages.push({\n    section: section,\n    imageSource: 'url',\n    imageReady: true,\n    fileName: fileName,\n    fileType: mimeType,\n    imageUrl: imageUrl,\n    binaryData: null,\n    processingStatus: 'success',\n    processedAt: new Date().toISOString(),\n    urlValidated: true,\n    // Pass through original data\n    campaignName: inputData.campaignName,\n    emailType: inputData.emailType,\n    sportCategory: inputData.sportCategory,\n    targetAudience: inputData.targetAudience\n  });\n});\n\n// Return all processed images\nreturn processedImages.map(img => ({ json: img }));"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[2920,-300],"id":"e77c4a74-9963-4e82-b91e-9f706055a209","name":"Process URL Image"},{"parameters":{"jsCode":"// Process generated image response and standardize output\nconst inputData = $input.first().json;\nconst generatedImageData = inputData.data || inputData;\nconst originalRequest = $('Header Image Logic', 'Hook Image Logic', 'Information Image Logic', 'CTA Image Logic').first().json;\n\nconst section = originalRequest.section || 'unknown';\nconst sportCategory = originalRequest.sportCategory || 'All Sports';\nconst emailType = originalRequest.emailType || 'General';\n\n// Extract image URL from OpenAI response\nlet imageUrl = null;\nlet fileName = `${section}_generated_${Date.now()}.png`;\n\nif (generatedImageData && generatedImageData.url) {\n  imageUrl = generatedImageData.url;\n} else if (typeof generatedImageData === 'string' && generatedImageData.startsWith('http')) {\n  imageUrl = generatedImageData;\n} else if (generatedImageData && generatedImageData[0] && generatedImageData[0].url) {\n  imageUrl = generatedImageData[0].url;\n}\n\nif (!imageUrl) {\n  throw new Error(`Failed to generate image for ${section} section`);\n}\n\n// Create standardized output for email assembly\nreturn {\n  json: {\n    section: section,\n    imageSource: 'generated',\n    imageReady: true,\n    fileName: fileName,\n    fileType: 'image/png',\n    imageUrl: imageUrl,\n    binaryData: null,\n    processingStatus: 'success',\n    processedAt: new Date().toISOString(),\n    generatedPrompt: originalRequest.prompt,\n    sportCategory: sportCategory,\n    emailType: emailType,\n    generationModel: 'GPT-4.1-DALLE'\n  }\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1880,580],"id":"700d4f27-0a7d-47e6-aedb-955a9be2b70f","name":"Process Generated Image"},{"parameters":{"jsCode":"// Get processed images from Process URL Image node\nconst processedImages = $('Process URL Image').all();\n\n// Convert array to object by section\nconst imagesBySection = {};\nprocessedImages.forEach(item => {\n  const imageData = item.json;\n  imagesBySection[imageData.section] = imageData;\n});\n\n// Get AI content for email assembly (FIXED: access the nested output)\nconst aiContentNode = $('VS Sports Email Content Generator').first().json;\nconst aiContent = aiContentNode.output || aiContentNode; // Handle both structures\n\n// Get original form data\nconst formData = $('VS Sports Email Campaign Form').first().json;\n\n// Create comprehensive email data structure\nconst emailData = {\n  // Campaign metadata\n  campaignName: formData['Campaign Name'],\n  emailType: formData['Email Type'],\n  sportCategory: formData['Sport Category'],\n  targetAudience: formData['Target Audience'],\n  emailFocus: formData['Email Focus/Description'],\n  campaignPriority: formData['Campaign Priority'] || 'Medium',\n  sendDate: formData['Send Date'],\n  \n  // AI generated content (FIXED: use correct structure)\n  content: {\n    subjectLine: aiContent.subject_line,\n    hook: aiContent.hook,\n    information: aiContent.information,\n    details: aiContent.details,\n    cta: aiContent.cta\n  },\n  \n  // Processed images (organized by section)\n  images: {\n    header: imagesBySection.header || null,\n    hook: imagesBySection.hook || null,\n    information: imagesBySection.information || null,\n    cta: imagesBySection.cta || null\n  },\n  \n  // Processing metadata\n  processedAt: new Date().toISOString(),\n  status: 'ready_for_assembly',\n  readyForHtml: true\n};\n\n// Validate all sections are ready\nconst requiredSections = ['header', 'hook', 'information', 'cta'];\nconst missingSections = requiredSections.filter(section => \n  !emailData.images[section] || !emailData.images[section].imageReady\n);\n\nif (missingSections.length > 0) {\n  emailData.status = 'incomplete';\n  emailData.readyForHtml = false;\n  emailData.missingSections = missingSections;\n}\n\nreturn { json: emailData };"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[3440,-320],"id":"3b3618bf-9aea-4898-aa7c-555d097beff4","name":"Combine All Email Data"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":1},"conditions":[{"id":"url_condition","leftValue":"={{ $json.imageSource }}","rightValue":"url","operator":{"type":"string","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2,"position":[1100,80],"id":"56a04a87-49d5-408b-9b8a-cf63bebead6a","name":"URL or Generate Router"},{"parameters":{"operation":"toBinary","sourceProperty":"data[0].b64_json","options":{}},"type":"n8n-nodes-base.convertToFile","typeVersion":1.1,"position":[1700,580],"id":"2f15d414-062c-4256-95d7-21971356f3be","name":"Convert to File"},{"parameters":{"method":"POST","url":"https://api.openai.com/v1/images/generations","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"bodyParameters":{"parameters":[{"name":"model","value":"gpt-image-1"},{"name":"prompt","value":"**Environment:** A dynamic and sleek corporate workspace, with computer monitors displaying analytics dashboards. The setting evokes a sense of productivity and precision. \n\n**Style:** Realistic with modern design elements, emphasizing professionalism and sophistication. \n\n**Objects:** A glowing digital dashboard overlaid with metadata nodes connecting like a neural network. A folder labeled \"Metadata Backup\" stands prominently beside it, with arrows illustrating seamless recovery. A graph shows cost reduction (90%) and efficiency gains (days to minutes). \n\n**People/Actions:** A focused BI analyst confidently clicking on a \"Recover Metadata\" button, with a restored dashboard component appearing above their screen.\n\n**Color Palette:** Blues, whites, and greens dominate for a tech-savvy and trustworthy vibe. Pops of orange highlight key elements like cost savings and actionable recovery.\n\n**FOMO Text:** **\"Recover Smarter. Save Millions.\"**"},{"name":"size","value":"1024x1024"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[1540,580],"id":"215736e9-4eba-41d5-9616-1fdf358bc642","name":"Generate Image1","credentials":{"httpHeaderAuth":{"id":"z06CbCGaeEeBPVIt","name":"GPT Image Generator"}}},{"parameters":{"jsCode":"// Process generated image response and standardize output\nconst inputData = $input.first().json;\nconst generatedImageData = inputData.data || inputData;\nconst originalRequest = $('Header Image Logic', 'Hook Image Logic', 'Information Image Logic', 'CTA Image Logic').first().json;\n\nconst section = originalRequest.section || 'unknown';\nconst sportCategory = originalRequest.sportCategory || 'All Sports';\nconst emailType = originalRequest.emailType || 'General';\n\n// Extract image URL from OpenAI response\nlet imageUrl = null;\nlet fileName = `${section}_generated_${Date.now()}.png`;\n\nif (generatedImageData && generatedImageData.url) {\n  imageUrl = generatedImageData.url;\n} else if (typeof generatedImageData === 'string' && generatedImageData.startsWith('http')) {\n  imageUrl = generatedImageData;\n} else if (generatedImageData && generatedImageData[0] && generatedImageData[0].url) {\n  imageUrl = generatedImageData[0].url;\n}\n\nif (!imageUrl) {\n  throw new Error(`Failed to generate image for ${section} section`);\n}\n\n// Create standardized output for email assembly\nreturn {\n  json: {\n    section: section,\n    imageSource: 'generated',\n    imageReady: true,\n    fileName: fileName,\n    fileType: 'image/png',\n    imageUrl: imageUrl,\n    binaryData: null,\n    processingStatus: 'success',\n    processedAt: new Date().toISOString(),\n    generatedPrompt: originalRequest.prompt,\n    sportCategory: sportCategory,\n    emailType: emailType,\n    generationModel: 'GPT-4.1-DALLE'\n  }\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1900,760],"id":"a6840049-6ddf-4a2c-ad92-54581ee489bf","name":"Process Generated Image1"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":1},"conditions":[{"id":"url_condition","leftValue":"={{ $json.imageSource }}","rightValue":"url","operator":{"type":"string","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2,"position":[1100,240],"id":"a398d065-bb21-4cbb-8e02-93c0c40ee709","name":"URL or Generate Router1"},{"parameters":{"operation":"toBinary","sourceProperty":"data[0].b64_json","options":{}},"type":"n8n-nodes-base.convertToFile","typeVersion":1.1,"position":[1720,760],"id":"429ab0b5-4eb6-430e-831c-caedf54acaa4","name":"Convert to File1"},{"parameters":{"method":"POST","url":"https://api.openai.com/v1/images/generations","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"bodyParameters":{"parameters":[{"name":"model","value":"gpt-image-1"},{"name":"prompt","value":"**Environment:** A dynamic and sleek corporate workspace, with computer monitors displaying analytics dashboards. The setting evokes a sense of productivity and precision. \n\n**Style:** Realistic with modern design elements, emphasizing professionalism and sophistication. \n\n**Objects:** A glowing digital dashboard overlaid with metadata nodes connecting like a neural network. A folder labeled \"Metadata Backup\" stands prominently beside it, with arrows illustrating seamless recovery. A graph shows cost reduction (90%) and efficiency gains (days to minutes). \n\n**People/Actions:** A focused BI analyst confidently clicking on a \"Recover Metadata\" button, with a restored dashboard component appearing above their screen.\n\n**Color Palette:** Blues, whites, and greens dominate for a tech-savvy and trustworthy vibe. Pops of orange highlight key elements like cost savings and actionable recovery.\n\n**FOMO Text:** **\"Recover Smarter. Save Millions.\"**"},{"name":"size","value":"1024x1024"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[1560,760],"id":"d5268d5d-1085-4c85-9b08-3246a4b8dc78","name":"Generate Image","credentials":{"httpHeaderAuth":{"id":"z06CbCGaeEeBPVIt","name":"GPT Image Generator"}}},{"parameters":{"jsCode":"// Process generated image response and standardize output\nconst inputData = $input.first().json;\nconst generatedImageData = inputData.data || inputData;\nconst originalRequest = $('Header Image Logic', 'Hook Image Logic', 'Information Image Logic', 'CTA Image Logic').first().json;\n\nconst section = originalRequest.section || 'unknown';\nconst sportCategory = originalRequest.sportCategory || 'All Sports';\nconst emailType = originalRequest.emailType || 'General';\n\n// Extract image URL from OpenAI response\nlet imageUrl = null;\nlet fileName = `${section}_generated_${Date.now()}.png`;\n\nif (generatedImageData && generatedImageData.url) {\n  imageUrl = generatedImageData.url;\n} else if (typeof generatedImageData === 'string' && generatedImageData.startsWith('http')) {\n  imageUrl = generatedImageData;\n} else if (generatedImageData && generatedImageData[0] && generatedImageData[0].url) {\n  imageUrl = generatedImageData[0].url;\n}\n\nif (!imageUrl) {\n  throw new Error(`Failed to generate image for ${section} section`);\n}\n\n// Create standardized output for email assembly\nreturn {\n  json: {\n    section: section,\n    imageSource: 'generated',\n    imageReady: true,\n    fileName: fileName,\n    fileType: 'image/png',\n    imageUrl: imageUrl,\n    binaryData: null,\n    processingStatus: 'success',\n    processedAt: new Date().toISOString(),\n    generatedPrompt: originalRequest.prompt,\n    sportCategory: sportCategory,\n    emailType: emailType,\n    generationModel: 'GPT-4.1-DALLE'\n  }\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1900,940],"id":"5346b5f9-1541-4a2c-8031-5d2783fdbbf6","name":"Process Generated Image2"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":1},"conditions":[{"id":"url_condition","leftValue":"={{ $json.imageSource }}","rightValue":"url","operator":{"type":"string","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2,"position":[1100,400],"id":"036a67b4-8a3e-425d-a765-00c51d7470af","name":"URL or Generate Router2"},{"parameters":{"operation":"toBinary","sourceProperty":"data[0].b64_json","options":{}},"type":"n8n-nodes-base.convertToFile","typeVersion":1.1,"position":[1720,940],"id":"cd2858f1-8c74-4a73-be84-70a939fdbcb6","name":"Convert to File2"},{"parameters":{"method":"POST","url":"https://api.openai.com/v1/images/generations","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"bodyParameters":{"parameters":[{"name":"model","value":"gpt-image-1"},{"name":"prompt","value":"**Environment:** A dynamic and sleek corporate workspace, with computer monitors displaying analytics dashboards. The setting evokes a sense of productivity and precision. \n\n**Style:** Realistic with modern design elements, emphasizing professionalism and sophistication. \n\n**Objects:** A glowing digital dashboard overlaid with metadata nodes connecting like a neural network. A folder labeled \"Metadata Backup\" stands prominently beside it, with arrows illustrating seamless recovery. A graph shows cost reduction (90%) and efficiency gains (days to minutes). \n\n**People/Actions:** A focused BI analyst confidently clicking on a \"Recover Metadata\" button, with a restored dashboard component appearing above their screen.\n\n**Color Palette:** Blues, whites, and greens dominate for a tech-savvy and trustworthy vibe. Pops of orange highlight key elements like cost savings and actionable recovery.\n\n**FOMO Text:** **\"Recover Smarter. Save Millions.\"**"},{"name":"size","value":"1024x1024"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[1560,940],"id":"897bc781-88dc-4345-bb19-3a3f32cb4576","name":"Generate Image2","credentials":{"httpHeaderAuth":{"id":"z06CbCGaeEeBPVIt","name":"GPT Image Generator"}}},{"parameters":{"jsCode":"// Process generated image response and standardize output\nconst inputData = $input.first().json;\nconst generatedImageData = inputData.data || inputData;\nconst originalRequest = $('Header Image Logic', 'Hook Image Logic', 'Information Image Logic', 'CTA Image Logic').first().json;\n\nconst section = originalRequest.section || 'unknown';\nconst sportCategory = originalRequest.sportCategory || 'All Sports';\nconst emailType = originalRequest.emailType || 'General';\n\n// Extract image URL from OpenAI response\nlet imageUrl = null;\nlet fileName = `${section}_generated_${Date.now()}.png`;\n\nif (generatedImageData && generatedImageData.url) {\n  imageUrl = generatedImageData.url;\n} else if (typeof generatedImageData === 'string' && generatedImageData.startsWith('http')) {\n  imageUrl = generatedImageData;\n} else if (generatedImageData && generatedImageData[0] && generatedImageData[0].url) {\n  imageUrl = generatedImageData[0].url;\n}\n\nif (!imageUrl) {\n  throw new Error(`Failed to generate image for ${section} section`);\n}\n\n// Create standardized output for email assembly\nreturn {\n  json: {\n    section: section,\n    imageSource: 'generated',\n    imageReady: true,\n    fileName: fileName,\n    fileType: 'image/png',\n    imageUrl: imageUrl,\n    binaryData: null,\n    processingStatus: 'success',\n    processedAt: new Date().toISOString(),\n    generatedPrompt: originalRequest.prompt,\n    sportCategory: sportCategory,\n    emailType: emailType,\n    generationModel: 'GPT-4.1-DALLE'\n  }\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1920,1180],"id":"b03ca952-3c5d-48fc-9695-9b8750b8e8c1","name":"Process Generated Image3"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":1},"conditions":[{"id":"url_condition","leftValue":"={{ $json.imageSource }}","rightValue":"url","operator":{"type":"string","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2,"position":[1100,580],"id":"cf52df3d-6a80-4d4b-954c-ca302e74679c","name":"URL or Generate Router3"},{"parameters":{"operation":"toBinary","sourceProperty":"data[0].b64_json","options":{}},"type":"n8n-nodes-base.convertToFile","typeVersion":1.1,"position":[1740,1180],"id":"af126bfe-7ab8-406d-a21b-aa65479d2e6e","name":"Convert to File3"},{"parameters":{"method":"POST","url":"https://api.openai.com/v1/images/generations","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"bodyParameters":{"parameters":[{"name":"model","value":"gpt-image-1"},{"name":"prompt","value":"**Environment:** A dynamic and sleek corporate workspace, with computer monitors displaying analytics dashboards. The setting evokes a sense of productivity and precision. \n\n**Style:** Realistic with modern design elements, emphasizing professionalism and sophistication. \n\n**Objects:** A glowing digital dashboard overlaid with metadata nodes connecting like a neural network. A folder labeled \"Metadata Backup\" stands prominently beside it, with arrows illustrating seamless recovery. A graph shows cost reduction (90%) and efficiency gains (days to minutes). \n\n**People/Actions:** A focused BI analyst confidently clicking on a \"Recover Metadata\" button, with a restored dashboard component appearing above their screen.\n\n**Color Palette:** Blues, whites, and greens dominate for a tech-savvy and trustworthy vibe. Pops of orange highlight key elements like cost savings and actionable recovery.\n\n**FOMO Text:** **\"Recover Smarter. Save Millions.\"**"},{"name":"size","value":"1024x1024"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[1560,1180],"id":"61e01bae-c003-41b3-b5dd-9acaf163a2c6","name":"Generate Image3","credentials":{"httpHeaderAuth":{"id":"z06CbCGaeEeBPVIt","name":"GPT Image Generator"}}},{"parameters":{"numberInputs":4},"id":"3746766a-3d87-4e80-9255-56703617d2ff","name":"Merge1","type":"n8n-nodes-base.merge","position":[2520,-300],"typeVersion":3,"alwaysOutputData":false},{"parameters":{"jsCode":"// VS Sports HTML Email Assembly Node - CLEAN VERSION\n// Takes combined email data and generates final HTML email for Mailchimp\n\nconst emailData = $input.first().json;\n\n// Helper function to safely escape HTML content\nfunction escapeForHtml(str) {\n    if (!str) return '';\n    return String(str)\n        .replace(/&/g, '&amp;')\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;')\n        .replace(/\"/g, '&quot;')\n        .replace(/'/g, '&#39;');\n}\n\n// Helper function to format content as HTML paragraphs\nfunction formatAsHtmlParagraphs(content) {\n    if (!content) return '<p>No content provided</p>';\n    \n    const safeContent = escapeForHtml(content);\n    const paragraphs = safeContent.split('\\\\n\\\\n').filter(p => p.trim());\n    \n    if (paragraphs.length === 0) {\n        return '<p style=\"text-align: center;color: #000000;font-family: Arial, Helvetica, sans-serif;font-size: 14px;margin: 10px 0;padding: 0;line-height: 150%;\">No content available</p>';\n    }\n    \n    return paragraphs.map(paragraph => {\n        const withBreaks = paragraph.replace(/\\\\n/g, '<br>');\n        return `<p style=\"text-align: center;color: #000000;font-family: Arial, Helvetica, sans-serif;font-size: 14px;margin: 10px 0;padding: 0;line-height: 150%;\">${withBreaks}</p>`;\n    }).join('');\n}\n\n// Extract clean CTA text\nfunction getCtaText(ctaContent) {\n    if (!ctaContent) return 'LEARN MORE';\n    const cleaned = escapeForHtml(ctaContent);\n    const words = cleaned.trim().split(/\\\\s+/).slice(0, 4);\n    return words.join(' ').toUpperCase() || 'LEARN MORE';\n}\n\n// Get image URL safely\nfunction getImageUrl(imageObj, fallback) {\n    if (!imageObj) return fallback;\n    return imageObj.imageUrl || fallback;\n}\n\n// Get safe values from email data\nconst campaignName = escapeForHtml(emailData.campaignName || 'VS Sports Campaign');\nconst subjectLine = escapeForHtml(emailData.content?.subjectLine || emailData.subjectLine || 'VS Sports Update');\nconst sportCategory = escapeForHtml(emailData.sportCategory || 'Sports');\nconst sportCategoryUpper = escapeForHtml((emailData.sportCategory || 'SPORTS').toUpperCase());\nconst emailType = escapeForHtml(emailData.emailType || 'General');\n\n// Format content sections\nconst hookContent = formatAsHtmlParagraphs(emailData.content?.hook || emailData.hook);\nconst informationContent = formatAsHtmlParagraphs(emailData.content?.information || emailData.information);\nconst detailsContent = formatAsHtmlParagraphs(emailData.content?.details || emailData.details);\nconst ctaText = getCtaText(emailData.content?.cta || emailData.cta);\n\n// Get image URLs\nconst headerImageUrl = getImageUrl(emailData.images?.header, 'https://via.placeholder.com/600x200/03C4FF/FFFFFF?text=VS+Sports');\nconst hookImageUrl = getImageUrl(emailData.images?.hook, 'https://via.placeholder.com/600x300/03C4FF/FFFFFF?text=Hook');\nconst infoImageUrl = getImageUrl(emailData.images?.information, 'https://via.placeholder.com/600x300/03C4FF/FFFFFF?text=Info');\nconst ctaImageUrl = getImageUrl(emailData.images?.cta, 'https://via.placeholder.com/600x300/03C4FF/FFFFFF?text=CTA');\n\n// Create the complete HTML email\nconst completeHtml = `<!doctype html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:v=\"urn:schemas-microsoft-com:vml\" xmlns:o=\"urn:schemas-microsoft-com:office:office\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <title>${subjectLine}</title>\n    <style type=\"text/css\">\n        p { margin: 10px 0; padding: 0; }\n        table { border-collapse: collapse; }\n        h1, h2, h3, h4, h5, h6 { display: block; margin: 0; padding: 0; }\n        img, a img { border: 0; height: auto; outline: none; text-decoration: none; }\n        body, #bodyTable, #bodyCell { height: 100%; margin: 0; padding: 0; width: 100%; }\n        .mcnPreviewText { display: none !important; }\n        #outlook a { padding: 0; }\n        img { -ms-interpolation-mode: bicubic; }\n        table { mso-table-lspace: 0pt; mso-table-rspace: 0pt; }\n        .ReadMsgBody { width: 100%; }\n        .ExternalClass { width: 100%; }\n        p, a, li, td, blockquote { mso-line-height-rule: exactly; }\n        a[href^=tel], a[href^=sms] { color: inherit; cursor: default; text-decoration: none; }\n        p, a, li, td, body, table, blockquote { -ms-text-size-adjust: 100%; -webkit-text-size-adjust: 100%; }\n        .templateContainer { max-width: 600px !important; }\n        .mcnImage, .mcnRetinaImage { vertical-align: bottom; }\n        .mcnTextContent { word-break: break-word; }\n        h1 { color: #222222; font-family: Helvetica; font-size: 40px; font-weight: bold; line-height: 150%; text-align: center; }\n        #templateHeader { background-color: #FFFFFF; border: 0; padding: 9px 0 0 0; }\n        #templateBody { background-color: #FFFFFF; border: 0; padding: 9px; }\n        #templateFooter { background-color: #333333; border: 0; padding: 9px; }\n        .footerContainer .mcnTextContent, .footerContainer .mcnTextContent p { color: #FFFFFF; font-family: Helvetica; font-size: 12px; line-height: 150%; text-align: center; }\n        @media only screen and (min-width:768px) { .templateContainer { width: 600px !important; } }\n        @media only screen and (max-width: 480px) { body, table, td, p, a, li, blockquote { -webkit-text-size-adjust: none !important; } }\n        @media only screen and (max-width: 480px) { body { width: 100% !important; min-width: 100% !important; } }\n        @media only screen and (max-width: 480px) { .mcnImage { width: 100% !important; } }\n        @media only screen and (max-width: 480px) { h1 { font-size: 30px !important; line-height: 125% !important; } }\n    </style>\n</head>\n<body>\n    <span class=\"mcnPreviewText\" style=\"display:none; font-size:0px; line-height:0px; max-height:0px; max-width:0px; opacity:0; overflow:hidden; visibility:hidden;\">${escapeForHtml((emailData.content?.hook || emailData.hook || '').substring(0, 100))}</span>\n    <center>\n        <table align=\"center\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" height=\"100%\" width=\"100%\" id=\"bodyTable\">\n            <tr>\n                <td align=\"center\" valign=\"top\" id=\"bodyCell\">\n                    <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">\n                        <tr>\n                            <td align=\"center\" valign=\"top\" id=\"templateHeader\">\n                                <table align=\"center\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\" class=\"templateContainer\">\n                                    <tr>\n                                        <td valign=\"top\" class=\"headerContainer\">\n                                            <!-- Email Type Header -->\n                                            <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\" style=\"min-width: 100%;\">\n                                                <tbody>\n                                                    <tr>\n                                                        <td valign=\"top\" style=\"padding: 9px;\">\n                                                            <table align=\"left\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\" style=\"min-width: 100%;\">\n                                                                <tbody>\n                                                                    <tr>\n                                                                        <td style=\"padding: 9px 18px;\">\n                                                                            <table border=\"0\" cellspacing=\"0\" width=\"100%\" style=\"min-width: 100%; background-color: #03C4FF;\">\n                                                                                <tbody>\n                                                                                    <tr>\n                                                                                        <td valign=\"top\" style=\"padding: 18px; color: #FFFFFF; font-family: Helvetica; font-size: 14px; text-align: center; line-height: 150%;\">\n                                                                                            <h1 style=\"margin: 0; padding: 0; color: #FFFFFF; font-family: Helvetica; font-size: 17px; font-weight: bold; line-height: 150%; text-align: center;\">\n                                                                                                <strong>${sportCategoryUpper} ${emailType.toUpperCase()}</strong>\n                                                                                            </h1>\n                                                                                        </td>\n                                                                                    </tr>\n                                                                                </tbody>\n                                                                            </table>\n                                                                        </td>\n                                                                    </tr>\n                                                                </tbody>\n                                                            </table>\n                                                        </td>\n                                                    </tr>\n                                                </tbody>\n                                            </table>\n                                            \n                                            <!-- Header Image -->\n                                            <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\" style=\"min-width: 100%;\">\n                                                <tbody>\n                                                    <tr>\n                                                        <td valign=\"top\" style=\"padding: 9px;\">\n                                                            <table align=\"left\" width=\"100%\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" style=\"min-width: 100%;\">\n                                                                <tbody>\n                                                                    <tr>\n                                                                        <td valign=\"top\" style=\"padding: 0 9px; text-align: center;\">\n                                                                            <img align=\"center\" alt=\"Header Image\" src=\"${headerImageUrl}\" width=\"564\" style=\"max-width: 600px; padding-bottom: 0; display: inline !important; vertical-align: bottom;\">\n                                                                        </td>\n                                                                    </tr>\n                                                                </tbody>\n                                                            </table>\n                                                        </td>\n                                                    </tr>\n                                                </tbody>\n                                            </table>\n                                        </td>\n                                    </tr>\n                                </table>\n                            </td>\n                        </tr>\n                        <tr>\n                            <td align=\"center\" valign=\"top\" id=\"templateBody\">\n                                <table align=\"center\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\" class=\"templateContainer\">\n                                    <tr>\n                                        <td valign=\"top\" class=\"bodyContainer\">\n                                            <!-- Hook Section -->\n                                            <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\" style=\"min-width: 100%;\">\n                                                <tbody>\n                                                    <tr>\n                                                        <td valign=\"top\" style=\"padding: 9px 0;\">\n                                                            <table align=\"left\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" style=\"max-width: 100%; min-width: 100%;\" width=\"100%\">\n                                                                <tbody>\n                                                                    <tr>\n                                                                        <td valign=\"top\" style=\"padding: 0 18px 9px; text-align: center;\">\n                                                                            ${hookContent}\n                                                                        </td>\n                                                                    </tr>\n                                                                </tbody>\n                                                            </table>\n                                                        </td>\n                                                    </tr>\n                                                </tbody>\n                                            </table>\n                                            \n                                            <!-- Hook Image -->\n                                            <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\" style=\"min-width: 100%;\">\n                                                <tbody>\n                                                    <tr>\n                                                        <td valign=\"top\" style=\"padding: 9px;\">\n                                                            <table align=\"left\" width=\"100%\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" style=\"min-width: 100%;\">\n                                                                <tbody>\n                                                                    <tr>\n                                                                        <td valign=\"top\" style=\"padding: 0 9px; text-align: center;\">\n                                                                            <img align=\"center\" alt=\"Hook Image\" src=\"${hookImageUrl}\" width=\"564\" style=\"max-width: 600px; padding-bottom: 0; display: inline !important; vertical-align: bottom;\">\n                                                                        </td>\n                                                                    </tr>\n                                                                </tbody>\n                                                            </table>\n                                                        </td>\n                                                    </tr>\n                                                </tbody>\n                                            </table>\n\n                                            <!-- Key Insights Header -->\n                                            <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\" style=\"min-width: 100%;\">\n                                                <tbody>\n                                                    <tr>\n                                                        <td valign=\"top\" style=\"padding: 9px;\">\n                                                            <table align=\"left\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\" style=\"min-width: 100%;\">\n                                                                <tbody>\n                                                                    <tr>\n                                                                        <td style=\"padding: 9px 18px;\">\n                                                                            <table border=\"0\" cellspacing=\"0\" width=\"100%\" style=\"min-width: 100%; background-color: #03C4FF;\">\n                                                                                <tbody>\n                                                                                    <tr>\n                                                                                        <td valign=\"top\" style=\"padding: 18px; color: #FFFFFF; font-family: Helvetica; font-size: 14px; text-align: center; line-height: 150%;\">\n                                                                                            <strong style=\"color: #FFFFFF; font-size: 16px; font-family: Arial, Helvetica, sans-serif;\">KEY INSIGHTS</strong>\n                                                                                        </td>\n                                                                                    </tr>\n                                                                                </tbody>\n                                                                            </table>\n                                                                        </td>\n                                                                    </tr>\n                                                                </tbody>\n                                                            </table>\n                                                        </td>\n                                                    </tr>\n                                                </tbody>\n                                            </table>\n\n                                            <!-- Information Section -->\n                                            <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\" style=\"min-width: 100%;\">\n                                                <tbody>\n                                                    <tr>\n                                                        <td valign=\"top\" style=\"padding: 9px 0;\">\n                                                            <table align=\"left\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" style=\"max-width: 100%; min-width: 100%;\" width=\"100%\">\n                                                                <tbody>\n                                                                    <tr>\n                                                                        <td valign=\"top\" style=\"padding: 0 18px 9px; text-align: center;\">\n                                                                            ${informationContent}\n                                                                        </td>\n                                                                    </tr>\n                                                                </tbody>\n                                                            </table>\n                                                        </td>\n                                                    </tr>\n                                                </tbody>\n                                            </table>\n\n                                            <!-- Information Image -->\n                                            <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\" style=\"min-width: 100%;\">\n                                                <tbody>\n                                                    <tr>\n                                                        <td valign=\"top\" style=\"padding: 9px;\">\n                                                            <table align=\"left\" width=\"100%\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" style=\"min-width: 100%;\">\n                                                                <tbody>\n                                                                    <tr>\n                                                                        <td valign=\"top\" style=\"padding: 0 9px; text-align: center;\">\n                                                                            <img align=\"center\" alt=\"Information Image\" src=\"${infoImageUrl}\" width=\"564\" style=\"max-width: 600px; padding-bottom: 0; display: inline !important; vertical-align: bottom;\">\n                                                                        </td>\n                                                                    </tr>\n                                                                </tbody>\n                                                            </table>\n                                                        </td>\n                                                    </tr>\n                                                </tbody>\n                                            </table>\n\n                                            <!-- Details Section -->\n                                            <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\" style=\"min-width: 100%;\">\n                                                <tbody>\n                                                    <tr>\n                                                        <td valign=\"top\" style=\"padding: 9px 0;\">\n                                                            <table align=\"left\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" style=\"max-width: 100%; min-width: 100%;\" width=\"100%\">\n                                                                <tbody>\n                                                                    <tr>\n                                                                        <td valign=\"top\" style=\"padding: 0 18px 9px; text-align: center;\">\n                                                                            ${detailsContent}\n                                                                        </td>\n                                                                    </tr>\n                                                                </tbody>\n                                                            </table>\n                                                        </td>\n                                                    </tr>\n                                                </tbody>\n                                            </table>\n\n                                            <!-- CTA Button -->\n                                            <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\" style=\"min-width: 100%;\">\n                                                <tbody>\n                                                    <tr>\n                                                        <td style=\"padding: 0 18px 18px;\" valign=\"top\" align=\"center\">\n                                                            <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" style=\"border-radius: 3px; background-color: #03C4FF;\">\n                                                                <tbody>\n                                                                    <tr>\n                                                                        <td align=\"center\" valign=\"middle\" style=\"font-family: Helvetica; font-size: 18px; padding: 18px;\">\n                                                                            <a href=\"https://vssports.us\" target=\"_blank\" style=\"font-weight: bold; line-height: 100%; text-align: center; text-decoration: none; color: #FFFFFF;\">${ctaText}</a>\n                                                                        </td>\n                                                                    </tr>\n                                                                </tbody>\n                                                            </table>\n                                                        </td>\n                                                    </tr>\n                                                </tbody>\n                                            </table>\n\n                                            <!-- CTA Image -->\n                                            <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\" style=\"min-width: 100%;\">\n                                                <tbody>\n                                                    <tr>\n                                                        <td valign=\"top\" style=\"padding: 9px;\">\n                                                            <table align=\"left\" width=\"100%\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" style=\"min-width: 100%;\">\n                                                                <tbody>\n                                                                    <tr>\n                                                                        <td valign=\"top\" style=\"padding: 0 9px; text-align: center;\">\n                                                                            <img align=\"center\" alt=\"CTA Image\" src=\"${ctaImageUrl}\" width=\"564\" style=\"max-width: 600px; padding-bottom: 0; display: inline !important; vertical-align: bottom;\">\n                                                                        </td>\n                                                                    </tr>\n                                                                </tbody>\n                                                            </table>\n                                                        </td>\n                                                    </tr>\n                                                </tbody>\n                                            </table>\n                                        </td>\n                                    </tr>\n                                </table>\n                            </td>\n                        </tr>\n                        <tr>\n                            <td align=\"center\" valign=\"top\" id=\"templateFooter\">\n                                <table align=\"center\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\" class=\"templateContainer\">\n                                    <tr>\n                                        <td valign=\"top\" class=\"footerContainer\">\n                                            <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\" style=\"min-width: 100%;\">\n                                                <tbody>\n                                                    <tr>\n                                                        <td valign=\"top\" style=\"padding: 9px 0;\">\n                                                            <table align=\"left\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" style=\"max-width: 100%; min-width: 100%;\" width=\"100%\">\n                                                                <tbody>\n                                                                    <tr>\n                                                                        <td valign=\"top\" style=\"padding: 0 18px 9px; color: #FFFFFF; font-family: Helvetica; font-size: 12px; line-height: 150%; text-align: center;\">\n                                                                            <p style=\"color: #FFFFFF; font-family: Helvetica; font-size: 12px; line-height: 150%; text-align: center; margin: 10px 0; padding: 0;\">\n                                                                                Copyright © ${new Date().getFullYear()} VS. Sports, All rights reserved.<br>\n                                                                                You are receiving this because you opted in via our website.<br><br>\n                                                                                <strong>Our mailing address is:</strong><br>\n                                                                                VS. Sports<br>\n                                                                                PO Box 681763<br>\n                                                                                Park City, UT 84068-1763<br><br>\n                                                                                Want to change how you receive these emails?<br>\n                                                                                You can <a href=\"*|UPDATE_PROFILE|*\" style=\"color: #FFFFFF;\">update your preferences</a> or <a href=\"*|UNSUB|*\" style=\"color: #FFFFFF;\">unsubscribe from this list</a>.\n                                                                            </p>\n                                                                        </td>\n                                                                    </tr>\n                                                                </tbody>\n                                                            </table>\n                                                        </td>\n                                                    </tr>\n                                                </tbody>\n                                            </table>\n                                        </td>\n                                    </tr>\n                                </table>\n                            </td>\n                        </tr>\n                    </table>\n                </td>\n            </tr>\n        </table>\n    </center>\n</body>\n</html>`;\n\n// Create comprehensive output object\nconst outputData = {\n    // Mailchimp-ready data\n    mailchimpReady: {\n        subject_line: subjectLine.replace(/&[^;]+;/g, ''), // Remove HTML entities for subject\n        html_content: completeHtml,\n        text_content: `${subjectLine}\n\n${emailData.content?.hook || emailData.hook || ''}\n\n${emailData.content?.information || emailData.information || ''}\n\n${emailData.content?.details || emailData.details || ''}\n\n${emailData.content?.cta || emailData.cta || ''}\n\nVisit us at: https://vssports.us\n\nCopyright © ${new Date().getFullYear()} VS Sports, All rights reserved.`,\n        from_name: 'VS. Sports',\n        reply_to: 'elanie@vssports.us'\n    },\n    \n    // Campaign metadata\n    campaignMetadata: {\n        campaignName: emailData.campaignName || 'Unknown Campaign',\n        emailType: emailData.emailType || 'General',\n        sportCategory: emailData.sportCategory || 'Sports',\n        targetAudience: emailData.targetAudience || 'Athletes',\n        campaignPriority: emailData.campaignPriority || 'Medium',\n        sendDate: emailData.sendDate || ''\n    },\n    \n    // Content sections\n    contentSections: {\n        subjectLine: subjectLine.replace(/&[^;]+;/g, ''),\n        hook: emailData.content?.hook || emailData.hook || '',\n        information: emailData.content?.information || emailData.information || '',\n        details: emailData.content?.details || emailData.details || '',\n        cta: emailData.content?.cta || emailData.cta || ''\n    },\n    \n    // Image assets\n    imageAssets: {\n        header: { url: headerImageUrl, ready: true },\n        hook: { url: hookImageUrl, ready: true },\n        information: { url: infoImageUrl, ready: true },\n        cta: { url: ctaImageUrl, ready: true }\n    },\n    \n    // Processing info\n    processingInfo: {\n        htmlAssembledAt: new Date().toISOString(),\n        status: 'ready_for_mailchimp',\n        readyForSend: true,\n        templateVersion: 'vs_sports_clean_v1.0'\n    }\n};\n\nconsole.log('✅ HTML Email Assembly Complete - Clean Version');\nconsole.log('📧 Subject Line:', subjectLine);\nconsole.log('🎯 Email Type:', emailData.emailType);\nconsole.log('🏃 Sport Category:', emailData.sportCategory);\nconsole.log('📊 Status: Ready for Mailchimp');\n\nreturn { json: outputData };"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[3640,-320],"id":"cece8d92-c078-4b3a-908d-29ffffd13dda","name":"HTML Email Assembly Node"},{"parameters":{"jsCode":"// Mailchimp Campaign Creator Node\n// Creates a draft campaign in Mailchimp using the assembled email data\n\nconst emailData = $input.first().json;\n\n// Extract the mailchimp-ready data\nconst mailchimpData = emailData.mailchimpReady;\nconst campaignMetadata = emailData.campaignMetadata;\n\n// Create campaign title with timestamp for uniqueness\nconst campaignTitle = `${campaignMetadata.campaignName} - ${campaignMetadata.sportCategory} - ${new Date().toISOString().split('T')[0]}`;\n\n// Create the campaign object for Mailchimp\nconst campaignPayload = {\n    type: 'regular',\n    recipients: {\n        list_id: '7f667c206a' // Your VS Sports list ID from the example emails\n    },\n    settings: {\n        subject_line: mailchimpData.subject_line,\n        title: campaignTitle,\n        from_name: mailchimpData.from_name,\n        reply_to: mailchimpData.reply_to,\n        to_name: '*|FNAME|*', // Mailchimp merge tag for first name\n        folder_id: '', // Optional: specify folder ID if you want to organize campaigns\n        authenticate: true,\n        auto_footer: false, // We're including our own footer\n        inline_css: true,\n        auto_tweet: false,\n        fb_comments: false,\n        timewarp: false,\n        template_id: 0, // Use custom HTML instead of template\n        drag_and_drop: false // We're using custom HTML\n    },\n    tracking: {\n        opens: true,\n        html_clicks: true,\n        text_clicks: false,\n        goal_tracking: false,\n        ecomm360: false,\n        google_analytics: '',\n        clicktale: ''\n    },\n    social_card: {\n        image_url: emailData.imageAssets?.header?.url || 'https://vssports.us/logo.png',\n        description: `${campaignMetadata.sportCategory} ${campaignMetadata.emailType} from VS Sports`,\n        title: mailchimpData.subject_line\n    }\n};\n\n// Log the campaign creation attempt\nconsole.log('🚀 Creating Mailchimp Campaign...');\nconsole.log('📧 Campaign Title:', campaignTitle);\nconsole.log('🎯 Subject Line:', mailchimpData.subject_line);\nconsole.log('🏃 Sport Category:', campaignMetadata.sportCategory);\nconsole.log('📊 Email Type:', campaignMetadata.emailType);\nconsole.log('👥 Target Audience:', campaignMetadata.targetAudience);\n\n// Return the campaign payload and additional metadata\nreturn {\n    json: {\n        // Main campaign data for Mailchimp API\n        campaignPayload: campaignPayload,\n        \n        // HTML content (separate because it's large)\n        htmlContent: mailchimpData.html_content,\n        textContent: mailchimpData.text_content,\n        \n        // Campaign metadata for tracking\n        campaignInfo: {\n            title: campaignTitle,\n            subjectLine: mailchimpData.subject_line,\n            sportCategory: campaignMetadata.sportCategory,\n            emailType: campaignMetadata.emailType,\n            targetAudience: campaignMetadata.targetAudience,\n            priority: campaignMetadata.campaignPriority,\n            createdAt: new Date().toISOString(),\n            status: 'ready_for_mailchimp_creation'\n        },\n        \n        // Next steps information\n        nextSteps: {\n            step1: 'Create campaign using campaignPayload',\n            step2: 'Set HTML content using htmlContent',\n            step3: 'Set text content using textContent',\n            step4: 'Campaign will be created in DRAFT status',\n            step5: 'Review and send manually from Mailchimp dashboard'\n        },\n        \n        // API endpoints needed (for reference)\n        mailchimpEndpoints: {\n            createCampaign: 'POST /campaigns',\n            setContent: 'PUT /campaigns/{campaign_id}/content',\n            sendTest: 'POST /campaigns/{campaign_id}/actions/test',\n            schedule: 'POST /campaigns/{campaign_id}/actions/schedule',\n            send: 'POST /campaigns/{campaign_id}/actions/send'\n        }\n    }\n};\n\n// Additional logging for debugging\nconsole.log('✅ Campaign payload prepared');\nconsole.log('📄 HTML content length:', mailchimpData.html_content.length, 'characters');\nconsole.log('📝 Text content length:', mailchimpData.text_content.length, 'characters');\nconsole.log('🎨 Images included:', Object.keys(emailData.imageAssets || {}).length);\nconsole.log('🔗 Ready for Mailchimp API integration');"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[3860,-320],"id":"50f868ca-2823-49c6-865b-fc125e5e4755","name":"Mailchimp Campaign Preparation"},{"parameters":{"method":"POST","url":"https://us17.api.mailchimp.com/3.0/campaigns","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"specifyBody":"json","jsonBody":"={\n  \"type\": \"regular\",\n  \"recipients\": {\n    \"list_id\": \"7f667c206a\"\n  },\n  \"settings\": {\n    \"subject_line\": \"{{ $('HTML Email Assembly Node').item.json.mailchimpReady.subject_line }}\",\n    \"title\": \"{{ $('HTML Email Assembly Node').item.json.campaignMetadata.campaignName }} - {{ $('HTML Email Assembly Node').item.json.campaignMetadata.sportCategory }}\",\n    \"from_name\": \"{{ $('HTML Email Assembly Node').item.json.mailchimpReady.from_name }}\",\n    \"reply_to\": \"{{ $('HTML Email Assembly Node').item.json.mailchimpReady.reply_to }}\",\n    \"to_name\": \"*|FNAME|*\",\n    \"authenticate\": true,\n    \"auto_footer\": false,\n    \"inline_css\": true,\n    \"auto_tweet\": false,\n    \"fb_comments\": false\n  },\n  \"tracking\": {\n    \"opens\": true,\n    \"html_clicks\": true,\n    \"text_clicks\": false,\n    \"goal_tracking\": false,\n    \"ecomm360\": false\n  }\n}","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[4080,-320],"id":"39bba4c2-2d2b-4933-8807-9cc76319254d","name":"Create Campaign Mailchimp","credentials":{"httpHeaderAuth":{"id":"DrwVhGP1KRworMY3","name":"Mailchimp API VS Sports"}}},{"parameters":{"method":"PUT","url":"=https://us17.api.mailchimp.com/3.0/campaigns/{{ $('Create Campaign Mailchimp').item.json.id }}/content","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"contentType":"raw","rawContentType":"application/json","body":"={{ JSON.stringify($('Prepare Content for Mailchimp').item.json.contentPayload) }}","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[4540,-320],"id":"91bc08a6-9ea0-49a7-bc13-2a0264dbae01","name":"Set Campaign Content","credentials":{"httpHeaderAuth":{"id":"DrwVhGP1KRworMY3","name":"Mailchimp API VS Sports"}}},{"parameters":{"jsCode":"// Prepare Content for Mailchimp - FIXED VERSION\n// This node gets the HTML content from the right source\n\n// Debug: Log the input to see what we're working with\nconsole.log('Input data structure:', JSON.stringify($input.first().json, null, 2));\n\n// Try to get data from the most likely sources\nlet emailData = null;\nlet htmlContent = null;\nlet textContent = null;\nlet campaignId = null;\n\n// Method 1: Try to get from current input (Create Campaign Mailchimp output)\nconst currentInput = $input.first().json;\ncampaignId = currentInput.id || currentInput.campaign_id;\n\n// Method 2: Try to get from HTML Email Assembly Node\ntry {\n    const htmlAssemblyData = $('HTML Email Assembly Node').first().json;\n    console.log('HTML Assembly Node data found:', !!htmlAssemblyData);\n    \n    if (htmlAssemblyData && htmlAssemblyData.mailchimpReady) {\n        htmlContent = htmlAssemblyData.mailchimpReady.html_content;\n        textContent = htmlAssemblyData.mailchimpReady.text_content;\n        console.log('✅ Using HTML Email Assembly Node data');\n    }\n} catch (error) {\n    console.log('HTML Email Assembly Node not found or error:', error.message);\n}\n\n// Method 3: Try alternative node names\nif (!htmlContent) {\n    try {\n        const assemblyData = $('Combine All Email Data').first().json;\n        if (assemblyData && assemblyData.mailchimpReady) {\n            htmlContent = assemblyData.mailchimpReady.html_content;\n            textContent = assemblyData.mailchimpReady.text_content;\n            console.log('✅ Using Combine All Email Data');\n        }\n    } catch (error) {\n        console.log('Combine All Email Data not found');\n    }\n}\n\n// Method 4: Try from previous execution data\nif (!htmlContent) {\n    try {\n        // Look for any previous node with mailchimpReady data\n        const allPreviousNodes = $input.all();\n        for (let node of allPreviousNodes) {\n            if (node.json.mailchimpReady) {\n                htmlContent = node.json.mailchimpReady.html_content;\n                textContent = node.json.mailchimpReady.text_content;\n                console.log('✅ Found mailchimpReady data in previous execution');\n                break;\n            }\n        }\n    } catch (error) {\n        console.log('No previous execution data found');\n    }\n}\n\n// Method 5: Fallback - use hardcoded test content if nothing found\nif (!htmlContent) {\n    console.log('❌ No HTML content found, using test content');\n    htmlContent = `<!doctype html>\n<html>\n<head><title>Test Email</title></head>\n<body>\n<h1>Test VS Sports Email</h1>\n<p>This is a test email generated because the original content could not be found.</p>\n<p>Campaign ID: ${campaignId}</p>\n</body>\n</html>`;\n    textContent = \"Test VS Sports Email\\n\\nThis is a test email generated because the original content could not be found.\\n\\nCampaign ID: \" + campaignId;\n}\n\n// Validate we have the required data\nif (!campaignId) {\n    console.error('❌ No campaign ID found!');\n    throw new Error('Campaign ID is required but not found in the input data');\n}\n\nif (!htmlContent || htmlContent.length < 100) {\n    console.warn('⚠️ HTML content seems incomplete');\n}\n\n// Create the payload as a properly formatted object\nconst contentPayload = {\n    html: htmlContent,\n    plain_text: textContent\n};\n\nconsole.log('✅ Content prepared successfully');\nconsole.log('📧 HTML content length:', htmlContent.length);\nconsole.log('📝 Text content length:', textContent.length);\nconsole.log('🆔 Campaign ID:', campaignId);\n\nreturn {\n    json: {\n        campaignId: campaignId,\n        contentPayload: contentPayload,\n        debug: {\n            htmlContentLength: htmlContent.length,\n            textContentLength: textContent.length,\n            htmlPreview: htmlContent.substring(0, 200) + '...',\n            textPreview: textContent.substring(0, 200) + '...'\n        }\n    }\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[4300,-320],"id":"7a2fb2c9-59c6-43bf-8439-e447ef882b57","name":"Prepare Content for Mailchimp"},{"parameters":{"jsCode":"// Simplified ImgBB Upload - Just prepare metadata, let HTTP node handle file\nconst inputData = $input.first().json;\nconst section = inputData.section;\n\n// Get file info\nconst uploadFileInfo = inputData.imageData;\nif (!uploadFileInfo || !uploadFileInfo.filename) {\n  throw new Error(`No file information found for ${section} section`);\n}\n\nconst fileName = uploadFileInfo.filename;\nconst cleanName = fileName.replace(/\\.[^/.]+$/, ''); // Remove extension\n\nconsole.log(`📄 Preparing ${section} upload: ${fileName}`);\n\n// Return simple data for HTTP Request node\nreturn {\n  json: {\n    key: '10f598893185db2ddcb49736a3a5cd8d',\n    name: cleanName,\n    expiration: 0,\n    section: section,\n    originalFileName: fileName,\n    status: 'ready_for_http_upload'\n  }\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1480,-1000],"id":"2206aaca-afba-456e-9728-95274dacbfb7","name":"ImgBB Upload Preparation"},{"parameters":{"method":"POST","url":"https://api.imgbb.com/1/upload","sendBody":true,"contentType":"multipart-form-data","bodyParameters":{"parameters":[{"parameterType":"formBinaryData","name":"key"},{"name":"name","value":"={{ $json.name }}"},{"name":"=expiration","value":"={{ $json.expiration }}"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[1700,-1000],"id":"54f2533b-a809-4ad4-a483-d991f63e90c1","name":"HTTP Request (ImgBB)"},{"parameters":{"jsCode":"// ImgBB Upload Node - Fixed for n8n Form Uploads\n// This node uploads files to ImgBB and returns URLs for the unified flow\n\nconsole.log('=== ImgBB Upload Debug Info ===');\nconsole.log('Input JSON:', JSON.stringify($input.first().json, null, 2));\nconsole.log('Available $binary keys:', Object.keys($binary || {}));\n\nconst inputData = $input.first().json;\nconst section = inputData.section;\n\n// For form uploads, the file info is in JSON but binary data is in $binary\nconst uploadFileInfo = inputData.imageData;\n\n// Validate we have file info\nif (!uploadFileInfo || !uploadFileInfo.filename) {\n  throw new Error(`No image file information found for ${section} section`);\n}\n\n// Extract file information from the uploaded file info\nconst fileName = uploadFileInfo.filename;\nconst fileType = uploadFileInfo.mimetype || 'image/jpeg';\nconst fileSize = uploadFileInfo.size || 0;\n\nconsole.log(`📄 Processing file: ${fileName} (${fileSize} bytes, ${fileType})`);\n\n// Get binary data from n8n's $binary object\nlet base64Data;\ntry {\n  // n8n stores uploaded files in $binary with a key that matches the field name\n  // The key might be something like \"data\" or match the filename\n  const binaryKeys = Object.keys($binary || {});\n  console.log('Available binary keys:', binaryKeys);\n  \n  if (binaryKeys.length === 0) {\n    throw new Error('No binary data found in $binary object');\n  }\n  \n  // Try to find the binary data - usually it's the first (and often only) key\n  const binaryKey = binaryKeys[0];\n  const binaryData = $binary[binaryKey];\n  \n  if (!binaryData || !binaryData.data) {\n    throw new Error(`No binary data found for key: ${binaryKey}`);\n  }\n  \n  // Convert buffer to base64\n  base64Data = binaryData.data.toString('base64');\n  \n  console.log(`✅ Successfully extracted ${base64Data.length} characters of base64 data`);\n  console.log(`📊 Binary data info:`, {\n    mimeType: binaryData.mimeType,\n    fileName: binaryData.fileName,\n    fileSize: binaryData.fileSize\n  });\n  \n} catch (error) {\n  console.error(`❌ Binary data processing error for ${section}:`, error);\n  throw new Error(`Failed to process binary data for ${section}: ${error.message}`);\n}\n\n// Prepare ImgBB upload payload\nconst imgbbPayload = {\n  key: '10f598893185db2ddcb49736a3a5cd8d',\n  image: base64Data,\n  name: fileName.replace(/\\.[^/.]+$/, ''), // Remove extension\n  expiration: 0 // Never expires\n};\n\nconsole.log(`📤 Uploading ${section} image to ImgBB...`);\nconsole.log(`📄 File: ${fileName} (${fileSize} bytes)`);\nconsole.log(`🎯 Type: ${fileType}`);\n\n// Return the payload and metadata for the HTTP Request node\nreturn {\n  json: {\n    // ImgBB upload data\n    imgbbPayload: imgbbPayload,\n    \n    // Original metadata to pass through\n    section: section,\n    originalFileName: fileName,\n    fileType: fileType,\n    fileSize: fileSize,\n    imageSource: 'upload',\n    \n    // Campaign context\n    campaignName: inputData.campaignName,\n    emailType: inputData.emailType,\n    sportCategory: inputData.sportCategory,\n    targetAudience: inputData.targetAudience,\n    \n    // Processing info\n    uploadAttemptedAt: new Date().toISOString(),\n    status: 'ready_for_imgbb_upload',\n    \n    // Debug info\n    debug: {\n      binaryKeysFound: Object.keys($binary || {}),\n      base64Length: base64Data.length,\n      fileInfo: uploadFileInfo\n    }\n  }\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1920,-1000],"id":"be19f274-7a0f-4b1d-bca2-6e50187c2445","name":"ImgBB Response Processor"},{"parameters":{"jsCode":"// ImgBB Upload Node - Replace \"Process Uploaded Image\"\n// This node uploads files to ImgBB and returns URLs for the unified flow\n\nconst inputData = $input.first().json;\nconst imageData = inputData.imageData;\nconst section = inputData.section;\n\n// Validate input data\nif (!imageData || !Array.isArray(imageData) || imageData.length === 0) {\n  throw new Error(`No image data found for ${section} section`);\n}\n\n// Get the first uploaded file\nconst uploadedFile = imageData[0];\n\n// Extract file information\nconst fileName = uploadedFile.filename || `${section}_upload.jpg`;\nconst fileType = uploadedFile.mimeType || uploadedFile.mimetype || 'image/jpeg';\nconst fileSize = uploadedFile.fileSize || uploadedFile.size || 0;\n\n// Get binary data (n8n stores it in different possible locations)\nlet binaryData = null;\nif (uploadedFile.binary) {\n  binaryData = uploadedFile.binary;\n} else if (uploadedFile.data) {\n  binaryData = uploadedFile.data;\n} else {\n  binaryData = uploadedFile;\n}\n\n// Validate binary data exists\nif (!binaryData) {\n  throw new Error(`No binary data found for uploaded file in ${section} section`);\n}\n\n// Convert binary data to base64 for ImgBB API\nlet base64Data;\ntry {\n  if (typeof binaryData === 'string') {\n    // Already base64\n    base64Data = binaryData.replace(/^data:image\\/[a-z]+;base64,/, '');\n  } else if (Buffer.isBuffer(binaryData)) {\n    // Convert buffer to base64\n    base64Data = binaryData.toString('base64');\n  } else {\n    throw new Error('Unsupported binary data format');\n  }\n} catch (error) {\n  throw new Error(`Failed to process binary data for ${section}: ${error.message}`);\n}\n\n// Prepare ImgBB upload payload\nconst imgbbPayload = {\n  key: '10f598893185db2ddcb49736a3a5cd8d', // Replace with your actual API key or use credential\n  image: base64Data,\n  name: fileName.replace(/\\.[^/.]+$/, ''), // Remove extension, ImgBB will handle it\n  expiration: 0 // 0 = never expires, or set seconds (e.g., 604800 for 7 days)\n};\n\nconsole.log(`📤 Uploading ${section} image to ImgBB...`);\nconsole.log(`📄 File: ${fileName} (${fileSize} bytes)`);\nconsole.log(`🎯 Type: ${fileType}`);\n\n// Return the payload and metadata for the HTTP Request node\nreturn {\n  json: {\n    // ImgBB upload data\n    imgbbPayload: imgbbPayload,\n    \n    // Original metadata to pass through\n    section: section,\n    originalFileName: fileName,\n    fileType: fileType,\n    fileSize: fileSize,\n    imageSource: 'upload',\n    \n    // Campaign context\n    campaignName: inputData.campaignName,\n    emailType: inputData.emailType,\n    sportCategory: inputData.sportCategory,\n    targetAudience: inputData.targetAudience,\n    \n    // Processing info\n    uploadAttemptedAt: new Date().toISOString(),\n    status: 'ready_for_imgbb_upload'\n  }\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1460,-840],"id":"bd70a82f-a10c-4bed-9d6c-9161d6986db2","name":"ImgBB Upload Preparation1"},{"parameters":{"method":"POST","url":"https://api.imgbb.com/1/upload","sendBody":true,"bodyParameters":{"parameters":[{"name":"key","value":"={{ $json.imgbbPayload.key }}"},{"name":"image","value":"={{ $json.imgbbPayload.image }}"},{"name":"name","value":"={{ $json.imgbbPayload.name }}"},{"name":"expiration","value":"={{ $json.imgbbPayload.expiration }}"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[1680,-840],"id":"563eee26-6afe-4475-abfa-de53dda67632","name":"HTTP Request (ImgBB)1"},{"parameters":{"jsCode":"// ImgBB Response Processor - Process the ImgBB API response\n// This node standardizes the ImgBB response to match your existing image flow\n\nconst inputData = $input.first().json;\nconst imgbbResponse = inputData;\n\n// Get original request data from the preparation node\nconst originalData = $('ImgBB Upload Preparation1').first().json;\n\n// Validate ImgBB response\nif (!imgbbResponse.success) {\n  const errorMsg = imgbbResponse.error?.message || 'Unknown ImgBB upload error';\n  throw new Error(`ImgBB upload failed for ${originalData.section}: ${errorMsg}`);\n}\n\n// Extract image URLs from ImgBB response\nconst imageData = imgbbResponse.data;\nconst imageUrl = imageData.url;\nconst deleteUrl = imageData.delete_url;\nconst thumbnailUrl = imageData.thumb?.url;\n\n// Validate we got a URL\nif (!imageUrl) {\n  throw new Error(`No image URL returned from ImgBB for ${originalData.section}`);\n}\n\nconsole.log(`✅ ImgBB upload successful for ${originalData.section}`);\nconsole.log(`🔗 Image URL: ${imageUrl}`);\nconsole.log(`📊 ImgBB ID: ${imageData.id}`);\n\n// Create standardized output that matches your existing image processing structure\nconst standardizedOutput = {\n  section: originalData.section,\n  imageSource: 'upload', // Keep original source designation\n  imageReady: true,\n  fileName: originalData.originalFileName,\n  fileType: originalData.fileType,\n  fileSize: originalData.fileSize,\n  imageUrl: imageUrl, // This is the key - the URL that will be used in email\n  binaryData: null, // No longer needed since we have URL\n  \n  // ImgBB specific data\n  imgbbData: {\n    id: imageData.id,\n    title: imageData.title,\n    url: imageUrl,\n    displayUrl: imageData.display_url,\n    deleteUrl: deleteUrl,\n    width: imageData.width,\n    height: imageData.height,\n    size: imageData.size,\n    time: imageData.time,\n    expiration: imageData.expiration\n  },\n  \n  // Processing metadata\n  processingStatus: 'success',\n  processedAt: new Date().toISOString(),\n  uploadedAt: new Date().toISOString(),\n  uploadMethod: 'imgbb',\n  \n  // Pass through campaign context\n  campaignName: originalData.campaignName,\n  emailType: originalData.emailType,\n  sportCategory: originalData.sportCategory,\n  targetAudience: originalData.targetAudience\n};\n\nconsole.log(`📤 Upload complete - ${originalData.section} section ready`);\nconsole.log(`🎯 Final URL: ${imageUrl}`);\n\nreturn { json: standardizedOutput };"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1900,-840],"id":"846ceed4-c271-419f-9b68-d41235a249e7","name":"ImgBB Response Processor1"},{"parameters":{"jsCode":"// ImgBB Upload Node - Replace \"Process Uploaded Image\"\n// This node uploads files to ImgBB and returns URLs for the unified flow\n\nconst inputData = $input.first().json;\nconst imageData = inputData.imageData;\nconst section = inputData.section;\n\n// Validate input data\nif (!imageData || !Array.isArray(imageData) || imageData.length === 0) {\n  throw new Error(`No image data found for ${section} section`);\n}\n\n// Get the first uploaded file\nconst uploadedFile = imageData[0];\n\n// Extract file information\nconst fileName = uploadedFile.filename || `${section}_upload.jpg`;\nconst fileType = uploadedFile.mimeType || uploadedFile.mimetype || 'image/jpeg';\nconst fileSize = uploadedFile.fileSize || uploadedFile.size || 0;\n\n// Get binary data (n8n stores it in different possible locations)\nlet binaryData = null;\nif (uploadedFile.binary) {\n  binaryData = uploadedFile.binary;\n} else if (uploadedFile.data) {\n  binaryData = uploadedFile.data;\n} else {\n  binaryData = uploadedFile;\n}\n\n// Validate binary data exists\nif (!binaryData) {\n  throw new Error(`No binary data found for uploaded file in ${section} section`);\n}\n\n// Convert binary data to base64 for ImgBB API\nlet base64Data;\ntry {\n  if (typeof binaryData === 'string') {\n    // Already base64\n    base64Data = binaryData.replace(/^data:image\\/[a-z]+;base64,/, '');\n  } else if (Buffer.isBuffer(binaryData)) {\n    // Convert buffer to base64\n    base64Data = binaryData.toString('base64');\n  } else {\n    throw new Error('Unsupported binary data format');\n  }\n} catch (error) {\n  throw new Error(`Failed to process binary data for ${section}: ${error.message}`);\n}\n\n// Prepare ImgBB upload payload\nconst imgbbPayload = {\n  key: '10f598893185db2ddcb49736a3a5cd8d', // Replace with your actual API key or use credential\n  image: base64Data,\n  name: fileName.replace(/\\.[^/.]+$/, ''), // Remove extension, ImgBB will handle it\n  expiration: 0 // 0 = never expires, or set seconds (e.g., 604800 for 7 days)\n};\n\nconsole.log(`📤 Uploading ${section} image to ImgBB...`);\nconsole.log(`📄 File: ${fileName} (${fileSize} bytes)`);\nconsole.log(`🎯 Type: ${fileType}`);\n\n// Return the payload and metadata for the HTTP Request node\nreturn {\n  json: {\n    // ImgBB upload data\n    imgbbPayload: imgbbPayload,\n    \n    // Original metadata to pass through\n    section: section,\n    originalFileName: fileName,\n    fileType: fileType,\n    fileSize: fileSize,\n    imageSource: 'upload',\n    \n    // Campaign context\n    campaignName: inputData.campaignName,\n    emailType: inputData.emailType,\n    sportCategory: inputData.sportCategory,\n    targetAudience: inputData.targetAudience,\n    \n    // Processing info\n    uploadAttemptedAt: new Date().toISOString(),\n    status: 'ready_for_imgbb_upload'\n  }\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1460,-660],"id":"18fd3459-ca8e-425b-b8e9-7fa8bac3716e","name":"ImgBB Upload Preparation2"},{"parameters":{"method":"POST","url":"https://api.imgbb.com/1/upload","sendBody":true,"bodyParameters":{"parameters":[{"name":"key","value":"={{ $json.imgbbPayload.key }}"},{"name":"image","value":"={{ $json.imgbbPayload.image }}"},{"name":"name","value":"={{ $json.imgbbPayload.name }}"},{"name":"expiration","value":"={{ $json.imgbbPayload.expiration }}"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[1680,-660],"id":"bb2791af-c6e0-45b2-98c7-a34edc914e70","name":"HTTP Request (ImgBB)2"},{"parameters":{"jsCode":"// ImgBB Response Processor - Process the ImgBB API response\n// This node standardizes the ImgBB response to match your existing image flow\n\nconst inputData = $input.first().json;\nconst imgbbResponse = inputData;\n\n// Get original request data from the preparation node\nconst originalData = $('ImgBB Upload Preparation2').first().json;\n\n// Validate ImgBB response\nif (!imgbbResponse.success) {\n  const errorMsg = imgbbResponse.error?.message || 'Unknown ImgBB upload error';\n  throw new Error(`ImgBB upload failed for ${originalData.section}: ${errorMsg}`);\n}\n\n// Extract image URLs from ImgBB response\nconst imageData = imgbbResponse.data;\nconst imageUrl = imageData.url;\nconst deleteUrl = imageData.delete_url;\nconst thumbnailUrl = imageData.thumb?.url;\n\n// Validate we got a URL\nif (!imageUrl) {\n  throw new Error(`No image URL returned from ImgBB for ${originalData.section}`);\n}\n\nconsole.log(`✅ ImgBB upload successful for ${originalData.section}`);\nconsole.log(`🔗 Image URL: ${imageUrl}`);\nconsole.log(`📊 ImgBB ID: ${imageData.id}`);\n\n// Create standardized output that matches your existing image processing structure\nconst standardizedOutput = {\n  section: originalData.section,\n  imageSource: 'upload', // Keep original source designation\n  imageReady: true,\n  fileName: originalData.originalFileName,\n  fileType: originalData.fileType,\n  fileSize: originalData.fileSize,\n  imageUrl: imageUrl, // This is the key - the URL that will be used in email\n  binaryData: null, // No longer needed since we have URL\n  \n  // ImgBB specific data\n  imgbbData: {\n    id: imageData.id,\n    title: imageData.title,\n    url: imageUrl,\n    displayUrl: imageData.display_url,\n    deleteUrl: deleteUrl,\n    width: imageData.width,\n    height: imageData.height,\n    size: imageData.size,\n    time: imageData.time,\n    expiration: imageData.expiration\n  },\n  \n  // Processing metadata\n  processingStatus: 'success',\n  processedAt: new Date().toISOString(),\n  uploadedAt: new Date().toISOString(),\n  uploadMethod: 'imgbb',\n  \n  // Pass through campaign context\n  campaignName: originalData.campaignName,\n  emailType: originalData.emailType,\n  sportCategory: originalData.sportCategory,\n  targetAudience: originalData.targetAudience\n};\n\nconsole.log(`📤 Upload complete - ${originalData.section} section ready`);\nconsole.log(`🎯 Final URL: ${imageUrl}`);\n\nreturn { json: standardizedOutput };"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1900,-660],"id":"6ae716c2-6672-4d51-8885-c7347efe01f6","name":"ImgBB Response Processor2"},{"parameters":{"jsCode":"// ImgBB Upload Node - Replace \"Process Uploaded Image\"\n// This node uploads files to ImgBB and returns URLs for the unified flow\n\nconst inputData = $input.first().json;\nconst imageData = inputData.imageData;\nconst section = inputData.section;\n\n// Validate input data\nif (!imageData || !Array.isArray(imageData) || imageData.length === 0) {\n  throw new Error(`No image data found for ${section} section`);\n}\n\n// Get the first uploaded file\nconst uploadedFile = imageData[0];\n\n// Extract file information\nconst fileName = uploadedFile.filename || `${section}_upload.jpg`;\nconst fileType = uploadedFile.mimeType || uploadedFile.mimetype || 'image/jpeg';\nconst fileSize = uploadedFile.fileSize || uploadedFile.size || 0;\n\n// Get binary data (n8n stores it in different possible locations)\nlet binaryData = null;\nif (uploadedFile.binary) {\n  binaryData = uploadedFile.binary;\n} else if (uploadedFile.data) {\n  binaryData = uploadedFile.data;\n} else {\n  binaryData = uploadedFile;\n}\n\n// Validate binary data exists\nif (!binaryData) {\n  throw new Error(`No binary data found for uploaded file in ${section} section`);\n}\n\n// Convert binary data to base64 for ImgBB API\nlet base64Data;\ntry {\n  if (typeof binaryData === 'string') {\n    // Already base64\n    base64Data = binaryData.replace(/^data:image\\/[a-z]+;base64,/, '');\n  } else if (Buffer.isBuffer(binaryData)) {\n    // Convert buffer to base64\n    base64Data = binaryData.toString('base64');\n  } else {\n    throw new Error('Unsupported binary data format');\n  }\n} catch (error) {\n  throw new Error(`Failed to process binary data for ${section}: ${error.message}`);\n}\n\n// Prepare ImgBB upload payload\nconst imgbbPayload = {\n  key: '10f598893185db2ddcb49736a3a5cd8d', // Replace with your actual API key or use credential\n  image: base64Data,\n  name: fileName.replace(/\\.[^/.]+$/, ''), // Remove extension, ImgBB will handle it\n  expiration: 0 // 0 = never expires, or set seconds (e.g., 604800 for 7 days)\n};\n\nconsole.log(`📤 Uploading ${section} image to ImgBB...`);\nconsole.log(`📄 File: ${fileName} (${fileSize} bytes)`);\nconsole.log(`🎯 Type: ${fileType}`);\n\n// Return the payload and metadata for the HTTP Request node\nreturn {\n  json: {\n    // ImgBB upload data\n    imgbbPayload: imgbbPayload,\n    \n    // Original metadata to pass through\n    section: section,\n    originalFileName: fileName,\n    fileType: fileType,\n    fileSize: fileSize,\n    imageSource: 'upload',\n    \n    // Campaign context\n    campaignName: inputData.campaignName,\n    emailType: inputData.emailType,\n    sportCategory: inputData.sportCategory,\n    targetAudience: inputData.targetAudience,\n    \n    // Processing info\n    uploadAttemptedAt: new Date().toISOString(),\n    status: 'ready_for_imgbb_upload'\n  }\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1480,-460],"id":"af1f9315-4ebc-499f-9e90-4907068123bc","name":"ImgBB Upload Preparation3"},{"parameters":{"method":"POST","url":"https://api.imgbb.com/1/upload","sendBody":true,"bodyParameters":{"parameters":[{"name":"key","value":"={{ $json.imgbbPayload.key }}"},{"name":"image","value":"={{ $json.imgbbPayload.image }}"},{"name":"name","value":"={{ $json.imgbbPayload.name }}"},{"name":"expiration","value":"={{ $json.imgbbPayload.expiration }}"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[1700,-460],"id":"9ed1e8c7-742b-4f6e-93e7-e31aae84cdb4","name":"HTTP Request (ImgBB)3"},{"parameters":{"jsCode":"// ImgBB Response Processor - Process the ImgBB API response\n// This node standardizes the ImgBB response to match your existing image flow\n\nconst inputData = $input.first().json;\nconst imgbbResponse = inputData;\n\n// Get original request data from the preparation node\nconst originalData = $('ImgBB Upload Preparation3').first().json;\n\n// Validate ImgBB response\nif (!imgbbResponse.success) {\n  const errorMsg = imgbbResponse.error?.message || 'Unknown ImgBB upload error';\n  throw new Error(`ImgBB upload failed for ${originalData.section}: ${errorMsg}`);\n}\n\n// Extract image URLs from ImgBB response\nconst imageData = imgbbResponse.data;\nconst imageUrl = imageData.url;\nconst deleteUrl = imageData.delete_url;\nconst thumbnailUrl = imageData.thumb?.url;\n\n// Validate we got a URL\nif (!imageUrl) {\n  throw new Error(`No image URL returned from ImgBB for ${originalData.section}`);\n}\n\nconsole.log(`✅ ImgBB upload successful for ${originalData.section}`);\nconsole.log(`🔗 Image URL: ${imageUrl}`);\nconsole.log(`📊 ImgBB ID: ${imageData.id}`);\n\n// Create standardized output that matches your existing image processing structure\nconst standardizedOutput = {\n  section: originalData.section,\n  imageSource: 'upload', // Keep original source designation\n  imageReady: true,\n  fileName: originalData.originalFileName,\n  fileType: originalData.fileType,\n  fileSize: originalData.fileSize,\n  imageUrl: imageUrl, // This is the key - the URL that will be used in email\n  binaryData: null, // No longer needed since we have URL\n  \n  // ImgBB specific data\n  imgbbData: {\n    id: imageData.id,\n    title: imageData.title,\n    url: imageUrl,\n    displayUrl: imageData.display_url,\n    deleteUrl: deleteUrl,\n    width: imageData.width,\n    height: imageData.height,\n    size: imageData.size,\n    time: imageData.time,\n    expiration: imageData.expiration\n  },\n  \n  // Processing metadata\n  processingStatus: 'success',\n  processedAt: new Date().toISOString(),\n  uploadedAt: new Date().toISOString(),\n  uploadMethod: 'imgbb',\n  \n  // Pass through campaign context\n  campaignName: originalData.campaignName,\n  emailType: originalData.emailType,\n  sportCategory: originalData.sportCategory,\n  targetAudience: originalData.targetAudience\n};\n\nconsole.log(`📤 Upload complete - ${originalData.section} section ready`);\nconsole.log(`🎯 Final URL: ${imageUrl}`);\n\nreturn { json: standardizedOutput };"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1920,-460],"id":"e36a6895-fb8f-4e60-8686-5bc174078d80","name":"ImgBB Response Processor3"}],"connections":{"OpenRouter Chat Model2":{"ai_languageModel":[[{"node":"VS Sports Email Content Generator","type":"ai_languageModel","index":0}]]},"VS Sports Email Campaign Form":{"main":[[{"node":"VS Sports Email Content Generator","type":"main","index":0}]]},"VS Sports Email Structure Parser":{"ai_outputParser":[[{"node":"VS Sports Email Content Generator","type":"ai_outputParser","index":0}]]},"VS Sports Email Content Generator":{"main":[[{"node":"Header Image Logic","type":"main","index":0},{"node":"Hook Image Logic","type":"main","index":0},{"node":"Information Image Logic","type":"main","index":0},{"node":"CTA Image Logic","type":"main","index":0}]]},"Header Image Router":{"main":[[{"node":"ImgBB Upload Preparation","type":"main","index":0}],[{"node":"URL or Generate Router","type":"main","index":0}]]},"Hook Image Router":{"main":[[{"node":"ImgBB Upload Preparation1","type":"main","index":0}],[{"node":"URL or Generate Router1","type":"main","index":0}]]},"Info Image Router":{"main":[[{"node":"ImgBB Upload Preparation2","type":"main","index":0}],[{"node":"URL or Generate Router2","type":"main","index":0}]]},"CTA Image Router":{"main":[[{"node":"ImgBB Upload Preparation3","type":"main","index":0}],[{"node":"URL or Generate Router3","type":"main","index":0}]]},"Process URL Image":{"main":[[{"node":"Combine All Email Data","type":"main","index":0}]]},"Process Generated Image":{"main":[[{"node":"Combine All Email Data","type":"main","index":0}]]},"URL or Generate Router":{"main":[[{"node":"Merge1","type":"main","index":0}],[{"node":"Generate Image1","type":"main","index":0}]]},"Header Image Logic":{"main":[[{"node":"Header Image Router","type":"main","index":0}]]},"Hook Image Logic":{"main":[[{"node":"Hook Image Router","type":"main","index":0}]]},"Information Image Logic":{"main":[[{"node":"Info Image Router","type":"main","index":0}]]},"CTA Image Logic":{"main":[[{"node":"CTA Image Router","type":"main","index":0}]]},"Generate Image1":{"main":[[{"node":"Convert to File","type":"main","index":0}]]},"Convert to File":{"main":[[{"node":"Process Generated Image","type":"main","index":0}]]},"URL or Generate Router1":{"main":[[{"node":"Merge1","type":"main","index":1}],[{"node":"Generate Image","type":"main","index":0}]]},"Convert to File1":{"main":[[{"node":"Process Generated Image1","type":"main","index":0}]]},"Generate Image":{"main":[[{"node":"Convert to File1","type":"main","index":0}]]},"URL or Generate Router2":{"main":[[{"node":"Merge1","type":"main","index":2}],[{"node":"Generate Image2","type":"main","index":0}]]},"Convert to File2":{"main":[[{"node":"Process Generated Image2","type":"main","index":0}]]},"Generate Image2":{"main":[[{"node":"Convert to File2","type":"main","index":0}]]},"URL or Generate Router3":{"main":[[{"node":"Merge1","type":"main","index":3}],[{"node":"Generate Image3","type":"main","index":0}]]},"Convert to File3":{"main":[[{"node":"Process Generated Image3","type":"main","index":0}]]},"Generate Image3":{"main":[[{"node":"Convert to File3","type":"main","index":0}]]},"Process Generated Image1":{"main":[[{"node":"Combine All Email Data","type":"main","index":0}]]},"Process Generated Image2":{"main":[[{"node":"Combine All Email Data","type":"main","index":0}]]},"Process Generated Image3":{"main":[[{"node":"Combine All Email Data","type":"main","index":0}]]},"Merge1":{"main":[[{"node":"Process URL Image","type":"main","index":0}]]},"Combine All Email Data":{"main":[[{"node":"HTML Email Assembly Node","type":"main","index":0}]]},"HTML Email Assembly Node":{"main":[[{"node":"Mailchimp Campaign Preparation","type":"main","index":0}]]},"Mailchimp Campaign Preparation":{"main":[[{"node":"Create Campaign Mailchimp","type":"main","index":0}]]},"Create Campaign Mailchimp":{"main":[[{"node":"Prepare Content for Mailchimp","type":"main","index":0}]]},"Prepare Content for Mailchimp":{"main":[[{"node":"Set Campaign Content","type":"main","index":0}]]},"ImgBB Upload Preparation":{"main":[[{"node":"HTTP Request (ImgBB)","type":"main","index":0}]]},"HTTP Request (ImgBB)":{"main":[[{"node":"ImgBB Response Processor","type":"main","index":0}]]},"ImgBB Response Processor":{"main":[[{"node":"Merge1","type":"main","index":0}]]},"ImgBB Upload Preparation1":{"main":[[{"node":"HTTP Request (ImgBB)1","type":"main","index":0}]]},"HTTP Request (ImgBB)1":{"main":[[{"node":"ImgBB Response Processor1","type":"main","index":0}]]},"ImgBB Upload Preparation2":{"main":[[{"node":"HTTP Request (ImgBB)2","type":"main","index":0}]]},"HTTP Request (ImgBB)2":{"main":[[{"node":"ImgBB Response Processor2","type":"main","index":0}]]},"ImgBB Upload Preparation3":{"main":[[{"node":"HTTP Request (ImgBB)3","type":"main","index":0}]]},"HTTP Request (ImgBB)3":{"main":[[{"node":"ImgBB Response Processor3","type":"main","index":0}]]},"ImgBB Response Processor3":{"main":[[{"node":"Merge1","type":"main","index":3}]]},"ImgBB Response Processor2":{"main":[[{"node":"Merge1","type":"main","index":2}]]},"ImgBB Response Processor1":{"main":[[{"node":"Merge1","type":"main","index":1}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{"VS Sports Email Campaign Form":[{"json":{"Campaign Name":"Introducing Rugby Analytics for Elite Performance","Email Type":"Promotional/Special Offer","Sport Category":"Rugby","Target Audience":"Coaches","Email Focus/Description":"We want to promote the product in the US. As South Africans with three Rugby World Cup titles, we know elite performance. Our Rugby Analytics platform, now launched in the USA, brings our expertise from working with top-tier organizations like the US Olympic team to rugby.\r\nHere’s how we empower your team:\r\nFull team analytics with match video linked to stats.\r\nTrack performance over a season with aggregated data.\r\nEnable scouting and recruitment with detailed insights.\r\n","Campaign Priority":"High","Send Date":"2025-06-19","Header Image Upload":{"filename":"Heading-2.gif","mimetype":"image/gif","size":359177},"Header Image URL":"","Section 1 (Hook) Image Upload":{"filename":"Rugby Product Click Through.gif","mimetype":"image/gif","size":17078377},"Section 1 (Hook) Image URL":"","Section 2 (Information) Image Upload":null,"Section 2 (Information) Image URL":"https://www.canva.com/design/DAGqtz12i_M/vnUu0bWFs18ulxuoC5RPmQ/view?utm_content=DAGqtz12i_M&utm_campaign=designshare&utm_medium=link2&utm_source=uniquelinks&utlId=h27488eafb7","CTA Section Image Upload":null,"CTA Section Image URL":"https://calendly.com/vssports/vs-rugbyanalytics-demo","Additional Notes":"Schedule a demo by July 31, 2025, and we’ll provide free analytics for one of your matches (if you have footage). Book now at ","submittedAt":"2025-06-18T11:41:57.590-04:00","formMode":"production"}}]},"versionId":"d0d57275-4a4e-4485-b3a6-ca229df57ebb","triggerCount":1,"shared":[{"createdAt":"2025-06-16T16:28:53.617Z","updatedAt":"2025-06-16T16:28:53.617Z","role":"workflow:owner","workflowId":"z2REPW3Q1U2m4Qvb","projectId":"pRXFeKq9D8e0hAOx"}],"tags":[]},{"createdAt":"2025-07-14T11:28:36.123Z","updatedAt":"2025-07-14T11:28:36.123Z","id":"zVLb8xJbWPsrMOeD","name":"update-status-subflow","active":false,"isArchived":false,"nodes":[],"connections":{},"settings":{"executionOrder":"v1"},"staticData":null,"meta":null,"pinData":{},"versionId":"d50c146a-3846-4b65-8be8-adc18a210209","triggerCount":0,"shared":[{"createdAt":"2025-07-14T11:28:36.134Z","updatedAt":"2025-07-14T11:28:36.134Z","role":"workflow:owner","workflowId":"zVLb8xJbWPsrMOeD","projectId":"pRXFeKq9D8e0hAOx"}],"tags":[]},{"createdAt":"2025-06-27T06:19:05.704Z","updatedAt":"2025-07-03T11:22:29.000Z","id":"zaFTU98fCjrQWwj3","name":"Image Generation Old","active":false,"isArchived":false,"nodes":[{"parameters":{"path":"Advanced_Image_Generator","formTitle":"Advanced Image Generator","formDescription":"Generate images using multiple AI models with optional reference images","formFields":{"values":[{"fieldLabel":"Image Title","placeholder":"My Generated Image","requiredField":true},{"fieldLabel":"Image Prompt","fieldType":"textarea","placeholder":"A beautiful landscape with mountains and a lake at sunset","requiredField":true},{"fieldLabel":"Image Model","fieldType":"dropdown","fieldOptions":{"values":[{"option":"openai/gpt-image-1"},{"option":"black-forest-labs/flux-1.1-pro-ultra"},{"option":"black-forest-labs/FLUX-1.1-pro"},{"option":"black-forest-labs/flux-kontext-pro"},{"option":"stabilityai/sdxl-turbo"},{"option":"stabilityai/sdxl-turbo:free"},{"option":"black-forest-labs/FLUX-1-schnell:free"},{"option":"google/gemini-2.0-flash-exp:free"}]},"requiredField":true},{"fieldLabel":"Image Style","fieldType":"dropdown","fieldOptions":{"values":[{"option":"Photorealistic"},{"option":"Artistic"},{"option":"Cartoon"},{"option":"Abstract"},{"option":"Photo realism"}]}},{"fieldLabel":"Image URL","placeholder":"https://example.com/reference-image.jpg"},{"fieldLabel":"Upload Image","fieldType":"file","multipleFiles":false}]},"responseMode":"responseNode","options":{}},"id":"1f5b7527-33f3-4b0b-ba73-0a63d20073cb","name":"Image Generator Form","type":"n8n-nodes-base.formTrigger","position":[-960,80],"webhookId":"advanced-image-gen","typeVersion":2.1},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"has-reference-image","leftValue":"={{ $json['Image URL'] !== '' || $json['Upload Image'] !== undefined }}","rightValue":true,"operator":{"type":"boolean","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[-740,75],"id":"d44d459f-bfda-4bdb-8413-6d64cb181995","name":"Has Reference Image?"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"has-url","leftValue":"={{ $json['Image URL'] }}","rightValue":"","operator":{"type":"string","operation":"notEmpty"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[-520,0],"id":"a3744cd8-61ef-4f6f-89b0-3779c97e0a78","name":"URL or Upload?"},{"parameters":{"url":"={{ $json['Image URL'] }}","options":{"response":{"response":{"responseFormat":"file"}}}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-300,-100],"id":"532f892d-ccde-45d6-8ec4-17f2b72cb8eb","name":"Download Reference Image"},{"parameters":{"operation":"binaryToPropery","destinationKey":"reference_image_base64","options":{}},"type":"n8n-nodes-base.extractFromFile","typeVersion":1,"position":[-80,-100],"id":"ab02974f-791a-49bc-b2db-f963b1a597e9","name":"Convert to Base64"},{"parameters":{"jsCode":"// Get the uploaded image and convert to base64\nconst item = $input.all()[0];\n\nif (item.binary && item.binary['Upload Image']) {\n  // Convert binary data to base64\n  const binaryData = item.binary['Upload Image'];\n  const base64String = binaryData.data;\n  \n  return [{\n    json: {\n      ...item.json,\n      reference_image_base64: base64String\n    }\n  }];\n} else {\n  return [{\n    json: {\n      ...item.json,\n      reference_image_base64: null\n    }\n  }];\n}"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-200,220],"id":"29dbef46-52de-4963-9b71-3ea01615040d","name":"Process Upload"},{"parameters":{"jsCode":"// Check if the selected model supports reference images\nconst item = $input.all()[0];\nconst selectedModel = item.json['Image Model'];\nconst hasReferenceImage = item.json.reference_image_base64;\n\n// Models that support reference images (mainly OpenAI models)\nconst modelsWithReferenceSupport = [\n  'openai/gpt-image-1'\n];\n\nconst supportsReference = modelsWithReferenceSupport.includes(selectedModel);\n\n// Create the final prompt with style\nconst basePrompt = item.json['Image Prompt'];\nconst style = item.json['Image Style'] || '';\n\nlet finalPrompt = basePrompt;\nif (style && style !== '') {\n  finalPrompt = `${basePrompt}. Style: ${style}`;\n}\n\nreturn [{\n  json: {\n    ...item.json,\n    final_prompt: finalPrompt,\n    model_supports_reference: supportsReference,\n    has_reference_image: !!hasReferenceImage,\n    show_warning: hasReferenceImage && !supportsReference\n  }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[140,100],"id":"d347ea57-c9c1-40a3-ae09-a2bd95cd2718","name":"Prepare Generation Data"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"should-warn","leftValue":"={{ $json.show_warning }}","rightValue":true,"operator":{"type":"boolean","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[360,100],"id":"fdc342cb-cc84-499e-b619-f207f92de4d4","name":"Show Warning?"},{"parameters":{"respondWith":"json","responseBody":"{\n  \"status\": \"warning\",\n  \"message\": \"Reference image provided but selected model ({{ $json['Image Model'] }}) does not support reference images. Only OpenAI models support reference images. Proceeding with prompt-only generation.\",\n  \"model\": \"{{ $json['Image Model'] }}\",\n  \"proceeding\": true\n}","options":{}},"id":"96db643c-9cee-48ce-b14b-a3c923503de7","name":"Show Reference Warning","type":"n8n-nodes-base.respondToWebhook","position":[580,-25],"typeVersion":1.1},{"parameters":{"method":"POST","url":"=https://api.imagerouter.io/v1/","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"application/json"}]},"sendBody":true,"specifyBody":"json","jsonBody":"={\n  \"prompt\": {{ JSON.stringify($json.final_prompt) }},\n  \"model\": {{ JSON.stringify($json['Image Model']) }},\n  \"size\": \"1024x1024\",\n  \"response_format\": \"b64_json\"\n}","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[580,180],"id":"fb3ccd3d-ee64-47e0-8475-4c4599706a9d","name":"Generate Image","credentials":{"httpHeaderAuth":{"id":"SXSX6BeLy1O98vMU","name":"ImageRouter"}}},{"parameters":{"jsCode":"// Process the ImageRouter.io response and extract base64 data\nconst item = $input.all()[0];\nconst response = item.json;\n\ntry {\n  let base64Data = null;\n  let imageUrl = null;\n  \n  // Handle different response formats from ImageRouter.io\n  if (response.data && Array.isArray(response.data) && response.data.length > 0) {\n    const imageData = response.data[0];\n    \n    // Check for base64 format\n    if (imageData.b64_json) {\n      base64Data = imageData.b64_json;\n    }\n    // Check for URL format\n    else if (imageData.url) {\n      imageUrl = imageData.url;\n    }\n  }\n  \n  // Get original form data\n  const originalData = $('Image Generator Form').first().json;\n  \n  return [{\n    json: {\n      ...originalData,\n      generation_successful: true,\n      image_base64: base64Data,\n      image_url: imageUrl,\n      response_format: base64Data ? 'base64' : 'url',\n      model_used: originalData['Image Model'],\n      prompt_used: $('Prepare Generation Data').first().json.final_prompt,\n      timestamp: new Date().toISOString()\n    }\n  }];\n} catch (error) {\n  return [{\n    json: {\n      generation_successful: false,\n      error: error.message,\n      timestamp: new Date().toISOString()\n    }\n  }];\n}"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[800,175],"id":"559c58c5-ea56-4096-90f8-341449c31d20","name":"Process Response"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"need-download","leftValue":"={{ $json.response_format === 'url' }}","rightValue":true,"operator":{"type":"boolean","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[1020,175],"id":"506fe53c-389e-43b0-aab7-4c5589438987","name":"Need Download?"},{"parameters":{"url":"={{ $json.image_url }}","options":{"response":{"response":{"responseFormat":"file"}}}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[1240,100],"id":"dd4908a5-286f-4651-a061-aca875a408aa","name":"Download Generated Image"},{"parameters":{"operation":"binaryToPropery","destinationKey":"image_base64_downloaded","options":{}},"type":"n8n-nodes-base.extractFromFile","typeVersion":1,"position":[1460,100],"id":"5b7863f0-f148-442b-9b2c-f8d94a61d9c9","name":"Convert Downloaded to Base64"},{"parameters":{"jsCode":"// Merge the downloaded base64 data back into the main flow\nconst mainItem = $('Process Response').first().json;\nconst downloadedItem = $input.first().json;\n\nreturn [{\n  json: {\n    ...mainItem,\n    image_base64: downloadedItem.image_base64_downloaded,\n    response_format: 'base64'\n  }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1680,100],"id":"4ecdf6ff-a02a-4643-afd2-6cf5e90facd8","name":"Merge Download Data"},{"parameters":{"jsCode":"// Final output preparation - ensure we have base64 data to pass to next node\nconst item = $input.all()[0];\n\nif (item.json.generation_successful && item.json.image_base64) {\n  return [{\n    json: {\n      title: item.json['Image Title'],\n      prompt: item.json.prompt_used,\n      model: item.json.model_used,\n      style: item.json['Image Style'],\n      image_base64: item.json.image_base64,\n      generation_successful: true,\n      timestamp: item.json.timestamp,\n      // Additional metadata for next nodes\n      metadata: {\n        original_prompt: item.json['Image Prompt'],\n        had_reference_image: !!item.json.reference_image_base64,\n        model_supported_reference: item.json.model_supports_reference\n      }\n    }\n  }];\n} else {\n  return [{\n    json: {\n      generation_successful: false,\n      error: item.json.error || 'Unknown error occurred',\n      timestamp: item.json.timestamp\n    }\n  }];\n}"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1900,175],"id":"83036b01-928b-47f1-9495-0f3af0a45c09","name":"Final Output"},{"parameters":{"operation":"toBinary","sourceProperty":"image_base64","binaryPropertyName":"image_base64","options":{}},"type":"n8n-nodes-base.convertToFile","typeVersion":1.1,"position":[2120,175],"id":"501b4f03-0337-474f-8475-6cce65702c09","name":"Convert to File"},{"parameters":{"method":"POST","url":"https://api.replicate.com/v1/predictions","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"application/json"}]},"sendBody":true,"specifyBody":"json","jsonBody":"={\n  \"model\": \"{{ $json.selected_model }}\",\n  \"input\": {{ JSON.stringify($json.replicate_input) }}\n}","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[260,1140],"id":"7c93a479-e061-4ac6-903f-8f8e8535c5bc","name":"Create Prediction","credentials":{"httpHeaderAuth":{"id":"JlfTRouEz1b1K4bJ","name":"Flux Replicate Auth account"}}},{"parameters":{"amount":10},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[560,1140],"id":"4415ad72-5bca-4ea8-bfd3-52ec28c17856","name":"Wait Initial","webhookId":"prediction-wait"},{"parameters":{"url":"=https://api.replicate.com/v1/predictions/{{ $json.id }}","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[760,1140],"id":"d2cc9fd6-be14-4ad9-aea9-d70c8d6ed2a2","name":"Check Status","credentials":{"httpHeaderAuth":{"id":"y97zmr8F665tRMyl","name":"Together.ai Auth account"}}},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"is-complete","leftValue":"={{ $json.status }}","rightValue":"succeeded","operator":{"type":"string","operation":"equals"}}],"combinator":"or"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[960,1140],"id":"8cc25a9d-85e1-46f9-bcb2-327e384e0f85","name":"Is Complete?"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"is-failed","leftValue":"={{ $json.status }}","rightValue":"failed","operator":{"type":"string","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[1140,1380],"id":"d1f9dbbc-b4d0-4d01-ad69-76a0677a4483","name":"Is Failed?"},{"parameters":{},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[560,1420],"id":"0a7579ed-627a-4d44-abb7-3c1b0c846cc8","name":"Wait Retry","webhookId":"prediction-retry"},{"parameters":{"jsCode":"// Process successful prediction and download the generated image\nconst item = $input.all()[0];\nconst prediction = item.json;\n\nif (prediction.status === 'succeeded' && prediction.output) {\n  // Replicate returns output as an array of URLs usually\n  let imageUrl = null;\n  \n  if (Array.isArray(prediction.output)) {\n    imageUrl = prediction.output[0];\n  } else if (typeof prediction.output === 'string') {\n    imageUrl = prediction.output;\n  }\n  \n  if (imageUrl) {\n    return [{\n      json: {\n        ...prediction,\n        image_url: imageUrl,\n        generation_successful: true,\n        // Pass through original form data\n        original_data: $('Image Generator Form1').first().json,\n        generation_data: $('Prepare Generation Data1').first().json\n      }\n    }];\n  }\n}\n\nreturn [{\n  json: {\n    ...prediction,\n    generation_successful: false,\n    error: prediction.error || 'No output generated',\n    original_data: $('Image Generator Form1').first().json\n  }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1160,1040],"id":"fd2b525f-4419-41c3-91e5-cb44d0370273","name":"Process Success"},{"parameters":{"jsCode":"// Handle failed prediction\nconst item = $input.all()[0];\nconst prediction = item.json;\n\nreturn [{\n  json: {\n    generation_successful: false,\n    error: prediction.error || 'Prediction failed',\n    status: prediction.status,\n    timestamp: new Date().toISOString(),\n    replicate_prediction_id: prediction.id,\n    original_data: $('Image Generator Form1').first().json\n  }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1480,1440],"id":"11fb7840-eea2-43c8-baf2-2afa28b529bb","name":"Process Failure"},{"parameters":{"path":"Advanced_Image_Generator_Replicate","formTitle":"Advanced Image Generator (Replicate)","formDescription":"Generate images using Replicate's AI models with optional reference images","formFields":{"values":[{"fieldLabel":"Image Title","placeholder":"My Generated Image","requiredField":true},{"fieldLabel":"Image Prompt","fieldType":"textarea","placeholder":"A beautiful landscape with mountains and a lake at sunset","requiredField":true},{"fieldLabel":"Image Model","fieldType":"dropdown","fieldOptions":{"values":[{"option":"black-forest-labs/flux-schnell"},{"option":"black-forest-labs/flux-dev"},{"option":"black-forest-labs/flux-1.1-pro-ultra"},{"option":"stability-ai/stable-diffusion-3.5-large"},{"option":"stability-ai/sdxl-turbo"},{"option":"recraft-ai/recraft-v3"},{"option":"ideogram-ai/ideogram-v2"},{"option":"bytedance/sdxl-lightning-4step"}]},"requiredField":true},{"fieldLabel":"Image Style","fieldType":"dropdown","fieldOptions":{"values":[{"option":"Photorealistic"},{"option":"Artistic"},{"option":"Cartoon"},{"option":"Abstract"},{"option":"Photo realism"}]}},{"fieldLabel":"Image URL","placeholder":"https://example.com/reference-image.jpg"},{"fieldLabel":"Upload Image","fieldType":"file","multipleFiles":false}]},"responseMode":"responseNode","options":{}},"id":"b61fc0d1-6ec5-4f42-b522-b843c275dd45","name":"Image Generator Form1","type":"n8n-nodes-base.formTrigger","position":[-1040,1040],"webhookId":"advanced-image-gen-replicate","typeVersion":2.1},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"has-reference-image","leftValue":"={{ $json['Image URL'] !== '' || $json['Upload Image'] !== undefined }}","rightValue":true,"operator":{"type":"boolean","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[-840,1040],"id":"a35a046b-29d1-4dc7-ad6f-12e71e31bcb1","name":"Has Reference Image?1"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"has-url","leftValue":"={{ $json['Image URL'] }}","rightValue":"","operator":{"type":"string","operation":"notEmpty"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[-640,840],"id":"fafad62c-70c7-4c44-bfd3-d05d58b4f483","name":"URL or Upload?1"},{"parameters":{"url":"={{ $json['Image URL'] }}","options":{"response":{"response":{"responseFormat":"file"}}}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-380,820],"id":"cb333db5-10ad-4aeb-8ac0-13016ead95f1","name":"Download Reference Image1"},{"parameters":{"operation":"binaryToPropery","destinationKey":"image_base64","options":{}},"type":"n8n-nodes-base.extractFromFile","typeVersion":1,"position":[1560,1040],"id":"6266c587-00be-45a6-bce0-92a2cd5ef33f","name":"Convert to Base65"},{"parameters":{"jsCode":"// Get the uploaded image and convert to base64\nconst item = $input.all()[0];\n\nif (item.binary && item.binary['Upload Image']) {\n  // Convert binary data to base64\n  const binaryData = item.binary['Upload Image'];\n  const base64String = binaryData.data;\n  \n  return [{\n    json: {\n      ...item.json,\n      reference_image_base64: base64String\n    }\n  }];\n} else {\n  return [{\n    json: {\n      ...item.json,\n      reference_image_base64: null\n    }\n  }];\n}"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-640,1220],"id":"98d766fe-74ac-4750-bb5a-1ac54fa965c1","name":"Process Upload1"},{"parameters":{"jsCode":"// Check if the selected model supports reference images and prepare data\nconst item = $input.all()[0];\nconst selectedModel = item.json['Image Model'];\nconst hasReferenceImage = item.json.reference_image_base64;\n\n// Models that support reference images on Replicate\n// Note: This varies by model - some Flux models support img2img, some SDXL models do too\nconst modelsWithReferenceSupport = [\n  'stability-ai/stable-diffusion-3.5-large',\n  'stability-ai/sdxl-turbo'\n  // Add more as needed - Replicate models vary in their input support\n];\n\nconst supportsReference = modelsWithReferenceSupport.includes(selectedModel);\n\n// Create the final prompt with style\nconst basePrompt = item.json['Image Prompt'];\nconst style = item.json['Image Style'] || '';\n\nlet finalPrompt = basePrompt;\nif (style && style !== '') {\n  finalPrompt = `${basePrompt}. Style: ${style}`;\n}\n\n// Prepare input object for Replicate API\nlet input = {\n  prompt: finalPrompt\n};\n\n// Add reference image if model supports it and we have one\nif (supportsReference && hasReferenceImage) {\n  input.image = `data:image/jpeg;base64,${hasReferenceImage}`;\n}\n\nreturn [{\n  json: {\n    ...item.json,\n    final_prompt: finalPrompt,\n    model_supports_reference: supportsReference,\n    has_reference_image: !!hasReferenceImage,\n    show_warning: hasReferenceImage && !supportsReference,\n    replicate_input: input,\n    selected_model: selectedModel\n  }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-360,1220],"id":"bd8da37e-47d8-4c66-b313-ab6b912d6c79","name":"Prepare Generation Data1"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"should-warn","leftValue":"={{ $json.show_warning }}","rightValue":true,"operator":{"type":"boolean","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[20,1040],"id":"ce569e2d-3b40-4cd1-98dd-cf341a032879","name":"Show Warning?1"},{"parameters":{"respondWith":"json","responseBody":"{\n  \"status\": \"warning\",\n  \"message\": \"Reference image provided but selected model ({{ $json.selected_model }}) may not support reference images. Only select models like SDXL variants support img2img. Proceeding with prompt-only generation.\",\n  \"model\": \"{{ $json.selected_model }}\",\n  \"proceeding\": true\n}","options":{}},"id":"44d5387a-b89d-4029-943d-5e8d58cdab4b","name":"Show Reference Warning1","type":"n8n-nodes-base.respondToWebhook","position":[260,980],"typeVersion":1.1},{"parameters":{"url":"={{ $json.image_url }}","options":{"response":{"response":{"responseFormat":"file"}}}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[1360,1040],"id":"9c3ab5aa-9bac-4df5-a18c-bda3c62fa7e4","name":"Download Generated Image1"},{"parameters":{"jsCode":"// Final output preparation with all metadata\nconst item = $input.all()[0];\nconst originalData = item.json.original_data;\nconst generationData = item.json.generation_data;\n\nif (item.json.generation_successful && item.json.image_base64) {\n  return [{\n    json: {\n      title: originalData['Image Title'],\n      prompt: generationData.final_prompt,\n      model: generationData.selected_model,\n      style: originalData['Image Style'],\n      image_base64: item.json.image_base64,\n      generation_successful: true,\n      timestamp: new Date().toISOString(),\n      replicate_prediction_id: item.json.id,\n      // Additional metadata for next nodes\n      metadata: {\n        original_prompt: originalData['Image Prompt'],\n        had_reference_image: generationData.has_reference_image,\n        model_supported_reference: generationData.model_supports_reference,\n        generation_time: item.json.metrics?.predict_time || null,\n        replicate_urls: item.json.urls\n      }\n    }\n  }];\n} else {\n  return [{\n    json: {\n      generation_successful: false,\n      error: item.json.error || 'Generation failed',\n      timestamp: new Date().toISOString(),\n      replicate_prediction_id: item.json.id\n    }\n  }];\n}"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1760,1040],"id":"c0f8cc04-27d8-41a7-a389-daf129ce31e1","name":"Final Output1"},{"parameters":{"method":"POST","url":"https://api.openai.com/v1/images/edits","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"contentType":"multipart-form-data","bodyParameters":{"parameters":[{"parameterType":"formBinaryData","name":"image","inputDataFieldName":"Upload_Reference_Image"},{"name":"prompt","value":"=Create a new professional product image based on the reference image provided with these specifications:\n\nScene Description: \nImage Prompt: {{ $json['Image Prompt'] }}\nImage Style: {{ $json['Image Style'] }}\nProduct: \nBrand Colors: \n\nGenerate a \"{{ $json['Image Style'] }}\" image that:\n- Maintains clean, minimalistic, and elegant visual style\n- Highlights the product as the main subject with sharp detail and perfect lighting\n- Uses backgrounds that complement but do not overpower the product\n- Includes professional studio lighting with soft shadows\n- Emphasizes \"\", texture, and color accuracy\n- Maintains a high-end, premium iPhone-style look and feel\n- Uses this image: "},{"name":"model","value":"gpt-image-1"},{"name":"size","value":"=1024x1536"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[620,2960],"id":"7c898972-8de5-400a-916b-8a1f445a8c53","name":"Create Image1","credentials":{"httpHeaderAuth":{"id":"z06CbCGaeEeBPVIt","name":"GPT Image Generator"}}},{"parameters":{"operation":"toBinary","sourceProperty":"data[0].b64_json","options":{}},"type":"n8n-nodes-base.convertToFile","typeVersion":1.1,"position":[820,2960],"id":"ed928d77-f0a4-4080-a9a9-b1a0d7b63d03","name":"Convert to File1"},{"parameters":{"rules":{"values":[{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"new-image","leftValue":"={{ $json['Image Model'] }}","rightValue":"openai/gpt-image-1","operator":{"type":"string","operation":"equals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"Gpt Edit Image"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"url-image","leftValue":"={{ $json['Image Model'] }}","rightValue":"black-forest-labs/flux-kontext-dev","operator":{"type":"string","operation":"equals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"Flix Image generate"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"upload-image","leftValue":"={{ $json['Image Prompt'] }}","rightValue":"Upload Image Style","operator":{"type":"string","operation":"equals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"Upload Image"}]},"options":{}},"type":"n8n-nodes-base.switch","typeVersion":3.2,"position":[180,2980],"id":"8a6e9000-d25e-4495-9eb6-8c6c4902aded","name":"Image Type Router1"},{"parameters":{"path":"0ca32fd3-c33a-48ef-936d-b4a9bfa15fd7","formTitle":"Advanced Image Generator (Simplified)","formDescription":"Generate images with three distinct workflows","formFields":{"values":[{"fieldLabel":"Image Title","placeholder":"My Generated Image","requiredField":true},{"fieldLabel":"Image Type","fieldType":"dropdown","fieldOptions":{"values":[{"option":"New Image Generation"},{"option":"URL Image Style"},{"option":"Upload Image Style"},{"option":"Edit Image"}]},"requiredField":true},{"fieldLabel":"Image Prompt","fieldType":"textarea","placeholder":"A beautiful landscape with mountains and a lake at sunset","requiredField":true},{"fieldLabel":"Image Model","fieldType":"dropdown","fieldOptions":{"values":[{"option":"black-forest-labs/flux-schnell"},{"option":"black-forest-labs/flux-dev"},{"option":"black-forest-labs/flux-1.1-pro-ultra"},{"option":"stability-ai/stable-diffusion-3.5-large"},{"option":"stability-ai/sdxl-turbo"},{"option":"recraft-ai/recraft-v3"},{"option":"ideogram-ai/ideogram-v2"},{"option":"bytedance/sdxl-lightning-4step"},{"option":"openai/gpt-image-1"},{"option":"black-forest-labs/flux-kontext-dev"},{"option":"black-forest-labs/flux-kontext-pro"}]},"requiredField":true},{"fieldLabel":"Image Style","fieldType":"dropdown","fieldOptions":{"values":[{"option":"Photorealistic"},{"option":"Artistic"},{"option":"Cartoon"},{"option":"Abstract"},{"option":"Photo realism"}]}},{"fieldLabel":"Reference Image URL","placeholder":"https://example.com/reference-image.jpg (only for URL Image Style)"},{"fieldLabel":"Upload Reference Image","fieldType":"file","multipleFiles":false}]},"options":{}},"id":"5af8bf61-65ad-4b6f-84b4-d6b1edb8bf68","name":"Image Generator Form3","type":"n8n-nodes-base.formTrigger","position":[-640,2380],"webhookId":"0ca32fd3-c33a-48ef-936d-b4a9bfa15fd7","typeVersion":2.1},{"parameters":{"rules":{"values":[{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"new-image","leftValue":"={{ $json['Image Type'] }}","rightValue":"New Image Generation","operator":{"type":"string","operation":"equals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"New Image"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"url-image","leftValue":"={{ $json['Image Type'] }}","rightValue":"URL Image Style","operator":{"type":"string","operation":"equals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"URL Image"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"upload-image","leftValue":"={{ $json['Image Type'] }}","rightValue":"Upload Image Style","operator":{"type":"string","operation":"equals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"Upload Image"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"b10f2675-086d-412f-801c-7e0b1deff44c","leftValue":"={{ $json['Image Type'] }}","rightValue":"Edit Image","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"Edit Image"}]},"options":{}},"type":"n8n-nodes-base.switch","typeVersion":3.2,"position":[-440,2380],"id":"67e60e76-f928-42b2-ac82-12b330fc51df","name":"Image Type Router2"},{"parameters":{"jsCode":"// Prepare data for NEW IMAGE GENERATION (text-to-image)\nconst item = $input.all()[0];\n\nconst basePrompt = item.json['Image Prompt'];\nconst style = item.json['Image Style'] || '';\n\nlet finalPrompt = basePrompt;\nif (style && style !== '') {\n  finalPrompt = `${basePrompt}. Style: ${style}`;\n}\n\nconst input = {\n  prompt: finalPrompt\n};\n\nreturn [{\n  json: {\n    ...item.json,\n    final_prompt: finalPrompt,\n    replicate_input: input,\n    workflow_type: 'new_image'\n  }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-60,2220],"id":"e4ae4a7e-656e-42b5-9485-d26b431f3602","name":"Prepare New Image1"},{"parameters":{"url":"={{ $json['Reference Image URL'] }}","options":{"response":{"response":{"responseFormat":"file"}}}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[220,2760],"id":"7dd2bcdb-ff74-4cd2-9d8e-dde8774ce4a8","name":"Download URL Image1"},{"parameters":{"operation":"binaryToPropery","destinationKey":"reference_image_base64","options":{}},"type":"n8n-nodes-base.extractFromFile","typeVersion":1,"position":[380,4300],"id":"ab8c69e3-7588-4d29-a863-51500135c8df","name":"Convert URL to Base"},{"parameters":{"jsCode":"// Prepare data for URL IMAGE STYLE (img2img from URL)\nconst item = $input.all()[0];\n\nconst basePrompt = item.json['Image Prompt'];\nconst style = item.json['Image Style'] || '';\n\nlet finalPrompt = basePrompt;\nif (style && style !== '') {\n  finalPrompt = `${basePrompt}. Style: ${style}`;\n}\n\nconst input = {\n  prompt: finalPrompt,\n  image: `data:image/jpeg;base64,${item.json.reference_image_base64}`\n};\n\nreturn [{\n  json: {\n    ...item.json,\n    final_prompt: finalPrompt,\n    replicate_input: input,\n    workflow_type: 'url_image'\n  }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[620,4300],"id":"4e82fd3a-1f45-449c-b4e2-8d5bbe8cc588","name":"Prepare URL Image1"},{"parameters":{"jsCode":"// Process uploaded image and prepare for UPLOAD IMAGE STYLE\nconst item = $input.all()[0];\n\n// Debug: Log available binary keys\nconsole.log('Available binary keys:', Object.keys(item.binary || {}));\nconsole.log('Full item structure:', JSON.stringify(item, null, 2));\n\n// Check for various possible binary key names\nlet binaryData = null;\nlet binaryKey = null;\n\nif (item.binary) {\n  // Try different possible key names\n  const possibleKeys = [\n    'Upload Reference Image',\n    'upload-reference-image',\n    'uploadReferenceImage',\n    'file',\n    'data'\n  ];\n  \n  for (const key of possibleKeys) {\n    if (item.binary[key]) {\n      binaryData = item.binary[key];\n      binaryKey = key;\n      break;\n    }\n  }\n  \n  // If none found, try the first available key\n  if (!binaryData) {\n    const keys = Object.keys(item.binary);\n    if (keys.length > 0) {\n      binaryKey = keys[0];\n      binaryData = item.binary[binaryKey];\n    }\n  }\n}\n\nif (!binaryData) {\n  throw new Error(`No image uploaded. Available binary keys: ${Object.keys(item.binary || {}).join(', ')}`);\n}\n\nconsole.log(`Using binary key: ${binaryKey}`);\n\nconst base64String = binaryData.data;\n\nconst basePrompt = item.json['Image Prompt'];\nconst style = item.json['Image Style'] || '';\n\nlet finalPrompt = basePrompt;\nif (style && style !== '') {\n  finalPrompt = `${basePrompt}. Style: ${style}`;\n}\n\nconst input = {\n  prompt: finalPrompt,\n  image: `data:image/jpeg;base64,${base64String}`\n};\n\nreturn [{\n  json: {\n    ...item.json,\n    final_prompt: finalPrompt,\n    replicate_input: input,\n    workflow_type: 'upload_image',\n    debug_binary_key: binaryKey\n  }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[400,4140],"id":"0103eaab-04a3-4627-8355-37ac4a30870d","name":"Prepare Upload Image1"},{"parameters":{"method":"POST","url":"=https://api.replicate.com/v1/models/{{ $json['Image Model'] }}/predictions","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"application/json"}]},"sendBody":true,"specifyBody":"json","jsonBody":"={\n\"input\": {\n\"prompt\": \"{{ $json['Image Prompt'] }}\",\n\"seed\": 42,\n\"steps\": 50,\n\"guidance\": 5,\n\"interval\": 1,\n\"aspect_ratio\": \"1:1\",\n\"safety_tolerance\": 3\n}\n}","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[480,2040],"id":"3ac6f96f-2f8b-43b8-802c-d389787281d9","name":"Create Prediction2","credentials":{"httpHeaderAuth":{"id":"JlfTRouEz1b1K4bJ","name":"Flux Replicate Auth account"}}},{"parameters":{"amount":10},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[680,2040],"id":"60b3f591-2bde-4dff-8509-c55f5ecd2c7a","name":"Wait Initial2","webhookId":"prediction-wait"},{"parameters":{"url":"=https://api.replicate.com/v1/predictions/{{ $json.id }}","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[880,2040],"id":"2cdf236c-016d-406e-8d6e-2cdf12802cff","name":"Check Status2","credentials":{"httpHeaderAuth":{"id":"JlfTRouEz1b1K4bJ","name":"Flux Replicate Auth account"}}},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"is-complete","leftValue":"={{ $json.status }}","rightValue":"succeeded","operator":{"type":"string","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[1080,2040],"id":"4256b77f-2885-4835-b958-2089572dbe99","name":"Is Complete?2"},{"parameters":{},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[1500,2180],"id":"5404c782-0bf0-4603-9120-79adbd95d362","name":"Wait Retry2","webhookId":"prediction-retry"},{"parameters":{"jsCode":"// Extract image URL from successful prediction\nconst item = $input.all()[0];\nconst prediction = item.json;\n\nif (prediction.status === 'succeeded' && prediction.output) {\n  let imageUrl = null;\n  \n  if (Array.isArray(prediction.output)) {\n    imageUrl = prediction.output[0];\n  } else if (typeof prediction.output === 'string') {\n    imageUrl = prediction.output;\n  }\n  \n  if (imageUrl) {\n    return [{\n      json: {\n        ...prediction,\n        image_url: imageUrl,\n        generation_successful: true\n      }\n    }];\n  }\n}\n\nthrow new Error('No valid image output found');"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1280,1940],"id":"91740260-b992-4672-b297-a510948d2dae","name":"Extract Image URL1"},{"parameters":{"url":"={{ $json.image_url }}","options":{"response":{"response":{"responseFormat":"file"}}}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[1480,1940],"id":"9a7d5609-8257-4a98-9f0b-8cda223219a8","name":"Download Generated Image3"},{"parameters":{"operation":"binaryToPropery","destinationKey":"image_base64","options":{}},"type":"n8n-nodes-base.extractFromFile","typeVersion":1,"position":[1680,1940],"id":"beb2efea-c81d-4ba2-8a76-1c427f862ded","name":"Convert to Base66"},{"parameters":{"jsCode":"// Final output preparation with clean data structure\nconst item = $input.all()[0];\nconst originalData = $('Image Generator Form3').first().json;\n\nreturn [{\n  json: {\n    // Core output data\n    title: originalData['Image Title'],\n    prompt: item.json.final_prompt || originalData['Image Prompt'],\n    model: originalData['Image Model'],\n    style: originalData['Image Style'],\n    image_type: originalData['Image Type'],\n    image_base64: item.json.image_base64,\n    \n    // Status and metadata\n    generation_successful: true,\n    timestamp: new Date().toISOString(),\n    replicate_prediction_id: item.json.id,\n    \n    // Additional metadata\n    metadata: {\n      workflow_type: item.json.workflow_type || 'unknown',\n      generation_time: item.json.metrics?.predict_time || null,\n      original_prompt: originalData['Image Prompt']\n    }\n  }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1880,1940],"id":"aecb8e42-146b-4f17-83d4-7b0d767da5ad","name":"Final Output3"},{"parameters":{"method":"POST","url":"https://api.openai.com/v1/images/edits","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"contentType":"multipart-form-data","bodyParameters":{"parameters":[{"parameterType":"formBinaryData","name":"image","inputDataFieldName":"data"},{"name":"prompt","value":"=Create a new professional product image based on the reference image provided with these specifications:\n\nScene Description: \nImage Prompt: {{ $json['Image Prompt'] }}\nImage Style: {{ $json['Image Style'] }}\nProduct: \nBrand Colors: \n\nGenerate a \"{{ $json['Image Style'] }}\" image that:\n- Maintains clean, minimalistic, and elegant visual style\n- Highlights the product as the main subject with sharp detail and perfect lighting\n- Uses backgrounds that complement but do not overpower the product\n- Includes professional studio lighting with soft shadows\n- Emphasizes \"\", texture, and color accuracy\n- Maintains a high-end, premium iPhone-style look and feel\n- Uses this image: "},{"name":"model","value":"gpt-image-1"},{"name":"size","value":"=1024x1536"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[500,2760],"id":"b65d0e0d-1226-457e-82b2-157fc74c33eb","name":"Create Image","credentials":{"httpHeaderAuth":{"id":"z06CbCGaeEeBPVIt","name":"GPT Image Generator"}}},{"parameters":{"operation":"toBinary","sourceProperty":"data[0].b64_json","options":{}},"type":"n8n-nodes-base.convertToFile","typeVersion":1.1,"position":[700,2760],"id":"f6bf0372-93b2-40b9-b091-0e421c51a942","name":"Convert to File2"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"0ad062ec-5f53-4525-8bed-163cb013775d","leftValue":"","rightValue":"","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[120,2480],"id":"9321c39f-6692-445f-8825-fcbdb3861daf","name":"If"},{"parameters":{"method":"POST","url":"https://api.openai.com/v1/images/generations","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"bodyParameters":{"parameters":[{"name":"prompt","value":"={{ $json.output }}"},{"name":"model","value":"gpt-image-1"},{"name":"size","value":"={{ $('Process Data1').item.json.imageSize }}"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[540,2480],"id":"3e647343-898e-4b3e-8963-167000ded328","name":"HTTP Request4","credentials":{"httpHeaderAuth":{"id":"z06CbCGaeEeBPVIt","name":"GPT Image Generator"}}},{"parameters":{"operation":"toBinary","sourceProperty":"data[0].b64_json","options":{}},"type":"n8n-nodes-base.convertToFile","typeVersion":1.1,"position":[760,2480],"id":"da943164-1334-4ca7-81fc-c6f651197941","name":"Convert to File3"},{"parameters":{"amount":10},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[280,3300],"id":"a0cc1ba8-9550-488b-99d1-b61cc23ee438","name":"Wait Initial3","webhookId":"prediction-wait"},{"parameters":{"url":"=https://api.replicate.com/v1/predictions/{{ $json.id }}","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[480,3300],"id":"46fa6bae-75cf-4f41-80d0-b499e4b15e5d","name":"Check Status3","credentials":{"httpHeaderAuth":{"id":"JlfTRouEz1b1K4bJ","name":"Flux Replicate Auth account"}}},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"is-complete","leftValue":"={{ $json.status }}","rightValue":"succeeded","operator":{"type":"string","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[700,3360],"id":"76171488-6252-49e8-a563-a26377fe6a45","name":"Is Complete?3"},{"parameters":{},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[1180,3420],"id":"ba401138-dbe9-4fcd-86b9-bf46b52ebd5c","name":"Wait Retry3","webhookId":"prediction-retry"},{"parameters":{"method":"POST","url":"=https://api.replicate.com/v1/models/{{ $json['Image Model'] }}/predictions","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"application/json"}]},"sendBody":true,"specifyBody":"json","jsonBody":"={\n\t\"input\": {\n      \"prompt\": \"Change the car color to red, turn the headlights on\",\n      \"input_image\": \"https://replicate.delivery/pbxt/N5YURZv4ifaW2bMwU7hmrwzgtxf99DTQXpBeobLt1O7dEc3h/pexels-jmark-253096.jpg\",\n      \"output_format\": \"jpg\",\n      \"num_inference_steps\": 30\n\t}\n}","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[80,3300],"id":"7dca1c1e-b0bb-431e-ab6a-701ac012a44a","name":"Edit Image","credentials":{"httpHeaderAuth":{"id":"JlfTRouEz1b1K4bJ","name":"Flux Replicate Auth account"}}},{"parameters":{"rules":{"values":[{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"regen-after-ref","leftValue":"={{ $json.imageType }}","rightValue":"Image Re-generation","operator":{"type":"string","operation":"equals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"To Re-generation"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"edit-after-ref","leftValue":"={{ $json.imageType }}","rightValue":"Image Editing","operator":{"type":"string","operation":"equals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"To Editing"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"caption-after-ref","leftValue":"={{ $json.imageType }}","rightValue":"Image with Caption","operator":{"type":"string","operation":"equals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"To Caption"}]},"options":{}},"type":"n8n-nodes-base.switch","typeVersion":3.2,"position":[4000,2780],"id":"b788c91c-ecc9-48f3-891d-f8cf1b4955c1","name":"Route After Reference"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"needs-image-upload","leftValue":"=={{ $json.apiType === 'replicate' && $json.apiCall && $json.apiCall.requiresImageUrl }}","rightValue":"true","operator":{"type":"string","operation":"contains"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[4780,3060],"id":"ec3bb802-c9fa-475d-9840-c2e5cf748504","name":"Check Upload Needed"},{"parameters":{"method":"POST","url":"https://freeimage.host/api/1/upload","sendBody":true,"contentType":"multipart-form-data","bodyParameters":{"parameters":[{"parameterType":"formBinaryData","name":"source","inputDataFieldName":"data"},{"name":"key","value":"6d207e02198a847aa98d0a2a901485a5"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[5020,2920],"id":"3f55512e-859e-4aea-a6f7-7141b707496f","name":"Upload to FreeImage"},{"parameters":{"jsCode":"// Update Replicate API call - CORRECTED VERSION\nconst item = $input.all()[0];\nconst uploadResponse = item.json;\n\nconsole.log('🚨 UPDATE REPLICATE CALL NODE IS RUNNING!');\nconsole.log('Upload response received:', JSON.stringify(uploadResponse, null, 2));\n\n// Check if upload was successful\nif (uploadResponse.status_code !== 200 || !uploadResponse.image || !uploadResponse.image.url) {\n  throw new Error('Image upload failed');\n}\n\nconst imageUrl = uploadResponse.image.url;\nconsole.log('✅ Uploaded image URL:', imageUrl);\n\n// Get model and prompt - we need to reconstruct from form data or defaults\nlet model = 'black-forest-labs/flux-kontext-pro';\nlet prompt = 'Change the car color to blue. Make the headlights to be on.'; // Use your actual prompt\n\n// Try to get data from the upload response if it was passed through\nif (uploadResponse.model) {\n  model = uploadResponse.model;\n}\nif (uploadResponse.finalPrompt) {\n  prompt = uploadResponse.finalPrompt;\n}\n\nconsole.log('✅ Using model:', model);\nconsole.log('✅ Using prompt:', prompt);\n\n// Create the FINAL API call structure\nconst apiCall = {\n  url: `https://api.replicate.com/v1/models/${model}/predictions`,\n  method: 'POST',\n  headers: { 'Content-Type': 'application/json' },\n  body: {\n    input: {\n      prompt: prompt,\n      input_image: imageUrl,\n      output_format: 'jpg'\n    }\n  }\n};\n\nconsole.log('✅ Final API call body:', JSON.stringify(apiCall.body, null, 2));\n\nreturn [{\n  json: {\n    apiCall: apiCall,\n    uploadedImageUrl: imageUrl,\n    apiType: 'replicate',\n    model: model,\n    finalPrompt: prompt\n  },\n  binary: item.binary\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[5200,2920],"id":"9dd4ee58-e4c7-4d23-afbb-70d5e395ad84","name":"Update Replicate Call"},{"parameters":{"respondWith":"json","responseBody":"={\n  \"status\": \"success\",\n  \"title\": \"{{ $json.title }}\",\n  \"imageType\": \"{{ $json.imageType }}\",\n  \"model\": \"{{ $json.model }}\", \n  \"image_base64\": \"{{ $json.image_base64 }}\",\n  \"metadata\": {{ JSON.stringify($json.metadata) }},\n  \"timestamp\": \"{{ $json.timestamp }}\"\n}","options":{}},"id":"f07848f2-42f5-4106-b9f8-0313d5de56bf","name":"Final Response","type":"n8n-nodes-base.respondToWebhook","position":[6820,2680],"typeVersion":1.1},{"parameters":{"path":"189a5b21-e2c9-4bf6-a32a-31b95f8a74cd","formTitle":"Enhanced Image Generator","formDescription":"Generate, re-generate, edit, or add captions to images with AI","formFields":{"values":[{"fieldLabel":"Image Title","placeholder":"My Generated Image","requiredField":true},{"fieldLabel":"Image Type","fieldType":"dropdown","fieldOptions":{"values":[{"option":"New Image Generation"},{"option":"Image Re-generation"},{"option":"Image Editing"},{"option":"Image with Caption"}]},"requiredField":true},{"fieldLabel":"Image Model","fieldType":"dropdown","fieldOptions":{"values":[{"option":"black-forest-labs/flux-schnell"},{"option":"black-forest-labs/flux-dev"},{"option":"black-forest-labs/flux-1.1-pro-ultra"},{"option":"stability-ai/stable-diffusion-3.5-large"},{"option":"stability-ai/sdxl-turbo"},{"option":"recraft-ai/recraft-v3"},{"option":"ideogram-ai/ideogram-v2"},{"option":"bytedance/sdxl-lightning-4step"},{"option":"openai/gpt-image-1"},{"option":"black-forest-labs/flux-kontext-dev"},{"option":"black-forest-labs/flux-kontext-pro"}]},"requiredField":true},{"fieldLabel":"Reference Image URL","placeholder":"https://example.com/image.jpg (for Re-generation, Editing, or Caption scenarios)"},{"fieldLabel":"Upload Reference Image","fieldType":"file","multipleFiles":false},{"fieldLabel":"Image Style","placeholder":"Photorealistic, Cartoon, Abstract, Oil painting, Digital art..."},{"fieldLabel":"Image Scene","fieldType":"textarea","placeholder":"NEW: 'A bustling coffee shop...' | RE-GEN: 'Transform to futuristic setting...' | EDIT/CAPTION: Scene context..."},{"fieldLabel":"Image Background","fieldType":"textarea","placeholder":"NEW: 'Modern urban setting...' | RE-GEN: 'Change to cyberpunk environment...' | EDIT/CAPTION: Background modifications..."},{"fieldLabel":"Image Focus","fieldType":"textarea","placeholder":"FOR RE-GEN: 'Keep the red car but emphasize the sunset...' | FOR CAPTION: 'Professional headshot focus...'"},{"fieldLabel":"Changes to Image","fieldType":"textarea","placeholder":"FOR EDITING: 'Change car color to blue, add racing stripes, turn on headlights...'"},{"fieldLabel":"Caption Text","placeholder":"FOR CAPTION: 'John Smith, CEO' or 'Limited Time Offer!'"},{"fieldLabel":"Caption Style","placeholder":"FOR CAPTION: 'Bold white text, bottom-left corner, professional font'"}]},"responseMode":"responseNode","options":{}},"id":"e0e35952-a7d3-4375-a683-33080ab40059","name":"Enhanced Image Form1","type":"n8n-nodes-base.formTrigger","position":[2600,2680],"webhookId":"189a5b21-e2c9-4bf6-a32a-31b95f8a74cd","typeVersion":2.1},{"parameters":{"jsCode":"// Enhanced data processing and validation\nconst formData = $json;\n\n// Model capabilities mapping\nconst modelCapabilities = {\n  \"text-to-image\": [\n    \"black-forest-labs/flux-schnell\",\n    \"black-forest-labs/flux-dev\", \n    \"black-forest-labs/flux-1.1-pro-ultra\",\n    \"stability-ai/stable-diffusion-3.5-large\",\n    \"stability-ai/sdxl-turbo\",\n    \"recraft-ai/recraft-v3\",\n    \"ideogram-ai/ideogram-v2\",\n    \"bytedance/sdxl-lightning-4step\"\n  ],\n  \"image-to-image\": [\n    \"openai/gpt-image-1\",\n    \"black-forest-labs/flux-1.1-pro-ultra\",\n    \"stability-ai/sdxl-turbo\"\n  ],\n  \"image-editing\": [\n    \"black-forest-labs/flux-kontext-dev\",\n    \"black-forest-labs/flux-kontext-pro\",\n    \"openai/gpt-image-1\"\n  ],\n  \"image-with-caption\": [\n    \"openai/gpt-image-1\"  // Only OpenAI supports text overlays\n  ]\n};\n\n// Map image types to capability requirements\nconst typeToCapability = {\n  \"New Image Generation\": \"text-to-image\",\n  \"Image Re-generation\": \"image-to-image\", \n  \"Image Editing\": \"image-editing\",\n  \"Image with Caption\": \"image-with-caption\"\n};\n\n// Process form data\nconst processedData = {\n  title: formData['Image Title'] || '',\n  imageType: formData['Image Type'] || '',\n  model: formData['Image Model'] || '',\n  referenceUrl: formData['Reference Image URL'] || '',\n  uploadedImage: formData['Upload Reference Image'] || null,\n  style: formData['Image Style'] || '',\n  scene: formData['Image Scene'] || '',\n  background: formData['Image Background'] || '',\n  focus: formData['Image Focus'] || '',\n  changes: formData['Changes to Image'] || '',\n  captionText: formData['Caption Text'] || '',\n  captionStyle: formData['Caption Style'] || ''\n};\n\n// Validate model compatibility\nconst requiredCapability = typeToCapability[processedData.imageType];\nconst isModelCompatible = modelCapabilities[requiredCapability]?.includes(processedData.model);\n\n// Check if reference image is needed\nconst needsReference = [\"Image Re-generation\", \"Image Editing\", \"Image with Caption\"].includes(processedData.imageType);\nconst hasReference = !!(processedData.referenceUrl || processedData.uploadedImage);\n\n// Create scenario-specific prompts\nlet finalPrompt = '';\nlet apiType = '';\n\nswitch(processedData.imageType) {\n  case \"New Image Generation\":\n    finalPrompt = `Create a ${processedData.style || 'photorealistic'} image. Scene: ${processedData.scene}. Background: ${processedData.background}.`;\n    apiType = 'text-to-image';\n    break;\n    \n  case \"Image Re-generation\":\n    finalPrompt = `Transform the reference image with these specifications: Style: ${processedData.style}. Focus on: ${processedData.focus}. Scene: ${processedData.scene}. Background: ${processedData.background}.`;\n    apiType = 'image-to-image';\n    break;\n    \n  case \"Image Editing\":\n    finalPrompt = `Edit the reference image with these changes: ${processedData.changes}. Maintain overall style and quality.`;\n    apiType = 'image-editing';\n    break;\n    \n  case \"Image with Caption\":\n    finalPrompt = `Create a professional image with text overlay. Focus: ${processedData.focus}. Caption: \"${processedData.captionText}\". Caption style: ${processedData.captionStyle}. Scene: ${processedData.scene}. Background: ${processedData.background}.`;\n    apiType = 'image-with-caption';\n    break;\n}\n\nreturn [{\n  json: {\n    ...processedData,\n    finalPrompt: finalPrompt,\n    apiType: apiType,\n    isModelCompatible: isModelCompatible,\n    needsReference: needsReference,\n    hasReference: hasReference,\n    warnings: {\n      incompatibleModel: !isModelCompatible,\n      missingReference: needsReference && !hasReference\n    }\n  }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[2800,2680],"id":"940c3af2-ea5b-4925-91e2-530dff683032","name":"Process & Validate Data1"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"has-warnings","leftValue":"={{ $json.warnings.incompatibleModel || $json.warnings.missingReference }}","rightValue":true,"operator":{"type":"boolean","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[3000,2680],"id":"6c478bf8-09ec-46eb-a41e-38c6bb907b26","name":"Check Warnings1"},{"parameters":{"respondWith":"json","responseBody":"={\n  \"status\": \"warning\",\n  \"message\": \"{{ $json.warnings.incompatibleModel ? 'Selected model is not compatible with ' + $json.imageType + '. Please choose from compatible models.' : '' }} {{ $json.warnings.missingReference ? 'Reference image required for ' + $json.imageType + '. Please provide URL or upload image.' : '' }}\",\n  \"compatibleModels\": {\n    \"New Image Generation\": [\"flux-schnell\", \"flux-dev\", \"stable-diffusion-3.5\", \"recraft-v3\"],\n    \"Image Re-generation\": [\"gpt-image-1\", \"flux-1.1-pro-ultra\", \"sdxl-turbo\"],\n    \"Image Editing\": [\"flux-kontext-dev\", \"flux-kontext-pro\", \"gpt-image-1\"],\n    \"Image with Caption\": [\"gpt-image-1\"]\n  }\n}","options":{}},"id":"eed38a38-7bf4-4279-8e1d-c72edfc8f6eb","name":"Show Warnings1","type":"n8n-nodes-base.respondToWebhook","position":[3200,2580],"typeVersion":1.1},{"parameters":{"rules":{"values":[{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"new-image","leftValue":"={{ $json.imageType }}","rightValue":"New Image Generation","operator":{"type":"string","operation":"equals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"New Image"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"regen-image","leftValue":"={{ $json.imageType }}","rightValue":"Image Re-generation","operator":{"type":"string","operation":"equals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"Re-generation"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"edit-image","leftValue":"={{ $json.imageType }}","rightValue":"Image Editing","operator":{"type":"string","operation":"equals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"Editing"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"caption-image","leftValue":"={{ $json.imageType }}","rightValue":"Image with Caption","operator":{"type":"string","operation":"equals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"With Caption"}]},"options":{}},"type":"n8n-nodes-base.switch","typeVersion":3.2,"position":[3160,2820],"id":"0b3a2c9f-6269-47cd-b376-541e88fab32e","name":"Scenario Router1"},{"parameters":{"jsCode":"// NEW IMAGE GENERATION - Text to Image\nconst item = $input.all()[0];\n\n// Determine API type based on model\nconst isOpenAI = item.json.model === 'openai/gpt-image-1';\nconst isReplicate = !isOpenAI;\n\nlet apiCall = {};\n\nif (isOpenAI) {\n  apiCall = {\n    url: 'https://api.openai.com/v1/images/generations',\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: {\n      model: 'gpt-image-1',\n      prompt: item.json.finalPrompt,\n      size: '1024x1024',\n      response_format: 'b64_json'\n    },\n    requiresBinary: false\n  };\n} else {\n  apiCall = {\n    url: `https://api.replicate.com/v1/models/${item.json.model}/predictions`,\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: {\n      input: {\n        prompt: item.json.finalPrompt,\n        aspect_ratio: '1:1',\n        steps: 28,\n        guidance: 7\n      }\n    },\n    requiresBinary: false,\n    requiresImageUrl: false\n  };\n}\n\nreturn [{\n  json: {\n    ...item.json,\n    apiCall: apiCall,\n    apiType: isOpenAI ? 'openai' : 'replicate'\n  }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[3620,2380],"id":"6b1a76fc-4ee4-42d2-9d90-7abe075d7dac","name":"Prepare New Image2"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"has-url","leftValue":"={{ $json.referenceUrl }}","rightValue":"","operator":{"type":"string","operation":"notEmpty"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[3600,2780],"id":"f61ccfdc-8c2c-4e81-b153-8e61759cddff","name":"Check Reference Type1"},{"parameters":{"url":"={{ $json.referenceUrl }}","options":{"response":{"response":{"responseFormat":"file"}}}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[3800,2680],"id":"569891bc-1bdd-47b3-a798-079e4fa3c7f0","name":"Download Reference1"},{"parameters":{"jsCode":"// Process uploaded reference image - COMPREHENSIVE BINARY EXTRACTION\nconst item = $input.all()[0];\n\nconsole.log('🔍 DETAILED BINARY EXTRACTION DEBUG');\n\nif (!item.json.uploadedImage) {\n  throw new Error('No uploadedImage found in form data');\n}\n\nconst uploadedFile = item.json.uploadedImage;\nconsole.log('uploadedImage structure:', JSON.stringify(uploadedFile, null, 2));\n\nlet binaryData = null;\nlet mimeType = 'image/jpeg';\nlet fileName = 'uploaded-image.jpg';\n\n// Extract metadata\nif (uploadedFile.mimetype) mimeType = uploadedFile.mimetype;\nif (uploadedFile.mimeType) mimeType = uploadedFile.mimeType;\nif (uploadedFile.filename) fileName = uploadedFile.filename;\nif (uploadedFile.fileName) fileName = uploadedFile.fileName;\n\n// Try multiple approaches to get the binary data\nif (uploadedFile.data) {\n  console.log('✅ Found .data field');\n  binaryData = uploadedFile.data;\n} else if (uploadedFile.buffer) {\n  console.log('✅ Found .buffer field');\n  binaryData = uploadedFile.buffer;\n} else if (uploadedFile.content) {\n  console.log('✅ Found .content field');\n  binaryData = uploadedFile.content;\n} else if (uploadedFile.file) {\n  console.log('✅ Found .file field');\n  binaryData = uploadedFile.file;\n} else if (typeof uploadedFile === 'string') {\n  console.log('✅ uploadedFile is string, assuming base64');\n  binaryData = uploadedFile;\n} else {\n  // Last resort - check all properties\n  console.log('🔍 Checking all properties for binary data...');\n  const keys = Object.keys(uploadedFile);\n  console.log('Available keys:', keys);\n  \n  for (const key of keys) {\n    const value = uploadedFile[key];\n    if (value && (typeof value === 'string' || Buffer.isBuffer(value))) {\n      console.log(`✅ Using key \"${key}\" as binary data`);\n      binaryData = value;\n      break;\n    }\n  }\n}\n\nif (!binaryData) {\n  throw new Error(`Could not find binary data. Available keys: ${Object.keys(uploadedFile).join(', ')}`);\n}\n\nconsole.log('✅ Binary data type:', typeof binaryData);\nconsole.log('✅ Binary data length:', binaryData.length || 'unknown');\n\n// Return with proper n8n binary structure\nreturn [{\n  json: item.json,\n  binary: {\n    data: {\n      data: binaryData,\n      mimeType: mimeType,\n      fileName: fileName,\n      fileExtension: fileName.split('.').pop() || 'jpg'\n    }\n  }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[3800,2880],"id":"9c1b6c0e-ac72-4dbf-bbc8-b47526e69c85","name":"Process Upload3"},{"parameters":{"jsCode":"// IMAGE RE-GENERATION - Reference + Style Transfer\nconst item = $input.all()[0];\n\nconst isOpenAI = item.json.model === 'openai/gpt-image-1';\n\nlet apiCall = {};\n\nif (isOpenAI) {\n  // OpenAI uses edits API with binary image\n  apiCall = {\n    url: 'https://api.openai.com/v1/images/edits',\n    method: 'POST',\n    contentType: 'multipart-form-data',\n    body: {\n      model: 'gpt-image-1',\n      prompt: item.json.finalPrompt,\n      size: '1024x1024'\n    },\n    requiresBinary: true,\n    requiresImageUrl: false\n  };\n} else {\n  // Replicate models use input_image parameter\n  apiCall = {\n    url: `https://api.replicate.com/v1/models/${item.json.model}/predictions`,\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: {\n      input: {\n        prompt: item.json.finalPrompt,\n        input_image: null, // Will be set with image URL after upload\n        aspect_ratio: '1:1',\n        steps: 28,\n        guidance: 7\n      }\n    },\n    requiresImageUrl: true,\n    requiresBinary: false\n  };\n}\n\nreturn [{\n  json: {\n    ...item.json,\n    apiCall: apiCall,\n    apiType: isOpenAI ? 'openai' : 'replicate'\n  },\n  binary: item.binary\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[4220,2860],"id":"73e77fb1-ed99-46ce-b878-a5d7658597ef","name":"Prepare Re-generation1"},{"parameters":{"jsCode":"// IMAGE EDITING - Specific Modifications  \nconst item = $input.all()[0];\n\nconst isOpenAI = item.json.model === 'openai/gpt-image-1';\nconst isFluxKontext = item.json.model.includes('flux-kontext');\n\nlet apiCall = {};\n\nif (isOpenAI) {\n  apiCall = {\n    url: 'https://api.openai.com/v1/images/edits',\n    method: 'POST',\n    contentType: 'multipart-form-data',\n    body: {\n      model: 'gpt-image-1',\n      prompt: item.json.finalPrompt,\n      size: '1024x1024'\n    },\n    requiresBinary: true,\n    requiresImageUrl: false\n  };\n} else if (isFluxKontext) {\n  apiCall = {\n    url: `https://api.replicate.com/v1/models/${item.json.model}/predictions`,\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: {\n      input: {\n        prompt: item.json.finalPrompt,\n        input_image: null, // Will be set with image URL\n        output_format: 'jpg'\n      }\n    },\n    requiresImageUrl: true,\n    requiresBinary: false\n  };\n}\n\nreturn [{\n  json: {\n    ...item.json,\n    apiCall: apiCall,\n    apiType: isOpenAI ? 'openai' : 'replicate'\n  },\n  binary: item.binary\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[4220,3040],"id":"db3f50ef-956f-4f0f-b1e7-318d7eb012ee","name":"Prepare Editing1"},{"parameters":{"jsCode":"// IMAGE WITH CAPTION - OpenAI Only\nconst item = $input.all()[0];\n\n// Enhanced prompt for caption generation\nconst captionPrompt = `Create a professional image with text overlay. ${item.json.finalPrompt} \n\nEnsure the text \"${item.json.captionText}\" is clearly visible and readable with the following styling: ${item.json.captionStyle}. \nThe text should be properly integrated into the image design.`;\n\nconst apiCall = {\n  url: 'https://api.openai.com/v1/images/generations',\n  method: 'POST',\n  headers: { 'Content-Type': 'application/json' },\n  body: {\n    model: 'gpt-image-1',\n    prompt: captionPrompt,\n    size: '1024x1024',\n    response_format: 'b64_json'\n  },\n  requiresBinary: false,\n  requiresImageUrl: false\n};\n\n// If there's a reference image, use edits API instead\nif (item.json.hasReference) {\n  apiCall.url = 'https://api.openai.com/v1/images/edits';\n  apiCall.contentType = 'multipart-form-data';\n  apiCall.body.prompt = `Add text overlay to this image: \"${item.json.captionText}\". Style: ${item.json.captionStyle}. ${item.json.focus ? 'Focus: ' + item.json.focus : ''}`;\n  apiCall.requiresBinary = true;\n}\n\nreturn [{\n  json: {\n    ...item.json,\n    apiCall: apiCall,\n    apiType: 'openai',\n    finalPrompt: captionPrompt\n  },\n  binary: item.binary\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[4220,3220],"id":"abbe00a8-ecc5-407f-a881-798b2c45846b","name":"Prepare Caption1"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"is-openai","leftValue":"={{ $json.apiType }}","rightValue":"openai","operator":{"type":"string","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[4400,2680],"id":"a6ee1ff7-1fb2-4c58-9a20-cab8c3fb0fa3","name":"API Type Router1"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"needs-binary","leftValue":"={{ $json.apiCall.requiresBinary }}","rightValue":true,"operator":{"type":"boolean","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[4820,2580],"id":"542daaa0-63eb-435e-a6d7-e97667fc8042","name":"OpenAI Request Router1"},{"parameters":{"method":"POST","url":"={{ $json.apiCall.url }}","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"contentType":"multipart-form-data","bodyParameters":{"parameters":[{"parameterType":"formBinaryData","name":"image","inputDataFieldName":"data"},{"name":"prompt","value":"={{ $json.finalPrompt }}"},{"name":"model","value":"gpt-image-1"},{"name":"size","value":"1024x1024"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[5020,2480],"id":"539fae6f-86ed-48e8-8782-7177108bb9dd","name":"OpenAI Multipart Request1","credentials":{"httpHeaderAuth":{"id":"z06CbCGaeEeBPVIt","name":"GPT Image Generator"}}},{"parameters":{"method":"POST","url":"={{ $json.apiCall.url }}","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"application/json"}]},"sendBody":true,"specifyBody":"json","jsonBody":"={{ JSON.stringify($json.apiCall.body) }}","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[5020,2680],"id":"099ac2d4-a877-42ba-ac86-a75bc7262bab","name":"OpenAI JSON Request1","credentials":{"httpHeaderAuth":{"id":"z06CbCGaeEeBPVIt","name":"GPT Image Generator"}}},{"parameters":{"method":"POST","url":"={{ $json.apiCall.url }}","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"application/json"}]},"sendBody":true,"specifyBody":"json","jsonBody":"={{ JSON.stringify($json.apiCall.body) }}","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[5420,3060],"id":"fe7f3b10-ccd0-4542-bbf7-130503214e1b","name":"Call Replicate1","credentials":{"httpHeaderAuth":{"id":"JlfTRouEz1b1K4bJ","name":"Flux Replicate Auth account"}}},{"parameters":{"operation":"toBinary","sourceProperty":"data[0].b64_json","options":{}},"type":"n8n-nodes-base.convertToFile","typeVersion":1.1,"position":[5220,2580],"id":"e9329349-acbd-4e56-b0d2-7a4a21c7adbe","name":"Convert OpenAI1"},{"parameters":{"amount":10},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[5620,2880],"id":"532202e4-861c-48ff-8a7b-135febcae980","name":"Wait Replicate1","webhookId":"af1d422b-5dc3-455a-9519-3d8c4591ce9b"},{"parameters":{"url":"=https://api.replicate.com/v1/predictions/{{ $json.id }}","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[5820,2880],"id":"8e194102-1ef1-4341-af47-b1f2d76d5487","name":"Check Replicate Status1","credentials":{"httpHeaderAuth":{"id":"JlfTRouEz1b1K4bJ","name":"Flux Replicate Auth account"}}},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"is-complete","leftValue":"={{ $json.status }}","rightValue":"succeeded","operator":{"type":"string","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[6020,2880],"id":"d1e165c0-a3f3-4fe5-957b-a7042951ada0","name":"Check Complete1"},{"parameters":{"url":"={{ Array.isArray($json.output) ? $json.output[0] : $json.output }}","options":{"response":{"response":{"responseFormat":"file"}}}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[6220,2780],"id":"d14c1740-0bca-4e5a-9a87-40a0e3f13d37","name":"Download Result1"},{"parameters":{},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[6200,3020],"id":"576d0ccc-06d8-4d5e-b344-ebe12678a834","name":"Wait Retry4","webhookId":"017e2266-5e8e-4f67-bf13-60df0373e96e"},{"parameters":{"operation":"binaryToPropery","destinationKey":"image_base64","options":{}},"type":"n8n-nodes-base.extractFromFile","typeVersion":1,"position":[6420,2680],"id":"211abfe8-3c23-48ad-8090-cd962d25f34d","name":"Convert to Base67"},{"parameters":{"jsCode":"// Final unified output format\nconst item = $input.all()[0];\nconst originalData = $('Enhanced Image Form1').first().json;\n\nreturn [{\n  json: {\n    // Core output data\n    title: originalData['Image Title'],\n    imageType: originalData['Image Type'],\n    model: originalData['Image Model'],\n    prompt: item.json.finalPrompt || originalData['Image Prompt'],\n    style: originalData['Image Style'],\n    image_base64: item.json.image_base64,\n    \n    // Status and metadata\n    generation_successful: true,\n    timestamp: new Date().toISOString(),\n    \n    // Enhanced metadata\n    metadata: {\n      scenario: originalData['Image Type'],\n      apiType: item.json.apiType || 'unknown',\n      hadReference: !!(originalData['Reference Image URL'] || originalData['Upload Reference Image']),\n      uploadedImageUrl: item.json.uploadedImageUrl || null,\n      fields_used: {\n        style: !!originalData['Image Style'],\n        scene: !!originalData['Image Scene'],\n        background: !!originalData['Image Background'],\n        focus: !!originalData['Image Focus'],\n        changes: !!originalData['Changes to Image'],\n        caption: !!originalData['Caption Text']\n      }\n    }\n  }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[6620,2680],"id":"0ce97996-c8cb-4771-b45d-1e8458b02971","name":"Final Output4"},{"parameters":{"jsCode":"const item = $input.all()[0];\n\nconsole.log('🔍 DEBUG BEFORE UPLOAD CHECK:');\nconsole.log('apiType:', item.json.apiType);\nconsole.log('Has apiCall?', !!item.json.apiCall);\nconsole.log('requiresImageUrl:', item.json.apiCall?.requiresImageUrl);\nconsole.log('Full apiCall:', JSON.stringify(item.json.apiCall, null, 2));\n\nconst condition = item.json.apiType === 'replicate' && item.json.apiCall && item.json.apiCall.requiresImageUrl;\nconsole.log('🎯 Upload needed condition result:', condition);\n\n// Pass through unchanged\nreturn $input.all();"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[4620,2780],"id":"49aaa31b-cab5-4b31-8bb7-cdbb36271d2f","name":"Debug Upload Check"},{"parameters":{"path":"image-editing","formTitle":"Image Editing - Specific Modifications","formDescription":"Make precise edits to existing images: change colors, add/remove objects, modify details","formFields":{"values":[{"fieldLabel":"Image Title","placeholder":"My Edited Image","requiredField":true},{"fieldLabel":"Editing Model","fieldType":"dropdown","fieldOptions":{"values":[{"option":"openai/gpt-image-1"},{"option":"black-forest-labs/flux-kontext-dev"},{"option":"black-forest-labs/flux-kontext-pro"},{"option":"black-forest-labs/flux-1.1-pro-ultra"},{"option":"stability-ai/sdxl-turbo"}]},"requiredField":true},{"fieldLabel":"Reference Image URL","placeholder":"https://example.com/your-image-to-edit.jpg"},{"fieldLabel":"Upload Image to Edit","fieldType":"file","multipleFiles":false},{"fieldLabel":"Editing Instructions","fieldType":"textarea","placeholder":"Change the car color from red to blue, turn on the headlights, add racing stripes","requiredField":true},{"fieldLabel":"Objects to Add","fieldType":"textarea","placeholder":"Add sunglasses to the person, include a coffee cup on the table, add clouds to the sky"},{"fieldLabel":"Objects to Remove","fieldType":"textarea","placeholder":"Remove the background people, delete the power lines, eliminate the watermark"},{"fieldLabel":"Color Changes","fieldType":"textarea","placeholder":"Change shirt from white to black, make the car metallic silver, brighten the overall colors"},{"fieldLabel":"Lighting/Effects Changes","fieldType":"textarea","placeholder":"Add dramatic shadows, brighten the scene, add lens flare, make it look like sunset"},{"fieldLabel":"Details to Preserve","fieldType":"textarea","placeholder":"Keep the person's face exactly the same, maintain the logo unchanged, preserve the background building"},{"fieldLabel":"Output Quality","fieldType":"dropdown","fieldOptions":{"values":[{"option":"Standard Quality"},{"option":"High Quality"},{"option":"Ultra High Quality"}]}},{"fieldLabel":"Edit Precision","fieldType":"dropdown","fieldOptions":{"values":[{"option":"Subtle edits (minimal changes)"},{"option":"Moderate edits (noticeable changes)"},{"option":"Bold edits (significant modifications)"}]}},{"fieldLabel":"Output Size","fieldType":"dropdown","fieldOptions":{"values":[{"option":"1024x1024"},{"option":"1024x1536"},{"option":"1536x1024"}]}}]},"responseMode":"responseNode","options":{}},"id":"a30ae752-d1ed-4450-ad03-a2a6301c5827","name":"Image Editing Form","type":"n8n-nodes-base.formTrigger","position":[-9060,2780],"webhookId":"image-editing","typeVersion":2.1},{"parameters":{"jsCode":"// Process and validate form data for image editing\nconst formData = $json;\n\n// Extract and clean form data\nconst processedData = {\n  title: formData['Image Title'] || '',\n  model: formData['Editing Model'] || '',\n  referenceUrl: formData['Reference Image URL'] || '',\n  uploadedImage: formData['Upload Image to Edit'] || null,\n  editingInstructions: formData['Editing Instructions'] || '',\n  objectsToAdd: formData['Objects to Add'] || '',\n  objectsToRemove: formData['Objects to Remove'] || '',\n  colorChanges: formData['Color Changes'] || '',\n  lightingEffects: formData['Lighting/Effects Changes'] || '',\n  detailsToPreserve: formData['Details to Preserve'] || '',\n  outputQuality: formData['Output Quality'] || 'Standard Quality',\n  editPrecision: formData['Edit Precision'] || 'Moderate edits (noticeable changes)',\n  outputSize: formData['Output Size'] || '1024x1024'\n};\n\n// Validation\nconst errors = [];\nif (!processedData.title.trim()) errors.push('Image Title is required');\nif (!processedData.model) errors.push('Editing Model is required');\nif (!processedData.editingInstructions.trim()) errors.push('Editing Instructions are required');\n\n// Reference image validation\nconst hasUrl = processedData.referenceUrl.trim().length > 0;\nconst hasUpload = processedData.uploadedImage !== null;\n\nif (!hasUrl && !hasUpload) {\n  errors.push('Image to edit is required - provide either URL or upload a file');\n}\n\nif (hasUrl && hasUpload) {\n  errors.push('Please provide either URL or upload - not both');\n}\n\n// Determine API type and settings\nconst isOpenAI = processedData.model === 'openai/gpt-image-1';\nconst isFluxKontext = processedData.model.includes('flux-kontext');\nconst apiType = isOpenAI ? 'openai' : 'replicate';\n\n// Build comprehensive editing prompt\nlet editingPrompt = `Edit this image: ${processedData.editingInstructions}`;\n\nif (processedData.objectsToAdd) {\n  editingPrompt += ` Add: ${processedData.objectsToAdd}.`;\n}\n\nif (processedData.objectsToRemove) {\n  editingPrompt += ` Remove: ${processedData.objectsToRemove}.`;\n}\n\nif (processedData.colorChanges) {\n  editingPrompt += ` Color changes: ${processedData.colorChanges}.`;\n}\n\nif (processedData.lightingEffects) {\n  editingPrompt += ` Lighting/Effects: ${processedData.lightingEffects}.`;\n}\n\nif (processedData.detailsToPreserve) {\n  editingPrompt += ` Important: preserve ${processedData.detailsToPreserve} exactly as they are.`;\n}\n\n// Add quality and precision instructions\neditingPrompt += ' Maintain professional image quality and realistic appearance.';\n\n// Set precision parameters based on edit precision\nlet precisionParams = {};\nif (processedData.editPrecision.includes('Subtle')) {\n  precisionParams = { guidance: 3, steps: 15, strength: 0.3 };\n} else if (processedData.editPrecision.includes('Bold')) {\n  precisionParams = { guidance: 10, steps: 35, strength: 0.8 };\n} else {\n  precisionParams = { guidance: 6, steps: 25, strength: 0.5 };\n}\n\n// Set quality parameters\nlet qualityParams = {};\nif (processedData.outputQuality.includes('Ultra')) {\n  qualityParams = { steps: Math.max(precisionParams.steps + 10, 40) };\n} else if (processedData.outputQuality.includes('High')) {\n  qualityParams = { steps: Math.max(precisionParams.steps + 5, 30) };\n} else {\n  qualityParams = { steps: precisionParams.steps };\n}\n\nreturn [{\n  json: {\n    ...processedData,\n    editingPrompt: editingPrompt,\n    apiType: apiType,\n    isOpenAI: isOpenAI,\n    isFluxKontext: isFluxKontext,\n    hasUrl: hasUrl,\n    hasUpload: hasUpload,\n    precisionParams: precisionParams,\n    qualityParams: qualityParams,\n    errors: errors,\n    hasErrors: errors.length > 0,\n    timestamp: new Date().toISOString()\n  }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-8860,2780],"id":"bbc5a9fd-5c20-46d3-86bb-df566f168843","name":"Process Editing Data"},{"parameters":{"respondWith":"json","responseBody":"={\n  \"status\": \"error\",\n  \"workflow\": \"Image Editing\",\n  \"message\": \"Validation failed\",\n  \"errors\": {{ JSON.stringify($json.errors) }},\n  \"timestamp\": \"{{ $json.timestamp }}\"\n}","options":{}},"id":"440b5db4-a265-48d7-823b-7356b28fa3d8","name":"Return Editing Errors","type":"n8n-nodes-base.respondToWebhook","position":[-8460,2680],"typeVersion":1.1},{"parameters":{"url":"={{ $json.referenceUrl }}","options":{"response":{"response":{"responseFormat":"file"}}}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-8260,2780],"id":"5a35f1a3-46ac-4d83-acdb-9b46a1136511","name":"Download Image to Edit","onError":"continueErrorOutput"},{"parameters":{"jsCode":"// Process uploaded image for editing\nconst item = $input.all()[0];\n\nconsole.log('🔍 Processing uploaded image for editing');\n\nif (!item.json.uploadedImage) {\n  throw new Error('No uploaded image found in form data');\n}\n\nconst uploadedFile = item.json.uploadedImage;\nconsole.log('Uploaded file structure:', JSON.stringify(uploadedFile, null, 2));\n\nlet binaryData = null;\nlet mimeType = 'image/jpeg';\nlet fileName = 'image-to-edit.jpg';\n\n// Extract metadata\nif (uploadedFile.mimetype) mimeType = uploadedFile.mimetype;\nif (uploadedFile.mimeType) mimeType = uploadedFile.mimeType;\nif (uploadedFile.filename) fileName = uploadedFile.filename;\nif (uploadedFile.fileName) fileName = uploadedFile.fileName;\n\n// Extract binary data using multiple approaches\nif (uploadedFile.data) {\n  binaryData = uploadedFile.data;\n} else if (uploadedFile.buffer) {\n  binaryData = uploadedFile.buffer;\n} else if (uploadedFile.content) {\n  binaryData = uploadedFile.content;\n} else if (uploadedFile.file) {\n  binaryData = uploadedFile.file;\n} else if (typeof uploadedFile === 'string') {\n  binaryData = uploadedFile;\n} else {\n  // Check all properties for binary data\n  const keys = Object.keys(uploadedFile);\n  for (const key of keys) {\n    const value = uploadedFile[key];\n    if (value && (typeof value === 'string' || Buffer.isBuffer(value))) {\n      binaryData = value;\n      break;\n    }\n  }\n}\n\nif (!binaryData) {\n  throw new Error(`Could not extract binary data from upload. Available keys: ${Object.keys(uploadedFile).join(', ')}`);\n}\n\nconsole.log('✅ Successfully extracted binary data for editing');\nconsole.log('Binary data type:', typeof binaryData);\nconsole.log('Binary data length:', binaryData.length || 'unknown');\n\n// Return with proper n8n binary structure\nreturn [{\n  json: {\n    ...item.json,\n    imageProcessed: true,\n    imageSource: 'upload'\n  },\n  binary: {\n    data: {\n      data: binaryData,\n      mimeType: mimeType,\n      fileName: fileName,\n      fileExtension: fileName.split('.').pop() || 'jpg'\n    }\n  }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-8260,2980],"id":"165ceb01-9d81-4ef2-968b-8e6b82c6ef5e","name":"Process Upload for Editing"},{"parameters":{"method":"POST","url":"https://api.openai.com/v1/images/edits","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"contentType":"multipart-form-data","bodyParameters":{"parameters":[{"parameterType":"formBinaryData","name":"image","inputDataFieldName":"data"},{"name":"prompt","value":"={{ $json.editingPrompt }}"},{"name":"model","value":"gpt-image-1"},{"name":"size","value":"={{ $json.outputSize }}"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-7860,2780],"id":"9985298d-0621-42fa-b590-3c77d1014960","name":"OpenAI Image Edit","credentials":{"httpHeaderAuth":{"id":"z06CbCGaeEeBPVIt","name":"GPT Image Generator"}},"onError":"continueErrorOutput"},{"parameters":{"method":"POST","url":"https://freeimage.host/api/1/upload","sendBody":true,"contentType":"multipart-form-data","bodyParameters":{"parameters":[{"parameterType":"formBinaryData","name":"source","inputDataFieldName":"data"},{"name":"key","value":"6d207e02198a847aa98d0a2a901485a5"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-7860,2980],"id":"a6ca6ea7-453f-430c-b09d-42edb17e43fa","name":"Upload for Replicate Edit","onError":"continueErrorOutput"},{"parameters":{"jsCode":"// Prepare Replicate API call for image editing\nconst item = $input.all()[0];\nconst uploadResponse = item.json;\n\nconsole.log('🛠️ Preparing Replicate editing call');\nconsole.log('Upload response:', JSON.stringify(uploadResponse, null, 2));\n\n// Check if upload was successful\nif (uploadResponse.status_code !== 200 || !uploadResponse.image || !uploadResponse.image.url) {\n  throw new Error('Image upload failed for Replicate editing API');\n}\n\nconst imageUrl = uploadResponse.image.url;\nconsole.log('✅ Image to edit URL:', imageUrl);\n\n// Get original form data to build the API call\nconst originalData = $('Image Editing Form').first().json;\nconst model = originalData['Editing Model'];\nconst editingPrompt = item.json.editingPrompt || originalData['Editing Instructions'];\nconst precisionParams = item.json.precisionParams || { guidance: 6, steps: 25, strength: 0.5 };\nconst qualityParams = item.json.qualityParams || { steps: 25 };\nconst outputSize = originalData['Output Size'] || '1024x1024';\n\n// Create aspect ratio from size\nlet aspectRatio = '1:1';\nif (outputSize === '1024x1536') aspectRatio = '2:3';\nelse if (outputSize === '1536x1024') aspectRatio = '3:2';\n\n// Combine precision and quality parameters\nconst finalSteps = Math.max(precisionParams.steps, qualityParams.steps);\n\nconsole.log('✅ Using editing model:', model);\nconsole.log('✅ Using editing prompt:', editingPrompt);\nconsole.log('✅ Precision params:', precisionParams);\nconsole.log('✅ Final steps:', finalSteps);\n\n// Create the API call structure based on model type\nlet apiCallBody = {};\n\nif (model.includes('flux-kontext')) {\n  // Flux Kontext models use input_image and specific parameters\n  apiCallBody = {\n    input: {\n      prompt: editingPrompt,\n      input_image: imageUrl,\n      output_format: 'jpg'\n    }\n  };\n} else {\n  // Other Replicate models (flux-1.1-pro-ultra, sdxl-turbo)\n  apiCallBody = {\n    input: {\n      prompt: editingPrompt,\n      input_image: imageUrl,\n      aspect_ratio: aspectRatio,\n      steps: finalSteps,\n      guidance: precisionParams.guidance,\n      strength: precisionParams.strength,\n      output_format: 'jpg'\n    }\n  };\n}\n\nconst apiCall = {\n  url: `https://api.replicate.com/v1/models/${model}/predictions`,\n  method: 'POST',\n  headers: { 'Content-Type': 'application/json' },\n  body: apiCallBody\n};\n\nconsole.log('✅ Final editing API call body:', JSON.stringify(apiCall.body, null, 2));\n\nreturn [{\n  json: {\n    ...item.json,\n    apiCall: apiCall,\n    uploadedImageUrl: imageUrl,\n    model: model,\n    editingPrompt: editingPrompt,\n    finalSteps: finalSteps\n  },\n  binary: item.binary\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-7660,2980],"id":"e555063a-a186-46c7-9f75-853b7e8b47a6","name":"Prepare Replicate Edit Call"},{"parameters":{"method":"POST","url":"={{ $json.apiCall.url }}","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"application/json"}]},"sendBody":true,"specifyBody":"json","jsonBody":"={{ JSON.stringify($json.apiCall.body) }}","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-7460,2980],"id":"64464364-4ccc-4c0a-bee0-38977b86c10b","name":"Call Replicate Edit","credentials":{"httpHeaderAuth":{"id":"JlfTRouEz1b1K4bJ","name":"Flux Replicate Auth account"}},"onError":"continueErrorOutput"},{"parameters":{"operation":"toBinary","sourceProperty":"data[0].b64_json","options":{}},"type":"n8n-nodes-base.convertToFile","typeVersion":1.1,"position":[-7660,2780],"id":"38582209-af57-4aa2-8d3a-7316d411d581","name":"Convert OpenAI Edit Response"},{"parameters":{"amount":15},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[-7260,2980],"id":"5fea7433-e1e8-48ef-b094-5816c15e32e8","name":"Wait for Edit Processing","webhookId":"replicate-editing-wait"},{"parameters":{"url":"={{ 'https://api.replicate.com/v1/predictions/' + $json.id }}","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-7060,2980],"id":"ca25d75e-a5ed-42c7-becb-864e7039bc78","name":"Check Edit Status","credentials":{"httpHeaderAuth":{"id":"JlfTRouEz1b1K4bJ","name":"Flux Replicate Auth account"}}},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"is-complete","leftValue":"={{ $json.status }}","rightValue":"succeeded","operator":{"type":"string","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[-6860,2980],"id":"4cefd7ec-328d-430e-a1a1-f249042a7934","name":"Check if Edit Complete"},{"parameters":{"url":"={{ Array.isArray($json.output) ? $json.output[0] : $json.output }}","options":{"response":{"response":{"responseFormat":"file"}}}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-6660,2880],"id":"d6c71351-a7c9-4c62-a590-a1490e17142a","name":"Download Edited Image"},{"parameters":{"amount":10},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[-6660,3080],"id":"051bc0e8-4a7b-4354-ad0f-c1534a5b02de","name":"Wait and Retry Edit","webhookId":"editing-retry-wait"},{"parameters":{"jsCode":"// Final response for Image Editing workflow\nconst item = $input.all()[0];\nconst originalData = $('Image Editing Form').first().json;\n\n// Check if this is an error response\nif (item.json.error || item.json.message) {\n  return [{\n    json: {\n      status: \"error\",\n      workflow: \"Image Editing\",\n      message: item.json.error?.message || item.json.message || \"Image editing failed\",\n      error_details: item.json.error || item.json,\n      timestamp: new Date().toISOString()\n    }\n  }];\n}\n\n// Success response\nreturn [{\n  json: {\n    status: \"success\",\n    workflow: \"Image Editing\",\n    title: originalData['Image Title'],\n    model: originalData['Editing Model'],\n    editing_prompt: item.json.editingPrompt || originalData['Editing Instructions'],\n    image_source: item.json.imageSource || (originalData['Reference Image URL'] ? 'url' : 'upload'),\n    image_base64: item.json.image_base64,\n    metadata: {\n      editing_instructions: originalData['Editing Instructions'],\n      objects_added: originalData['Objects to Add'],\n      objects_removed: originalData['Objects to Remove'],\n      color_changes: originalData['Color Changes'],\n      lighting_effects: originalData['Lighting/Effects Changes'],\n      details_preserved: originalData['Details to Preserve'],\n      output_quality: originalData['Output Quality'],\n      edit_precision: originalData['Edit Precision'],\n      output_size: originalData['Output Size'],\n      api_used: item.json.apiType || (originalData['Editing Model'] === 'openai/gpt-image-1' ? 'openai' : 'replicate'),\n      generation_type: \"editing\",\n      had_reference_url: !!originalData['Reference Image URL'],\n      had_upload: !!originalData['Upload Image to Edit'],\n      uploaded_image_url: item.json.uploadedImageUrl || null,\n      precision_params: item.json.precisionParams,\n      final_steps: item.json.finalSteps\n    },\n    timestamp: new Date().toISOString()\n  }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-7260,2780],"id":"d81857ef-ea87-4566-b41f-7278cf3a3d9c","name":"Final Editing Processing"},{"parameters":{"respondWith":"json","responseBody":"={{ JSON.stringify($json, null, 2) }}","options":{}},"id":"0949ae2a-c081-40aa-b895-68089afcd242","name":"Final Editing Response","type":"n8n-nodes-base.respondToWebhook","position":[-7060,2780],"typeVersion":1.1},{"parameters":{"jsCode":"// Handle API errors for image editing\nconst item = $input.all()[0];\nconst originalData = $('Image Editing Form').first().json;\n\nlet errorMessage = \"Image editing failed\";\nlet errorDetails = item.json;\n\n// Handle specific error types\nif (item.json.error) {\n  if (item.json.error.message) {\n    errorMessage = item.json.error.message;\n  }\n} else if (item.json.message) {\n  errorMessage = item.json.message;\n} else if (item.json.status_code && item.json.status_code !== 200) {\n  errorMessage = `API returned status ${item.json.status_code}`;\n} else if (item.json.detail) {\n  errorMessage = item.json.detail;\n}\n\nreturn [{\n  json: {\n    status: \"error\",\n    workflow: \"Image Editing\",\n    message: errorMessage,\n    error_details: {\n      api_error: errorDetails,\n      original_request: {\n        title: originalData['Image Title'],\n        model: originalData['Editing Model'],\n        editing_instructions: originalData['Editing Instructions'],\n        image_source: originalData['Reference Image URL'] ? 'url' : 'upload'\n      }\n    },\n    timestamp: new Date().toISOString()\n  }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-7660,3180],"id":"71c41030-32c9-4d82-8fca-8ae86e5cff36","name":"Handle Editing API Error"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"has-errors","leftValue":"={{ $json.hasErrors }}","rightValue":true,"operator":{"type":"boolean","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[-8660,2780],"id":"1345ea49-0886-4762-9c7d-8df554548ef4","name":"Check for Errors2"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"has-url","leftValue":"={{ $json.hasUrl }}","rightValue":true,"operator":{"type":"boolean","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[-8460,2880],"id":"f1f13b8f-f4a6-4e6e-b66e-57cab68154cf","name":"Reference Type Router1"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"is-openai","leftValue":"={{ $json.isOpenAI }}","rightValue":true,"operator":{"type":"boolean","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[-8060,2880],"id":"40d1bf89-3e21-48f4-b7e4-aa5b43fc5932","name":"API Type Router2"},{"parameters":{"operation":"binaryToPropery","destinationKey":"image_base64","options":{}},"type":"n8n-nodes-base.extractFromFile","typeVersion":1,"position":[-7460,2780],"id":"4863c3d2-dc44-418f-ade1-b9780ecd0aec","name":"Convert to Base69"},{"parameters":{"content":"## New Image with or without captions","height":800,"width":2460},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[-4980,820],"id":"4d1f352b-6771-4c29-96bf-0fc948b2640e","name":"Sticky Note"},{"parameters":{"content":"## Image from Ref Image","height":840,"width":2660,"color":2},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[-5020,1860],"id":"2a921d89-2302-4f93-bb87-e0bf78e5ed2b","name":"Sticky Note1"},{"parameters":{"content":"## Edit Image","height":780,"width":2720,"color":3},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[-5040,3040],"id":"169f3a28-b78d-4436-90fa-c421cf3c8fdf","name":"Sticky Note2"},{"parameters":{"path":"image-caption-from-ref","formTitle":"Image with or without Captions from Reference","formDescription":"Transform reference images and optionally add professional text overlays/captions","formFields":{"values":[{"fieldLabel":"Image Title","placeholder":"My Captioned Image","requiredField":true},{"fieldLabel":"Processing Model","fieldType":"dropdown","fieldOptions":{"values":[{"option":"openai/gpt-image-1"},{"option":"black-forest-labs/flux-1.1-pro-ultra"},{"option":"black-forest-labs/flux-dev"},{"option":"stability-ai/stable-diffusion-3.5-large"},{"option":"recraft-ai/recraft-v3"},{"option":"ideogram-ai/ideogram-v2"}]},"requiredField":true},{"fieldLabel":"Reference Image URL","placeholder":"https://example.com/your-reference-image.jpg"},{"fieldLabel":"Upload Reference Image","fieldType":"file","multipleFiles":false},{"fieldLabel":"Processing Type","fieldType":"dropdown","fieldOptions":{"values":[{"option":"Add Caption Only"},{"option":"Transform Image + Add Caption"},{"option":"Transform Image (No Caption)"},{"option":"Professional Headshot + Caption"},{"option":"Product Photo + Caption"}]},"requiredField":true},{"fieldLabel":"Image Transformation","fieldType":"textarea","placeholder":"Make it look more professional, enhance lighting, improve background, convert to portrait style, etc."},{"fieldLabel":"Scene Context","fieldType":"textarea","placeholder":"Professional office setting, outdoor natural environment, studio photography, etc."},{"fieldLabel":"Add Caption?","fieldType":"dropdown","fieldOptions":{"values":[{"option":"No Caption"},{"option":"Add Caption"}]}},{"fieldLabel":"Caption Text","placeholder":"John Smith, CEO | Limited Time Offer! | Call (555) 123-4567"},{"fieldLabel":"Caption Position","fieldType":"dropdown","fieldOptions":{"values":[{"option":"bottom-center"},{"option":"bottom-left"},{"option":"bottom-right"},{"option":"top-center"},{"option":"top-left"},{"option":"top-right"},{"option":"center"},{"option":"lower-third"},{"option":"upper-third"}]}},{"fieldLabel":"Caption Style","fieldType":"dropdown","fieldOptions":{"values":[{"option":"Bold white text with black shadow"},{"option":"Professional black text on white background"},{"option":"Modern sans-serif white text"},{"option":"Elegant serif text with transparency"},{"option":"Bold colored text (brand colors)"},{"option":"Minimal clean text overlay"},{"option":"Corporate professional style"},{"option":"Social media style text"}]}},{"fieldLabel":"Caption Size","fieldType":"dropdown","fieldOptions":{"values":[{"option":"Small (subtle)"},{"option":"Medium (standard)"},{"option":"Large (prominent)"},{"option":"Extra Large (headline style)"}]}},{"fieldLabel":"Brand Colors","placeholder":"Blue (#0066CC), Red (#CC0000), Corporate colors to use in caption"},{"fieldLabel":"Background Enhancement","fieldType":"dropdown","fieldOptions":{"values":[{"option":"Keep Original Background"},{"option":"Professional Studio Background"},{"option":"Clean White Background"},{"option":"Subtle Gradient Background"},{"option":"Corporate Environment"},{"option":"Natural Outdoor Setting"}]}},{"fieldLabel":"Output Quality","fieldType":"dropdown","fieldOptions":{"values":[{"option":"Standard Quality"},{"option":"High Quality"},{"option":"Ultra High Quality (slow)"}]}},{"fieldLabel":"Output Size","fieldType":"dropdown","fieldOptions":{"values":[{"option":"1024x1024"},{"option":"1024x1536"},{"option":"1536x1024"},{"option":"Social Media (1080x1080)"},{"option":"Story Format (1080x1920)"}]}}]},"responseMode":"responseNode","options":{}},"id":"41066a5d-2d6a-455d-aa74-148c4cde443a","name":"Caption Reference Form","type":"n8n-nodes-base.formTrigger","position":[-9340,3920],"webhookId":"image-caption-from-ref","typeVersion":2.1},{"parameters":{"jsCode":"// Process and validate form data for caption/reference workflow\nconst formData = $json;\n\n// Extract and clean form data\nconst processedData = {\n  title: formData['Image Title'] || '',\n  model: formData['Processing Model'] || '',\n  referenceUrl: formData['Reference Image URL'] || '',\n  uploadedImage: formData['Upload Reference Image'] || null,\n  processingType: formData['Processing Type'] || '',\n  imageTransformation: formData['Image Transformation'] || '',\n  sceneContext: formData['Scene Context'] || '',\n  addCaption: formData['Add Caption?'] === 'Add Caption',\n  captionText: formData['Caption Text'] || '',\n  captionPosition: formData['Caption Position'] || 'bottom-center',\n  captionStyle: formData['Caption Style'] || 'Bold white text with black shadow',\n  captionSize: formData['Caption Size'] || 'Medium (standard)',\n  brandColors: formData['Brand Colors'] || '',\n  backgroundEnhancement: formData['Background Enhancement'] || 'Keep Original Background',\n  outputQuality: formData['Output Quality'] || 'Standard Quality',\n  outputSize: formData['Output Size'] || '1024x1024'\n};\n\n// Validation\nconst errors = [];\nif (!processedData.title.trim()) errors.push('Image Title is required');\nif (!processedData.model) errors.push('Processing Model is required');\nif (!processedData.processingType) errors.push('Processing Type is required');\n\n// Reference image validation\nconst hasUrl = processedData.referenceUrl.trim().length > 0;\nconst hasUpload = processedData.uploadedImage !== null;\n\nif (!hasUrl && !hasUpload) {\n  errors.push('Reference image is required - provide either URL or upload a file');\n}\n\nif (hasUrl && hasUpload) {\n  errors.push('Please provide either URL or upload - not both');\n}\n\n// Caption validation\nif (processedData.addCaption && !processedData.captionText.trim()) {\n  errors.push('Caption Text is required when Add Caption is selected');\n}\n\n// Check if model supports captions (primarily OpenAI)\nconst captionOptimizedModels = ['openai/gpt-image-1'];\nif (processedData.addCaption && !captionOptimizedModels.includes(processedData.model)) {\n  // Warning but not error - other models might work\n  console.log(`Warning: ${processedData.model} may have limited caption support. OpenAI models are recommended for text overlays.`);\n}\n\n// Determine API type and processing approach\nconst isOpenAI = processedData.model === 'openai/gpt-image-1';\nconst apiType = isOpenAI ? 'openai' : 'replicate';\n\n// Build comprehensive prompt based on processing type and options\nlet mainPrompt = '';\nlet useEditsAPI = false;\n\nswitch(processedData.processingType) {\n  case 'Add Caption Only':\n    mainPrompt = 'Enhance this image while maintaining its original style and composition';\n    if (processedData.addCaption) {\n      mainPrompt += ` and add professional text overlay: \"${processedData.captionText}\" positioned at ${processedData.captionPosition}`;\n    }\n    useEditsAPI = true;\n    break;\n    \n  case 'Transform Image + Add Caption':\n    mainPrompt = `Transform this image: ${processedData.imageTransformation || 'Enhance to professional quality'}`;\n    if (processedData.sceneContext) {\n      mainPrompt += ` Context: ${processedData.sceneContext}.`;\n    }\n    if (processedData.addCaption) {\n      mainPrompt += ` Include text overlay: \"${processedData.captionText}\" positioned at ${processedData.captionPosition}`;\n    }\n    useEditsAPI = true;\n    break;\n    \n  case 'Transform Image (No Caption)':\n    mainPrompt = `Transform this image: ${processedData.imageTransformation || 'Enhance to professional quality'}`;\n    if (processedData.sceneContext) {\n      mainPrompt += ` Context: ${processedData.sceneContext}.`;\n    }\n    useEditsAPI = true;\n    break;\n    \n  case 'Professional Headshot + Caption':\n    mainPrompt = 'Transform this into a professional headshot with studio lighting, professional background, and polished appearance';\n    if (processedData.addCaption) {\n      mainPrompt += ` Add professional name caption: \"${processedData.captionText}\" positioned at ${processedData.captionPosition}`;\n    }\n    useEditsAPI = true;\n    break;\n    \n  case 'Product Photo + Caption':\n    mainPrompt = 'Transform this into a professional product photograph with clean background, optimal lighting, and commercial quality';\n    if (processedData.addCaption) {\n      mainPrompt += ` Add product caption: \"${processedData.captionText}\" positioned at ${processedData.captionPosition}`;\n    }\n    useEditsAPI = true;\n    break;\n}\n\n// Add background enhancement\nif (processedData.backgroundEnhancement !== 'Keep Original Background') {\n  mainPrompt += ` Background: ${processedData.backgroundEnhancement}.`;\n}\n\n// Add caption styling details if caption is enabled\nif (processedData.addCaption) {\n  mainPrompt += ` Caption style: ${processedData.captionStyle}, size: ${processedData.captionSize}`;\n  \n  if (processedData.brandColors) {\n    mainPrompt += `, incorporate brand colors: ${processedData.brandColors}`;\n  }\n}\n\n// Add quality instructions\nmainPrompt += ' Maintain professional quality and realistic appearance.';\n\n// Set quality parameters\nlet qualityParams = {};\nif (processedData.outputQuality.includes('Ultra')) {\n  qualityParams = { steps: 40, guidance: 8 };\n} else if (processedData.outputQuality.includes('High')) {\n  qualityParams = { steps: 30, guidance: 7 };\n} else {\n  qualityParams = { steps: 25, guidance: 6 };\n}\n\n// Convert output size for APIs\nlet apiSize = processedData.outputSize;\nif (processedData.outputSize.includes('Social Media')) {\n  apiSize = '1024x1024';\n} else if (processedData.outputSize.includes('Story Format')) {\n  apiSize = '1024x1536';\n}\n\nreturn [{\n  json: {\n    ...processedData,\n    mainPrompt: mainPrompt,\n    apiType: apiType,\n    isOpenAI: isOpenAI,\n    hasUrl: hasUrl,\n    hasUpload: hasUpload,\n    useEditsAPI: useEditsAPI,\n    qualityParams: qualityParams,\n    apiSize: apiSize,\n    errors: errors,\n    hasErrors: errors.length > 0,\n    timestamp: new Date().toISOString()\n  }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-9140,3920],"id":"d187818e-a889-4a23-b058-e031babb96dc","name":"Process Caption Ref Data"},{"parameters":{"respondWith":"json","responseBody":"={\n  \"status\": \"error\",\n  \"workflow\": \"Image Caption from Reference\",\n  \"message\": \"Validation failed\",\n  \"errors\": {{ JSON.stringify($json.errors) }},\n  \"timestamp\": \"{{ $json.timestamp }}\"\n}","options":{}},"id":"f8235d30-c41f-49f1-bf5a-7f8d3808ff09","name":"Return Caption Ref Errors","type":"n8n-nodes-base.respondToWebhook","position":[-8740,3820],"typeVersion":1.1},{"parameters":{"url":"={{ $json.referenceUrl }}","options":{"response":{"response":{"responseFormat":"file"}}}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-8540,3920],"id":"e2a4867b-a7ce-4a24-9ad1-6c68f31557b6","name":"Download Reference for Caption","onError":"continueErrorOutput"},{"parameters":{"jsCode":"// Process uploaded reference image for caption workflow\nconst item = $input.all()[0];\n\nconsole.log('🔍 Processing uploaded image for caption workflow');\n\nif (!item.json.uploadedImage) {\n  throw new Error('No uploaded image found in form data');\n}\n\nconst uploadedFile = item.json.uploadedImage;\nconsole.log('Uploaded file structure:', JSON.stringify(uploadedFile, null, 2));\n\nlet binaryData = null;\nlet mimeType = 'image/jpeg';\nlet fileName = 'reference-for-caption.jpg';\n\n// Extract metadata\nif (uploadedFile.mimetype) mimeType = uploadedFile.mimetype;\nif (uploadedFile.mimeType) mimeType = uploadedFile.mimeType;\nif (uploadedFile.filename) fileName = uploadedFile.filename;\nif (uploadedFile.fileName) fileName = uploadedFile.fileName;\n\n// Extract binary data using multiple approaches\nif (uploadedFile.data) {\n  binaryData = uploadedFile.data;\n} else if (uploadedFile.buffer) {\n  binaryData = uploadedFile.buffer;\n} else if (uploadedFile.content) {\n  binaryData = uploadedFile.content;\n} else if (uploadedFile.file) {\n  binaryData = uploadedFile.file;\n} else if (typeof uploadedFile === 'string') {\n  binaryData = uploadedFile;\n} else {\n  // Check all properties for binary data\n  const keys = Object.keys(uploadedFile);\n  for (const key of keys) {\n    const value = uploadedFile[key];\n    if (value && (typeof value === 'string' || Buffer.isBuffer(value))) {\n      binaryData = value;\n      break;\n    }\n  }\n}\n\nif (!binaryData) {\n  throw new Error(`Could not extract binary data from upload. Available keys: ${Object.keys(uploadedFile).join(', ')}`);\n}\n\nconsole.log('✅ Successfully extracted binary data for caption workflow');\nconsole.log('Binary data type:', typeof binaryData);\nconsole.log('Binary data length:', binaryData.length || 'unknown');\n\n// Return with proper n8n binary structure\nreturn [{\n  json: {\n    ...item.json,\n    referenceProcessed: true,\n    referenceSource: 'upload'\n  },\n  binary: {\n    data: {\n      data: binaryData,\n      mimeType: mimeType,\n      fileName: fileName,\n      fileExtension: fileName.split('.').pop() || 'jpg'\n    }\n  }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-8540,4120],"id":"cff1fec9-1f5d-4392-b7e5-0ff37b28bb65","name":"Process Upload for Caption"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"use-edits","leftValue":"={{ $json.useEditsAPI }}","rightValue":true,"operator":{"type":"boolean","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[-8140,3920],"id":"0df0dd1d-8110-4e8e-b446-50986ab85146","name":"OpenAI Method Router"},{"parameters":{"method":"POST","url":"https://api.openai.com/v1/images/edits","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"contentType":"multipart-form-data","bodyParameters":{"parameters":[{"parameterType":"formBinaryData","name":"image","inputDataFieldName":"data"},{"name":"prompt","value":"={{ $json.mainPrompt }}"},{"name":"model","value":"gpt-image-1"},{"name":"size","value":"={{ $json.apiSize }}"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-7940,3820],"id":"28505578-fcd2-41f0-b01e-117a7d14b537","name":"OpenAI Caption Edit","credentials":{"httpHeaderAuth":{"id":"z06CbCGaeEeBPVIt","name":"GPT Image Generator"}},"onError":"continueErrorOutput"},{"parameters":{"method":"POST","url":"https://api.openai.com/v1/images/generations","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"application/json"}]},"sendBody":true,"specifyBody":"json","jsonBody":"={\n  \"model\": \"gpt-image-1\",\n  \"prompt\": {{ JSON.stringify($json.mainPrompt) }},\n  \"size\": \"{{ $json.apiSize }}\",\n  \"response_format\": \"b64_json\"\n}","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-7960,4000],"id":"88d1ecf3-c267-48f5-84a0-4c88f20023ca","name":"OpenAI Caption Generate","credentials":{"httpHeaderAuth":{"id":"z06CbCGaeEeBPVIt","name":"GPT Image Generator"}},"onError":"continueErrorOutput"},{"parameters":{"method":"POST","url":"https://freeimage.host/api/1/upload","sendBody":true,"contentType":"multipart-form-data","bodyParameters":{"parameters":[{"parameterType":"formBinaryData","name":"source","inputDataFieldName":"data"},{"name":"key","value":"6d207e02198a847aa98d0a2a901485a5"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-8140,4120],"id":"4ca34910-6bc9-4427-a01a-6654b042d257","name":"Upload for Caption Replicate","onError":"continueErrorOutput"},{"parameters":{"jsCode":"// Prepare Replicate API call for caption workflow\nconst item = $input.all()[0];\nconst uploadResponse = item.json;\n\nconsole.log('📝 Preparing Replicate caption call');\nconsole.log('Upload response:', JSON.stringify(uploadResponse, null, 2));\n\n// Check if upload was successful\nif (uploadResponse.status_code !== 200 || !uploadResponse.image || !uploadResponse.image.url) {\n  throw new Error('Reference image upload failed for Replicate caption API');\n}\n\nconst imageUrl = uploadResponse.image.url;\nconsole.log('✅ Reference image URL for caption:', imageUrl);\n\n// Get original form data to build the API call\nconst originalData = $('Caption Reference Form').first().json;\nconst model = originalData['Processing Model'];\nconst mainPrompt = item.json.mainPrompt || originalData['Image Transformation'];\nconst qualityParams = item.json.qualityParams || { steps: 25, guidance: 6 };\nconst apiSize = item.json.apiSize || '1024x1024';\n\n// Create aspect ratio from size\nlet aspectRatio = '1:1';\nif (apiSize === '1024x1536') aspectRatio = '2:3';\nelse if (apiSize === '1536x1024') aspectRatio = '3:2';\n\n// Note: Most Replicate models don't handle text overlays as well as OpenAI\n// But we can try with image-to-image transformation\nlet finalPrompt = mainPrompt;\n\n// If this model is known to have limited text support, adjust prompt\nif (!model.includes('ideogram') && !model.includes('recraft')) {\n  // Remove specific caption instructions for models that can't handle text well\n  finalPrompt = mainPrompt.replace(/Include text overlay:.*?positioned at.*?\\./g, '');\n  finalPrompt = mainPrompt.replace(/Add.*?caption:.*?positioned at.*?\\./g, '');\n  \n  if (finalPrompt !== mainPrompt) {\n    console.log('⚠️ Adjusted prompt for limited text support model');\n    finalPrompt += ' Create a professional, high-quality image suitable for adding text overlays later.';\n  }\n}\n\nconsole.log('✅ Using caption model:', model);\nconsole.log('✅ Using caption prompt:', finalPrompt);\nconsole.log('✅ Quality params:', qualityParams);\n\n// Create the API call structure\nconst apiCall = {\n  url: `https://api.replicate.com/v1/models/${model}/predictions`,\n  method: 'POST',\n  headers: { 'Content-Type': 'application/json' },\n  body: {\n    input: {\n      prompt: finalPrompt,\n      input_image: imageUrl,\n      aspect_ratio: aspectRatio,\n      steps: qualityParams.steps,\n      guidance: qualityParams.guidance,\n      output_format: 'jpg'\n    }\n  }\n};\n\nconsole.log('✅ Final caption API call body:', JSON.stringify(apiCall.body, null, 2));\n\nreturn [{\n  json: {\n    ...item.json,\n    apiCall: apiCall,\n    uploadedImageUrl: imageUrl,\n    model: model,\n    finalPrompt: finalPrompt,\n    textSupportWarning: finalPrompt !== mainPrompt\n  },\n  binary: item.binary\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-7940,4120],"id":"33acf647-7285-4419-b11e-f61463862321","name":"Prepare Caption Replicate"},{"parameters":{"method":"POST","url":"={{ $json.apiCall.url }}","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"application/json"}]},"sendBody":true,"specifyBody":"json","jsonBody":"={{ JSON.stringify($json.apiCall.body) }}","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-7740,4120],"id":"7b244427-a19d-4d74-8418-6a4351a0d38d","name":"Call Caption Replicate","credentials":{"httpHeaderAuth":{"id":"JlfTRouEz1b1K4bJ","name":"Flux Replicate Auth account"}},"onError":"continueErrorOutput"},{"parameters":{"operation":"toBinary","sourceProperty":"data[0].b64_json","options":{}},"type":"n8n-nodes-base.convertToFile","typeVersion":1.1,"position":[-7740,3920],"id":"53e5075c-9dea-4269-9e96-c7c46630a3cc","name":"Convert OpenAI Caption"},{"parameters":{"amount":18},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[-7540,4120],"id":"de9d565e-5c6e-4cd1-a4e8-d6d97d99ba6f","name":"Wait for Caption Processing","webhookId":"caption-replicate-wait"},{"parameters":{"url":"={{ 'https://api.replicate.com/v1/predictions/' + $json.id }}","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-7340,4120],"id":"bc912628-e342-4a27-8119-7a8591a508a4","name":"Check Caption Status","credentials":{"httpHeaderAuth":{"id":"JlfTRouEz1b1K4bJ","name":"Flux Replicate Auth account"}}},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"is-complete","leftValue":"={{ $json.status }}","rightValue":"succeeded","operator":{"type":"string","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[-7140,4120],"id":"c70fe2d7-19dd-4130-9951-874dc7d7549f","name":"Check if Caption Complete"},{"parameters":{"url":"={{ Array.isArray($json.output) ? $json.output[0] : $json.output }}","options":{"response":{"response":{"responseFormat":"file"}}}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-6940,4020],"id":"fc7561ad-a974-4e30-bf5f-885bb8f9fc6f","name":"Download Caption Result"},{"parameters":{"amount":12},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[-6940,4220],"id":"29a5ec30-c702-4c0e-81ab-3edf894e3e9c","name":"Wait and Retry Caption","webhookId":"caption-retry-wait"},{"parameters":{"jsCode":"// Final response for Caption Reference workflow\nconst item = $input.all()[0];\nconst originalData = $('Caption Reference Form').first().json;\n\n// Check if this is an error response\nif (item.json.error || item.json.message) {\n  return [{\n    json: {\n      status: \"error\",\n      workflow: \"Image Caption from Reference\",\n      message: item.json.error?.message || item.json.message || \"Caption processing failed\",\n      error_details: item.json.error || item.json,\n      timestamp: new Date().toISOString()\n    }\n  }];\n}\n\n// Success response\nreturn [{\n  json: {\n    status: \"success\",\n    workflow: \"Image Caption from Reference\",\n    title: originalData['Image Title'],\n    model: originalData['Processing Model'],\n    processing_type: originalData['Processing Type'],\n    main_prompt: item.json.mainPrompt || originalData['Image Transformation'],\n    reference_source: item.json.referenceSource || (originalData['Reference Image URL'] ? 'url' : 'upload'),\n    had_caption: originalData['Add Caption?'] === 'Add Caption',\n    caption_text: originalData['Caption Text'] || null,\n    image_base64: item.json.image_base64,\n    metadata: {\n      processing_type: originalData['Processing Type'],\n      image_transformation: originalData['Image Transformation'],\n      scene_context: originalData['Scene Context'],\n      caption_position: originalData['Caption Position'],\n      caption_style: originalData['Caption Style'],\n      caption_size: originalData['Caption Size'],\n      brand_colors: originalData['Brand Colors'],\n      background_enhancement: originalData['Background Enhancement'],\n      output_quality: originalData['Output Quality'],\n      output_size: originalData['Output Size'],\n      api_used: item.json.apiType || (originalData['Processing Model'] === 'openai/gpt-image-1' ? 'openai' : 'replicate'),\n      generation_type: \"caption_reference\",\n      used_edits_api: item.json.useEditsAPI || false,\n      had_reference_url: !!originalData['Reference Image URL'],\n      had_upload: !!originalData['Upload Reference Image'],\n      uploaded_image_url: item.json.uploadedImageUrl || null,\n      text_support_warning: item.json.textSupportWarning || false,\n      quality_params: item.json.qualityParams\n    },\n    timestamp: new Date().toISOString()\n  }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-7340,3920],"id":"9c661df6-127a-46a2-9a7d-774c6ef67726","name":"Final Caption Processing"},{"parameters":{"respondWith":"json","responseBody":"={{ JSON.stringify($json, null, 2) }}","options":{}},"id":"4c18cd69-e3e2-4142-8149-42b0ccdf91d7","name":"Final Caption Response","type":"n8n-nodes-base.respondToWebhook","position":[-7140,3920],"typeVersion":1.1},{"parameters":{"jsCode":"// Handle API errors for caption workflow\nconst item = $input.all()[0];\nconst originalData = $('Caption Reference Form').first().json;\n\nlet errorMessage = \"Caption processing failed\";\nlet errorDetails = item.json;\n\n// Handle specific error types\nif (item.json.error) {\n  if (item.json.error.message) {\n    errorMessage = item.json.error.message;\n  }\n} else if (item.json.message) {\n  errorMessage = item.json.message;\n} else if (item.json.status_code && item.json.status_code !== 200) {\n  errorMessage = `API returned status ${item.json.status_code}`;\n} else if (item.json.detail) {\n  errorMessage = item.json.detail;\n}\n\nreturn [{\n  json: {\n    status: \"error\",\n    workflow: \"Image Caption from Reference\",\n    message: errorMessage,\n    error_details: {\n      api_error: errorDetails,\n      original_request: {\n        title: originalData['Image Title'],\n        model: originalData['Processing Model'],\n        processing_type: originalData['Processing Type'],\n        had_caption: originalData['Add Caption?'] === 'Add Caption',\n        reference_source: originalData['Reference Image URL'] ? 'url' : 'upload'\n      }\n    },\n    timestamp: new Date().toISOString()\n  }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-7740,4320],"id":"ef97e9b4-6e11-4b7b-a1f0-aed27eba866f","name":"Handle Caption API Error"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"has-errors","leftValue":"={{ $json.hasErrors }}","rightValue":true,"operator":{"type":"boolean","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[-8940,3920],"id":"62827111-5b41-4800-83ad-b00710c95570","name":"Check for Errors3"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"has-url","leftValue":"={{ $json.hasUrl }}","rightValue":true,"operator":{"type":"boolean","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[-8740,4020],"id":"5d15648c-75de-4130-b610-f925bff53d35","name":"Reference Type Router2"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"is-openai","leftValue":"={{ $json.isOpenAI }}","rightValue":true,"operator":{"type":"boolean","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[-8340,4020],"id":"a05404c7-84d0-4dc0-b42e-3f8e7dfe4ed0","name":"API Type Router3"},{"parameters":{"operation":"binaryToPropery","destinationKey":"image_base64","options":{}},"type":"n8n-nodes-base.extractFromFile","typeVersion":1,"position":[-7540,3920],"id":"1493ee9e-c4ab-4f6d-a7b7-d3edd1ca4750","name":"Convert to Base70"},{"parameters":{"content":"##Image with captions from ref Image","height":800,"width":2700,"color":4},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[-4960,4120],"id":"5d24e201-be3e-4cdd-856d-6a529b0ec127","name":"Sticky Note3"},{"parameters":{"path":"75479ae6-3efc-40c9-a871-944cff68e997","formTitle":"New Image Generation (with optional Caption)","formDescription":"Generate brand new images from text prompts, with optional text captions","formFields":{"values":[{"fieldLabel":"Image Title","placeholder":"My Generated Image","requiredField":true},{"fieldLabel":"Image Model","fieldType":"dropdown","fieldOptions":{"values":[{"option":"openai/gpt-image-1"},{"option":"black-forest-labs/flux-schnell"},{"option":"black-forest-labs/flux-dev"},{"option":"black-forest-labs/flux-1.1-pro-ultra"},{"option":"stability-ai/stable-diffusion-3.5-large"},{"option":"stability-ai/sdxl-turbo"},{"option":"recraft-ai/recraft-v3"},{"option":"ideogram-ai/ideogram-v2"},{"option":"bytedance/sdxl-lightning-4step"}]},"requiredField":true},{"fieldLabel":"Main Prompt","fieldType":"textarea","placeholder":"A bustling coffee shop with people working on laptops, warm lighting, modern interior design","requiredField":true},{"fieldLabel":"Image Style","placeholder":"Photorealistic, Cartoon, Abstract, Oil painting, Digital art, Cinematic, etc."},{"fieldLabel":"Background Description","fieldType":"textarea","placeholder":"Modern urban setting, soft gradient, studio lighting, outdoor scene, etc."},{"fieldLabel":"Image Size","fieldType":"dropdown","fieldOptions":{"values":[{"option":"1024x1024"},{"option":"1024x1536"},{"option":"1536x1024"}]}},{"fieldLabel":"Add Caption?","fieldType":"dropdown","fieldOptions":{"values":[{"option":"No Caption"},{"option":"Add Caption"}]}},{"fieldLabel":"Caption Text","placeholder":"Limited Time Offer! | John Smith, CEO | Call Now!"},{"fieldLabel":"Caption Style","placeholder":"Bold white text, bottom-center, professional font, with shadow"},{"fieldLabel":"Caption Position","fieldType":"dropdown","fieldOptions":{"values":[{"option":"bottom-center"},{"option":"bottom-left"},{"option":"bottom-right"},{"option":"top-center"},{"option":"top-left"},{"option":"top-right"},{"option":"center"}]}}]},"responseMode":"responseNode","options":{}},"id":"c04eedd0-4be2-4699-bfb1-51a65281cc03","name":"New Image Form1","type":"n8n-nodes-base.formTrigger","position":[-8460,380],"webhookId":"75479ae6-3efc-40c9-a871-944cff68e997","typeVersion":2.1},{"parameters":{"jsCode":"// Process and validate form data for new image generation\nconst formData = $json;\n\n// Extract and clean form data\nconst processedData = {\n  title: formData['Image Title'] || '',\n  model: formData['Image Model'] || '',\n  mainPrompt: formData['Main Prompt'] || '',\n  style: formData['Image Style'] || '',\n  background: formData['Background Description'] || '',\n  size: formData['Image Size'] || '1024x1024',\n  addCaption: formData['Add Caption?'] === 'Add Caption',\n  captionText: formData['Caption Text'] || '',\n  captionStyle: formData['Caption Style'] || '',\n  captionPosition: formData['Caption Position'] || 'bottom-center'\n};\n\n// Validation\nconst errors = [];\nif (!processedData.title.trim()) errors.push('Image Title is required');\nif (!processedData.model) errors.push('Image Model is required');\nif (!processedData.mainPrompt.trim()) errors.push('Main Prompt is required');\n\n// Caption validation\nif (processedData.addCaption && !processedData.captionText.trim()) {\n  errors.push('Caption Text is required when Add Caption is selected');\n}\n\n// Check if model supports captions\nconst captionSupportedModels = ['openai/gpt-image-1'];\nif (processedData.addCaption && !captionSupportedModels.includes(processedData.model)) {\n  errors.push(`Captions are only supported with OpenAI models. Selected model: ${processedData.model}`);\n}\n\n// Determine API type\nconst isOpenAI = processedData.model === 'openai/gpt-image-1';\nconst apiType = isOpenAI ? 'openai' : 'replicate';\n\n// Build final prompt\nlet finalPrompt = processedData.mainPrompt;\nif (processedData.style) {\n  finalPrompt = `${processedData.style} style. ${finalPrompt}`;\n}\nif (processedData.background) {\n  finalPrompt += ` Background: ${processedData.background}.`;\n}\n\n// Add caption to prompt if needed (OpenAI can handle text in prompts)\nif (processedData.addCaption && isOpenAI) {\n  finalPrompt += ` Include text overlay: \"${processedData.captionText}\" positioned at ${processedData.captionPosition}. ${processedData.captionStyle ? 'Style: ' + processedData.captionStyle : ''}`;\n}\n\nreturn [{\n  json: {\n    ...processedData,\n    finalPrompt: finalPrompt,\n    apiType: apiType,\n    isOpenAI: isOpenAI,\n    errors: errors,\n    hasErrors: errors.length > 0,\n    timestamp: new Date().toISOString()\n  }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-8260,380],"id":"a5643c73-c802-44b6-96dc-cd2067570ff8","name":"Process Form Data1"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"has-errors","leftValue":"={{ $json.hasErrors }}","rightValue":true,"operator":{"type":"boolean","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[-8060,380],"id":"78bc5ffa-3814-4cf7-9b76-8aa44212a176","name":"Check for Errors4"},{"parameters":{"respondWith":"json","responseBody":"={\n  \"status\": \"error\",\n  \"workflow\": \"New Image Generation\",\n  \"message\": \"Validation failed\",\n  \"errors\": {{ JSON.stringify($json.errors) }},\n  \"timestamp\": \"{{ $json.timestamp }}\"\n}","options":{}},"id":"4f3265a5-577f-41ea-8877-295286d10d86","name":"Return Validation Errors1","type":"n8n-nodes-base.respondToWebhook","position":[-7860,280],"typeVersion":1.1},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"is-openai","leftValue":"={{ $json.isOpenAI }}","rightValue":true,"operator":{"type":"boolean","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[-7860,480],"id":"aaecd03c-21f5-4bc5-908f-64c9930d67d1","name":"Route by API Type1"},{"parameters":{"method":"POST","url":"https://api.openai.com/v1/images/generations","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"bodyParameters":{"parameters":[{"name":"prompt","value":"={{ $json.finalPrompt }}"},{"name":"model","value":"gpt-image-1"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-7660,380],"id":"e7196d8d-5c75-413b-8fef-a39cc033f4e4","name":"OpenAI Image Generation1","credentials":{"httpHeaderAuth":{"id":"z06CbCGaeEeBPVIt","name":"GPT Image Generator"}},"onError":"continueErrorOutput"},{"parameters":{"method":"POST","url":"={{ 'https://api.replicate.com/v1/models/' + $json.model + '/predictions' }}","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"application/json"}]},"sendBody":true,"specifyBody":"json","jsonBody":"={\n  \"input\": {\n    \"prompt\": {{ JSON.stringify($json.finalPrompt) }},\n    \"aspect_ratio\": \"{{ $json.size === '1024x1024' ? '1:1' : ($json.size === '1024x1536' ? '2:3' : '3:2') }}\",\n    \"steps\": 28,\n    \"guidance\": 7,\n    \"output_format\": \"jpg\"\n  }\n}","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-7660,580],"id":"5ef429bb-108c-4b3c-a6d9-1964b47ea4a7","name":"Replicate Image Generation1","credentials":{"httpHeaderAuth":{"id":"JlfTRouEz1b1K4bJ","name":"Flux Replicate Auth account"}},"onError":"continueErrorOutput"},{"parameters":{"amount":10},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[-7460,580],"id":"a8dbb923-f159-4087-8a67-0c7d5590b683","name":"Wait for Replicate2","webhookId":"replicate-wait"},{"parameters":{"url":"={{ 'https://api.replicate.com/v1/predictions/' + $json.id }}","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-7260,580],"id":"a8d096e2-cfb2-4a9b-91f6-eca43bfe239c","name":"Check Replicate Status2","credentials":{"httpHeaderAuth":{"id":"JlfTRouEz1b1K4bJ","name":"Flux Replicate Auth account"}}},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"is-complete","leftValue":"={{ $json.status }}","rightValue":"succeeded","operator":{"type":"string","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[-7060,580],"id":"3ccc2746-c08b-445c-8330-7f454cc4369f","name":"Check if Complete2"},{"parameters":{"url":"={{ Array.isArray($json.output) ? $json.output[0] : $json.output }}","options":{"response":{"response":{"responseFormat":"file"}}}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-6840,520],"id":"0d2cd036-31eb-4c3c-9c43-029a4053ef93","name":"Download Replicate Result1"},{"parameters":{},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[-6860,680],"id":"01549a22-21a9-4d59-9df5-31447432d827","name":"Wait and Retry2","webhookId":"retry-wait"},{"parameters":{"operation":"binaryToPropery","destinationKey":"image_base64","options":{}},"type":"n8n-nodes-base.extractFromFile","typeVersion":1,"position":[-7220,380],"id":"766b591c-005f-4d18-aafc-6dc54b80e685","name":"Convert to Base71"},{"parameters":{"jsCode":"// Final response for New Image Generation workflow\nconst item = $input.all()[0];\nconst originalData = $('New Image Form1').first().json;\n\n// Check if this is an error response\nif (item.json.error || item.json.message) {\n  return [{\n    json: {\n      status: \"error\",\n      workflow: \"New Image Generation\",\n      message: item.json.error?.message || item.json.message || \"Image generation failed\",\n      error_details: item.json.error || item.json,\n      timestamp: new Date().toISOString()\n    }\n  }];\n}\n\n// Success response\nreturn [{\n  json: {\n    status: \"success\",\n    workflow: \"New Image Generation\",\n    title: originalData['Image Title'],\n    model: originalData['Image Model'],\n    prompt: item.json.finalPrompt || originalData['Main Prompt'],\n    had_caption: originalData['Add Caption?'] === 'Add Caption',\n    caption_text: originalData['Caption Text'] || null,\n    image_base64: item.json.image_base64,\n    metadata: {\n      style: originalData['Image Style'],\n      background: originalData['Background Description'],\n      size: originalData['Image Size'],\n      api_used: item.json.apiType || (originalData['Image Model'] === 'openai/gpt-image-1' ? 'openai' : 'replicate'),\n      generation_type: \"new_image\",\n      caption_position: originalData['Caption Position'] || null,\n      caption_style: originalData['Caption Style'] || null\n    },\n    timestamp: new Date().toISOString()\n  }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-7060,380],"id":"9075b6b7-ef10-4615-84cc-06dd69c716b7","name":"Final Processing1"},{"parameters":{"respondWith":"json","responseBody":"={{ JSON.stringify($json, null, 2) }}","options":{}},"id":"df90c9db-94c9-48bf-a3bb-048f03e8de7a","name":"Final Response2","type":"n8n-nodes-base.respondToWebhook","position":[-6860,380],"typeVersion":1.1},{"parameters":{"jsCode":"// Handle API errors and create error response\nconst item = $input.all()[0];\nconst originalData = $('New Image Form1').first().json;\n\nreturn [{\n  json: {\n    status: \"error\",\n    workflow: \"New Image Generation\",\n    message: \"Image generation API failed\",\n    error_details: {\n      api_error: item.json,\n      original_request: {\n        title: originalData['Image Title'],\n        model: originalData['Image Model'],\n        prompt: originalData['Main Prompt']\n      }\n    },\n    timestamp: new Date().toISOString()\n  }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-7460,780],"id":"9d515630-6739-404d-b3af-cc6678d8743b","name":"Handle API Error1"},{"parameters":{"operation":"toBinary","sourceProperty":"data[0].b64_json","options":{}},"type":"n8n-nodes-base.convertToFile","typeVersion":1.1,"position":[-7440,380],"id":"31b972cb-efb2-41c1-92a4-d04ab8b10d15","name":"Convert to File4"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"has-errors","leftValue":"={{ $json.hasErrors }}","rightValue":true,"operator":{"type":"boolean","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[-4520,2100],"id":"6f91d03f-1d26-4f4f-a61e-153ac9b83d84","name":"Check for Errors"},{"parameters":{"operation":"toBinary","sourceProperty":"data[0].b64_json","options":{}},"type":"n8n-nodes-base.convertToFile","typeVersion":1.1,"position":[-3520,2100],"id":"6825f5bc-c8d1-45c3-beb8-05a148e4723a","name":"Convert OpenAI Response"},{"parameters":{"amount":12},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[-3120,2300],"id":"90b8cf54-9745-4026-abe9-e0329f4a66e6","name":"Wait for Replicate","webhookId":"replicate-regenerate-wait"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"is-complete","leftValue":"={{ $json.status }}","rightValue":"succeeded","operator":{"type":"string","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[-2720,2300],"id":"9d11a0c8-fc3a-460f-bf02-6c867937fd74","name":"Check if Complete"},{"parameters":{"amount":8},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[-2520,2400],"id":"74506789-4333-4fad-997c-cc537d89da48","name":"Wait and Retry","webhookId":"regenerate-retry-wait"},{"parameters":{"path":"b2022b43-a237-4d06-bd79-06e7bc128d7b","formTitle":"Image Re-generation from Reference","formDescription":"Transform existing images with new styles, scenes, and modifications","formFields":{"values":[{"fieldLabel":"Image Title","placeholder":"My Regenerated Image","requiredField":true},{"fieldLabel":"Image Model","fieldType":"dropdown","fieldOptions":{"values":[{"option":"openai/gpt-image-1"},{"option":"black-forest-labs/flux-1.1-pro-ultra"},{"option":"stability-ai/sdxl-turbo"},{"option":"black-forest-labs/flux-dev"},{"option":"stability-ai/stable-diffusion-3.5-large"}]},"requiredField":true},{"fieldLabel":"Reference Image URL","placeholder":"https://example.com/your-reference-image.jpg"},{"fieldLabel":"Upload Reference Image","fieldType":"file","multipleFiles":false},{"fieldLabel":"Style Transformation","fieldType":"textarea","placeholder":"Transform to photorealistic style, make it look like a vintage painting, convert to cyberpunk aesthetic, etc.","requiredField":true},{"fieldLabel":"Scene Modifications","fieldType":"textarea","placeholder":"Change the setting to a futuristic city, move to outdoor environment, add more people, etc."},{"fieldLabel":"Background Changes","fieldType":"textarea","placeholder":"Replace background with mountains, add sunset lighting, make background blurred, etc."},{"fieldLabel":"Focus Areas","fieldType":"textarea","placeholder":"Keep the main subject but emphasize the colors, maintain the car but change everything else, etc."},{"fieldLabel":"Additional Instructions","fieldType":"textarea","placeholder":"Any other specific modifications or requirements"},{"fieldLabel":"Output Size","fieldType":"dropdown","fieldOptions":{"values":[{"option":"1024x1024"},{"option":"1024x1536"},{"option":"1536x1024"}]}},{"fieldLabel":"Transformation Strength","fieldType":"dropdown","fieldOptions":{"values":[{"option":"Light (keep most original elements)"},{"option":"Medium (balanced transformation)"},{"option":"Strong (significant changes)"}]}}]},"responseMode":"responseNode","options":{}},"id":"0166d2b0-a760-4bb0-9231-d0e100553487","name":"Image Regenerate Form1","type":"n8n-nodes-base.formTrigger","position":[-4920,2100],"webhookId":"b2022b43-a237-4d06-bd79-06e7bc128d7b","typeVersion":2.1},{"parameters":{"jsCode":"// Process and validate form data for image regeneration\nconst formData = $json;\n\n// Extract and clean form data\nconst processedData = {\n  title: formData['Image Title'] || '',\n  model: formData['Image Model'] || '',\n  referenceUrl: formData['Reference Image URL'] || '',\n  uploadedImage: formData['Upload Reference Image'] || null,\n  styleTransformation: formData['Style Transformation'] || '',\n  sceneModifications: formData['Scene Modifications'] || '',\n  backgroundChanges: formData['Background Changes'] || '',\n  focusAreas: formData['Focus Areas'] || '',\n  additionalInstructions: formData['Additional Instructions'] || '',\n  outputSize: formData['Output Size'] || '1024x1024',\n  transformationStrength: formData['Transformation Strength'] || 'Medium (balanced transformation)'\n};\n\n// Validation\nconst errors = [];\nif (!processedData.title.trim()) errors.push('Image Title is required');\nif (!processedData.model) errors.push('Image Model is required');\nif (!processedData.styleTransformation.trim()) errors.push('Style Transformation is required');\n\n// Reference image validation\nconst hasUrl = processedData.referenceUrl.trim().length > 0;\nconst hasUpload = processedData.uploadedImage !== null;\n\nif (!hasUrl && !hasUpload) {\n  errors.push('Reference image is required - provide either URL or upload a file');\n}\n\nif (hasUrl && hasUpload) {\n  errors.push('Please provide either URL or upload - not both');\n}\n\n// Determine API type and settings\nconst isOpenAI = processedData.model === 'openai/gpt-image-1';\nconst apiType = isOpenAI ? 'openai' : 'replicate';\n\n// Build comprehensive transformation prompt\nlet transformationPrompt = `Transform this image: ${processedData.styleTransformation}`;\n\nif (processedData.sceneModifications) {\n  transformationPrompt += ` Scene: ${processedData.sceneModifications}.`;\n}\n\nif (processedData.backgroundChanges) {\n  transformationPrompt += ` Background: ${processedData.backgroundChanges}.`;\n}\n\nif (processedData.focusAreas) {\n  transformationPrompt += ` Focus: ${processedData.focusAreas}.`;\n}\n\nif (processedData.additionalInstructions) {\n  transformationPrompt += ` Additional: ${processedData.additionalInstructions}.`;\n}\n\n// Add quality and style instructions\ntransformationPrompt += ' Maintain high quality and professional appearance.';\n\n// Set transformation strength parameters\nlet strengthParams = {};\nif (processedData.transformationStrength.includes('Light')) {\n  strengthParams = { guidance: 5, steps: 20 };\n} else if (processedData.transformationStrength.includes('Strong')) {\n  strengthParams = { guidance: 12, steps: 40 };\n} else {\n  strengthParams = { guidance: 7, steps: 28 };\n}\n\nreturn [{\n  json: {\n    ...processedData,\n    transformationPrompt: transformationPrompt,\n    apiType: apiType,\n    isOpenAI: isOpenAI,\n    hasUrl: hasUrl,\n    hasUpload: hasUpload,\n    strengthParams: strengthParams,\n    errors: errors,\n    hasErrors: errors.length > 0,\n    timestamp: new Date().toISOString()\n  }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-4720,2100],"id":"78ff9ff6-d868-4f73-bcec-25fa20459e6d","name":"Process Regenerate Data1"},{"parameters":{"respondWith":"json","responseBody":"={\n  \"status\": \"error\",\n  \"workflow\": \"Image Re-generation\",\n  \"message\": \"Validation failed\",\n  \"errors\": {{ JSON.stringify($json.errors) }},\n  \"timestamp\": \"{{ $json.timestamp }}\"\n}","options":{}},"id":"0fa62ee2-0cd4-47ef-9592-73771669ea8e","name":"Return Regenerate Errors1","type":"n8n-nodes-base.respondToWebhook","position":[-4320,2000],"typeVersion":1.1},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"has-url","leftValue":"={{ $json.hasUrl }}","rightValue":true,"operator":{"type":"boolean","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[-4320,2200],"id":"02b11c12-8471-4e6a-b99f-fc0c14bbaa7a","name":"Reference Type Router3"},{"parameters":{"url":"={{ $json.referenceUrl }}","options":{"response":{"response":{"responseFormat":"file"}}}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-4120,2100],"id":"4b03a6bb-a97e-442b-a9f3-6cbe3c7a20d8","name":"Download Reference Image3","onError":"continueErrorOutput"},{"parameters":{"jsCode":"// Process uploaded reference image for regeneration\nconst item = $input.all()[0];\n\nconsole.log('🔍 Processing uploaded image for regeneration');\n\nif (!item.json.uploadedImage) {\n  throw new Error('No uploaded image found in form data');\n}\n\nconst uploadedFile = item.json.uploadedImage;\nconsole.log('Uploaded file structure:', JSON.stringify(uploadedFile, null, 2));\n\nlet binaryData = null;\nlet mimeType = 'image/jpeg';\nlet fileName = 'reference-image.jpg';\n\n// Extract metadata\nif (uploadedFile.mimetype) mimeType = uploadedFile.mimetype;\nif (uploadedFile.mimeType) mimeType = uploadedFile.mimeType;\nif (uploadedFile.filename) fileName = uploadedFile.filename;\nif (uploadedFile.fileName) fileName = uploadedFile.fileName;\n\n// Extract binary data using multiple approaches\nif (uploadedFile.data) {\n  binaryData = uploadedFile.data;\n} else if (uploadedFile.buffer) {\n  binaryData = uploadedFile.buffer;\n} else if (uploadedFile.content) {\n  binaryData = uploadedFile.content;\n} else if (uploadedFile.file) {\n  binaryData = uploadedFile.file;\n} else if (typeof uploadedFile === 'string') {\n  binaryData = uploadedFile;\n} else {\n  // Check all properties for binary data\n  const keys = Object.keys(uploadedFile);\n  for (const key of keys) {\n    const value = uploadedFile[key];\n    if (value && (typeof value === 'string' || Buffer.isBuffer(value))) {\n      binaryData = value;\n      break;\n    }\n  }\n}\n\nif (!binaryData) {\n  throw new Error(`Could not extract binary data from upload. Available keys: ${Object.keys(uploadedFile).join(', ')}`);\n}\n\nconsole.log('✅ Successfully extracted binary data');\nconsole.log('Binary data type:', typeof binaryData);\nconsole.log('Binary data length:', binaryData.length || 'unknown');\n\n// Return with proper n8n binary structure\nreturn [{\n  json: {\n    ...item.json,\n    referenceProcessed: true,\n    referenceSource: 'upload'\n  },\n  binary: {\n    data: {\n      data: binaryData,\n      mimeType: mimeType,\n      fileName: fileName,\n      fileExtension: fileName.split('.').pop() || 'jpg'\n    }\n  }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-4120,2300],"id":"7aa73136-44b9-4a22-bf99-c92932d8f4bc","name":"Process Upload Reference1"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"is-openai","leftValue":"={{ $json.isOpenAI }}","rightValue":true,"operator":{"type":"boolean","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[-3920,2200],"id":"fca6a53f-5511-4978-8fae-26003c160025","name":"API Type Router4"},{"parameters":{"method":"POST","url":"https://api.openai.com/v1/images/edits","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"contentType":"multipart-form-data","bodyParameters":{"parameters":[{"parameterType":"formBinaryData","name":"image","inputDataFieldName":"data"},{"name":"prompt","value":"={{ $json.transformationPrompt }}"},{"name":"model","value":"gpt-image-1"},{"name":"size","value":"={{ $json.outputSize }}"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-3720,2100],"id":"2d10696e-d318-4fa6-a43e-ec4f8ccbc0ac","name":"OpenAI Regenerate1","credentials":{"httpHeaderAuth":{"id":"z06CbCGaeEeBPVIt","name":"GPT Image Generator"}},"onError":"continueErrorOutput"},{"parameters":{"method":"POST","url":"https://freeimage.host/api/1/upload","sendBody":true,"contentType":"multipart-form-data","bodyParameters":{"parameters":[{"parameterType":"formBinaryData","name":"source","inputDataFieldName":"data"},{"name":"key","value":"6d207e02198a847aa98d0a2a901485a5"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-3720,2300],"id":"473338ad-c0c5-40b7-80af-f32884d0c6b4","name":"Upload for Replicate1","onError":"continueErrorOutput"},{"parameters":{"jsCode":"// Prepare Replicate API call for regeneration\nconst item = $input.all()[0];\nconst uploadResponse = item.json;\n\nconsole.log('🚀 Preparing Replicate regeneration call');\nconsole.log('Upload response:', JSON.stringify(uploadResponse, null, 2));\n\n// Check if upload was successful\nif (uploadResponse.status_code !== 200 || !uploadResponse.image || !uploadResponse.image.url) {\n  throw new Error('Reference image upload failed for Replicate API');\n}\n\nconst imageUrl = uploadResponse.image.url;\nconsole.log('✅ Reference image URL:', imageUrl);\n\n// Get original form data to build the API call\nconst originalData = $('Image Regenerate Form1').first().json;\nconst model = originalData['Image Model'];\nconst transformationPrompt = item.json.transformationPrompt || originalData['Style Transformation'];\nconst strengthParams = item.json.strengthParams || { guidance: 7, steps: 28 };\nconst outputSize = originalData['Output Size'] || '1024x1024';\n\n// Create aspect ratio from size\nlet aspectRatio = '1:1';\nif (outputSize === '1024x1536') aspectRatio = '2:3';\nelse if (outputSize === '1536x1024') aspectRatio = '3:2';\n\nconsole.log('✅ Using model:', model);\nconsole.log('✅ Using prompt:', transformationPrompt);\nconsole.log('✅ Strength params:', strengthParams);\n\n// Create the API call structure\nconst apiCall = {\n  url: `https://api.replicate.com/v1/models/${model}/predictions`,\n  method: 'POST',\n  headers: { 'Content-Type': 'application/json' },\n  body: {\n    input: {\n      prompt: transformationPrompt,\n      input_image: imageUrl,\n      aspect_ratio: aspectRatio,\n      steps: strengthParams.steps,\n      guidance: strengthParams.guidance,\n      output_format: 'jpg'\n    }\n  }\n};\n\nconsole.log('✅ Final API call body:', JSON.stringify(apiCall.body, null, 2));\n\nreturn [{\n  json: {\n    ...item.json,\n    apiCall: apiCall,\n    uploadedImageUrl: imageUrl,\n    model: model,\n    transformationPrompt: transformationPrompt\n  },\n  binary: item.binary\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-3520,2300],"id":"7c7c7c6f-7f72-41cb-8a8f-40d1e4af1d64","name":"Prepare Replicate Call1"},{"parameters":{"method":"POST","url":"={{ $json.apiCall.url }}","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"application/json"}]},"sendBody":true,"specifyBody":"json","jsonBody":"={{ JSON.stringify($json.apiCall.body) }}","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-3320,2300],"id":"132c2b03-a305-4a2b-bd77-9b9a4100fb08","name":"Call Replicate Regenerate1","credentials":{"httpHeaderAuth":{"id":"JlfTRouEz1b1K4bJ","name":"Flux Replicate Auth account"}},"onError":"continueErrorOutput"},{"parameters":{"url":"={{ 'https://api.replicate.com/v1/predictions/' + $json.id }}","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-2920,2300],"id":"9429e8aa-34bc-4571-a4a2-87f68ade75af","name":"Check Regenerate Status1","credentials":{"httpHeaderAuth":{"id":"JlfTRouEz1b1K4bJ","name":"Flux Replicate Auth account"}}},{"parameters":{"url":"={{ Array.isArray($json.output) ? $json.output[0] : $json.output }}","options":{"response":{"response":{"responseFormat":"file"}}}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-2520,2200],"id":"126bab5e-ceea-435c-8cb7-3f85f219b5e1","name":"Download Regenerate Result1"},{"parameters":{"jsCode":"// Handle API errors for regeneration\nconst item = $input.all()[0];\nconst originalData = $('Image Regenerate Form1').first().json;\n\nlet errorMessage = \"Image regeneration failed\";\nlet errorDetails = item.json;\n\n// Handle specific error types\nif (item.json.error) {\n  if (item.json.error.message) {\n    errorMessage = item.json.error.message;\n  }\n} else if (item.json.message) {\n  errorMessage = item.json.message;\n} else if (item.json.status_code && item.json.status_code !== 200) {\n  errorMessage = `API returned status ${item.json.status_code}`;\n}\n\nreturn [{\n  json: {\n    status: \"error\",\n    workflow: \"Image Re-generation\",\n    message: errorMessage,\n    error_details: {\n      api_error: errorDetails,\n      original_request: {\n        title: originalData['Image Title'],\n        model: originalData['Image Model'],\n        style_transformation: originalData['Style Transformation'],\n        reference_source: originalData['Reference Image URL'] ? 'url' : 'upload'\n      }\n    },\n    timestamp: new Date().toISOString()\n  }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-3520,2500],"id":"01e78cb4-a5a2-409a-afed-014e3ee6ef83","name":"Handle Regenerate API Error1"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"has-url","leftValue":"={{ $json.hasUrl }}","rightValue":true,"operator":{"type":"boolean","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[-4380,3340],"id":"b58cfce4-c0be-447d-9e36-5c62d51a2055","name":"Reference Type Router"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"is-openai","leftValue":"={{ $json.isOpenAI }}","rightValue":true,"operator":{"type":"boolean","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[-3980,3340],"id":"b8f8ee47-137f-4241-bbf0-bef07b37256d","name":"API Type Router"},{"parameters":{"path":"4975cc97-291b-4b39-a4ca-1390d71a1716","formTitle":"Image Editing - Specific Modifications","formDescription":"Make precise edits to existing images: change colors, add/remove objects, modify details","formFields":{"values":[{"fieldLabel":"Image Title","placeholder":"My Edited Image","requiredField":true},{"fieldLabel":"Editing Model","fieldType":"dropdown","fieldOptions":{"values":[{"option":"openai/gpt-image-1"},{"option":"black-forest-labs/flux-kontext-dev"},{"option":"black-forest-labs/flux-kontext-pro"},{"option":"black-forest-labs/flux-1.1-pro-ultra"},{"option":"stability-ai/sdxl-turbo"}]},"requiredField":true},{"fieldLabel":"Reference Image URL","placeholder":"https://example.com/your-image-to-edit.jpg"},{"fieldLabel":"Upload Image to Edit","fieldType":"file","multipleFiles":false},{"fieldLabel":"Editing Instructions","fieldType":"textarea","placeholder":"Change the car color from red to blue, turn on the headlights, add racing stripes","requiredField":true},{"fieldLabel":"Objects to Add","fieldType":"textarea","placeholder":"Add sunglasses to the person, include a coffee cup on the table, add clouds to the sky"},{"fieldLabel":"Objects to Remove","fieldType":"textarea","placeholder":"Remove the background people, delete the power lines, eliminate the watermark"},{"fieldLabel":"Color Changes","fieldType":"textarea","placeholder":"Change shirt from white to black, make the car metallic silver, brighten the overall colors"},{"fieldLabel":"Lighting/Effects Changes","fieldType":"textarea","placeholder":"Add dramatic shadows, brighten the scene, add lens flare, make it look like sunset"},{"fieldLabel":"Details to Preserve","fieldType":"textarea","placeholder":"Keep the person's face exactly the same, maintain the logo unchanged, preserve the background building"},{"fieldLabel":"Output Quality","fieldType":"dropdown","fieldOptions":{"values":[{"option":"Standard Quality"},{"option":"High Quality"},{"option":"Ultra High Quality"}]}},{"fieldLabel":"Edit Precision","fieldType":"dropdown","fieldOptions":{"values":[{"option":"Subtle edits (minimal changes)"},{"option":"Moderate edits (noticeable changes)"},{"option":"Bold edits (significant modifications)"}]}},{"fieldLabel":"Output Size","fieldType":"dropdown","fieldOptions":{"values":[{"option":"1024x1024"},{"option":"1024x1536"},{"option":"1536x1024"}]}}]},"responseMode":"responseNode","options":{}},"id":"6b585680-6c49-4b51-aee5-879fd08ab0ea","name":"Image Editing Form1","type":"n8n-nodes-base.formTrigger","position":[-4980,3240],"webhookId":"4975cc97-291b-4b39-a4ca-1390d71a1716","typeVersion":2.1},{"parameters":{"jsCode":"// Process and validate form data for image editing\nconst formData = $json;\n\n// Extract and clean form data\nconst processedData = {\n  title: formData['Image Title'] || '',\n  model: formData['Editing Model'] || '',\n  referenceUrl: formData['Reference Image URL'] || '',\n  uploadedImage: formData['Upload Image to Edit'] || null,\n  editingInstructions: formData['Editing Instructions'] || '',\n  objectsToAdd: formData['Objects to Add'] || '',\n  objectsToRemove: formData['Objects to Remove'] || '',\n  colorChanges: formData['Color Changes'] || '',\n  lightingEffects: formData['Lighting/Effects Changes'] || '',\n  detailsToPreserve: formData['Details to Preserve'] || '',\n  outputQuality: formData['Output Quality'] || 'Standard Quality',\n  editPrecision: formData['Edit Precision'] || 'Moderate edits (noticeable changes)',\n  outputSize: formData['Output Size'] || '1024x1024'\n};\n\n// Validation\nconst errors = [];\nif (!processedData.title.trim()) errors.push('Image Title is required');\nif (!processedData.model) errors.push('Editing Model is required');\nif (!processedData.editingInstructions.trim()) errors.push('Editing Instructions are required');\n\n// Reference image validation\nconst hasUrl = processedData.referenceUrl.trim().length > 0;\nconst hasUpload = processedData.uploadedImage !== null;\n\nif (!hasUrl && !hasUpload) {\n  errors.push('Image to edit is required - provide either URL or upload a file');\n}\n\nif (hasUrl && hasUpload) {\n  errors.push('Please provide either URL or upload - not both');\n}\n\n// Determine API type and settings\nconst isOpenAI = processedData.model === 'openai/gpt-image-1';\nconst isFluxKontext = processedData.model.includes('flux-kontext');\nconst apiType = isOpenAI ? 'openai' : 'replicate';\n\n// Build comprehensive editing prompt\nlet editingPrompt = `Edit this image: ${processedData.editingInstructions}`;\n\nif (processedData.objectsToAdd) {\n  editingPrompt += ` Add: ${processedData.objectsToAdd}.`;\n}\n\nif (processedData.objectsToRemove) {\n  editingPrompt += ` Remove: ${processedData.objectsToRemove}.`;\n}\n\nif (processedData.colorChanges) {\n  editingPrompt += ` Color changes: ${processedData.colorChanges}.`;\n}\n\nif (processedData.lightingEffects) {\n  editingPrompt += ` Lighting/Effects: ${processedData.lightingEffects}.`;\n}\n\nif (processedData.detailsToPreserve) {\n  editingPrompt += ` Important: preserve ${processedData.detailsToPreserve} exactly as they are.`;\n}\n\n// Add quality and precision instructions\neditingPrompt += ' Maintain professional image quality and realistic appearance.';\n\n// Set precision parameters based on edit precision\nlet precisionParams = {};\nif (processedData.editPrecision.includes('Subtle')) {\n  precisionParams = { guidance: 3, steps: 15, strength: 0.3 };\n} else if (processedData.editPrecision.includes('Bold')) {\n  precisionParams = { guidance: 10, steps: 35, strength: 0.8 };\n} else {\n  precisionParams = { guidance: 6, steps: 25, strength: 0.5 };\n}\n\n// Set quality parameters\nlet qualityParams = {};\nif (processedData.outputQuality.includes('Ultra')) {\n  qualityParams = { steps: Math.max(precisionParams.steps + 10, 40) };\n} else if (processedData.outputQuality.includes('High')) {\n  qualityParams = { steps: Math.max(precisionParams.steps + 5, 30) };\n} else {\n  qualityParams = { steps: precisionParams.steps };\n}\n\nreturn [{\n  json: {\n    ...processedData,\n    editingPrompt: editingPrompt,\n    apiType: apiType,\n    isOpenAI: isOpenAI,\n    isFluxKontext: isFluxKontext,\n    hasUrl: hasUrl,\n    hasUpload: hasUpload,\n    precisionParams: precisionParams,\n    qualityParams: qualityParams,\n    errors: errors,\n    hasErrors: errors.length > 0,\n    timestamp: new Date().toISOString()\n  }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-4780,3240],"id":"dbc3511c-7c22-4cef-907d-6637d524f913","name":"Process Editing Data1"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"has-errors","leftValue":"={{ $json.hasErrors }}","rightValue":true,"operator":{"type":"boolean","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[-4580,3240],"id":"d84814b3-0d8e-48d1-97f0-e914fafcd717","name":"Check for Errors1"},{"parameters":{"respondWith":"json","responseBody":"={\n  \"status\": \"error\",\n  \"workflow\": \"Image Editing\",\n  \"message\": \"Validation failed\",\n  \"errors\": {{ JSON.stringify($json.errors) }},\n  \"timestamp\": \"{{ $json.timestamp }}\"\n}","options":{}},"id":"2ae81029-09ab-4ec5-bd6f-0a6cc997a87c","name":"Return Editing Errors1","type":"n8n-nodes-base.respondToWebhook","position":[-4380,3140],"typeVersion":1.1},{"parameters":{"url":"={{ $json.referenceUrl }}","options":{"response":{"response":{"responseFormat":"file"}}}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-4180,3240],"id":"2792d948-38b4-473a-8086-e3d75811ec6d","name":"Download Image to Edit1","onError":"continueErrorOutput"},{"parameters":{"jsCode":"// Process uploaded image for editing\nconst item = $input.all()[0];\n\nconsole.log('🔍 Processing uploaded image for editing');\n\nif (!item.json.uploadedImage) {\n  throw new Error('No uploaded image found in form data');\n}\n\nconst uploadedFile = item.json.uploadedImage;\nconsole.log('Uploaded file structure:', JSON.stringify(uploadedFile, null, 2));\n\nlet binaryData = null;\nlet mimeType = 'image/jpeg';\nlet fileName = 'image-to-edit.jpg';\n\n// Extract metadata\nif (uploadedFile.mimetype) mimeType = uploadedFile.mimetype;\nif (uploadedFile.mimeType) mimeType = uploadedFile.mimeType;\nif (uploadedFile.filename) fileName = uploadedFile.filename;\nif (uploadedFile.fileName) fileName = uploadedFile.fileName;\n\n// Extract binary data using multiple approaches\nif (uploadedFile.data) {\n  binaryData = uploadedFile.data;\n} else if (uploadedFile.buffer) {\n  binaryData = uploadedFile.buffer;\n} else if (uploadedFile.content) {\n  binaryData = uploadedFile.content;\n} else if (uploadedFile.file) {\n  binaryData = uploadedFile.file;\n} else if (typeof uploadedFile === 'string') {\n  binaryData = uploadedFile;\n} else {\n  // Check all properties for binary data\n  const keys = Object.keys(uploadedFile);\n  for (const key of keys) {\n    const value = uploadedFile[key];\n    if (value && (typeof value === 'string' || Buffer.isBuffer(value))) {\n      binaryData = value;\n      break;\n    }\n  }\n}\n\nif (!binaryData) {\n  throw new Error(`Could not extract binary data from upload. Available keys: ${Object.keys(uploadedFile).join(', ')}`);\n}\n\nconsole.log('✅ Successfully extracted binary data for editing');\nconsole.log('Binary data type:', typeof binaryData);\nconsole.log('Binary data length:', binaryData.length || 'unknown');\n\n// Return with proper n8n binary structure\nreturn [{\n  json: {\n    ...item.json,\n    imageProcessed: true,\n    imageSource: 'upload'\n  },\n  binary: {\n    data: {\n      data: binaryData,\n      mimeType: mimeType,\n      fileName: fileName,\n      fileExtension: fileName.split('.').pop() || 'jpg'\n    }\n  }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-4180,3440],"id":"a8117a8c-a9fb-4f12-95c4-d4a4365b425c","name":"Process Upload for Editing1"},{"parameters":{"method":"POST","url":"https://api.openai.com/v1/images/edits","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"contentType":"multipart-form-data","bodyParameters":{"parameters":[{"parameterType":"formBinaryData","name":"image","inputDataFieldName":"data"},{"name":"prompt","value":"={{ $json.editingPrompt }}"},{"name":"model","value":"gpt-image-1"},{"name":"size","value":"={{ $json.outputSize }}"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-3780,3240],"id":"3a6d355b-d349-43fb-bd01-0a5e93f3dad6","name":"OpenAI Image Edit1","credentials":{"httpHeaderAuth":{"id":"z06CbCGaeEeBPVIt","name":"GPT Image Generator"}},"onError":"continueErrorOutput"},{"parameters":{"method":"POST","url":"https://freeimage.host/api/1/upload","sendBody":true,"contentType":"multipart-form-data","bodyParameters":{"parameters":[{"parameterType":"formBinaryData","name":"source","inputDataFieldName":"data"},{"name":"key","value":"6d207e02198a847aa98d0a2a901485a5"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-3780,3440],"id":"8da95d13-ed16-475c-93e0-cc8090919925","name":"Upload for Replicate Edit1","onError":"continueErrorOutput"},{"parameters":{"jsCode":"// Prepare Replicate API call for image editing\nconst item = $input.all()[0];\nconst uploadResponse = item.json;\n\nconsole.log('🛠️ Preparing Replicate editing call');\nconsole.log('Upload response:', JSON.stringify(uploadResponse, null, 2));\n\n// Check if upload was successful\nif (uploadResponse.status_code !== 200 || !uploadResponse.image || !uploadResponse.image.url) {\n  throw new Error('Image upload failed for Replicate editing API');\n}\n\nconst imageUrl = uploadResponse.image.url;\nconsole.log('✅ Image to edit URL:', imageUrl);\n\n// Get original form data to build the API call\nconst originalData = $('Image Editing Form1').first().json;\nconst model = originalData['Editing Model'];\nconst editingPrompt = item.json.editingPrompt || originalData['Editing Instructions'];\nconst precisionParams = item.json.precisionParams || { guidance: 6, steps: 25, strength: 0.5 };\nconst qualityParams = item.json.qualityParams || { steps: 25 };\nconst outputSize = originalData['Output Size'] || '1024x1024';\n\n// Create aspect ratio from size\nlet aspectRatio = '1:1';\nif (outputSize === '1024x1536') aspectRatio = '2:3';\nelse if (outputSize === '1536x1024') aspectRatio = '3:2';\n\n// Combine precision and quality parameters\nconst finalSteps = Math.max(precisionParams.steps, qualityParams.steps);\n\nconsole.log('✅ Using editing model:', model);\nconsole.log('✅ Using editing prompt:', editingPrompt);\nconsole.log('✅ Precision params:', precisionParams);\nconsole.log('✅ Final steps:', finalSteps);\n\n// Create the API call structure based on model type\nlet apiCallBody = {};\n\nif (model.includes('flux-kontext')) {\n  // Flux Kontext models use input_image and specific parameters\n  apiCallBody = {\n    input: {\n      prompt: editingPrompt,\n      input_image: imageUrl,\n      output_format: 'jpg'\n    }\n  };\n} else {\n  // Other Replicate models (flux-1.1-pro-ultra, sdxl-turbo)\n  apiCallBody = {\n    input: {\n      prompt: editingPrompt,\n      input_image: imageUrl,\n      aspect_ratio: aspectRatio,\n      steps: finalSteps,\n      guidance: precisionParams.guidance,\n      strength: precisionParams.strength,\n      output_format: 'jpg'\n    }\n  };\n}\n\nconst apiCall = {\n  url: `https://api.replicate.com/v1/models/${model}/predictions`,\n  method: 'POST',\n  headers: { 'Content-Type': 'application/json' },\n  body: apiCallBody\n};\n\nconsole.log('✅ Final editing API call body:', JSON.stringify(apiCall.body, null, 2));\n\nreturn [{\n  json: {\n    ...item.json,\n    apiCall: apiCall,\n    uploadedImageUrl: imageUrl,\n    model: model,\n    editingPrompt: editingPrompt,\n    finalSteps: finalSteps\n  },\n  binary: item.binary\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-3580,3440],"id":"2c06b0ee-ea2b-4cd9-915a-e6c6083ea452","name":"Prepare Replicate Edit Call1"},{"parameters":{"method":"POST","url":"={{ $json.apiCall.url }}","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"application/json"}]},"sendBody":true,"specifyBody":"json","jsonBody":"={{ JSON.stringify($json.apiCall.body) }}","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-3380,3440],"id":"01fd0066-a746-4dcc-b344-31351fd1c976","name":"Call Replicate Edit1","credentials":{"httpHeaderAuth":{"id":"JlfTRouEz1b1K4bJ","name":"Flux Replicate Auth account"}},"onError":"continueErrorOutput"},{"parameters":{"operation":"toBinary","sourceProperty":"data[0].b64_json","options":{}},"type":"n8n-nodes-base.convertToFile","typeVersion":1.1,"position":[-3580,3240],"id":"daf2d8f4-71f6-4290-a168-41708c1ecc2a","name":"Convert OpenAI Edit Response1"},{"parameters":{"amount":15},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[-3180,3440],"id":"b15bbb93-9655-41dd-940a-24b714bfd73e","name":"Wait for Edit Processing1","webhookId":"replicate-editing-wait"},{"parameters":{"url":"={{ 'https://api.replicate.com/v1/predictions/' + $json.id }}","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-2980,3440],"id":"1be6fa60-124d-4bee-8c13-c0cd5f80b504","name":"Check Edit Status1","credentials":{"httpHeaderAuth":{"id":"JlfTRouEz1b1K4bJ","name":"Flux Replicate Auth account"}}},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"is-complete","leftValue":"={{ $json.status }}","rightValue":"succeeded","operator":{"type":"string","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[-2780,3440],"id":"d418b903-a113-4ced-adb5-240581ccfca5","name":"Check if Edit Complete1"},{"parameters":{"url":"={{ Array.isArray($json.output) ? $json.output[0] : $json.output }}","options":{"response":{"response":{"responseFormat":"file"}}}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-2580,3340],"id":"8a289340-3018-4a95-9188-7a4b6dfe8566","name":"Download Edited Image1"},{"parameters":{"amount":10},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[-2580,3540],"id":"57a09c86-c0e4-473b-8dee-f0e110b0258d","name":"Wait and Retry Edit1","webhookId":"editing-retry-wait"},{"parameters":{"operation":"binaryToPropery","destinationKey":"image_base64","options":{}},"type":"n8n-nodes-base.extractFromFile","typeVersion":1,"position":[-3380,3240],"id":"5beb7572-0ab4-40f5-bdfe-bc0b95d37cef","name":"Convert to Base68"},{"parameters":{"jsCode":"// Final response for Image Editing workflow\nconst item = $input.all()[0];\nconst originalData = $('Image Editing Form1').first().json;\n\n// Check if this is an error response\nif (item.json.error || item.json.message) {\n  return [{\n    json: {\n      status: \"error\",\n      workflow: \"Image Editing\",\n      message: item.json.error?.message || item.json.message || \"Image editing failed\",\n      error_details: item.json.error || item.json,\n      timestamp: new Date().toISOString()\n    }\n  }];\n}\n\n// Success response\nreturn [{\n  json: {\n    status: \"success\",\n    workflow: \"Image Editing\",\n    title: originalData['Image Title'],\n    model: originalData['Editing Model'],\n    editing_prompt: item.json.editingPrompt || originalData['Editing Instructions'],\n    image_source: item.json.imageSource || (originalData['Reference Image URL'] ? 'url' : 'upload'),\n    image_base64: item.json.image_base64,\n    metadata: {\n      editing_instructions: originalData['Editing Instructions'],\n      objects_added: originalData['Objects to Add'],\n      objects_removed: originalData['Objects to Remove'],\n      color_changes: originalData['Color Changes'],\n      lighting_effects: originalData['Lighting/Effects Changes'],\n      details_preserved: originalData['Details to Preserve'],\n      output_quality: originalData['Output Quality'],\n      edit_precision: originalData['Edit Precision'],\n      output_size: originalData['Output Size'],\n      api_used: item.json.apiType || (originalData['Editing Model'] === 'openai/gpt-image-1' ? 'openai' : 'replicate'),\n      generation_type: \"editing\",\n      had_reference_url: !!originalData['Reference Image URL'],\n      had_upload: !!originalData['Upload Image to Edit'],\n      uploaded_image_url: item.json.uploadedImageUrl || null,\n      precision_params: item.json.precisionParams,\n      final_steps: item.json.finalSteps\n    },\n    timestamp: new Date().toISOString()\n  }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-3180,3240],"id":"4288f320-c7af-4acd-8a76-5f133a9533bd","name":"Final Editing Processing1"},{"parameters":{"respondWith":"text","responseBody":"=<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>{{ $json.title }} - Image Editing</title>\n    <style>\n        body {\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n            background: linear-gradient(135deg, #11998e 0%, #38ef7d 100%);\n            margin: 0;\n            padding: 20px;\n            min-height: 100vh;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n        }\n        .container {\n            background: white;\n            border-radius: 20px;\n            box-shadow: 0 20px 40px rgba(0,0,0,0.1);\n            padding: 30px;\n            max-width: 950px;\n            width: 100%;\n            text-align: center;\n        }\n        .status {\n            display: inline-block;\n            padding: 8px 16px;\n            border-radius: 20px;\n            font-weight: bold;\n            margin-bottom: 20px;\n        }\n        .success { background: #d4edda; color: #155724; }\n        .error { background: #f8d7da; color: #721c24; }\n        .image-container {\n            margin: 20px 0;\n            border-radius: 15px;\n            overflow: hidden;\n            box-shadow: 0 10px 25px rgba(0,0,0,0.1);\n            display: inline-block;\n        }\n        .generated-image {\n            max-width: 100%;\n            height: auto;\n            display: block;\n        }\n        .metadata {\n            background: #f8f9fa;\n            border-radius: 10px;\n            padding: 20px;\n            margin: 20px 0;\n            text-align: left;\n        }\n        .metadata h3 {\n            margin-top: 0;\n            color: #495057;\n        }\n        .metadata-item {\n            margin: 8px 0;\n            padding: 5px 0;\n            border-bottom: 1px solid #e9ecef;\n        }\n        .metadata-item:last-child {\n            border-bottom: none;\n        }\n        .label {\n            font-weight: bold;\n            color: #6c757d;\n            display: inline-block;\n            min-width: 140px;\n        }\n        .download-btn {\n            background: linear-gradient(45deg, #11998e, #38ef7d);\n            color: white;\n            padding: 12px 24px;\n            border: none;\n            border-radius: 25px;\n            font-size: 16px;\n            cursor: pointer;\n            text-decoration: none;\n            display: inline-block;\n            margin: 10px;\n            transition: transform 0.2s;\n        }\n        .download-btn:hover {\n            transform: translateY(-2px);\n            box-shadow: 0 5px 15px rgba(0,0,0,0.2);\n        }\n        .json-btn {\n            background: linear-gradient(45deg, #6c757d, #495057);\n            color: white;\n            padding: 8px 16px;\n            border: none;\n            border-radius: 20px;\n            font-size: 14px;\n            cursor: pointer;\n            margin: 10px;\n        }\n        .json-data {\n            display: none;\n            background: #f8f9fa;\n            border: 1px solid #dee2e6;\n            border-radius: 5px;\n            padding: 15px;\n            margin-top: 10px;\n            text-align: left;\n            font-family: monospace;\n            font-size: 12px;\n            white-space: pre-wrap;\n            max-height: 300px;\n            overflow-y: auto;\n        }\n        h1 {\n            color: #343a40;\n            margin-bottom: 10px;\n        }\n        .workflow-badge {\n            background: linear-gradient(45deg, #11998e, #38ef7d);\n            color: white;\n            padding: 4px 12px;\n            border-radius: 15px;\n            font-size: 12px;\n            font-weight: bold;\n        }\n        .editing-sections {\n            display: grid;\n            grid-template-columns: 1fr 1fr;\n            gap: 15px;\n            margin: 20px 0;\n        }\n        .edit-section {\n            background: linear-gradient(45deg, #e8f5e8, #f0fff0);\n            border-radius: 10px;\n            padding: 15px;\n            border-left: 4px solid #28a745;\n            text-align: left;\n        }\n        .edit-section h4 {\n            margin: 0 0 10px 0;\n            color: #155724;\n            font-size: 14px;\n        }\n        .edit-section p {\n            margin: 5px 0;\n            font-size: 13px;\n            color: #495057;\n        }\n        .source-badge {\n            background: #6c757d;\n            color: white;\n            padding: 2px 8px;\n            border-radius: 10px;\n            font-size: 11px;\n            font-weight: bold;\n        }\n        .precision-badge {\n            background: #17a2b8;\n            color: white;\n            padding: 2px 8px;\n            border-radius: 10px;\n            font-size: 11px;\n            font-weight: bold;\n        }\n        .quality-badge {\n            background: #6f42c1;\n            color: white;\n            padding: 2px 8px;\n            border-radius: 10px;\n            font-size: 11px;\n            font-weight: bold;\n        }\n        @media (max-width: 768px) {\n            .editing-sections {\n                grid-template-columns: 1fr;\n            }\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"workflow-badge\">{{ $json.workflow }}</div>\n        <h1>{{ $json.title }}</h1>\n        \n        <div class=\"status {{ $json.status === 'success' ? 'success' : 'error' }}\">\n            {{ $json.status === 'success' ? '✏️ Editing Successful' : '❌ Editing Failed' }}\n        </div>\n\n        {{ $json.status === 'success' ? '\n        <div class=\"image-container\">\n            <img src=\"data:image/jpeg;base64,' + $json.image_base64 + '\" alt=\"Edited Image\" class=\"generated-image\" />\n        </div>\n        \n        <a href=\"data:image/jpeg;base64,' + $json.image_base64 + '\" download=\"' + $json.title.replace(/[^a-zA-Z0-9]/g, '_') + '_edited.jpg\" class=\"download-btn\">\n            📥 Download Edited Image\n        </a>' : '' }}\n\n        {{ $json.status === 'success' ? '\n        <div class=\"editing-sections\">\n            ' + ($json.metadata?.objects_added ? '<div class=\"edit-section\"><h4>➕ Objects Added</h4><p>' + $json.metadata.objects_added + '</p></div>' : '') + '\n            ' + ($json.metadata?.objects_removed ? '<div class=\"edit-section\"><h4>➖ Objects Removed</h4><p>' + $json.metadata.objects_removed + '</p></div>' : '') + '\n            ' + ($json.metadata?.color_changes ? '<div class=\"edit-section\"><h4>🎨 Color Changes</h4><p>' + $json.metadata.color_changes + '</p></div>' : '') + '\n            ' + ($json.metadata?.lighting_effects ? '<div class=\"edit-section\"><h4>💡 Lighting/Effects</h4><p>' + $json.metadata.lighting_effects + '</p></div>' : '') + '\n            ' + ($json.metadata?.details_preserved ? '<div class=\"edit-section\"><h4>🔒 Preserved Details</h4><p>' + $json.metadata.details_preserved + '</p></div>' : '') + '\n            <div class=\"edit-section\"><h4>🎯 Main Instructions</h4><p>' + ($json.metadata?.editing_instructions || 'N/A') + '</p></div>\n        </div>' : '' }}\n\n        <div class=\"metadata\">\n            <h3>Editing Details</h3>\n            <div class=\"metadata-item\">\n                <span class=\"label\">Model:</span> {{ $json.model || 'N/A' }}\n            </div>\n            <div class=\"metadata-item\">\n                <span class=\"label\">Image Source:</span> \n                <span class=\"source-badge\">{{ $json.image_source === 'url' ? 'URL' : 'UPLOAD' }}</span>\n            </div>\n            <div class=\"metadata-item\">\n                <span class=\"label\">Edit Precision:</span> \n                <span class=\"precision-badge\">{{ $json.metadata?.edit_precision || 'N/A' }}</span>\n            </div>\n            <div class=\"metadata-item\">\n                <span class=\"label\">Output Quality:</span> \n                <span class=\"quality-badge\">{{ $json.metadata?.output_quality || 'N/A' }}</span>\n            </div>\n            {{ $json.metadata?.output_size ? '<div class=\"metadata-item\"><span class=\"label\">Output Size:</span> ' + $json.metadata.output_size + '</div>' : '' }}\n            <div class=\"metadata-item\">\n                <span class=\"label\">API Used:</span> {{ $json.metadata?.api_used || 'N/A' }}\n            </div>\n            {{ $json.metadata?.uploaded_image_url ? '<div class=\"metadata-item\"><span class=\"label\">Original URL:</span> <a href=\"' + $json.metadata.uploaded_image_url + '\" target=\"_blank\">View Original</a></div>' : '' }}\n            {{ $json.metadata?.final_steps ? '<div class=\"metadata-item\"><span class=\"label\">Processing Steps:</span> ' + $json.metadata.final_steps + '</div>' : '' }}\n            {{ $json.metadata?.precision_params ? '<div class=\"metadata-item\"><span class=\"label\">Guidance:</span> ' + $json.metadata.precision_params.guidance + ' | Strength: ' + $json.metadata.precision_params.strength + '</div>' : '' }}\n            <div class=\"metadata-item\">\n                <span class=\"label\">Timestamp:</span> {{ $json.timestamp }}\n            </div>\n        </div>\n\n        <button class=\"json-btn\" onclick=\"toggleJson()\">Show JSON Data</button>\n        <div id=\"jsonData\" class=\"json-data\">{{ JSON.stringify($json, null, 2) }}</div>\n    </div>\n\n    <script>\n        function toggleJson() {\n            const jsonData = document.getElementById('jsonData');\n            const btn = event.target;\n            if (jsonData.style.display === 'none' || !jsonData.style.display) {\n                jsonData.style.display = 'block';\n                btn.textContent = 'Hide JSON Data';\n            } else {\n                jsonData.style.display = 'none';\n                btn.textContent = 'Show JSON Data';\n            }\n        }\n    </script>\n</body>\n</html>","options":{}},"id":"5d177402-83b1-407f-b9dd-f7756ff195b7","name":"Final Editing Response1","type":"n8n-nodes-base.respondToWebhook","position":[-2980,3240],"typeVersion":1.1},{"parameters":{"jsCode":"// Handle API errors for image editing\nconst item = $input.all()[0];\nconst originalData = $('Image Editing Form1').first().json;\n\nlet errorMessage = \"Image editing failed\";\nlet errorDetails = item.json;\n\n// Handle specific error types\nif (item.json.error) {\n  if (item.json.error.message) {\n    errorMessage = item.json.error.message;\n  }\n} else if (item.json.message) {\n  errorMessage = item.json.message;\n} else if (item.json.status_code && item.json.status_code !== 200) {\n  errorMessage = `API returned status ${item.json.status_code}`;\n} else if (item.json.detail) {\n  errorMessage = item.json.detail;\n}\n\nreturn [{\n  json: {\n    status: \"error\",\n    workflow: \"Image Editing\",\n    message: errorMessage,\n    error_details: {\n      api_error: errorDetails,\n      original_request: {\n        title: originalData['Image Title'],\n        model: originalData['Editing Model'],\n        editing_instructions: originalData['Editing Instructions'],\n        image_source: originalData['Reference Image URL'] ? 'url' : 'upload'\n      }\n    },\n    timestamp: new Date().toISOString()\n  }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-3580,3640],"id":"96ae6f74-12a2-4280-883c-994544762e83","name":"Handle Editing API Error1"},{"parameters":{"path":"1b85cc1b-c5d0-48c4-85c3-437ed66d801f","formTitle":"Image with or without Captions from Reference","formDescription":"Transform reference images and optionally add professional text overlays/captions","formFields":{"values":[{"fieldLabel":"Image Title","placeholder":"My Captioned Image","requiredField":true},{"fieldLabel":"Processing Model","fieldType":"dropdown","fieldOptions":{"values":[{"option":"openai/gpt-image-1"},{"option":"black-forest-labs/flux-1.1-pro-ultra"},{"option":"black-forest-labs/flux-dev"},{"option":"stability-ai/stable-diffusion-3.5-large"},{"option":"recraft-ai/recraft-v3"},{"option":"ideogram-ai/ideogram-v2"}]},"requiredField":true},{"fieldLabel":"Reference Image URL","placeholder":"https://example.com/your-reference-image.jpg"},{"fieldLabel":"Upload Reference Image","fieldType":"file","multipleFiles":false},{"fieldLabel":"Processing Type","fieldType":"dropdown","fieldOptions":{"values":[{"option":"Add Caption Only"},{"option":"Transform Image + Add Caption"},{"option":"Transform Image (No Caption)"},{"option":"Professional Headshot + Caption"},{"option":"Product Photo + Caption"}]},"requiredField":true},{"fieldLabel":"Image Transformation","fieldType":"textarea","placeholder":"Make it look more professional, enhance lighting, improve background, convert to portrait style, etc."},{"fieldLabel":"Scene Context","fieldType":"textarea","placeholder":"Professional office setting, outdoor natural environment, studio photography, etc."},{"fieldLabel":"Add Caption?","fieldType":"dropdown","fieldOptions":{"values":[{"option":"No Caption"},{"option":"Add Caption"}]}},{"fieldLabel":"Caption Text","placeholder":"John Smith, CEO | Limited Time Offer! | Call (555) 123-4567"},{"fieldLabel":"Caption Position","fieldType":"dropdown","fieldOptions":{"values":[{"option":"bottom-center"},{"option":"bottom-left"},{"option":"bottom-right"},{"option":"top-center"},{"option":"top-left"},{"option":"top-right"},{"option":"center"},{"option":"lower-third"},{"option":"upper-third"}]}},{"fieldLabel":"Caption Style","fieldType":"dropdown","fieldOptions":{"values":[{"option":"Bold white text with black shadow"},{"option":"Professional black text on white background"},{"option":"Modern sans-serif white text"},{"option":"Elegant serif text with transparency"},{"option":"Bold colored text (brand colors)"},{"option":"Minimal clean text overlay"},{"option":"Corporate professional style"},{"option":"Social media style text"}]}},{"fieldLabel":"Caption Size","fieldType":"dropdown","fieldOptions":{"values":[{"option":"Small (subtle)"},{"option":"Medium (standard)"},{"option":"Large (prominent)"},{"option":"Extra Large (headline style)"}]}},{"fieldLabel":"Brand Colors","placeholder":"Blue (#0066CC), Red (#CC0000), Corporate colors to use in caption"},{"fieldLabel":"Background Enhancement","fieldType":"dropdown","fieldOptions":{"values":[{"option":"Keep Original Background"},{"option":"Professional Studio Background"},{"option":"Clean White Background"},{"option":"Subtle Gradient Background"},{"option":"Corporate Environment"},{"option":"Natural Outdoor Setting"}]}},{"fieldLabel":"Output Quality","fieldType":"dropdown","fieldOptions":{"values":[{"option":"Standard Quality"},{"option":"High Quality"},{"option":"Ultra High Quality (slow)"}]}},{"fieldLabel":"Output Size","fieldType":"dropdown","fieldOptions":{"values":[{"option":"1024x1024"},{"option":"1024x1536"},{"option":"1536x1024"},{"option":"Social Media (1080x1080)"},{"option":"Story Format (1080x1920)"}]}}]},"responseMode":"responseNode","options":{}},"id":"ae0cf2e7-c047-427d-9e79-20fc2a0c8de3","name":"Caption Reference Form1","type":"n8n-nodes-base.formTrigger","position":[-4860,4360],"webhookId":"1b85cc1b-c5d0-48c4-85c3-437ed66d801f","typeVersion":2.1},{"parameters":{"jsCode":"// Process and validate form data for caption/reference workflow\nconst formData = $json;\n\n// Extract and clean form data\nconst processedData = {\n  title: formData['Image Title'] || '',\n  model: formData['Processing Model'] || '',\n  referenceUrl: formData['Reference Image URL'] || '',\n  uploadedImage: formData['Upload Reference Image'] || null,\n  processingType: formData['Processing Type'] || '',\n  imageTransformation: formData['Image Transformation'] || '',\n  sceneContext: formData['Scene Context'] || '',\n  addCaption: formData['Add Caption?'] === 'Add Caption',\n  captionText: formData['Caption Text'] || '',\n  captionPosition: formData['Caption Position'] || 'bottom-center',\n  captionStyle: formData['Caption Style'] || 'Bold white text with black shadow',\n  captionSize: formData['Caption Size'] || 'Medium (standard)',\n  brandColors: formData['Brand Colors'] || '',\n  backgroundEnhancement: formData['Background Enhancement'] || 'Keep Original Background',\n  outputQuality: formData['Output Quality'] || 'Standard Quality',\n  outputSize: formData['Output Size'] || '1024x1024'\n};\n\n// Validation\nconst errors = [];\nif (!processedData.title.trim()) errors.push('Image Title is required');\nif (!processedData.model) errors.push('Processing Model is required');\nif (!processedData.processingType) errors.push('Processing Type is required');\n\n// Reference image validation\nconst hasUrl = processedData.referenceUrl.trim().length > 0;\nconst hasUpload = processedData.uploadedImage !== null;\n\nif (!hasUrl && !hasUpload) {\n  errors.push('Reference image is required - provide either URL or upload a file');\n}\n\nif (hasUrl && hasUpload) {\n  errors.push('Please provide either URL or upload - not both');\n}\n\n// Caption validation\nif (processedData.addCaption && !processedData.captionText.trim()) {\n  errors.push('Caption Text is required when Add Caption is selected');\n}\n\n// Check if model supports captions (primarily OpenAI)\nconst captionOptimizedModels = ['openai/gpt-image-1'];\nif (processedData.addCaption && !captionOptimizedModels.includes(processedData.model)) {\n  // Warning but not error - other models might work\n  console.log(`Warning: ${processedData.model} may have limited caption support. OpenAI models are recommended for text overlays.`);\n}\n\n// Determine API type and processing approach\nconst isOpenAI = processedData.model === 'openai/gpt-image-1';\nconst apiType = isOpenAI ? 'openai' : 'replicate';\n\n// Build comprehensive prompt based on processing type and options\nlet mainPrompt = '';\nlet useEditsAPI = false;\n\nswitch(processedData.processingType) {\n  case 'Add Caption Only':\n    mainPrompt = 'Enhance this image while maintaining its original style and composition';\n    if (processedData.addCaption) {\n      mainPrompt += ` and add professional text overlay: \"${processedData.captionText}\" positioned at ${processedData.captionPosition}`;\n    }\n    useEditsAPI = true;\n    break;\n    \n  case 'Transform Image + Add Caption':\n    mainPrompt = `Transform this image: ${processedData.imageTransformation || 'Enhance to professional quality'}`;\n    if (processedData.sceneContext) {\n      mainPrompt += ` Context: ${processedData.sceneContext}.`;\n    }\n    if (processedData.addCaption) {\n      mainPrompt += ` Include text overlay: \"${processedData.captionText}\" positioned at ${processedData.captionPosition}`;\n    }\n    useEditsAPI = true;\n    break;\n    \n  case 'Transform Image (No Caption)':\n    mainPrompt = `Transform this image: ${processedData.imageTransformation || 'Enhance to professional quality'}`;\n    if (processedData.sceneContext) {\n      mainPrompt += ` Context: ${processedData.sceneContext}.`;\n    }\n    useEditsAPI = true;\n    break;\n    \n  case 'Professional Headshot + Caption':\n    mainPrompt = 'Transform this into a professional headshot with studio lighting, professional background, and polished appearance';\n    if (processedData.addCaption) {\n      mainPrompt += ` Add professional name caption: \"${processedData.captionText}\" positioned at ${processedData.captionPosition}`;\n    }\n    useEditsAPI = true;\n    break;\n    \n  case 'Product Photo + Caption':\n    mainPrompt = 'Transform this into a professional product photograph with clean background, optimal lighting, and commercial quality';\n    if (processedData.addCaption) {\n      mainPrompt += ` Add product caption: \"${processedData.captionText}\" positioned at ${processedData.captionPosition}`;\n    }\n    useEditsAPI = true;\n    break;\n}\n\n// Add background enhancement\nif (processedData.backgroundEnhancement !== 'Keep Original Background') {\n  mainPrompt += ` Background: ${processedData.backgroundEnhancement}.`;\n}\n\n// Add caption styling details if caption is enabled\nif (processedData.addCaption) {\n  mainPrompt += ` Caption style: ${processedData.captionStyle}, size: ${processedData.captionSize}`;\n  \n  if (processedData.brandColors) {\n    mainPrompt += `, incorporate brand colors: ${processedData.brandColors}`;\n  }\n}\n\n// Add quality instructions\nmainPrompt += ' Maintain professional quality and realistic appearance.';\n\n// Set quality parameters\nlet qualityParams = {};\nif (processedData.outputQuality.includes('Ultra')) {\n  qualityParams = { steps: 40, guidance: 8 };\n} else if (processedData.outputQuality.includes('High')) {\n  qualityParams = { steps: 30, guidance: 7 };\n} else {\n  qualityParams = { steps: 25, guidance: 6 };\n}\n\n// Convert output size for APIs\nlet apiSize = processedData.outputSize;\nif (processedData.outputSize.includes('Social Media')) {\n  apiSize = '1024x1024';\n} else if (processedData.outputSize.includes('Story Format')) {\n  apiSize = '1024x1536';\n}\n\nreturn [{\n  json: {\n    ...processedData,\n    mainPrompt: mainPrompt,\n    apiType: apiType,\n    isOpenAI: isOpenAI,\n    hasUrl: hasUrl,\n    hasUpload: hasUpload,\n    useEditsAPI: useEditsAPI,\n    qualityParams: qualityParams,\n    apiSize: apiSize,\n    errors: errors,\n    hasErrors: errors.length > 0,\n    timestamp: new Date().toISOString()\n  }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-4660,4360],"id":"a84b0c37-cbe5-49aa-bfbb-616540c6be1c","name":"Process Caption Ref Data1"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"has-errors","leftValue":"={{ $json.hasErrors }}","rightValue":true,"operator":{"type":"boolean","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[-4460,4360],"id":"91c88e44-9f20-4483-a6ad-90cd0e642e14","name":"Check for Errors5"},{"parameters":{"respondWith":"json","responseBody":"={\n  \"status\": \"error\",\n  \"workflow\": \"Image Caption from Reference\",\n  \"message\": \"Validation failed\",\n  \"errors\": {{ JSON.stringify($json.errors) }},\n  \"timestamp\": \"{{ $json.timestamp }}\"\n}","options":{}},"id":"f6db6780-b7ff-4970-8a1d-7654141045c5","name":"Return Caption Ref Errors1","type":"n8n-nodes-base.respondToWebhook","position":[-4260,4260],"typeVersion":1.1},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"has-url","leftValue":"={{ $json.hasUrl }}","rightValue":true,"operator":{"type":"boolean","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[-4260,4460],"id":"cf2cb5f2-725e-450b-a14d-3d1ea13d0ba6","name":"Reference Type Router4"},{"parameters":{"url":"={{ $json.referenceUrl }}","options":{"response":{"response":{"responseFormat":"file"}}}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-4060,4360],"id":"61cb39bb-a987-4c55-800a-f519b56859fb","name":"Download Reference for Caption1","onError":"continueErrorOutput"},{"parameters":{"jsCode":"// Process uploaded reference image for caption workflow\nconst item = $input.all()[0];\n\nconsole.log('🔍 Processing uploaded image for caption workflow');\nconsole.log('Full item JSON:', JSON.stringify(item.json, null, 2));\n\n// Check for uploaded image using the correct field name from the form\nconst uploadedFile = item.json['Upload Reference Image']; // Fixed: use exact form field name\n\nif (!uploadedFile) {\n  console.log('Available form fields:', Object.keys(item.json));\n  throw new Error('No uploaded image found in form data. Available fields: ' + Object.keys(item.json).join(', '));\n}\n\nconsole.log('Uploaded file structure:', JSON.stringify(uploadedFile, null, 2));\n\nlet binaryData = null;\nlet mimeType = 'image/jpeg';\nlet fileName = 'reference-for-caption.jpg';\n\n// Extract metadata\nif (uploadedFile.mimetype) mimeType = uploadedFile.mimetype;\nif (uploadedFile.mimeType) mimeType = uploadedFile.mimeType;\nif (uploadedFile.filename) fileName = uploadedFile.filename;\nif (uploadedFile.fileName) fileName = uploadedFile.fileName;\n\n// Extract binary data using multiple approaches\nif (uploadedFile.data) {\n  binaryData = uploadedFile.data;\n} else if (uploadedFile.buffer) {\n  binaryData = uploadedFile.buffer;\n} else if (uploadedFile.content) {\n  binaryData = uploadedFile.content;\n} else if (uploadedFile.file) {\n  binaryData = uploadedFile.file;\n} else if (typeof uploadedFile === 'string') {\n  binaryData = uploadedFile;\n} else {\n  // Check all properties for binary data\n  const keys = Object.keys(uploadedFile);\n  console.log('Checking uploadedFile properties:', keys);\n  for (const key of keys) {\n    const value = uploadedFile[key];\n    if (value && (typeof value === 'string' || Buffer.isBuffer(value))) {\n      console.log(`Found potential binary data in key: ${key}`);\n      binaryData = value;\n      break;\n    }\n  }\n}\n\nif (!binaryData) {\n  throw new Error(`Could not extract binary data from upload. Upload file structure: ${JSON.stringify(uploadedFile, null, 2)}`);\n}\n\nconsole.log('✅ Successfully extracted binary data for caption workflow');\nconsole.log('Binary data type:', typeof binaryData);\nconsole.log('Binary data length:', binaryData.length || 'unknown');\n\n// Return with proper n8n binary structure\nreturn [{\n  json: {\n    ...item.json,\n    referenceProcessed: true,\n    referenceSource: 'upload',\n    originalUploadInfo: {\n      fieldName: 'Upload Reference Image',\n      fileName: fileName,\n      mimeType: mimeType\n    }\n  },\n  binary: {\n    data: {\n      data: binaryData,\n      mimeType: mimeType,\n      fileName: fileName,\n      fileExtension: fileName.split('.').pop() || 'jpg'\n    }\n  }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-4060,4560],"id":"e1c3d696-b1c4-45b9-a791-ffdccb12b42d","name":"Process Upload for Caption1"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"is-openai","leftValue":"={{ $json.isOpenAI }}","rightValue":true,"operator":{"type":"boolean","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[-3860,4460],"id":"26d844db-0a55-46ae-bbf6-a6f3fab07b0b","name":"API Type Router5"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"use-edits","leftValue":"={{ $json.useEditsAPI }}","rightValue":true,"operator":{"type":"boolean","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[-3660,4360],"id":"9e9ad8a8-dee5-4882-a6bd-12ec74e12e75","name":"OpenAI Method Router1"},{"parameters":{"method":"POST","url":"https://api.openai.com/v1/images/edits","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"contentType":"multipart-form-data","bodyParameters":{"parameters":[{"parameterType":"formBinaryData","name":"image","inputDataFieldName":"data"},{"name":"prompt","value":"={{ $json.mainPrompt }}"},{"name":"model","value":"gpt-image-1"},{"name":"size","value":"={{ $json.apiSize }}"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-3460,4260],"id":"42799e32-0042-4b63-8e72-4b2fe2c3794f","name":"OpenAI Caption Edit1","credentials":{"httpHeaderAuth":{"id":"z06CbCGaeEeBPVIt","name":"GPT Image Generator"}},"onError":"continueErrorOutput"},{"parameters":{"method":"POST","url":"https://api.openai.com/v1/images/generations","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"application/json"}]},"sendBody":true,"specifyBody":"json","jsonBody":"={\n  \"model\": \"gpt-image-1\",\n  \"prompt\": {{ JSON.stringify($json.mainPrompt) }},\n  \"size\": \"{{ $json.apiSize }}\",\n  \"response_format\": \"b64_json\"\n}","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-3460,4440],"id":"522e114c-3700-4bcd-8a90-95758dfc95a6","name":"OpenAI Caption Generate1","credentials":{"httpHeaderAuth":{"id":"z06CbCGaeEeBPVIt","name":"GPT Image Generator"}},"onError":"continueErrorOutput"},{"parameters":{"method":"POST","url":"https://freeimage.host/api/1/upload","sendBody":true,"contentType":"multipart-form-data","bodyParameters":{"parameters":[{"parameterType":"formBinaryData","name":"source","inputDataFieldName":"data"},{"name":"key","value":"6d207e02198a847aa98d0a2a901485a5"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-3680,4580],"id":"96279136-cacb-4423-b62c-24d54fe85592","name":"Upload for Caption Replicate1","onError":"continueErrorOutput"},{"parameters":{"jsCode":"// Prepare Replicate API call for caption workflow\nconst item = $input.all()[0];\nconst uploadResponse = item.json;\n\nconsole.log('📝 Preparing Replicate caption call');\nconsole.log('Upload response:', JSON.stringify(uploadResponse, null, 2));\n\n// Check if upload was successful\nif (uploadResponse.status_code !== 200 || !uploadResponse.image || !uploadResponse.image.url) {\n  throw new Error('Reference image upload failed for Replicate caption API');\n}\n\nconst imageUrl = uploadResponse.image.url;\nconsole.log('✅ Reference image URL for caption:', imageUrl);\n\n// Get original form data to build the API call\nconst originalData = $('Caption Reference Form1').first().json;\nconst model = originalData['Processing Model'];\nconst mainPrompt = item.json.mainPrompt || originalData['Image Transformation'];\nconst qualityParams = item.json.qualityParams || { steps: 25, guidance: 6 };\nconst apiSize = item.json.apiSize || '1024x1024';\n\n// Create aspect ratio from size\nlet aspectRatio = '1:1';\nif (apiSize === '1024x1536') aspectRatio = '2:3';\nelse if (apiSize === '1536x1024') aspectRatio = '3:2';\n\n// Note: Most Replicate models don't handle text overlays as well as OpenAI\n// But we can try with image-to-image transformation\nlet finalPrompt = mainPrompt;\n\n// If this model is known to have limited text support, adjust prompt\nif (!model.includes('ideogram') && !model.includes('recraft')) {\n  // Remove specific caption instructions for models that can't handle text well\n  finalPrompt = mainPrompt.replace(/Include text overlay:.*?positioned at.*?\\./g, '');\n  finalPrompt = mainPrompt.replace(/Add.*?caption:.*?positioned at.*?\\./g, '');\n  \n  if (finalPrompt !== mainPrompt) {\n    console.log('⚠️ Adjusted prompt for limited text support model');\n    finalPrompt += ' Create a professional, high-quality image suitable for adding text overlays later.';\n  }\n}\n\nconsole.log('✅ Using caption model:', model);\nconsole.log('✅ Using caption prompt:', finalPrompt);\nconsole.log('✅ Quality params:', qualityParams);\n\n// Create the API call structure\nconst apiCall = {\n  url: `https://api.replicate.com/v1/models/${model}/predictions`,\n  method: 'POST',\n  headers: { 'Content-Type': 'application/json' },\n  body: {\n    input: {\n      prompt: finalPrompt,\n      input_image: imageUrl,\n      aspect_ratio: aspectRatio,\n      steps: qualityParams.steps,\n      guidance: qualityParams.guidance,\n      output_format: 'jpg'\n    }\n  }\n};\n\nconsole.log('✅ Final caption API call body:', JSON.stringify(apiCall.body, null, 2));\n\nreturn [{\n  json: {\n    ...item.json,\n    apiCall: apiCall,\n    uploadedImageUrl: imageUrl,\n    model: model,\n    finalPrompt: finalPrompt,\n    textSupportWarning: finalPrompt !== mainPrompt\n  },\n  binary: item.binary\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-3460,4580],"id":"7b13be4f-b1a0-4129-be85-d0df69cd3c2e","name":"Prepare Caption Replicate1"},{"parameters":{"method":"POST","url":"={{ $json.apiCall.url }}","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"application/json"}]},"sendBody":true,"specifyBody":"json","jsonBody":"={{ JSON.stringify($json.apiCall.body) }}","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-3260,4560],"id":"6ced2171-2f0c-42b1-b9bc-5096bdea56ab","name":"Call Caption Replicate1","credentials":{"httpHeaderAuth":{"id":"JlfTRouEz1b1K4bJ","name":"Flux Replicate Auth account"}},"onError":"continueErrorOutput"},{"parameters":{"operation":"toBinary","sourceProperty":"data[0].b64_json","options":{}},"type":"n8n-nodes-base.convertToFile","typeVersion":1.1,"position":[-3260,4360],"id":"42422d44-352e-40e6-a720-ecea740ff750","name":"Convert OpenAI Caption1"},{"parameters":{"amount":18},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[-3060,4560],"id":"4549f8fb-0d4b-47d9-9dd6-3a5981c97be5","name":"Wait for Caption Processing1","webhookId":"caption-replicate-wait"},{"parameters":{"url":"={{ 'https://api.replicate.com/v1/predictions/' + $json.id }}","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-2860,4560],"id":"42cbf517-341b-42ab-8b45-6511af5f1a1f","name":"Check Caption Status1","credentials":{"httpHeaderAuth":{"id":"JlfTRouEz1b1K4bJ","name":"Flux Replicate Auth account"}}},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"is-complete","leftValue":"={{ $json.status }}","rightValue":"succeeded","operator":{"type":"string","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[-2660,4560],"id":"bbec0cc1-9079-4939-add6-e412fd91592e","name":"Check if Caption Complete1"},{"parameters":{"url":"={{ Array.isArray($json.output) ? $json.output[0] : $json.output }}","options":{"response":{"response":{"responseFormat":"file"}}}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-2460,4460],"id":"6bc89576-9421-49ab-97c5-7922f033aa81","name":"Download Caption Result1"},{"parameters":{"amount":12},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[-2460,4660],"id":"3b4d5902-db6e-45da-8be3-55ee73408a2e","name":"Wait and Retry Caption1","webhookId":"caption-retry-wait"},{"parameters":{"jsCode":"// Handle API errors for caption workflow\nconst item = $input.all()[0];\nconst originalData = $('Caption Reference Form1').first().json;\n\nlet errorMessage = \"Caption processing failed\";\nlet errorDetails = item.json;\n\n// Handle specific error types\nif (item.json.error) {\n  if (item.json.error.message) {\n    errorMessage = item.json.error.message;\n  }\n} else if (item.json.message) {\n  errorMessage = item.json.message;\n} else if (item.json.status_code && item.json.status_code !== 200) {\n  errorMessage = `API returned status ${item.json.status_code}`;\n} else if (item.json.detail) {\n  errorMessage = item.json.detail;\n}\n\nreturn [{\n  json: {\n    status: \"error\",\n    workflow: \"Image Caption from Reference\",\n    message: errorMessage,\n    error_details: {\n      api_error: errorDetails,\n      original_request: {\n        title: originalData['Image Title'],\n        model: originalData['Processing Model'],\n        processing_type: originalData['Processing Type'],\n        had_caption: originalData['Add Caption?'] === 'Add Caption',\n        reference_source: originalData['Reference Image URL'] ? 'url' : 'upload'\n      }\n    },\n    timestamp: new Date().toISOString()\n  }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-3060,4760],"id":"80fd798c-c7c9-49e0-b83e-e70fee378158","name":"Handle Caption API Error1"},{"parameters":{"path":"new-image-generation","formTitle":"New Image Generation (with optional Caption)","formDescription":"Generate brand new images from text prompts, with optional text captions","formFields":{"values":[{"fieldLabel":"Image Title","placeholder":"My Generated Image","requiredField":true},{"fieldLabel":"Image Model","fieldType":"dropdown","fieldOptions":{"values":[{"option":"openai/gpt-image-1"},{"option":"black-forest-labs/flux-schnell"},{"option":"black-forest-labs/flux-dev"},{"option":"black-forest-labs/flux-1.1-pro-ultra"},{"option":"stability-ai/stable-diffusion-3.5-large"},{"option":"stability-ai/sdxl-turbo"},{"option":"recraft-ai/recraft-v3"},{"option":"ideogram-ai/ideogram-v2"},{"option":"bytedance/sdxl-lightning-4step"}]},"requiredField":true},{"fieldLabel":"Main Prompt","fieldType":"textarea","placeholder":"A bustling coffee shop with people working on laptops, warm lighting, modern interior design","requiredField":true},{"fieldLabel":"Image Style","placeholder":"Photorealistic, Cartoon, Abstract, Oil painting, Digital art, Cinematic, etc."},{"fieldLabel":"Background Description","fieldType":"textarea","placeholder":"Modern urban setting, soft gradient, studio lighting, outdoor scene, etc."},{"fieldLabel":"Image Size","fieldType":"dropdown","fieldOptions":{"values":[{"option":"1024x1024"},{"option":"1024x1536"},{"option":"1536x1024"}]}},{"fieldLabel":"Add Caption?","fieldType":"dropdown","fieldOptions":{"values":[{"option":"No Caption"},{"option":"Add Caption"}]}},{"fieldLabel":"Caption Text","placeholder":"Limited Time Offer! | John Smith, CEO | Call Now!"},{"fieldLabel":"Caption Style","placeholder":"Bold white text, bottom-center, professional font, with shadow"},{"fieldLabel":"Caption Position","fieldType":"dropdown","fieldOptions":{"values":[{"option":"bottom-center"},{"option":"bottom-left"},{"option":"bottom-right"},{"option":"top-center"},{"option":"top-left"},{"option":"top-right"},{"option":"center"}]}}]},"responseMode":"responseNode","options":{}},"id":"534bc4bb-dd3a-4ba5-a2db-174d23d1c656","name":"New Image Form","type":"n8n-nodes-base.formTrigger","position":[-4860,1060],"webhookId":"new-image-generation","typeVersion":2.1},{"parameters":{"jsCode":"// Process and validate form data for new image generation\nconst formData = $json;\n\n// Extract and clean form data\nconst processedData = {\n  title: formData['Image Title'] || '',\n  model: formData['Image Model'] || '',\n  mainPrompt: formData['Main Prompt'] || '',\n  style: formData['Image Style'] || '',\n  background: formData['Background Description'] || '',\n  size: formData['Image Size'] || '1024x1024',\n  addCaption: formData['Add Caption?'] === 'Add Caption',\n  captionText: formData['Caption Text'] || '',\n  captionStyle: formData['Caption Style'] || '',\n  captionPosition: formData['Caption Position'] || 'bottom-center'\n};\n\n// Validation\nconst errors = [];\nif (!processedData.title.trim()) errors.push('Image Title is required');\nif (!processedData.model) errors.push('Image Model is required');\nif (!processedData.mainPrompt.trim()) errors.push('Main Prompt is required');\n\n// Caption validation\nif (processedData.addCaption && !processedData.captionText.trim()) {\n  errors.push('Caption Text is required when Add Caption is selected');\n}\n\n// Check if model supports captions\nconst captionSupportedModels = ['openai/gpt-image-1'];\nif (processedData.addCaption && !captionSupportedModels.includes(processedData.model)) {\n  errors.push(`Captions are only supported with OpenAI models. Selected model: ${processedData.model}`);\n}\n\n// Determine API type\nconst isOpenAI = processedData.model === 'openai/gpt-image-1';\nconst apiType = isOpenAI ? 'openai' : 'replicate';\n\n// Build final prompt\nlet finalPrompt = processedData.mainPrompt;\nif (processedData.style) {\n  finalPrompt = `${processedData.style} style. ${finalPrompt}`;\n}\nif (processedData.background) {\n  finalPrompt += ` Background: ${processedData.background}.`;\n}\n\n// Add caption to prompt if needed (OpenAI can handle text in prompts)\nif (processedData.addCaption && isOpenAI) {\n  finalPrompt += ` Include text overlay: \"${processedData.captionText}\" positioned at ${processedData.captionPosition}. ${processedData.captionStyle ? 'Style: ' + processedData.captionStyle : ''}`;\n}\n\nreturn [{\n  json: {\n    ...processedData,\n    finalPrompt: finalPrompt,\n    apiType: apiType,\n    isOpenAI: isOpenAI,\n    errors: errors,\n    hasErrors: errors.length > 0,\n    timestamp: new Date().toISOString()\n  }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-4660,1060],"id":"96c9d9e4-8c71-4cbc-8338-93f222c5c54b","name":"Process Form Data"},{"parameters":{"respondWith":"json","responseBody":"={\n  \"status\": \"error\",\n  \"workflow\": \"New Image Generation\",\n  \"message\": \"Validation failed\",\n  \"errors\": {{ JSON.stringify($json.errors) }},\n  \"timestamp\": \"{{ $json.timestamp }}\"\n}","options":{}},"id":"38efdc69-dd73-475b-b69b-66ba99e6cc75","name":"Return Validation Errors","type":"n8n-nodes-base.respondToWebhook","position":[-4260,960],"typeVersion":1.1},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"is-openai","leftValue":"={{ $json.isOpenAI }}","rightValue":true,"operator":{"type":"boolean","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[-4260,1160],"id":"c7862047-7e6c-4c76-b5ae-82cd12cda311","name":"Route by API Type"},{"parameters":{"method":"POST","url":"https://api.openai.com/v1/images/generations","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"application/json"}]},"sendBody":true,"specifyBody":"json","jsonBody":"={\n  \"model\": \"gpt-image-1\",\n  \"prompt\": {{ JSON.stringify($json.finalPrompt) }},\n  \"size\": \"{{ $json.size }}\"\n}","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-4060,1060],"id":"c80abe75-a1ed-4a2b-82da-0efb5c79600c","name":"OpenAI Image Generation","credentials":{"httpHeaderAuth":{"id":"z06CbCGaeEeBPVIt","name":"GPT Image Generator"}},"onError":"continueErrorOutput"},{"parameters":{"method":"POST","url":"={{ 'https://api.replicate.com/v1/models/' + $json.model + '/predictions' }}","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"application/json"}]},"sendBody":true,"specifyBody":"json","jsonBody":"={\n  \"input\": {\n    \"prompt\": {{ JSON.stringify($json.finalPrompt) }},\n    \"aspect_ratio\": \"{{ $json.size === '1024x1024' ? '1:1' : ($json.size === '1024x1536' ? '2:3' : '3:2') }}\",\n    \"steps\": 28,\n    \"guidance\": 7,\n    \"output_format\": \"jpg\"\n  }\n}","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-4060,1260],"id":"dcf5d12d-83f2-4976-b73f-f78ca6b3e2cd","name":"Replicate Image Generation","credentials":{"httpHeaderAuth":{"id":"JlfTRouEz1b1K4bJ","name":"Flux Replicate Auth account"}},"onError":"continueErrorOutput"},{"parameters":{"url":"={{ 'https://api.replicate.com/v1/predictions/' + $json.id }}","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-3660,1260],"id":"ad43bc56-0b1b-4bfe-9e64-afb0bc49f717","name":"Check Replicate Status","credentials":{"httpHeaderAuth":{"id":"JlfTRouEz1b1K4bJ","name":"Flux Replicate Auth account"}}},{"parameters":{"url":"={{ Array.isArray($json.output) ? $json.output[0] : $json.output }}","options":{"response":{"response":{"responseFormat":"file"}}}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-3260,1200],"id":"2bdd7dae-be3e-4a94-812e-a12b4aa42aac","name":"Download Replicate Result"},{"parameters":{"jsCode":"// Handle API errors and create error response\nconst item = $input.all()[0];\nconst originalData = $('New Image Form').first().json;\n\nreturn [{\n  json: {\n    status: \"error\",\n    workflow: \"New Image Generation\",\n    message: \"Image generation API failed\",\n    error_details: {\n      api_error: item.json,\n      original_request: {\n        title: originalData['Image Title'],\n        model: originalData['Image Model'],\n        prompt: originalData['Main Prompt']\n      }\n    },\n    timestamp: new Date().toISOString()\n  }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-3860,1460],"id":"9c0875d4-5a1e-43b7-9237-4427abff2eea","name":"Handle API Error"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"has-errors","leftValue":"={{ $json.hasErrors }}","rightValue":true,"operator":{"type":"boolean","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[-4460,1060],"id":"6c35e35c-151f-4cea-86c2-68a3fc4c93c0","name":"Check for Errors6"},{"parameters":{"amount":10},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[-3860,1260],"id":"07a7cedc-dc94-41ab-9acc-07cc706bf668","name":"Wait for Replicate1","webhookId":"replicate-wait"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"is-complete","leftValue":"={{ $json.status }}","rightValue":"succeeded","operator":{"type":"string","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[-3460,1260],"id":"a8badaed-b035-43c0-a575-bdb54e8d582d","name":"Check if Complete1"},{"parameters":{},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[-3260,1360],"id":"0c42bb1a-829d-437a-a744-11c01ae4118c","name":"Wait and Retry1","webhookId":"retry-wait"},{"parameters":{"respondWith":"text","responseBody":"={{ $json.html }}","options":{}},"id":"c7e66d87-ba51-4094-82ed-25e31df3b2da","name":"Final Response1","type":"n8n-nodes-base.respondToWebhook","position":[-2620,960],"typeVersion":1.1},{"parameters":{"jsCode":"// Split the flow - prepare for both upload and base64 conversion\nconst item = $input.all()[0];\n\n// Pass through the data unchanged, but add a flag to indicate we have binary data\nreturn [{\n  json: {\n    ...item.json,\n    hasBinaryData: true,\n    readyForUpload: true\n  },\n  binary: item.binary\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-3660,920],"id":"97746ef9-2d87-418c-9ceb-c643b5f2d330","name":"Prepare for Upload"},{"parameters":{"operation":"binaryToPropery","destinationKey":"image_base64","options":{}},"type":"n8n-nodes-base.extractFromFile","typeVersion":1,"position":[-3360,1040],"id":"1e4ee706-ef91-46a1-bca9-a6ffc8a9c669","name":"Convert to Base64 (Backup)"},{"parameters":{"jsCode":"// Merge upload result with base64 data\nconst uploadItem = $input.all()[0]; // From upload\nconst base64Item = $input.all()[1]; // From base64 conversion\nconst originalData = $('New Image Form').first().json;\n\nconsole.log('🔄 Merging upload and base64 data');\nconsole.log('Upload response:', JSON.stringify(uploadItem.json, null, 2));\nconsole.log('Base64 available:', !!base64Item?.json?.image_base64);\n\n// Check if upload was successful\nconst uploadSuccessful = uploadItem.json.status_code === 200 && uploadItem.json.image && uploadItem.json.image.url;\n\nif (uploadSuccessful) {\n  console.log('✅ Upload successful, using hosted image');\n  return [{\n    json: {\n      status: \"success\",\n      workflow: \"New Image Generation\",\n      title: originalData['Image Title'],\n      model: originalData['Image Model'],\n      prompt: uploadItem.json.finalPrompt || originalData['Main Prompt'],\n      had_caption: originalData['Add Caption?'] === 'Add Caption',\n      caption_text: originalData['Caption Text'] || null,\n      image_url: uploadItem.json.image.url,\n      image_display_url: uploadItem.json.image.display_url || uploadItem.json.image.url,\n      image_base64: base64Item?.json?.image_base64 || null, // Keep base64 as backup\n      hosted_image: true,\n      metadata: {\n        style: originalData['Image Style'],\n        background: originalData['Background Description'],\n        size: originalData['Image Size'],\n        api_used: uploadItem.json.apiType || (originalData['Image Model'] === 'openai/gpt-image-1' ? 'openai' : 'replicate'),\n        generation_type: \"new_image\",\n        caption_position: originalData['Caption Position'] || null,\n        caption_style: originalData['Caption Style'] || null,\n        upload_service: \"freeimage.host\",\n        upload_response: {\n          url: uploadItem.json.image.url,\n          display_url: uploadItem.json.image.display_url,\n          thumb_url: uploadItem.json.image.thumb?.url\n        }\n      },\n      timestamp: new Date().toISOString()\n    }\n  }];\n} else {\n  console.log('⚠️ Upload failed, using base64 fallback');\n  return [{\n    json: {\n      status: base64Item?.json?.image_base64 ? \"success\" : \"error\",\n      workflow: \"New Image Generation\",\n      title: originalData['Image Title'],\n      model: originalData['Image Model'],\n      prompt: uploadItem.json.finalPrompt || originalData['Main Prompt'],\n      had_caption: originalData['Add Caption?'] === 'Add Caption',\n      caption_text: originalData['Caption Text'] || null,\n      image_base64: base64Item?.json?.image_base64,\n      hosted_image: false,\n      upload_error: `Upload failed: ${uploadItem.json.error?.message || 'Unknown error'}`,\n      metadata: {\n        style: originalData['Image Style'],\n        background: originalData['Background Description'],\n        size: originalData['Image Size'],\n        api_used: uploadItem.json.apiType || (originalData['Image Model'] === 'openai/gpt-image-1' ? 'openai' : 'replicate'),\n        generation_type: \"new_image\",\n        caption_position: originalData['Caption Position'] || null,\n        caption_style: originalData['Caption Style'] || null,\n        upload_service: \"fallback_base64\",\n        upload_error_details: uploadItem.json\n      },\n      timestamp: new Date().toISOString()\n    }\n  }];\n}"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-3040,960],"id":"6c851332-eeb6-4f6b-9b9a-0c868be23747","name":"Merge Upload & Base64"},{"parameters":{"method":"POST","url":"https://freeimage.host/api/1/upload","sendBody":true,"contentType":"multipart-form-data","bodyParameters":{"parameters":[{"parameterType":"formBinaryData","name":"source","inputDataFieldName":"data"},{"name":"key","value":"6d207e02198a847aa98d0a2a901485a5"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-3360,860],"id":"8d862343-3412-4604-928f-3c0ce4bf11ac","name":"Upload to FreeImage1","onError":"continueErrorOutput"},{"parameters":{"jsCode":"// Generate HTML response for the webhook\nconst data = $json;\n\n// Helper function to escape quotes in strings\nconst escapeQuotes = (str) => str ? str.replace(/'/g, \"\\\\'\").replace(/\"/g, '\\\\\"') : '';\n\n// Generate the image section\nconst generateImageSection = () => {\n  if (data.status !== 'success') return '';\n  \n  let imageHtml = '';\n  \n  if (data.hosted_image) {\n    imageHtml = `<img src=\"${data.image_display_url}\" alt=\"Generated Image\" class=\"generated-image\" crossorigin=\"anonymous\" onerror=\"this.style.display='none'; document.getElementById('fallback-img').style.display='block';\" />`;\n    \n    if (data.image_base64) {\n      imageHtml += `<img id=\"fallback-img\" src=\"data:image/jpeg;base64,${data.image_base64}\" alt=\"Generated Image (Fallback)\" class=\"generated-image\" style=\"display:none;\" />`;\n    }\n  } else {\n    imageHtml = `<img src=\"data:image/jpeg;base64,${data.image_base64}\" alt=\"Generated Image\" class=\"generated-image\" />`;\n  }\n  \n  const overlayText = data.hosted_image ? 'HOSTED' : 'BASE64';\n  \n  return `\n    <div class=\"image-container\">\n      ${imageHtml}\n      <div class=\"image-overlay\">${overlayText}</div>\n    </div>\n  `;\n};\n\n// Generate download buttons\nconst generateDownloadButtons = () => {\n  if (data.status !== 'success') return '';\n  \n  const safeTitle = data.title ? data.title.replace(/[^a-zA-Z0-9]/g, '_') : 'generated';\n  \n  if (data.hosted_image) {\n    return `\n      <div style=\"margin: 20px 0;\">\n        <a href=\"${data.image_url}\" target=\"_blank\" class=\"view-btn\">🔗 View Full Size</a>\n        <a href=\"${data.image_url}\" download=\"${safeTitle}_generated.jpg\" class=\"download-btn\">📥 Download Image</a>\n      </div>\n    `;\n  } else {\n    return `\n      <div style=\"margin: 20px 0;\">\n        <a href=\"data:image/jpeg;base64,${data.image_base64}\" download=\"${safeTitle}_generated.jpg\" class=\"download-btn\">📥 Download Image</a>\n      </div>\n    `;\n  }\n};\n\n// Generate metadata items\nconst generateMetadata = () => {\n  let metadataItems = `\n    <div class=\"metadata-item\">\n      <span class=\"label\">Model:</span> ${data.model || 'N/A'}\n    </div>\n    <div class=\"metadata-item\">\n      <span class=\"label\">Prompt:</span> ${escapeQuotes(data.prompt || 'N/A')}\n    </div>\n  `;\n  \n  if (data.had_caption) {\n    metadataItems += `\n      <div class=\"metadata-item\">\n        <span class=\"label\">Caption:</span> ${escapeQuotes(data.caption_text)}\n      </div>\n    `;\n  }\n  \n  const hostingBadge = data.hosted_image ? \n    '<span class=\"hosting-badge\">HOSTED</span>' : \n    '<span class=\"fallback-badge\">BASE64</span>';\n  \n  const uploadService = data.metadata && data.metadata.upload_service ? \n    ` via ${data.metadata.upload_service}` : '';\n  \n  metadataItems += `\n    <div class=\"metadata-item\">\n      <span class=\"label\">Hosting:</span> ${hostingBadge}${uploadService}\n    </div>\n  `;\n  \n  if (data.hosted_image && data.image_url) {\n    metadataItems += `\n      <div class=\"metadata-item\">\n        <span class=\"label\">Image URL:</span> <a href=\"${data.image_url}\" target=\"_blank\">View Original</a>\n      </div>\n    `;\n  }\n  \n  metadataItems += `\n    <div class=\"metadata-item\">\n      <span class=\"label\">Timestamp:</span> ${data.timestamp}\n    </div>\n  `;\n  \n  if (data.metadata && data.metadata.api_used) {\n    metadataItems += `\n      <div class=\"metadata-item\">\n        <span class=\"label\">API Used:</span> ${data.metadata.api_used}\n      </div>\n    `;\n  }\n  \n  if (data.metadata && data.metadata.style) {\n    metadataItems += `\n      <div class=\"metadata-item\">\n        <span class=\"label\">Style:</span> ${escapeQuotes(data.metadata.style)}\n      </div>\n    `;\n  }\n  \n  if (data.metadata && data.metadata.size) {\n    metadataItems += `\n      <div class=\"metadata-item\">\n        <span class=\"label\">Size:</span> ${data.metadata.size}\n      </div>\n    `;\n  }\n  \n  return metadataItems;\n};\n\n// Generate warning message if needed\nconst generateWarning = () => {\n  if (data.upload_error && data.status === 'success') {\n    return `<div class=\"status warning\">⚠️ ${escapeQuotes(data.upload_error)}</div>`;\n  }\n  return '';\n};\n\n// Main HTML template\nconst html = `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>${escapeQuotes(data.title)} - New Image Generation</title>\n    <style>\n        body {\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            margin: 0;\n            padding: 20px;\n            min-height: 100vh;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n        }\n        .container {\n            background: white;\n            border-radius: 20px;\n            box-shadow: 0 20px 40px rgba(0,0,0,0.1);\n            padding: 30px;\n            max-width: 800px;\n            width: 100%;\n            text-align: center;\n        }\n        .status {\n            display: inline-block;\n            padding: 8px 16px;\n            border-radius: 20px;\n            font-weight: bold;\n            margin-bottom: 20px;\n        }\n        .success { background: #d4edda; color: #155724; }\n        .error { background: #f8d7da; color: #721c24; }\n        .warning { background: #fff3cd; color: #856404; }\n        .image-container {\n            margin: 20px 0;\n            border-radius: 15px;\n            overflow: hidden;\n            box-shadow: 0 10px 25px rgba(0,0,0,0.1);\n            display: inline-block;\n            position: relative;\n        }\n        .generated-image {\n            max-width: 100%;\n            height: auto;\n            display: block;\n        }\n        .image-overlay {\n            position: absolute;\n            top: 10px;\n            right: 10px;\n            background: rgba(0,0,0,0.7);\n            color: white;\n            padding: 4px 8px;\n            border-radius: 12px;\n            font-size: 11px;\n            font-weight: bold;\n        }\n        .metadata {\n            background: #f8f9fa;\n            border-radius: 10px;\n            padding: 20px;\n            margin: 20px 0;\n            text-align: left;\n        }\n        .metadata h3 {\n            margin-top: 0;\n            color: #495057;\n        }\n        .metadata-item {\n            margin: 8px 0;\n            padding: 5px 0;\n            border-bottom: 1px solid #e9ecef;\n        }\n        .metadata-item:last-child {\n            border-bottom: none;\n        }\n        .label {\n            font-weight: bold;\n            color: #6c757d;\n            display: inline-block;\n            min-width: 120px;\n        }\n        .download-btn {\n            background: linear-gradient(45deg, #28a745, #20c997);\n            color: white;\n            padding: 12px 24px;\n            border: none;\n            border-radius: 25px;\n            font-size: 16px;\n            cursor: pointer;\n            text-decoration: none;\n            display: inline-block;\n            margin: 10px;\n            transition: transform 0.2s;\n        }\n        .download-btn:hover {\n            transform: translateY(-2px);\n            box-shadow: 0 5px 15px rgba(0,0,0,0.2);\n        }\n        .view-btn {\n            background: linear-gradient(45deg, #007bff, #6610f2);\n            color: white;\n            padding: 12px 24px;\n            border: none;\n            border-radius: 25px;\n            font-size: 16px;\n            cursor: pointer;\n            text-decoration: none;\n            display: inline-block;\n            margin: 10px;\n            transition: transform 0.2s;\n        }\n        .view-btn:hover {\n            transform: translateY(-2px);\n            box-shadow: 0 5px 15px rgba(0,0,0,0.2);\n        }\n        .json-btn {\n            background: linear-gradient(45deg, #6c757d, #495057);\n            color: white;\n            padding: 8px 16px;\n            border: none;\n            border-radius: 20px;\n            font-size: 14px;\n            cursor: pointer;\n            margin: 10px;\n        }\n        .json-data {\n            display: none;\n            background: #f8f9fa;\n            border: 1px solid #dee2e6;\n            border-radius: 5px;\n            padding: 15px;\n            margin-top: 10px;\n            text-align: left;\n            font-family: monospace;\n            font-size: 12px;\n            white-space: pre-wrap;\n            max-height: 300px;\n            overflow-y: auto;\n        }\n        h1 {\n            color: #343a40;\n            margin-bottom: 10px;\n        }\n        .workflow-badge {\n            background: linear-gradient(45deg, #007bff, #6610f2);\n            color: white;\n            padding: 4px 12px;\n            border-radius: 15px;\n            font-size: 12px;\n            font-weight: bold;\n        }\n        .hosting-badge {\n            background: linear-gradient(45deg, #17a2b8, #20c997);\n            color: white;\n            padding: 2px 8px;\n            border-radius: 10px;\n            font-size: 11px;\n            font-weight: bold;\n        }\n        .fallback-badge {\n            background: linear-gradient(45deg, #ffc107, #fd7e14);\n            color: white;\n            padding: 2px 8px;\n            border-radius: 10px;\n            font-size: 11px;\n            font-weight: bold;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"workflow-badge\">${data.workflow}</div>\n        <h1>${escapeQuotes(data.title)}</h1>\n        \n        <div class=\"status ${data.status === 'success' ? 'success' : 'error'}\">\n            ${data.status === 'success' ? '✓ Generation Successful' : '❌ Generation Failed'}\n        </div>\n\n        ${generateWarning()}\n\n        ${generateImageSection()}\n        ${generateDownloadButtons()}\n\n        <div class=\"metadata\">\n            <h3>Generation Details</h3>\n            ${generateMetadata()}\n        </div>\n\n        <button class=\"json-btn\" onclick=\"toggleJson()\">Show JSON Data</button>\n        <div id=\"jsonData\" class=\"json-data\">${JSON.stringify(data, null, 2)}</div>\n    </div>\n\n    <script>\n        function toggleJson() {\n            const jsonData = document.getElementById('jsonData');\n            const btn = event.target;\n            if (jsonData.style.display === 'none' || !jsonData.style.display) {\n                jsonData.style.display = 'block';\n                btn.textContent = 'Hide JSON Data';\n            } else {\n                jsonData.style.display = 'none';\n                btn.textContent = 'Show JSON Data';\n            }\n        }\n    </script>\n</body>\n</html>`;\n\n// Return the generated HTML\nreturn [{ json: { html: html } }];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-2820,960],"id":"40ca1075-6421-44cb-bb7f-dd98397c70da","name":"Generate HTML Response"},{"parameters":{"operation":"toBinary","sourceProperty":"data[0].b64_json","options":{}},"type":"n8n-nodes-base.convertToFile","typeVersion":1.1,"position":[-3900,940],"id":"6bc19ffa-17af-479c-8587-ce875d9f7fcc","name":"Convert to File5"},{"parameters":{"respondWith":"text","responseBody":"={{ $json.html }}","options":{}},"id":"414d8dfb-21d6-4024-973b-eb0cb070aa5b","name":"Final Response3","type":"n8n-nodes-base.respondToWebhook","position":[-2540,2040],"typeVersion":1.1},{"parameters":{"jsCode":"// Split the flow - prepare for both upload and base64 conversion\nconst item = $input.all()[0];\n\n// Pass through the data unchanged, but add a flag to indicate we have binary data\nreturn [{\n  json: {\n    ...item.json,\n    hasBinaryData: true,\n    readyForUpload: true\n  },\n  binary: item.binary\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-3340,2040],"id":"b3b3b2d9-bf48-444d-8869-8f7d625f5437","name":"Prepare for Upload1"},{"parameters":{"operation":"binaryToPropery","destinationKey":"image_base64","options":{}},"type":"n8n-nodes-base.extractFromFile","typeVersion":1,"position":[-3120,2120],"id":"836bbf90-a7f8-422d-8cd9-4f98a048543b","name":"Convert to Base64 (Backup)1"},{"parameters":{"jsCode":"// Merge upload result with base64 data for regeneration workflow\nconst uploadItem = $input.all()[0]; // From upload\nconst base64Item = $input.all()[1]; // From base64 conversion\nconst originalData = $('Image Regenerate Form1').first().json; // Fixed: use correct form name\n\nconsole.log('🔄 Merging upload and base64 data for regeneration');\nconsole.log('Upload response:', JSON.stringify(uploadItem.json, null, 2));\nconsole.log('Base64 available:', !!base64Item?.json?.image_base64);\n\n// Check if upload was successful\nconst uploadSuccessful = uploadItem.json.status_code === 200 && uploadItem.json.image && uploadItem.json.image.url;\n\nif (uploadSuccessful) {\n  console.log('✅ Upload successful, using hosted image');\n  return [{\n    json: {\n      status: \"success\",\n      workflow: \"Image Re-generation\",\n      title: originalData['Image Title'],\n      model: originalData['Image Model'],\n      prompt: uploadItem.json.transformationPrompt || originalData['Style Transformation'],\n      transformation_details: {\n        style: originalData['Style Transformation'],\n        scene_modifications: originalData['Scene Modifications'],\n        background_changes: originalData['Background Changes'],\n        focus_areas: originalData['Focus Areas'],\n        additional_instructions: originalData['Additional Instructions'],\n        transformation_strength: originalData['Transformation Strength']\n      },\n      reference_source: originalData['Reference Image URL'] ? 'url' : 'upload',\n      image_url: uploadItem.json.image.url,\n      image_display_url: uploadItem.json.image.display_url || uploadItem.json.image.url,\n      image_base64: base64Item?.json?.image_base64 || null, // Keep base64 as backup\n      hosted_image: true,\n      metadata: {\n        output_size: originalData['Output Size'],\n        api_used: uploadItem.json.apiType || (originalData['Image Model'] === 'openai/gpt-image-1' ? 'openai' : 'replicate'),\n        generation_type: \"image_regeneration\",\n        upload_service: \"freeimage.host\",\n        upload_response: {\n          url: uploadItem.json.image.url,\n          display_url: uploadItem.json.image.display_url,\n          thumb_url: uploadItem.json.image.thumb?.url\n        }\n      },\n      timestamp: new Date().toISOString()\n    }\n  }];\n} else {\n  console.log('⚠️ Upload failed, using base64 fallback');\n  return [{\n    json: {\n      status: base64Item?.json?.image_base64 ? \"success\" : \"error\",\n      workflow: \"Image Re-generation\",\n      title: originalData['Image Title'],\n      model: originalData['Image Model'],\n      prompt: uploadItem.json.transformationPrompt || originalData['Style Transformation'],\n      transformation_details: {\n        style: originalData['Style Transformation'],\n        scene_modifications: originalData['Scene Modifications'],\n        background_changes: originalData['Background Changes'],\n        focus_areas: originalData['Focus Areas'],\n        additional_instructions: originalData['Additional Instructions'],\n        transformation_strength: originalData['Transformation Strength']\n      },\n      reference_source: originalData['Reference Image URL'] ? 'url' : 'upload',\n      image_base64: base64Item?.json?.image_base64,\n      hosted_image: false,\n      upload_error: `Upload failed: ${uploadItem.json.error?.message || 'Unknown error'}`,\n      metadata: {\n        output_size: originalData['Output Size'],\n        api_used: uploadItem.json.apiType || (originalData['Image Model'] === 'openai/gpt-image-1' ? 'openai' : 'replicate'),\n        generation_type: \"image_regeneration\",\n        upload_service: \"fallback_base64\",\n        upload_error_details: uploadItem.json\n      },\n      timestamp: new Date().toISOString()\n    }\n  }];\n}"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-2900,2040],"id":"e0fd684e-ed67-4eed-84a1-12de674017b1","name":"Merge Upload & Base"},{"parameters":{"method":"POST","url":"https://freeimage.host/api/1/upload","sendBody":true,"contentType":"multipart-form-data","bodyParameters":{"parameters":[{"parameterType":"formBinaryData","name":"source","inputDataFieldName":"data"},{"name":"key","value":"6d207e02198a847aa98d0a2a901485a5"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-3120,1940],"id":"c5f45cc7-d1fa-4b24-a1ae-db384c63dbad","name":"Upload to FreeImage2","onError":"continueErrorOutput"},{"parameters":{"jsCode":"// Generate HTML response for the regeneration webhook\nconst data = $json;\n\n// Helper function to escape quotes in strings\nconst escapeQuotes = (str) => str ? str.replace(/'/g, \"\\\\'\").replace(/\"/g, '\\\\\"') : '';\n\n// Generate the image section\nconst generateImageSection = () => {\n  if (data.status !== 'success') return '';\n  \n  let imageHtml = '';\n  \n  if (data.hosted_image) {\n    imageHtml = `<img src=\"${data.image_display_url}\" alt=\"Regenerated Image\" class=\"generated-image\" crossorigin=\"anonymous\" onerror=\"this.style.display='none'; document.getElementById('fallback-img').style.display='block';\" />`;\n    \n    if (data.image_base64) {\n      imageHtml += `<img id=\"fallback-img\" src=\"data:image/jpeg;base64,${data.image_base64}\" alt=\"Regenerated Image (Fallback)\" class=\"generated-image\" style=\"display:none;\" />`;\n    }\n  } else {\n    imageHtml = `<img src=\"data:image/jpeg;base64,${data.image_base64}\" alt=\"Regenerated Image\" class=\"generated-image\" />`;\n  }\n  \n  const overlayText = data.hosted_image ? 'HOSTED' : 'BASE64';\n  \n  return `\n    <div class=\"image-container\">\n      ${imageHtml}\n      <div class=\"image-overlay\">${overlayText}</div>\n    </div>\n  `;\n};\n\n// Generate download buttons\nconst generateDownloadButtons = () => {\n  if (data.status !== 'success') return '';\n  \n  const safeTitle = data.title ? data.title.replace(/[^a-zA-Z0-9]/g, '_') : 'regenerated';\n  \n  if (data.hosted_image) {\n    return `\n      <div style=\"margin: 20px 0;\">\n        <a href=\"${data.image_url}\" target=\"_blank\" class=\"view-btn\">🔗 View Full Size</a>\n        <a href=\"${data.image_url}\" download=\"${safeTitle}_regenerated.jpg\" class=\"download-btn\">📥 Download Image</a>\n      </div>\n    `;\n  } else {\n    return `\n      <div style=\"margin: 20px 0;\">\n        <a href=\"data:image/jpeg;base64,${data.image_base64}\" download=\"${safeTitle}_regenerated.jpg\" class=\"download-btn\">📥 Download Image</a>\n      </div>\n    `;\n  }\n};\n\n// Generate transformation details section\nconst generateTransformationDetails = () => {\n  if (!data.transformation_details) return '';\n  \n  const details = data.transformation_details;\n  let detailsHtml = '';\n  \n  if (details.style) {\n    detailsHtml += `\n      <div class=\"metadata-item\">\n        <span class=\"label\">Style Transform:</span> ${escapeQuotes(details.style)}\n      </div>\n    `;\n  }\n  \n  if (details.scene_modifications) {\n    detailsHtml += `\n      <div class=\"metadata-item\">\n        <span class=\"label\">Scene Changes:</span> ${escapeQuotes(details.scene_modifications)}\n      </div>\n    `;\n  }\n  \n  if (details.background_changes) {\n    detailsHtml += `\n      <div class=\"metadata-item\">\n        <span class=\"label\">Background:</span> ${escapeQuotes(details.background_changes)}\n      </div>\n    `;\n  }\n  \n  if (details.focus_areas) {\n    detailsHtml += `\n      <div class=\"metadata-item\">\n        <span class=\"label\">Focus Areas:</span> ${escapeQuotes(details.focus_areas)}\n      </div>\n    `;\n  }\n  \n  if (details.additional_instructions) {\n    detailsHtml += `\n      <div class=\"metadata-item\">\n        <span class=\"label\">Additional:</span> ${escapeQuotes(details.additional_instructions)}\n      </div>\n    `;\n  }\n  \n  if (details.transformation_strength) {\n    detailsHtml += `\n      <div class=\"metadata-item\">\n        <span class=\"label\">Strength:</span> ${details.transformation_strength}\n      </div>\n    `;\n  }\n  \n  return detailsHtml;\n};\n\n// Generate metadata items\nconst generateMetadata = () => {\n  let metadataItems = `\n    <div class=\"metadata-item\">\n      <span class=\"label\">Model:</span> ${data.model || 'N/A'}\n    </div>\n    <div class=\"metadata-item\">\n      <span class=\"label\">Transformation:</span> ${escapeQuotes(data.prompt || 'N/A')}\n    </div>\n    <div class=\"metadata-item\">\n      <span class=\"label\">Reference Source:</span> ${data.reference_source || 'N/A'}\n    </div>\n  `;\n  \n  // Add transformation details\n  metadataItems += generateTransformationDetails();\n  \n  const hostingBadge = data.hosted_image ? \n    '<span class=\"hosting-badge\">HOSTED</span>' : \n    '<span class=\"fallback-badge\">BASE64</span>';\n  \n  const uploadService = data.metadata && data.metadata.upload_service ? \n    ` via ${data.metadata.upload_service}` : '';\n  \n  metadataItems += `\n    <div class=\"metadata-item\">\n      <span class=\"label\">Hosting:</span> ${hostingBadge}${uploadService}\n    </div>\n  `;\n  \n  if (data.hosted_image && data.image_url) {\n    metadataItems += `\n      <div class=\"metadata-item\">\n        <span class=\"label\">Image URL:</span> <a href=\"${data.image_url}\" target=\"_blank\">View Original</a>\n      </div>\n    `;\n  }\n  \n  metadataItems += `\n    <div class=\"metadata-item\">\n      <span class=\"label\">Timestamp:</span> ${data.timestamp}\n    </div>\n  `;\n  \n  if (data.metadata && data.metadata.api_used) {\n    metadataItems += `\n      <div class=\"metadata-item\">\n        <span class=\"label\">API Used:</span> ${data.metadata.api_used}\n      </div>\n    `;\n  }\n  \n  if (data.metadata && data.metadata.output_size) {\n    metadataItems += `\n      <div class=\"metadata-item\">\n        <span class=\"label\">Output Size:</span> ${data.metadata.output_size}\n      </div>\n    `;\n  }\n  \n  return metadataItems;\n};\n\n// Generate warning message if needed\nconst generateWarning = () => {\n  if (data.upload_error && data.status === 'success') {\n    return `<div class=\"status warning\">⚠️ ${escapeQuotes(data.upload_error)}</div>`;\n  }\n  return '';\n};\n\n// Main HTML template\nconst html = `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>${escapeQuotes(data.title)} - Image Re-generation</title>\n    <style>\n        body {\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n            background: linear-gradient(135deg, #6a11cb 0%, #2575fc 100%);\n            margin: 0;\n            padding: 20px;\n            min-height: 100vh;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n        }\n        .container {\n            background: white;\n            border-radius: 20px;\n            box-shadow: 0 20px 40px rgba(0,0,0,0.1);\n            padding: 30px;\n            max-width: 800px;\n            width: 100%;\n            text-align: center;\n        }\n        .status {\n            display: inline-block;\n            padding: 8px 16px;\n            border-radius: 20px;\n            font-weight: bold;\n            margin-bottom: 20px;\n        }\n        .success { background: #d4edda; color: #155724; }\n        .error { background: #f8d7da; color: #721c24; }\n        .warning { background: #fff3cd; color: #856404; }\n        .image-container {\n            margin: 20px 0;\n            border-radius: 15px;\n            overflow: hidden;\n            box-shadow: 0 10px 25px rgba(0,0,0,0.1);\n            display: inline-block;\n            position: relative;\n        }\n        .generated-image {\n            max-width: 100%;\n            height: auto;\n            display: block;\n        }\n        .image-overlay {\n            position: absolute;\n            top: 10px;\n            right: 10px;\n            background: rgba(0,0,0,0.7);\n            color: white;\n            padding: 4px 8px;\n            border-radius: 12px;\n            font-size: 11px;\n            font-weight: bold;\n        }\n        .metadata {\n            background: #f8f9fa;\n            border-radius: 10px;\n            padding: 20px;\n            margin: 20px 0;\n            text-align: left;\n        }\n        .metadata h3 {\n            margin-top: 0;\n            color: #495057;\n        }\n        .metadata-item {\n            margin: 8px 0;\n            padding: 5px 0;\n            border-bottom: 1px solid #e9ecef;\n        }\n        .metadata-item:last-child {\n            border-bottom: none;\n        }\n        .label {\n            font-weight: bold;\n            color: #6c757d;\n            display: inline-block;\n            min-width: 140px;\n        }\n        .download-btn {\n            background: linear-gradient(45deg, #28a745, #20c997);\n            color: white;\n            padding: 12px 24px;\n            border: none;\n            border-radius: 25px;\n            font-size: 16px;\n            cursor: pointer;\n            text-decoration: none;\n            display: inline-block;\n            margin: 10px;\n            transition: transform 0.2s;\n        }\n        .download-btn:hover {\n            transform: translateY(-2px);\n            box-shadow: 0 5px 15px rgba(0,0,0,0.2);\n        }\n        .view-btn {\n            background: linear-gradient(45deg, #007bff, #6610f2);\n            color: white;\n            padding: 12px 24px;\n            border: none;\n            border-radius: 25px;\n            font-size: 16px;\n            cursor: pointer;\n            text-decoration: none;\n            display: inline-block;\n            margin: 10px;\n            transition: transform 0.2s;\n        }\n        .view-btn:hover {\n            transform: translateY(-2px);\n            box-shadow: 0 5px 15px rgba(0,0,0,0.2);\n        }\n        .json-btn {\n            background: linear-gradient(45deg, #6c757d, #495057);\n            color: white;\n            padding: 8px 16px;\n            border: none;\n            border-radius: 20px;\n            font-size: 14px;\n            cursor: pointer;\n            margin: 10px;\n        }\n        .json-data {\n            display: none;\n            background: #f8f9fa;\n            border: 1px solid #dee2e6;\n            border-radius: 5px;\n            padding: 15px;\n            margin-top: 10px;\n            text-align: left;\n            font-family: monospace;\n            font-size: 12px;\n            white-space: pre-wrap;\n            max-height: 300px;\n            overflow-y: auto;\n        }\n        h1 {\n            color: #343a40;\n            margin-bottom: 10px;\n        }\n        .workflow-badge {\n            background: linear-gradient(45deg, #6a11cb, #2575fc);\n            color: white;\n            padding: 4px 12px;\n            border-radius: 15px;\n            font-size: 12px;\n            font-weight: bold;\n        }\n        .hosting-badge {\n            background: linear-gradient(45deg, #17a2b8, #20c997);\n            color: white;\n            padding: 2px 8px;\n            border-radius: 10px;\n            font-size: 11px;\n            font-weight: bold;\n        }\n        .fallback-badge {\n            background: linear-gradient(45deg, #ffc107, #fd7e14);\n            color: white;\n            padding: 2px 8px;\n            border-radius: 10px;\n            font-size: 11px;\n            font-weight: bold;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"workflow-badge\">${data.workflow}</div>\n        <h1>${escapeQuotes(data.title)}</h1>\n        \n        <div class=\"status ${data.status === 'success' ? 'success' : 'error'}\">\n            ${data.status === 'success' ? '✓ Regeneration Successful' : '❌ Regeneration Failed'}\n        </div>\n\n        ${generateWarning()}\n\n        ${generateImageSection()}\n        ${generateDownloadButtons()}\n\n        <div class=\"metadata\">\n            <h3>Regeneration Details</h3>\n            ${generateMetadata()}\n        </div>\n\n        <button class=\"json-btn\" onclick=\"toggleJson()\">Show JSON Data</button>\n        <div id=\"jsonData\" class=\"json-data\">${JSON.stringify(data, null, 2)}</div>\n    </div>\n\n    <script>\n        function toggleJson() {\n            const jsonData = document.getElementById('jsonData');\n            const btn = event.target;\n            if (jsonData.style.display === 'none' || !jsonData.style.display) {\n                jsonData.style.display = 'block';\n                btn.textContent = 'Hide JSON Data';\n            } else {\n                jsonData.style.display = 'none';\n                btn.textContent = 'Show JSON Data';\n            }\n        }\n    </script>\n</body>\n</html>`;\n\n// Return the generated HTML\nreturn [{ json: { html: html } }];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-2740,2040],"id":"2acec475-e8ea-402a-b5d8-9ec0b1b57391","name":"Generate HTML Response1"},{"parameters":{"respondWith":"text","responseBody":"={{ $json.html }}","options":{}},"id":"f79a84ec-7cd7-4093-8de8-d9e7ac944d71","name":"Final Response4","type":"n8n-nodes-base.respondToWebhook","position":[-2260,4280],"typeVersion":1.1},{"parameters":{"jsCode":"// Split the flow - prepare for both upload and base64 conversion\nconst item = $input.all()[0];\n\n// Pass through the data unchanged, but add a flag to indicate we have binary data\nreturn [{\n  json: {\n    ...item.json,\n    hasBinaryData: true,\n    readyForUpload: true\n  },\n  binary: item.binary\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-3060,4280],"id":"1e1ecc5d-b79a-4571-951a-cd5f2727b8cb","name":"Prepare for Upload2"},{"parameters":{"operation":"binaryToPropery","destinationKey":"image_base64","options":{}},"type":"n8n-nodes-base.extractFromFile","typeVersion":1,"position":[-2840,4360],"id":"d4c52147-fc37-4831-a1c0-c62171cc1d6b","name":"Convert to Base64 (Backup)2"},{"parameters":{"jsCode":"// Merge upload result with base64 data for caption workflow\nconst uploadItem = $input.all()[0]; // From upload\nconst base64Item = $input.all()[1]; // From base64 conversion\nconst originalData = $('Caption Reference Form1').first().json; // Fixed: use correct form name\n\nconsole.log('🔄 Merging upload and base64 data for caption workflow');\nconsole.log('Upload response:', JSON.stringify(uploadItem.json, null, 2));\nconsole.log('Base64 available:', !!base64Item?.json?.image_base64);\n\n// Check if upload was successful\nconst uploadSuccessful = uploadItem.json.status_code === 200 && uploadItem.json.image && uploadItem.json.image.url;\n\nif (uploadSuccessful) {\n  console.log('✅ Upload successful, using hosted image');\n  return [{\n    json: {\n      status: \"success\",\n      workflow: \"Image Caption from Reference\",\n      title: originalData['Image Title'],\n      model: originalData['Processing Model'],\n      prompt: uploadItem.json.mainPrompt || uploadItem.json.finalPrompt || originalData['Image Transformation'],\n      processing_details: {\n        processing_type: originalData['Processing Type'],\n        image_transformation: originalData['Image Transformation'],\n        scene_context: originalData['Scene Context'],\n        background_enhancement: originalData['Background Enhancement'],\n        output_quality: originalData['Output Quality']\n      },\n      caption_details: {\n        had_caption: originalData['Add Caption?'] === 'Add Caption',\n        caption_text: originalData['Caption Text'] || null,\n        caption_position: originalData['Caption Position'] || null,\n        caption_style: originalData['Caption Style'] || null,\n        caption_size: originalData['Caption Size'] || null,\n        brand_colors: originalData['Brand Colors'] || null\n      },\n      reference_source: originalData['Reference Image URL'] ? 'url' : 'upload',\n      image_url: uploadItem.json.image.url,\n      image_display_url: uploadItem.json.image.display_url || uploadItem.json.image.url,\n      image_base64: base64Item?.json?.image_base64 || null, // Keep base64 as backup\n      hosted_image: true,\n      metadata: {\n        output_size: originalData['Output Size'],\n        api_used: uploadItem.json.apiType || (originalData['Processing Model'] === 'openai/gpt-image-1' ? 'openai' : 'replicate'),\n        generation_type: \"caption_from_reference\",\n        upload_service: \"freeimage.host\",\n        upload_response: {\n          url: uploadItem.json.image.url,\n          display_url: uploadItem.json.image.display_url,\n          thumb_url: uploadItem.json.image.thumb?.url\n        }\n      },\n      timestamp: new Date().toISOString()\n    }\n  }];\n} else {\n  console.log('⚠️ Upload failed, using base64 fallback');\n  return [{\n    json: {\n      status: base64Item?.json?.image_base64 ? \"success\" : \"error\",\n      workflow: \"Image Caption from Reference\",\n      title: originalData['Image Title'],\n      model: originalData['Processing Model'],\n      prompt: uploadItem.json.mainPrompt || uploadItem.json.finalPrompt || originalData['Image Transformation'],\n      processing_details: {\n        processing_type: originalData['Processing Type'],\n        image_transformation: originalData['Image Transformation'],\n        scene_context: originalData['Scene Context'],\n        background_enhancement: originalData['Background Enhancement'],\n        output_quality: originalData['Output Quality']\n      },\n      caption_details: {\n        had_caption: originalData['Add Caption?'] === 'Add Caption',\n        caption_text: originalData['Caption Text'] || null,\n        caption_position: originalData['Caption Position'] || null,\n        caption_style: originalData['Caption Style'] || null,\n        caption_size: originalData['Caption Size'] || null,\n        brand_colors: originalData['Brand Colors'] || null\n      },\n      reference_source: originalData['Reference Image URL'] ? 'url' : 'upload',\n      image_base64: base64Item?.json?.image_base64,\n      hosted_image: false,\n      upload_error: `Upload failed: ${uploadItem.json.error?.message || 'Unknown error'}`,\n      metadata: {\n        output_size: originalData['Output Size'],\n        api_used: uploadItem.json.apiType || (originalData['Processing Model'] === 'openai/gpt-image-1' ? 'openai' : 'replicate'),\n        generation_type: \"caption_from_reference\",\n        upload_service: \"fallback_base64\",\n        upload_error_details: uploadItem.json\n      },\n      timestamp: new Date().toISOString()\n    }\n  }];\n}"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-2620,4280],"id":"2dde7413-79b5-4ac3-8590-3f834445af00","name":"Merge Upload & Base1"},{"parameters":{"method":"POST","url":"https://freeimage.host/api/1/upload","sendBody":true,"contentType":"multipart-form-data","bodyParameters":{"parameters":[{"parameterType":"formBinaryData","name":"source","inputDataFieldName":"data"},{"name":"key","value":"6d207e02198a847aa98d0a2a901485a5"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-2840,4180],"id":"9d3a155b-38db-434a-9ecc-e4faa2faa311","name":"Upload to FreeImage3","onError":"continueErrorOutput"},{"parameters":{"jsCode":"// Generate HTML response for the caption workflow\nconst data = $json;\n\n// Helper function to escape quotes in strings\nconst escapeQuotes = (str) => str ? str.replace(/'/g, \"\\\\'\").replace(/\"/g, '\\\\\"') : '';\n\n// Generate the image section\nconst generateImageSection = () => {\n  if (data.status !== 'success') return '';\n  \n  let imageHtml = '';\n  \n  if (data.hosted_image) {\n    imageHtml = `<img src=\"${data.image_display_url}\" alt=\"Processed Image with Caption\" class=\"generated-image\" crossorigin=\"anonymous\" onerror=\"this.style.display='none'; document.getElementById('fallback-img').style.display='block';\" />`;\n    \n    if (data.image_base64) {\n      imageHtml += `<img id=\"fallback-img\" src=\"data:image/jpeg;base64,${data.image_base64}\" alt=\"Processed Image (Fallback)\" class=\"generated-image\" style=\"display:none;\" />`;\n    }\n  } else {\n    imageHtml = `<img src=\"data:image/jpeg;base64,${data.image_base64}\" alt=\"Processed Image with Caption\" class=\"generated-image\" />`;\n  }\n  \n  const overlayText = data.hosted_image ? 'HOSTED' : 'BASE64';\n  \n  return `\n    <div class=\"image-container\">\n      ${imageHtml}\n      <div class=\"image-overlay\">${overlayText}</div>\n    </div>\n  `;\n};\n\n// Generate download buttons\nconst generateDownloadButtons = () => {\n  if (data.status !== 'success') return '';\n  \n  const safeTitle = data.title ? data.title.replace(/[^a-zA-Z0-9]/g, '_') : 'captioned';\n  \n  if (data.hosted_image) {\n    return `\n      <div style=\"margin: 20px 0;\">\n        <a href=\"${data.image_url}\" target=\"_blank\" class=\"view-btn\">🔗 View Full Size</a>\n        <a href=\"${data.image_url}\" download=\"${safeTitle}_captioned.jpg\" class=\"download-btn\">📥 Download Image</a>\n      </div>\n    `;\n  } else {\n    return `\n      <div style=\"margin: 20px 0;\">\n        <a href=\"data:image/jpeg;base64,${data.image_base64}\" download=\"${safeTitle}_captioned.jpg\" class=\"download-btn\">📥 Download Image</a>\n      </div>\n    `;\n  }\n};\n\n// Generate processing details section\nconst generateProcessingDetails = () => {\n  if (!data.processing_details) return '';\n  \n  const details = data.processing_details;\n  let detailsHtml = '';\n  \n  if (details.processing_type) {\n    detailsHtml += `\n      <div class=\"metadata-item\">\n        <span class=\"label\">Processing Type:</span> ${details.processing_type}\n      </div>\n    `;\n  }\n  \n  if (details.image_transformation) {\n    detailsHtml += `\n      <div class=\"metadata-item\">\n        <span class=\"label\">Transformation:</span> ${escapeQuotes(details.image_transformation)}\n      </div>\n    `;\n  }\n  \n  if (details.scene_context) {\n    detailsHtml += `\n      <div class=\"metadata-item\">\n        <span class=\"label\">Scene Context:</span> ${escapeQuotes(details.scene_context)}\n      </div>\n    `;\n  }\n  \n  if (details.background_enhancement) {\n    detailsHtml += `\n      <div class=\"metadata-item\">\n        <span class=\"label\">Background:</span> ${details.background_enhancement}\n      </div>\n    `;\n  }\n  \n  if (details.output_quality) {\n    detailsHtml += `\n      <div class=\"metadata-item\">\n        <span class=\"label\">Quality:</span> ${details.output_quality}\n      </div>\n    `;\n  }\n  \n  return detailsHtml;\n};\n\n// Generate caption details section\nconst generateCaptionDetails = () => {\n  if (!data.caption_details || !data.caption_details.had_caption) return '';\n  \n  const caption = data.caption_details;\n  let captionHtml = '';\n  \n  if (caption.caption_text) {\n    captionHtml += `\n      <div class=\"metadata-item\">\n        <span class=\"label\">Caption Text:</span> \"${escapeQuotes(caption.caption_text)}\"\n      </div>\n    `;\n  }\n  \n  if (caption.caption_position) {\n    captionHtml += `\n      <div class=\"metadata-item\">\n        <span class=\"label\">Caption Position:</span> ${caption.caption_position}\n      </div>\n    `;\n  }\n  \n  if (caption.caption_style) {\n    captionHtml += `\n      <div class=\"metadata-item\">\n        <span class=\"label\">Caption Style:</span> ${caption.caption_style}\n      </div>\n    `;\n  }\n  \n  if (caption.caption_size) {\n    captionHtml += `\n      <div class=\"metadata-item\">\n        <span class=\"label\">Caption Size:</span> ${caption.caption_size}\n      </div>\n    `;\n  }\n  \n  if (caption.brand_colors) {\n    captionHtml += `\n      <div class=\"metadata-item\">\n        <span class=\"label\">Brand Colors:</span> ${escapeQuotes(caption.brand_colors)}\n      </div>\n    `;\n  }\n  \n  return captionHtml;\n};\n\n// Generate metadata items\nconst generateMetadata = () => {\n  let metadataItems = `\n    <div class=\"metadata-item\">\n      <span class=\"label\">Model:</span> ${data.model || 'N/A'}\n    </div>\n    <div class=\"metadata-item\">\n      <span class=\"label\">Processing:</span> ${escapeQuotes(data.prompt || 'N/A')}\n    </div>\n    <div class=\"metadata-item\">\n      <span class=\"label\">Reference Source:</span> ${data.reference_source || 'N/A'}\n    </div>\n  `;\n  \n  // Add processing details\n  metadataItems += generateProcessingDetails();\n  \n  // Add caption details if present\n  metadataItems += generateCaptionDetails();\n  \n  const hostingBadge = data.hosted_image ? \n    '<span class=\"hosting-badge\">HOSTED</span>' : \n    '<span class=\"fallback-badge\">BASE64</span>';\n  \n  const uploadService = data.metadata && data.metadata.upload_service ? \n    ` via ${data.metadata.upload_service}` : '';\n  \n  metadataItems += `\n    <div class=\"metadata-item\">\n      <span class=\"label\">Hosting:</span> ${hostingBadge}${uploadService}\n    </div>\n  `;\n  \n  if (data.hosted_image && data.image_url) {\n    metadataItems += `\n      <div class=\"metadata-item\">\n        <span class=\"label\">Image URL:</span> <a href=\"${data.image_url}\" target=\"_blank\">View Original</a>\n      </div>\n    `;\n  }\n  \n  metadataItems += `\n    <div class=\"metadata-item\">\n      <span class=\"label\">Timestamp:</span> ${data.timestamp}\n    </div>\n  `;\n  \n  if (data.metadata && data.metadata.api_used) {\n    metadataItems += `\n      <div class=\"metadata-item\">\n        <span class=\"label\">API Used:</span> ${data.metadata.api_used}\n      </div>\n    `;\n  }\n  \n  if (data.metadata && data.metadata.output_size) {\n    metadataItems += `\n      <div class=\"metadata-item\">\n        <span class=\"label\">Output Size:</span> ${data.metadata.output_size}\n      </div>\n    `;\n  }\n  \n  return metadataItems;\n};\n\n// Generate warning message if needed\nconst generateWarning = () => {\n  if (data.upload_error && data.status === 'success') {\n    return `<div class=\"status warning\">⚠️ ${escapeQuotes(data.upload_error)}</div>`;\n  }\n  return '';\n};\n\n// Main HTML template\nconst html = `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>${escapeQuotes(data.title)} - Image Caption Processing</title>\n    <style>\n        body {\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            margin: 0;\n            padding: 20px;\n            min-height: 100vh;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n        }\n        .container {\n            background: white;\n            border-radius: 20px;\n            box-shadow: 0 20px 40px rgba(0,0,0,0.1);\n            padding: 30px;\n            max-width: 800px;\n            width: 100%;\n            text-align: center;\n        }\n        .status {\n            display: inline-block;\n            padding: 8px 16px;\n            border-radius: 20px;\n            font-weight: bold;\n            margin-bottom: 20px;\n        }\n        .success { background: #d4edda; color: #155724; }\n        .error { background: #f8d7da; color: #721c24; }\n        .warning { background: #fff3cd; color: #856404; }\n        .image-container {\n            margin: 20px 0;\n            border-radius: 15px;\n            overflow: hidden;\n            box-shadow: 0 10px 25px rgba(0,0,0,0.1);\n            display: inline-block;\n            position: relative;\n        }\n        .generated-image {\n            max-width: 100%;\n            height: auto;\n            display: block;\n        }\n        .image-overlay {\n            position: absolute;\n            top: 10px;\n            right: 10px;\n            background: rgba(0,0,0,0.7);\n            color: white;\n            padding: 4px 8px;\n            border-radius: 12px;\n            font-size: 11px;\n            font-weight: bold;\n        }\n        .metadata {\n            background: #f8f9fa;\n            border-radius: 10px;\n            padding: 20px;\n            margin: 20px 0;\n            text-align: left;\n        }\n        .metadata h3 {\n            margin-top: 0;\n            color: #495057;\n        }\n        .metadata-item {\n            margin: 8px 0;\n            padding: 5px 0;\n            border-bottom: 1px solid #e9ecef;\n        }\n        .metadata-item:last-child {\n            border-bottom: none;\n        }\n        .label {\n            font-weight: bold;\n            color: #6c757d;\n            display: inline-block;\n            min-width: 140px;\n        }\n        .download-btn {\n            background: linear-gradient(45deg, #28a745, #20c997);\n            color: white;\n            padding: 12px 24px;\n            border: none;\n            border-radius: 25px;\n            font-size: 16px;\n            cursor: pointer;\n            text-decoration: none;\n            display: inline-block;\n            margin: 10px;\n            transition: transform 0.2s;\n        }\n        .download-btn:hover {\n            transform: translateY(-2px);\n            box-shadow: 0 5px 15px rgba(0,0,0,0.2);\n        }\n        .view-btn {\n            background: linear-gradient(45deg, #007bff, #6610f2);\n            color: white;\n            padding: 12px 24px;\n            border: none;\n            border-radius: 25px;\n            font-size: 16px;\n            cursor: pointer;\n            text-decoration: none;\n            display: inline-block;\n            margin: 10px;\n            transition: transform 0.2s;\n        }\n        .view-btn:hover {\n            transform: translateY(-2px);\n            box-shadow: 0 5px 15px rgba(0,0,0,0.2);\n        }\n        .json-btn {\n            background: linear-gradient(45deg, #6c757d, #495057);\n            color: white;\n            padding: 8px 16px;\n            border: none;\n            border-radius: 20px;\n            font-size: 14px;\n            cursor: pointer;\n            margin: 10px;\n        }\n        .json-data {\n            display: none;\n            background: #f8f9fa;\n            border: 1px solid #dee2e6;\n            border-radius: 5px;\n            padding: 15px;\n            margin-top: 10px;\n            text-align: left;\n            font-family: monospace;\n            font-size: 12px;\n            white-space: pre-wrap;\n            max-height: 300px;\n            overflow-y: auto;\n        }\n        h1 {\n            color: #343a40;\n            margin-bottom: 10px;\n        }\n        .workflow-badge {\n            background: linear-gradient(45deg, #667eea, #764ba2);\n            color: white;\n            padding: 4px 12px;\n            border-radius: 15px;\n            font-size: 12px;\n            font-weight: bold;\n        }\n        .hosting-badge {\n            background: linear-gradient(45deg, #17a2b8, #20c997);\n            color: white;\n            padding: 2px 8px;\n            border-radius: 10px;\n            font-size: 11px;\n            font-weight: bold;\n        }\n        .fallback-badge {\n            background: linear-gradient(45deg, #ffc107, #fd7e14);\n            color: white;\n            padding: 2px 8px;\n            border-radius: 10px;\n            font-size: 11px;\n            font-weight: bold;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"workflow-badge\">${data.workflow}</div>\n        <h1>${escapeQuotes(data.title)}</h1>\n        \n        <div class=\"status ${data.status === 'success' ? 'success' : 'error'}\">\n            ${data.status === 'success' ? '✓ Processing Successful' : '❌ Processing Failed'}\n        </div>\n\n        ${generateWarning()}\n\n        ${generateImageSection()}\n        ${generateDownloadButtons()}\n\n        <div class=\"metadata\">\n            <h3>Processing Details</h3>\n            ${generateMetadata()}\n        </div>\n\n        <button class=\"json-btn\" onclick=\"toggleJson()\">Show JSON Data</button>\n        <div id=\"jsonData\" class=\"json-data\">${JSON.stringify(data, null, 2)}</div>\n    </div>\n\n    <script>\n        function toggleJson() {\n            const jsonData = document.getElementById('jsonData');\n            const btn = event.target;\n            if (jsonData.style.display === 'none' || !jsonData.style.display) {\n                jsonData.style.display = 'block';\n                btn.textContent = 'Hide JSON Data';\n            } else {\n                jsonData.style.display = 'none';\n                btn.textContent = 'Show JSON Data';\n            }\n        }\n    </script>\n</body>\n</html>`;\n\n// Return the generated HTML\nreturn [{ json: { html: html } }];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-2460,4280],"id":"74389ca1-e4e1-4473-a322-0eaaaef31cf3","name":"Generate HTML Response2"}],"connections":{"Image Generator Form":{"main":[[{"node":"Has Reference Image?","type":"main","index":0}]]},"Has Reference Image?":{"main":[[{"node":"URL or Upload?","type":"main","index":0}],[{"node":"Prepare Generation Data","type":"main","index":0}]]},"URL or Upload?":{"main":[[{"node":"Download Reference Image","type":"main","index":0}],[{"node":"Process Upload","type":"main","index":0}]]},"Download Reference Image":{"main":[[{"node":"Convert to Base64","type":"main","index":0}]]},"Convert to Base64":{"main":[[{"node":"Prepare Generation Data","type":"main","index":0}]]},"Process Upload":{"main":[[{"node":"Prepare Generation Data","type":"main","index":0}]]},"Prepare Generation Data":{"main":[[{"node":"Show Warning?","type":"main","index":0}]]},"Show Warning?":{"main":[[{"node":"Show Reference Warning","type":"main","index":0},{"node":"Generate Image","type":"main","index":0}],[{"node":"Generate Image","type":"main","index":0}]]},"Generate Image":{"main":[[{"node":"Process Response","type":"main","index":0}]]},"Process Response":{"main":[[{"node":"Need Download?","type":"main","index":0}]]},"Need Download?":{"main":[[{"node":"Download Generated Image","type":"main","index":0}],[{"node":"Final Output","type":"main","index":0}]]},"Download Generated Image":{"main":[[{"node":"Convert Downloaded to Base64","type":"main","index":0}]]},"Convert Downloaded to Base64":{"main":[[{"node":"Merge Download Data","type":"main","index":0}]]},"Merge Download Data":{"main":[[{"node":"Final Output","type":"main","index":0}]]},"Final Output":{"main":[[{"node":"Convert to File","type":"main","index":0}]]},"Create Prediction":{"main":[[{"node":"Wait Initial","type":"main","index":0}]]},"Wait Initial":{"main":[[{"node":"Check Status","type":"main","index":0}]]},"Check Status":{"main":[[{"node":"Is Complete?","type":"main","index":0}]]},"Is Complete?":{"main":[[{"node":"Process Success","type":"main","index":0}],[{"node":"Wait Retry","type":"main","index":0}]]},"Is Failed?":{"main":[[{"node":"Process Failure","type":"main","index":0}],[{"node":"Wait Retry","type":"main","index":0}]]},"Wait Retry":{"main":[[{"node":"Check Status","type":"main","index":0}]]},"Process Success":{"main":[[{"node":"Download Generated Image1","type":"main","index":0}]]},"Image Generator Form1":{"main":[[{"node":"Has Reference Image?1","type":"main","index":0}]]},"Has Reference Image?1":{"main":[[{"node":"URL or Upload?1","type":"main","index":0}],[{"node":"Show Warning?1","type":"main","index":0}]]},"URL or Upload?1":{"main":[[{"node":"Download Reference Image1","type":"main","index":0}],[{"node":"Process Upload1","type":"main","index":0}]]},"Download Reference Image1":{"main":[[{"node":"Show Warning?1","type":"main","index":0}]]},"Convert to Base65":{"main":[[{"node":"Final Output1","type":"main","index":0}]]},"Process Upload1":{"main":[[{"node":"Prepare Generation Data1","type":"main","index":0}]]},"Prepare Generation Data1":{"main":[[{"node":"Show Warning?1","type":"main","index":0}]]},"Show Warning?1":{"main":[[{"node":"Show Reference Warning1","type":"main","index":0}],[{"node":"Create Prediction","type":"main","index":0}]]},"Download Generated Image1":{"main":[[{"node":"Convert to Base65","type":"main","index":0}]]},"Create Image1":{"main":[[{"node":"Convert to File1","type":"main","index":0}]]},"Image Type Router1":{"main":[[{"node":"Create Image1","type":"main","index":0}]]},"Image Generator Form3":{"main":[[{"node":"Image Type Router2","type":"main","index":0}]]},"Image Type Router2":{"main":[[{"node":"Prepare New Image1","type":"main","index":0}],[{"node":"Download URL Image1","type":"main","index":0}],[{"node":"Image Type Router1","type":"main","index":0}],[{"node":"Edit Image","type":"main","index":0}]]},"Prepare New Image1":{"main":[[{"node":"If","type":"main","index":0}]]},"Download URL Image1":{"main":[[{"node":"Create Image","type":"main","index":0}]]},"Convert URL to Base":{"main":[[{"node":"Prepare URL Image1","type":"main","index":0}]]},"Prepare URL Image1":{"main":[[]]},"Prepare Upload Image1":{"main":[[]]},"Create Prediction2":{"main":[[{"node":"Wait Initial2","type":"main","index":0}]]},"Wait Initial2":{"main":[[{"node":"Check Status2","type":"main","index":0}]]},"Check Status2":{"main":[[{"node":"Is Complete?2","type":"main","index":0}]]},"Is Complete?2":{"main":[[{"node":"Extract Image URL1","type":"main","index":0}],[{"node":"Wait Retry2","type":"main","index":0}]]},"Wait Retry2":{"main":[[{"node":"Check Status2","type":"main","index":0}]]},"Extract Image URL1":{"main":[[{"node":"Download Generated Image3","type":"main","index":0}]]},"Download Generated Image3":{"main":[[{"node":"Convert to Base66","type":"main","index":0}]]},"Convert to Base66":{"main":[[{"node":"Final Output3","type":"main","index":0}]]},"Create Image":{"main":[[{"node":"Convert to File2","type":"main","index":0}]]},"If":{"main":[[{"node":"Create Prediction2","type":"main","index":0}],[{"node":"HTTP Request4","type":"main","index":0}]]},"HTTP Request4":{"main":[[{"node":"Convert to File3","type":"main","index":0}]]},"Wait Initial3":{"main":[[{"node":"Check Status3","type":"main","index":0}]]},"Is Complete?3":{"main":[[],[{"node":"Wait Retry3","type":"main","index":0}]]},"Check Status3":{"main":[[{"node":"Is Complete?3","type":"main","index":0}]]},"Wait Retry3":{"main":[[{"node":"Check Status3","type":"main","index":0}]]},"Edit Image":{"main":[[{"node":"Wait Initial3","type":"main","index":0}]]},"Route After Reference":{"main":[[{"node":"Prepare Re-generation1","type":"main","index":0}],[{"node":"Prepare Editing1","type":"main","index":0}],[{"node":"Prepare Caption1","type":"main","index":0}]]},"Check Upload Needed":{"main":[[{"node":"Upload to FreeImage","type":"main","index":0}],[{"node":"Call Replicate1","type":"main","index":0}]]},"Upload to FreeImage":{"main":[[{"node":"Update Replicate Call","type":"main","index":0}]]},"Update Replicate Call":{"main":[[{"node":"Call Replicate1","type":"main","index":0}]]},"Enhanced Image Form1":{"main":[[{"node":"Process & Validate Data1","type":"main","index":0}]]},"Process & Validate Data1":{"main":[[{"node":"Check Warnings1","type":"main","index":0}]]},"Check Warnings1":{"main":[[{"node":"Show Warnings1","type":"main","index":0}],[{"node":"Scenario Router1","type":"main","index":0}]]},"Scenario Router1":{"main":[[{"node":"Prepare New Image2","type":"main","index":0}],[{"node":"Check Reference Type1","type":"main","index":0}],[{"node":"Check Reference Type1","type":"main","index":0}],[{"node":"Check Reference Type1","type":"main","index":0}]]},"Prepare New Image2":{"main":[[{"node":"API Type Router1","type":"main","index":0}]]},"Check Reference Type1":{"main":[[{"node":"Download Reference1","type":"main","index":0}],[{"node":"Process Upload3","type":"main","index":0}]]},"Download Reference1":{"main":[[{"node":"Route After Reference","type":"main","index":0}]]},"Process Upload3":{"main":[[{"node":"Route After Reference","type":"main","index":0}]]},"Prepare Re-generation1":{"main":[[{"node":"API Type Router1","type":"main","index":0}]]},"Prepare Editing1":{"main":[[{"node":"API Type Router1","type":"main","index":0}]]},"Prepare Caption1":{"main":[[{"node":"API Type Router1","type":"main","index":0}]]},"API Type Router1":{"main":[[{"node":"OpenAI Request Router1","type":"main","index":0}],[{"node":"Debug Upload Check","type":"main","index":0}]]},"OpenAI Request Router1":{"main":[[{"node":"OpenAI Multipart Request1","type":"main","index":0}],[{"node":"OpenAI JSON Request1","type":"main","index":0}]]},"OpenAI Multipart Request1":{"main":[[{"node":"Convert OpenAI1","type":"main","index":0}]]},"OpenAI JSON Request1":{"main":[[{"node":"Convert OpenAI1","type":"main","index":0}]]},"Call Replicate1":{"main":[[{"node":"Wait Replicate1","type":"main","index":0}]]},"Convert OpenAI1":{"main":[[{"node":"Convert to Base67","type":"main","index":0}]]},"Wait Replicate1":{"main":[[{"node":"Check Replicate Status1","type":"main","index":0}]]},"Check Replicate Status1":{"main":[[{"node":"Check Complete1","type":"main","index":0}]]},"Check Complete1":{"main":[[{"node":"Download Result1","type":"main","index":0}],[{"node":"Wait Retry4","type":"main","index":0}]]},"Download Result1":{"main":[[{"node":"Convert to Base67","type":"main","index":0}]]},"Wait Retry4":{"main":[[{"node":"Check Replicate Status1","type":"main","index":0}]]},"Convert to Base67":{"main":[[{"node":"Final Output4","type":"main","index":0}]]},"Final Output4":{"main":[[{"node":"Final Response","type":"main","index":0}]]},"Debug Upload Check":{"main":[[{"node":"Check Upload Needed","type":"main","index":0}]]},"Image Editing Form":{"main":[[{"node":"Process Editing Data","type":"main","index":0}]]},"Process Editing Data":{"main":[[{"node":"Check for Errors2","type":"main","index":0}]]},"Download Image to Edit":{"main":[[{"node":"API Type Router2","type":"main","index":0}],[{"node":"Handle Editing API Error","type":"main","index":0}]]},"Process Upload for Editing":{"main":[[{"node":"API Type Router2","type":"main","index":0}]]},"OpenAI Image Edit":{"main":[[{"node":"Convert OpenAI Edit Response","type":"main","index":0}],[{"node":"Handle Editing API Error","type":"main","index":0}]]},"Upload for Replicate Edit":{"main":[[{"node":"Prepare Replicate Edit Call","type":"main","index":0}],[{"node":"Handle Editing API Error","type":"main","index":0}]]},"Prepare Replicate Edit Call":{"main":[[{"node":"Call Replicate Edit","type":"main","index":0}]]},"Call Replicate Edit":{"main":[[{"node":"Wait for Edit Processing","type":"main","index":0}],[{"node":"Handle Editing API Error","type":"main","index":0}]]},"Convert OpenAI Edit Response":{"main":[[{"node":"Convert to Base69","type":"main","index":0}]]},"Wait for Edit Processing":{"main":[[{"node":"Check Edit Status","type":"main","index":0}]]},"Check Edit Status":{"main":[[{"node":"Check if Edit Complete","type":"main","index":0}]]},"Check if Edit Complete":{"main":[[{"node":"Download Edited Image","type":"main","index":0}],[{"node":"Wait and Retry Edit","type":"main","index":0}]]},"Download Edited Image":{"main":[[{"node":"Convert to Base69","type":"main","index":0}]]},"Wait and Retry Edit":{"main":[[{"node":"Check Edit Status","type":"main","index":0}]]},"Final Editing Processing":{"main":[[{"node":"Final Editing Response","type":"main","index":0}]]},"Handle Editing API Error":{"main":[[{"node":"Final Editing Response","type":"main","index":0}]]},"Check for Errors2":{"main":[[{"node":"Return Editing Errors","type":"main","index":0}],[{"node":"Reference Type Router1","type":"main","index":0}]]},"Reference Type Router1":{"main":[[{"node":"Download Image to Edit","type":"main","index":0}],[{"node":"Process Upload for Editing","type":"main","index":0}]]},"API Type Router2":{"main":[[{"node":"OpenAI Image Edit","type":"main","index":0}],[{"node":"Upload for Replicate Edit","type":"main","index":0}]]},"Convert to Base69":{"main":[[{"node":"Final Editing Processing","type":"main","index":0}]]},"Caption Reference Form":{"main":[[{"node":"Process Caption Ref Data","type":"main","index":0}]]},"Process Caption Ref Data":{"main":[[{"node":"Check for Errors3","type":"main","index":0}]]},"Download Reference for Caption":{"main":[[{"node":"API Type Router3","type":"main","index":0}],[{"node":"Handle Caption API Error","type":"main","index":0}]]},"Process Upload for Caption":{"main":[[{"node":"API Type Router3","type":"main","index":0}]]},"OpenAI Method Router":{"main":[[{"node":"OpenAI Caption Edit","type":"main","index":0}],[{"node":"OpenAI Caption Generate","type":"main","index":0}]]},"OpenAI Caption Edit":{"main":[[{"node":"Convert OpenAI Caption","type":"main","index":0}],[{"node":"Handle Caption API Error","type":"main","index":0}]]},"OpenAI Caption Generate":{"main":[[{"node":"Convert OpenAI Caption","type":"main","index":0}],[{"node":"Handle Caption API Error","type":"main","index":0}]]},"Upload for Caption Replicate":{"main":[[{"node":"Prepare Caption Replicate","type":"main","index":0}],[{"node":"Handle Caption API Error","type":"main","index":0}]]},"Prepare Caption Replicate":{"main":[[{"node":"Call Caption Replicate","type":"main","index":0}]]},"Call Caption Replicate":{"main":[[{"node":"Wait for Caption Processing","type":"main","index":0}],[{"node":"Handle Caption API Error","type":"main","index":0}]]},"Convert OpenAI Caption":{"main":[[{"node":"Convert to Base70","type":"main","index":0}]]},"Wait for Caption Processing":{"main":[[{"node":"Check Caption Status","type":"main","index":0}]]},"Check Caption Status":{"main":[[{"node":"Check if Caption Complete","type":"main","index":0}]]},"Check if Caption Complete":{"main":[[{"node":"Download Caption Result","type":"main","index":0}],[{"node":"Wait and Retry Caption","type":"main","index":0}]]},"Download Caption Result":{"main":[[{"node":"Convert to Base70","type":"main","index":0}]]},"Wait and Retry Caption":{"main":[[{"node":"Check Caption Status","type":"main","index":0}]]},"Final Caption Processing":{"main":[[{"node":"Final Caption Response","type":"main","index":0}]]},"Handle Caption API Error":{"main":[[{"node":"Final Caption Response","type":"main","index":0}]]},"Check for Errors3":{"main":[[{"node":"Return Caption Ref Errors","type":"main","index":0}],[{"node":"Reference Type Router2","type":"main","index":0}]]},"Reference Type Router2":{"main":[[{"node":"Download Reference for Caption","type":"main","index":0}],[{"node":"Process Upload for Caption","type":"main","index":0}]]},"API Type Router3":{"main":[[{"node":"OpenAI Method Router","type":"main","index":0}],[{"node":"Upload for Caption Replicate","type":"main","index":0}]]},"Convert to Base70":{"main":[[{"node":"Final Caption Processing","type":"main","index":0}]]},"New Image Form1":{"main":[[{"node":"Process Form Data1","type":"main","index":0}]]},"Process Form Data1":{"main":[[{"node":"Check for Errors4","type":"main","index":0}]]},"Check for Errors4":{"main":[[{"node":"Return Validation Errors1","type":"main","index":0}],[{"node":"Route by API Type1","type":"main","index":0}]]},"Route by API Type1":{"main":[[{"node":"OpenAI Image Generation1","type":"main","index":0}],[{"node":"Replicate Image Generation1","type":"main","index":0}]]},"OpenAI Image Generation1":{"main":[[{"node":"Convert to File4","type":"main","index":0}],[{"node":"Handle API Error1","type":"main","index":0}]]},"Replicate Image Generation1":{"main":[[{"node":"Wait for Replicate2","type":"main","index":0}],[{"node":"Handle API Error1","type":"main","index":0}]]},"Wait for Replicate2":{"main":[[{"node":"Check Replicate Status2","type":"main","index":0}]]},"Check Replicate Status2":{"main":[[{"node":"Check if Complete2","type":"main","index":0}]]},"Check if Complete2":{"main":[[{"node":"Download Replicate Result1","type":"main","index":0}],[{"node":"Wait and Retry2","type":"main","index":0}]]},"Download Replicate Result1":{"main":[[{"node":"Convert to Base71","type":"main","index":0}]]},"Wait and Retry2":{"main":[[{"node":"Check Replicate Status2","type":"main","index":0}]]},"Convert to Base71":{"main":[[{"node":"Final Processing1","type":"main","index":0}]]},"Final Processing1":{"main":[[{"node":"Final Response2","type":"main","index":0}]]},"Handle API Error1":{"main":[[{"node":"Final Response2","type":"main","index":0}]]},"Convert to File4":{"main":[[{"node":"Convert to Base71","type":"main","index":0}]]},"Check for Errors":{"main":[[{"node":"Return Regenerate Errors1","type":"main","index":0}],[{"node":"Reference Type Router3","type":"main","index":0}]]},"Convert OpenAI Response":{"main":[[{"node":"Prepare for Upload1","type":"main","index":0}]]},"Wait for Replicate":{"main":[[{"node":"Check Regenerate Status1","type":"main","index":0}]]},"Check if Complete":{"main":[[{"node":"Download Regenerate Result1","type":"main","index":0}],[{"node":"Wait and Retry","type":"main","index":0}]]},"Wait and Retry":{"main":[[{"node":"Check Regenerate Status1","type":"main","index":0}]]},"Image Regenerate Form1":{"main":[[{"node":"Process Regenerate Data1","type":"main","index":0}]]},"Process Regenerate Data1":{"main":[[{"node":"Check for Errors","type":"main","index":0}]]},"Reference Type Router3":{"main":[[{"node":"Download Reference Image3","type":"main","index":0}],[{"node":"Process Upload Reference1","type":"main","index":0}]]},"Download Reference Image3":{"main":[[{"node":"API Type Router4","type":"main","index":0}],[{"node":"Handle Regenerate API Error1","type":"main","index":0}]]},"Process Upload Reference1":{"main":[[{"node":"API Type Router4","type":"main","index":0}]]},"API Type Router4":{"main":[[{"node":"OpenAI Regenerate1","type":"main","index":0}],[{"node":"Upload for Replicate1","type":"main","index":0}]]},"OpenAI Regenerate1":{"main":[[{"node":"Convert OpenAI Response","type":"main","index":0}],[{"node":"Handle Regenerate API Error1","type":"main","index":0}]]},"Upload for Replicate1":{"main":[[{"node":"Prepare Replicate Call1","type":"main","index":0}],[{"node":"Handle Regenerate API Error1","type":"main","index":0}]]},"Prepare Replicate Call1":{"main":[[{"node":"Call Replicate Regenerate1","type":"main","index":0}]]},"Call Replicate Regenerate1":{"main":[[{"node":"Wait for Replicate","type":"main","index":0}],[{"node":"Handle Regenerate API Error1","type":"main","index":0}]]},"Check Regenerate Status1":{"main":[[{"node":"Check if Complete","type":"main","index":0}]]},"Download Regenerate Result1":{"main":[[{"node":"Prepare for Upload1","type":"main","index":0}]]},"Handle Regenerate API Error1":{"main":[[]]},"Reference Type Router":{"main":[[{"node":"Download Image to Edit1","type":"main","index":0}],[{"node":"Process Upload for Editing1","type":"main","index":0}]]},"API Type Router":{"main":[[{"node":"OpenAI Image Edit1","type":"main","index":0}],[{"node":"Upload for Replicate Edit1","type":"main","index":0}]]},"Image Editing Form1":{"main":[[{"node":"Process Editing Data1","type":"main","index":0}]]},"Process Editing Data1":{"main":[[{"node":"Check for Errors1","type":"main","index":0}]]},"Check for Errors1":{"main":[[{"node":"Return Editing Errors1","type":"main","index":0}],[{"node":"Reference Type Router","type":"main","index":0}]]},"Download Image to Edit1":{"main":[[{"node":"API Type Router","type":"main","index":0}],[{"node":"Handle Editing API Error1","type":"main","index":0}]]},"Process Upload for Editing1":{"main":[[{"node":"API Type Router","type":"main","index":0}]]},"OpenAI Image Edit1":{"main":[[{"node":"Convert OpenAI Edit Response1","type":"main","index":0}],[{"node":"Handle Editing API Error1","type":"main","index":0}]]},"Upload for Replicate Edit1":{"main":[[{"node":"Prepare Replicate Edit Call1","type":"main","index":0}],[{"node":"Handle Editing API Error1","type":"main","index":0}]]},"Prepare Replicate Edit Call1":{"main":[[{"node":"Call Replicate Edit1","type":"main","index":0}]]},"Call Replicate Edit1":{"main":[[{"node":"Wait for Edit Processing1","type":"main","index":0}],[{"node":"Handle Editing API Error1","type":"main","index":0}]]},"Convert OpenAI Edit Response1":{"main":[[{"node":"Convert to Base68","type":"main","index":0}]]},"Wait for Edit Processing1":{"main":[[{"node":"Check Edit Status1","type":"main","index":0}]]},"Check Edit Status1":{"main":[[{"node":"Check if Edit Complete1","type":"main","index":0}]]},"Check if Edit Complete1":{"main":[[{"node":"Download Edited Image1","type":"main","index":0}],[{"node":"Wait and Retry Edit1","type":"main","index":0}]]},"Download Edited Image1":{"main":[[{"node":"Convert to Base68","type":"main","index":0}]]},"Wait and Retry Edit1":{"main":[[{"node":"Check Edit Status1","type":"main","index":0}]]},"Convert to Base68":{"main":[[{"node":"Final Editing Processing1","type":"main","index":0}]]},"Final Editing Processing1":{"main":[[{"node":"Final Editing Response1","type":"main","index":0}]]},"Handle Editing API Error1":{"main":[[{"node":"Final Editing Response1","type":"main","index":0}]]},"Caption Reference Form1":{"main":[[{"node":"Process Caption Ref Data1","type":"main","index":0}]]},"Process Caption Ref Data1":{"main":[[{"node":"Check for Errors5","type":"main","index":0}]]},"Check for Errors5":{"main":[[{"node":"Return Caption Ref Errors1","type":"main","index":0}],[{"node":"Reference Type Router4","type":"main","index":0}]]},"Reference Type Router4":{"main":[[{"node":"Download Reference for Caption1","type":"main","index":0}],[{"node":"Process Upload for Caption1","type":"main","index":0}]]},"Download Reference for Caption1":{"main":[[{"node":"API Type Router5","type":"main","index":0}],[{"node":"Handle Caption API Error1","type":"main","index":0}]]},"Process Upload for Caption1":{"main":[[{"node":"API Type Router5","type":"main","index":0}]]},"API Type Router5":{"main":[[{"node":"OpenAI Method Router1","type":"main","index":0}],[{"node":"Upload for Caption Replicate1","type":"main","index":0}]]},"OpenAI Method Router1":{"main":[[{"node":"OpenAI Caption Edit1","type":"main","index":0}],[{"node":"OpenAI Caption Generate1","type":"main","index":0}]]},"OpenAI Caption Edit1":{"main":[[{"node":"Convert OpenAI Caption1","type":"main","index":0}],[{"node":"Handle Caption API Error1","type":"main","index":0}]]},"OpenAI Caption Generate1":{"main":[[{"node":"Convert OpenAI Caption1","type":"main","index":0}],[{"node":"Handle Caption API Error1","type":"main","index":0}]]},"Upload for Caption Replicate1":{"main":[[{"node":"Prepare Caption Replicate1","type":"main","index":0}],[{"node":"Handle Caption API Error1","type":"main","index":0}]]},"Prepare Caption Replicate1":{"main":[[{"node":"Call Caption Replicate1","type":"main","index":0}]]},"Call Caption Replicate1":{"main":[[{"node":"Wait for Caption Processing1","type":"main","index":0}],[{"node":"Handle Caption API Error1","type":"main","index":0}]]},"Convert OpenAI Caption1":{"main":[[{"node":"Prepare for Upload2","type":"main","index":0}]]},"Wait for Caption Processing1":{"main":[[{"node":"Check Caption Status1","type":"main","index":0}]]},"Check Caption Status1":{"main":[[{"node":"Check if Caption Complete1","type":"main","index":0}]]},"Check if Caption Complete1":{"main":[[{"node":"Download Caption Result1","type":"main","index":0}],[{"node":"Wait and Retry Caption1","type":"main","index":0}]]},"Download Caption Result1":{"main":[[{"node":"Prepare for Upload2","type":"main","index":0}]]},"Wait and Retry Caption1":{"main":[[{"node":"Check Caption Status1","type":"main","index":0}]]},"Handle Caption API Error1":{"main":[[]]},"New Image Form":{"main":[[{"node":"Process Form Data","type":"main","index":0}]]},"Process Form Data":{"main":[[{"node":"Check for Errors6","type":"main","index":0}]]},"Route by API Type":{"main":[[{"node":"OpenAI Image Generation","type":"main","index":0}],[{"node":"Replicate Image Generation","type":"main","index":0}]]},"OpenAI Image Generation":{"main":[[{"node":"Convert to File5","type":"main","index":0}],[{"node":"Handle API Error","type":"main","index":0}]]},"Replicate Image Generation":{"main":[[{"node":"Wait for Replicate1","type":"main","index":0}],[{"node":"Handle API Error","type":"main","index":0}]]},"Check Replicate Status":{"main":[[{"node":"Check if Complete1","type":"main","index":0}]]},"Download Replicate Result":{"main":[[{"node":"Prepare for Upload","type":"main","index":0}]]},"Handle API Error":{"main":[[{"node":"Final Response1","type":"main","index":0}]]},"Check for Errors6":{"main":[[{"node":"Return Validation Errors","type":"main","index":0}],[{"node":"Route by API Type","type":"main","index":0}]]},"Wait for Replicate1":{"main":[[{"node":"Check Replicate Status","type":"main","index":0}]]},"Check if Complete1":{"main":[[{"node":"Download Replicate Result","type":"main","index":0}],[{"node":"Wait and Retry1","type":"main","index":0}]]},"Wait and Retry1":{"main":[[{"node":"Check Replicate Status","type":"main","index":0}]]},"Prepare for Upload":{"main":[[{"node":"Upload to FreeImage1","type":"main","index":0},{"node":"Convert to Base64 (Backup)","type":"main","index":0}]]},"Upload to FreeImage1":{"main":[[{"node":"Merge Upload & Base64","type":"main","index":0}]]},"Convert to Base64 (Backup)":{"main":[[{"node":"Merge Upload & Base64","type":"main","index":0}]]},"Merge Upload & Base64":{"main":[[{"node":"Generate HTML Response","type":"main","index":0}]]},"Generate HTML Response":{"main":[[{"node":"Final Response1","type":"main","index":0}]]},"Convert to File5":{"main":[[{"node":"Prepare for Upload","type":"main","index":0}]]},"Prepare for Upload1":{"main":[[{"node":"Upload to FreeImage2","type":"main","index":0},{"node":"Convert to Base64 (Backup)1","type":"main","index":0}]]},"Convert to Base64 (Backup)1":{"main":[[{"node":"Merge Upload & Base","type":"main","index":0}]]},"Merge Upload & Base":{"main":[[{"node":"Generate HTML Response1","type":"main","index":0}]]},"Upload to FreeImage2":{"main":[[{"node":"Merge Upload & Base","type":"main","index":0}]]},"Generate HTML Response1":{"main":[[{"node":"Final Response3","type":"main","index":0}]]},"Prepare for Upload2":{"main":[[{"node":"Upload to FreeImage3","type":"main","index":0},{"node":"Convert to Base64 (Backup)2","type":"main","index":0}]]},"Convert to Base64 (Backup)2":{"main":[[{"node":"Merge Upload & Base1","type":"main","index":0}]]},"Merge Upload & Base1":{"main":[[{"node":"Generate HTML Response2","type":"main","index":0}]]},"Upload to FreeImage3":{"main":[[{"node":"Merge Upload & Base1","type":"main","index":0}]]},"Generate HTML Response2":{"main":[[{"node":"Final Response4","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":null,"pinData":{},"versionId":"18e8ae40-6c8a-4bda-a33c-877fe0e52ca4","triggerCount":0,"shared":[{"createdAt":"2025-06-27T06:19:05.714Z","updatedAt":"2025-06-27T06:19:05.714Z","role":"workflow:owner","workflowId":"zaFTU98fCjrQWwj3","projectId":"pRXFeKq9D8e0hAOx"}],"tags":[]},{"createdAt":"2025-07-30T03:27:06.156Z","updatedAt":"2025-08-31T03:45:14.000Z","id":"zdcUPbhBgAjYSKRy","name":"Social Media Processor","active":true,"isArchived":false,"nodes":[{"parameters":{"httpMethod":"POST","path":"social-media-processor","responseMode":"responseNode","options":{}},"name":"Social Media Webhook3","typeVersion":2,"id":"44d8d8de-cbc0-4919-adea-62ba22fa5ab9","position":[-1460,5640],"type":"n8n-nodes-base.webhook","webhookId":"a6d403ee-ab90-47c1-9540-56ada7d77aff"},{"parameters":{"respondWith":"json","responseBody":"={{ $json }}","options":{}},"name":"Response3","typeVersion":1,"id":"59d444ed-d47f-4b4d-aa73-4d27c77fa113","position":[2720,5640],"type":"n8n-nodes-base.respondToWebhook"},{"parameters":{"model":"anthropic/claude-3.7-sonnet:thinking","options":{}},"name":"OpenRouter Chat Model3","typeVersion":1,"id":"1ff9e4b8-43bf-44d5-8e84-cde062f49a4a","position":[1620,6420],"type":"@n8n/n8n-nodes-langchain.lmChatOpenRouter","credentials":{"openRouterApi":{"id":"eni2kFdHGvy7lEd3","name":"OpenRouter account"}}},{"parameters":{"jsCode":"// PLATFORM SPLITTER - WITH CLIENT CONFIG RECOVERY\n// This fixes the missing clientConfig issue\n\nconst processedItem = $json;\n\nconsole.log('=== PLATFORM SPLITTER WITH CONFIG RECOVERY ===');\nconsole.log('Input data keys:', Object.keys(processedItem));\nconsole.log('clientConfig present:', !!processedItem.clientConfig);\n\n// Ensure we have processed content\nif (!processedItem.content_ready || !processedItem.processed_content) {\n  console.log('❌ Content not ready for platform splitting');\n  return [{ json: processedItem }];\n}\n\n// STEP 1: RECOVER CLIENT CONFIG FROM EARLIER NODES\nlet clientConfig = processedItem.clientConfig;\n\nif (!clientConfig) {\n  console.log('⚠️ Missing clientConfig, attempting to recover from earlier nodes...');\n  \n  // Try to get clientConfig from earlier nodes in the workflow\n  try {\n    const clientConfigExtractor = $('Client Config Extractor').first();\n    const mergeNode = $('Merge Node').first();\n    const processBaserowData = $('Process Baserow Data2').first();\n    \n    console.log('Available nodes for recovery:');\n    console.log('- Client Config Extractor:', !!clientConfigExtractor);\n    console.log('- Merge Node:', !!mergeNode);\n    console.log('- Process Baserow Data2:', !!processBaserowData);\n    \n    // Try to get from Process Baserow Data2 first (most recent)\n    if (processBaserowData && processBaserowData.json.clientConfig) {\n      clientConfig = processBaserowData.json.clientConfig;\n      console.log('✅ Recovered clientConfig from Process Baserow Data2');\n    }\n    // Then try Merge Node\n    else if (mergeNode && mergeNode.json.clientConfig) {\n      clientConfig = mergeNode.json.clientConfig;\n      console.log('✅ Recovered clientConfig from Merge Node');\n    }\n    // Finally try Client Config Extractor\n    else if (clientConfigExtractor && clientConfigExtractor.json.clientConfig) {\n      clientConfig = clientConfigExtractor.json.clientConfig;\n      console.log('✅ Recovered clientConfig from Client Config Extractor');\n    }\n  } catch (error) {\n    console.log('❌ Error recovering clientConfig:', error.message);\n  }\n}\n\n// STEP 2: CREATE FALLBACK CLIENT CONFIG IF STILL MISSING\nif (!clientConfig) {\n  console.log('🔧 Creating fallback clientConfig...');\n  \n  clientConfig = {\n    baseId: '176', // Your database ID\n    recordId: '83', // Fallback record ID - you can update this\n    client: {\n      id: 'vs-sport',\n      name: 'VS Sport'\n    },\n    tables: {\n      brandAssets: {\n        id: '728' // Your brand assets table\n      },\n      socialMediaContent: {\n        id: '712' // Your social media content table  \n      },\n      contentIdeas: {\n        id: '715' // Your content ideas table\n      }\n    }\n  };\n  \n  console.log('🔧 Created fallback clientConfig:', clientConfig);\n}\n\n// STEP 3: EXTRACT PLATFORM AND CONTENT DATA\nlet baserowRecord = processedItem.baserow_record || processedItem;\nlet rawPlatforms = [];\nlet numberOfPosts = 1;\n\n// Try to find platforms\nif (baserowRecord.platforms) {\n  rawPlatforms = baserowRecord.platforms;\n} else if (processedItem.platforms) {\n  rawPlatforms = processedItem.platforms;\n} else if (clientConfig?.socialMedia?.platforms) {\n  rawPlatforms = clientConfig.socialMedia.platforms.map(p => ({ value: p }));\n} else {\n  rawPlatforms = [\n    { value: 'Facebook' }, \n    { value: 'Instagram' }, \n    { value: 'X' }, \n    { value: 'LinkedIn' }\n  ];\n  console.log('⚠️ Using fallback platforms');\n}\n\n// Convert to simple platform names\nconst selectedPlatforms = [];\nfor (const platformData of rawPlatforms) {\n  if (typeof platformData === 'string') {\n    selectedPlatforms.push(platformData);\n  } else if (platformData && platformData.value) {\n    selectedPlatforms.push(platformData.value);\n  }\n}\n\nconsole.log('=== RECOVERY RESULTS ===');\nconsole.log('Selected platforms:', selectedPlatforms);\nconsole.log('Client ID:', clientConfig.client.id);\nconsole.log('Client Name:', clientConfig.client.name);\nconsole.log('Record ID:', clientConfig.recordId);\nconsole.log('Brand Assets Table:', clientConfig.tables.brandAssets.id);\n\n// STEP 4: CREATE PLATFORM ITEMS WITH COMPLETE DATA\nconst platformItems = [];\nlet itemCounter = 0;\n\nfor (const platformName of selectedPlatforms) {\n  for (let postNumber = 1; postNumber <= numberOfPosts; postNumber++) {\n    itemCounter++;\n    \n    // ENHANCED CLIENT DATA\n    const enhancedClientData = {\n      client_id: clientConfig.client.id,\n      client_name: clientConfig.client.name,\n      brand_name: clientConfig.client.name,\n      brand_voice: 'Professional yet approachable',\n      target_audience: 'General audience',\n      industry: 'Technology',\n      database: {\n        baseId: clientConfig.baseId,\n        tables: clientConfig.tables,\n        recordId: clientConfig.recordId\n      }\n    };\n    \n    const platformItem = {\n      // Copy ALL original data\n      ...processedItem,\n      \n      // CRITICAL: Add the recovered/created clientConfig\n      clientConfig: clientConfig,\n      \n      // Platform-specific overrides\n      platform: platformName,\n      platforms: [platformName],\n      \n      // Post-specific data\n      post_number: postNumber,\n      total_posts_for_platform: numberOfPosts,\n      workflow_item_id: `${platformName}_post_${postNumber}`,\n      \n      // CORRECTED IDENTIFIERS\n      unique_id: `${clientConfig.recordId}_${platformName}_${postNumber}`,\n      recordId: clientConfig.recordId,\n      baseId: clientConfig.baseId,\n      clientId: clientConfig.client.id,\n      clientName: clientConfig.client.name,\n      \n      // ENHANCED CLIENT DATA\n      client_data: enhancedClientData,\n      \n      // CONTENT DATA WITH BETTER DEFAULTS\n      hook_focus: processedItem.hook_focus || 'Ready for adventure',\n      cta: processedItem.cta || 'Explore now',\n      content_type: processedItem.content_type || 'image',\n      \n      // SOURCE CONTENT\n      source_content: processedItem.source_content || processedItem.processed_content,\n      processed_content: processedItem.processed_content || processedItem.source_content,\n      ai_prompt: processedItem.processed_content || processedItem.source_content,\n      \n      // PRESERVE BASEROW RECORD\n      baserow_record: processedItem.baserow_record || processedItem,\n      \n      // PROCESSING FLAGS\n      ready_for_ai_generation: true,\n      platform_split_complete: true,\n      content_ready: true,\n      \n      // DEBUG INFO\n      debug_info: {\n        ...processedItem.debug_info,\n        platform_assigned: platformName,\n        clientConfig_recovered: true,\n        recovery_method: processedItem.clientConfig ? 'original' : 'recovered_from_earlier_nodes',\n        recordId_final: clientConfig.recordId,\n        client_name_final: clientConfig.client.name,\n        brandAssets_table_final: clientConfig.tables.brandAssets.id,\n        data_validation: {\n          has_clientConfig: !!clientConfig,\n          has_recordId: !!clientConfig.recordId,\n          has_client_name: !!clientConfig.client.name,\n          has_brandAssets_table: !!clientConfig.tables.brandAssets.id\n        }\n      }\n    };\n    \n    console.log(`✅ Created ${platformName} item ${postNumber}:`);\n    console.log(`   - Record ID: ${clientConfig.recordId}`);\n    console.log(`   - Client: ${clientConfig.client.name}`);\n    console.log(`   - Brand Assets Table: ${clientConfig.tables.brandAssets.id}`);\n    \n    platformItems.push(platformItem);\n  }\n}\n\nconsole.log('=== FINAL VALIDATION ===');\nconsole.log(`Total items created: ${platformItems.length}`);\nconsole.log(`All items have clientConfig: ${platformItems.every(item => !!item.clientConfig)}`);\nconsole.log(`All items have recordId: ${platformItems.every(item => !!item.clientConfig?.recordId)}`);\nconsole.log(`All items have client name: ${platformItems.every(item => !!item.clientConfig?.client?.name)}`);\nconsole.log(`All items have brand assets table: ${platformItems.every(item => !!item.clientConfig?.tables?.brandAssets?.id)}`);\n\nreturn platformItems.map(item => ({ json: item }));"},"name":"Platform Splitter1","typeVersion":1,"id":"b3291d00-20c9-4c3f-9c6f-73e4cfdf1fdb","position":[740,5590],"type":"n8n-nodes-base.code"},{"parameters":{"jsCode":"// CLEAN URL CONTENT2 - DATA PRESERVATION CHECK\nconst payload = $json;\n\nconsole.log('=== CLEAN URL CONTENT - DATA ANALYSIS ===');\nconsole.log('Input data keys:', Object.keys(payload));\nconsole.log('Has extracted HTML data:', !!payload.title || !!payload.main_content);\nconsole.log('Has clientConfig:', !!payload.clientConfig);\n\n// CRITICAL: Get the original workflow data that started the URL processing\nconsole.log('=== ORIGINAL DATA RECOVERY ===');\nlet originalWorkflowData = {};\n\ntry {\n  // Try to get from URL Processor2 (the node that started URL processing)\n  const urlProcessorData = $('URL Processor2').first();\n  if (urlProcessorData?.json) {\n    originalWorkflowData = urlProcessorData.json;\n    console.log(`✅ Found original data from URL Processor2`);\n    console.log('Original data has clientConfig:', !!originalWorkflowData.clientConfig);\n    console.log('Original data keys:', Object.keys(originalWorkflowData));\n  } else {\n    console.log(`❌ No data found from URL Processor2`);\n  }\n} catch (error) {\n  console.log(`⚠️ Error getting original data: ${error.message}`);\n}\n\n// If no original data found, try alternative recovery\nif (!originalWorkflowData.clientConfig) {\n  console.log('⚠️ No clientConfig in original data, attempting broader recovery...');\n  \n  try {\n    // Try to get from earlier nodes\n    const processBaserowData = $('Process Baserow Data2').first();\n    if (processBaserowData?.json?.clientConfig) {\n      console.log('✅ Found clientConfig in Process Baserow Data2');\n      originalWorkflowData.clientConfig = processBaserowData.json.clientConfig;\n      originalWorkflowData.client_data = processBaserowData.json.client_data;\n      originalWorkflowData.baserow_record = processBaserowData.json.baserow_record;\n      originalWorkflowData.hook_focus = processBaserowData.json.hook_focus;\n      originalWorkflowData.cta = processBaserowData.json.cta;\n      originalWorkflowData.platforms = processBaserowData.json.platforms;\n      originalWorkflowData.number_of_posts = processBaserowData.json.number_of_posts;\n    }\n  } catch (error) {\n    console.log('❌ Could not recover clientConfig:', error.message);\n  }\n}\n\n// Extract and clean the web content from the HTML extraction\nconst extractedData = payload;\n\nconsole.log('=== CONTENT EXTRACTION ===');\nconsole.log('Title:', extractedData.title?.substring(0, 50) + '...');\nconsole.log('Description:', extractedData.description?.substring(0, 50) + '...');\nconsole.log('Main content available:', !!extractedData.main_content);\nconsole.log('Headings available:', !!extractedData.headings);\n\n// Combine and clean the extracted content\nlet cleanedContent = '';\n\n// Add title if available\nif (extractedData.title && extractedData.title.trim()) {\n  cleanedContent += `Title: ${extractedData.title.trim()}\\n\\n`;\n}\n\n// Add description if available\nif (extractedData.description && extractedData.description.trim()) {\n  cleanedContent += `Description: ${extractedData.description.trim()}\\n\\n`;\n}\n\n// Add headings if available\nif (extractedData.headings && Array.isArray(extractedData.headings)) {\n  const headings = extractedData.headings.filter(h => h && h.trim()).join('\\n');\n  if (headings) {\n    cleanedContent += `Key Headings:\\n${headings}\\n\\n`;\n  }\n}\n\n// Add main content if available\nif (extractedData.main_content) {\n  let mainContent = '';\n  if (Array.isArray(extractedData.main_content)) {\n    mainContent = extractedData.main_content.filter(p => p && p.trim()).join('\\n\\n');\n  } else {\n    mainContent = extractedData.main_content.trim();\n  }\n  \n  if (mainContent) {\n    cleanedContent += `Main Content:\\n${mainContent}`;\n  }\n}\n\n// Clean up the content\ncleanedContent = cleanedContent\n  .replace(/\\s+/g, ' ')  // Replace multiple spaces with single space\n  .replace(/\\n\\s*\\n/g, '\\n\\n')  // Clean up multiple newlines\n  .trim();\n\n// Limit content length (max 4000 characters for AI processing)\nif (cleanedContent.length > 4000) {\n  cleanedContent = cleanedContent.substring(0, 4000) + '... [content truncated]';\n}\n\n// Prepare the processed data WITH ORIGINAL WORKFLOW DATA PRESERVED\nconst processedData = {\n  // PRESERVE ALL ORIGINAL WORKFLOW DATA FIRST\n  ...originalWorkflowData,\n  \n  // Add the extracted HTML data\n  ...extractedData,\n  \n  // Add processing results\n  processed_content: cleanedContent || 'No content could be extracted from the URL',\n  processing_status: cleanedContent ? 'completed' : 'partial',\n  processing_type: 'url_extraction_completed',\n  content_ready: true,\n  \n  // ENSURE CRITICAL DATA IS PRESERVED\n  clientConfig: originalWorkflowData.clientConfig, // CRITICAL!\n  client_data: originalWorkflowData.client_data,\n  baserow_record: originalWorkflowData.baserow_record,\n  hook_focus: originalWorkflowData.hook_focus,\n  cta: originalWorkflowData.cta,\n  content_type: originalWorkflowData.content_type || 'url',\n  platforms: originalWorkflowData.platforms,\n  number_of_posts: originalWorkflowData.number_of_posts,\n  \n  // Keep original identifiers\n  recordId: originalWorkflowData.recordId,\n  baseId: originalWorkflowData.baseId,\n  clientId: originalWorkflowData.clientId,\n  clientName: originalWorkflowData.clientName,\n  \n  // Extraction metadata\n  extracted_data: {\n    title: extractedData.title || '',\n    description: extractedData.description || '',\n    content_length: cleanedContent.length,\n    extraction_successful: !!cleanedContent\n  },\n  \n  processing_notes: `URL content extracted and cleaned. Length: ${cleanedContent.length} characters`,\n  \n  // Debug info\n  debug_info: {\n    ...originalWorkflowData.debug_info,\n    url_processing_completed: true,\n    original_data_preserved: true,\n    clientConfig_preserved: !!originalWorkflowData.clientConfig,\n    content_extracted: !!cleanedContent,\n    processing_timestamp: new Date().toISOString()\n  }\n};\n\nconsole.log('=== URL PROCESSING SUMMARY ===');\nconsole.log(`Content extraction: ${cleanedContent ? '✅ SUCCESS' : '❌ FAILED'}`);\nconsole.log(`Content length: ${cleanedContent.length} characters`);\nconsole.log(`clientConfig preserved: ${!!processedData.clientConfig}`);\nconsole.log(`client name: ${processedData.clientConfig?.client?.name || 'missing'}`);\nconsole.log(`record ID: ${processedData.clientConfig?.recordId || 'missing'}`);\nconsole.log(`brand assets table: ${processedData.clientConfig?.tables?.brandAssets?.id || 'missing'}`);\nconsole.log('=== END URL PROCESSING ===');\n\nreturn {\n  json: processedData\n};"},"name":"Clean URL Content2","typeVersion":1,"id":"7029abd9-4063-4c57-9da8-d36135846b64","position":[520,5790],"type":"n8n-nodes-base.code"},{"parameters":{"extractionValues":{"values":[{"key":"title","cssSelector":"title"},{"key":"description","cssSelector":"meta[name=\"description\"]","returnValue":"attribute","attribute":"content"},{"key":"main_content","cssSelector":"article, main, .content, .post-content, .entry-content, p"},{"key":"headings","cssSelector":"h1, h2, h3"}]},"options":{}},"name":"Extract HTML Content2","typeVersion":1,"id":"2e3f69b6-2bf7-48ca-a75d-841df183c2db","position":[300,5790],"type":"n8n-nodes-base.htmlExtract"},{"parameters":{"url":"={{ $json.target_url }}","sendHeaders":true,"headerParameters":{"parameters":[{"name":"User-Agent","value":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"}]},"options":{"redirect":{"redirect":{"maxRedirects":5}},"timeout":30000}},"name":"Fetch URL Content2","typeVersion":4.2,"id":"31a74838-3946-46fb-87a7-31a29ec0c59f","position":[80,5800],"type":"n8n-nodes-base.httpRequest"},{"parameters":{"jsCode":"// PROCESS VIDEO TRANSCRIPTION2 - DATA PRESERVATION CHECK\nconst payload = $json;\n\nconsole.log('=== VIDEO TRANSCRIPTION PROCESSING - DATA ANALYSIS ===');\nconsole.log('Whisper Response Keys:', Object.keys(payload));\nconsole.log('Has whisper text:', !!payload.text);\n\n// CRITICAL: Get the original workflow data that started the video processing\nconsole.log('=== ORIGINAL DATA RECOVERY ===');\nlet originalWorkflowData = {};\n\ntry {\n  // Try to get from Video Processor2 (the node that started video processing)\n  const videoProcessorData = $('Video Processor2').first();\n  if (videoProcessorData?.json) {\n    originalWorkflowData = videoProcessorData.json;\n    console.log(`✅ Found original data from Video Processor2`);\n    console.log('Original data has clientConfig:', !!originalWorkflowData.clientConfig);\n    console.log('Original data keys:', Object.keys(originalWorkflowData));\n  } else {\n    console.log(`❌ No data found from Video Processor2`);\n  }\n} catch (error) {\n  console.log(`⚠️ Error getting original data: ${error.message}`);\n}\n\n// If no original data found, try alternative recovery\nif (!originalWorkflowData.clientConfig) {\n  console.log('⚠️ No clientConfig in original data, attempting broader recovery...');\n  \n  try {\n    // Try to get from earlier nodes\n    const processBaserowData = $('Process Baserow Data2').first();\n    if (processBaserowData?.json?.clientConfig) {\n      console.log('✅ Found clientConfig in Process Baserow Data2');\n      originalWorkflowData.clientConfig = processBaserowData.json.clientConfig;\n      originalWorkflowData.client_data = processBaserowData.json.client_data;\n      originalWorkflowData.baserow_record = processBaserowData.json.baserow_record;\n      originalWorkflowData.hook_focus = processBaserowData.json.hook_focus;\n      originalWorkflowData.cta = processBaserowData.json.cta;\n      originalWorkflowData.platforms = processBaserowData.json.platforms;\n      originalWorkflowData.number_of_posts = processBaserowData.json.number_of_posts;\n      originalWorkflowData.content_type = processBaserowData.json.content_type;\n    }\n  } catch (error) {\n    console.log('❌ Could not recover clientConfig:', error.message);\n  }\n}\n\n// Extract the transcription from Whisper response\nlet transcription = '';\nlet processingStatus = 'error';\nlet errorMessage = '';\n\nconsole.log('=== TRANSCRIPTION EXTRACTION ===');\ntry {\n  if (payload.text) {\n    transcription = payload.text.trim();\n    processingStatus = 'completed';\n    console.log(`✅ Video transcription successful: ${transcription.length} characters`);\n    console.log(`Transcription preview: ${transcription.substring(0, 100)}...`);\n  } else if (payload.error) {\n    errorMessage = payload.error.message || 'Unknown Whisper API error';\n    transcription = `Error transcribing video: ${errorMessage}`;\n    console.log(`❌ Whisper API error: ${errorMessage}`);\n  } else {\n    errorMessage = 'No transcription returned from Whisper API';\n    transcription = 'Unable to transcribe video - no response from Whisper API';\n    console.log(`❌ No transcription text found`);\n  }\n} catch (error) {\n  errorMessage = `Error processing Whisper response: ${error.message}`;\n  transcription = 'Error processing video transcription response';\n  console.log(`❌ Processing error: ${error.message}`);\n}\n\n// Prepare the processed data WITH ORIGINAL WORKFLOW DATA PRESERVED\nconst processedData = {\n  // PRESERVE ALL ORIGINAL WORKFLOW DATA FIRST\n  ...originalWorkflowData,\n  \n  // Add the Whisper response data\n  ...payload,\n  \n  // Add processing results\n  processed_content: transcription,\n  processing_status: processingStatus,\n  processing_type: 'video_transcription_completed',\n  content_ready: processingStatus === 'completed',\n  video_transcription: transcription,\n  error_message: errorMessage,\n  \n  // ENSURE CRITICAL DATA IS PRESERVED\n  clientConfig: originalWorkflowData.clientConfig, // CRITICAL!\n  client_data: originalWorkflowData.client_data,\n  baserow_record: originalWorkflowData.baserow_record,\n  hook_focus: originalWorkflowData.hook_focus,\n  cta: originalWorkflowData.cta,\n  content_type: originalWorkflowData.content_type || 'video',\n  platforms: originalWorkflowData.platforms,\n  number_of_posts: originalWorkflowData.number_of_posts,\n  \n  // Keep original identifiers\n  recordId: originalWorkflowData.recordId,\n  baseId: originalWorkflowData.baseId,\n  clientId: originalWorkflowData.clientId,\n  clientName: originalWorkflowData.clientName,\n  \n  // Processing notes\n  processing_notes: processingStatus === 'completed' \n    ? `✅ Video transcription completed. Transcription length: ${transcription.length} characters`\n    : `❌ Video transcription failed: ${errorMessage}`,\n  \n  // Processing flags\n  ready_for_ai_generation: true,\n  content_ready: processingStatus === 'completed',\n  \n  // Debug info\n  debug_info: {\n    ...originalWorkflowData.debug_info,\n    video_transcription_completed: true,\n    original_data_preserved: true,\n    clientConfig_preserved: !!originalWorkflowData.clientConfig,\n    transcription_successful: processingStatus === 'completed',\n    processing_timestamp: new Date().toISOString()\n  }\n};\n\nconsole.log('=== VIDEO TRANSCRIPTION SUMMARY ===');\nconsole.log(`Transcription Status: ${processingStatus === 'completed' ? '✅ SUCCESS' : '❌ FAILED'}`);\nconsole.log(`Transcription Length: ${transcription.length} characters`);\nconsole.log(`clientConfig preserved: ${!!processedData.clientConfig}`);\nconsole.log(`client name: ${processedData.clientConfig?.client?.name || 'missing'}`);\nconsole.log(`record ID: ${processedData.clientConfig?.recordId || 'missing'}`);\nconsole.log(`brand assets table: ${processedData.clientConfig?.tables?.brandAssets?.id || 'missing'}`);\nconsole.log(`content ready for next step: ${processedData.content_ready}`);\nconsole.log('=== END VIDEO TRANSCRIPTION ===');\n\nreturn {\n  json: processedData\n};"},"name":"Process Video Transcription2","typeVersion":1,"id":"65b35a9e-eb1c-4e56-9cc5-77237084dbd3","position":[520,5990],"type":"n8n-nodes-base.code"},{"parameters":{"method":"POST","url":"https://api.openai.com/v1/audio/transcriptions","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"contentType":"multipart-form-data","bodyParameters":{"parameters":[{"parameterType":"formBinaryData","name":"file","inputDataFieldName":"data"},{"name":"model","value":"whisper-1"},{"name":"response_format","value":"json"},{"name":"language","value":"en"}]},"options":{"timeout":300000}},"name":"Transcribe Video with Whisper2","typeVersion":4.2,"id":"675cb3ed-5441-442d-bc4c-2e66582e4bc1","position":[300,6000],"type":"n8n-nodes-base.httpRequest","credentials":{"httpHeaderAuth":{"id":"z06CbCGaeEeBPVIt","name":"GPT Image Generator"}}},{"parameters":{"url":"={{ $json.video_file_url }}","options":{"response":{"response":{"responseFormat":"file"}},"timeout":300000}},"name":"Download Video File2","typeVersion":4.2,"id":"3f6beae6-e628-4032-8d01-e807ae5d70bb","position":[80,6000],"type":"n8n-nodes-base.httpRequest"},{"parameters":{"jsCode":"// Enhanced Video Processor with correct URL extraction\nconst payload = $json;\n\nconsole.log('=== VIDEO PROCESSOR DEBUG ===');\nconsole.log('Payload keys:', Object.keys(payload));\n\n// CORRECT VIDEO URL EXTRACTION\nlet videoFileUrl = '';\n\n// Method 1: Check socialMedia.uploadedVideo (most reliable)\nif (payload.body?.body?.socialMedia?.uploadedVideo?.[0]?.url) {\n  videoFileUrl = payload.body.body.socialMedia.uploadedVideo[0].url;\n  console.log('✅ Found video URL in socialMedia.uploadedVideo');\n} \n// Method 2: Check field_7054 (video file field)\nelse if (payload.field_7054?.[0]?.url) {\n  videoFileUrl = payload.field_7054[0].url;\n  console.log('✅ Found video URL in field_7054');\n} \n// Method 3: Check baserow_record.field_7054\nelse if (payload.baserow_record?.field_7054?.[0]?.url) {\n  videoFileUrl = payload.baserow_record.field_7054[0].url;\n  console.log('✅ Found video URL in baserow_record.field_7054');\n}\n// Method 4: Check clientConfig for uploaded video\nelse if (payload.clientConfig?.socialMedia?.uploadedVideo?.[0]?.url) {\n  videoFileUrl = payload.clientConfig.socialMedia.uploadedVideo[0].url;\n  console.log('✅ Found video URL in clientConfig');\n}\n\nconsole.log('Extracted video URL:', videoFileUrl);\n\n// Validate video file URL\nif (!videoFileUrl || videoFileUrl === '') {\n  console.log('❌ No video file URL found');\n  return {\n    json: {\n      ...payload,\n      processing_status: 'error',\n      error_message: 'No video file URL found in payload',\n      content_ready: false,\n      skip_video_processing: true\n    }\n  };\n}\n\n// Check if this is actually a video URL (not just text)\nconst isVideoUrl = videoFileUrl.match(/\\.(mp4|avi|mov|wmv|flv|webm|m4v|mkv)$/i) ||\n                   videoFileUrl.includes('youtube.com') ||\n                   videoFileUrl.includes('youtu.be') ||\n                   videoFileUrl.includes('vimeo.com') ||\n                   videoFileUrl.includes('baserow.aiautomata.co.za/media/user_files');\n\nif (!isVideoUrl) {\n  console.log('❌ URL does not appear to be a video file:', videoFileUrl);\n  return {\n    json: {\n      ...payload,\n      processing_status: 'error', \n      error_message: `URL appears to be text, not a video: ${videoFileUrl}`,\n      content_ready: false,\n      skip_video_processing: true,\n      should_route_to_url_processor: false\n    }\n  };\n}\n\n// Prepare for video processing\nconst processingData = {\n  ...payload,\n  video_file_url: videoFileUrl,\n  processing_status: 'ready_for_transcription',\n  processing_type: 'video_transcription',\n  content_ready: false,\n  next_action: 'download_and_transcribe',\n  processing_notes: `Video file ready for transcription: ${videoFileUrl}`\n};\n\nconsole.log('✅ Valid video URL detected, proceeding with download');\nconsole.log('Video file URL set to:', videoFileUrl);\n\nreturn { json: processingData };"},"name":"Video Processor2","typeVersion":1,"id":"74daa117-c961-4e03-8f0b-50b94d949cce","position":[-140,5990],"type":"n8n-nodes-base.code"},{"parameters":{"jsCode":"// URL PROCESSOR - Web Content Extraction\n// This path handles URL content extraction and cleaning\n\nconst payload = $json;\nconst targetUrl = payload.source_content;\n\nconsole.log('Processing URL:', targetUrl);\n\n// Validate URL\nif (!targetUrl || targetUrl === '') {\n  return {\n    json: {\n      ...payload,\n      processing_status: 'error',\n      error_message: 'No URL provided',\n      content_ready: false\n    }\n  };\n}\n\n// Basic URL validation\nconst urlPattern = /^https?:\\/\\/.+/;\nif (!urlPattern.test(targetUrl)) {\n  return {\n    json: {\n      ...payload,\n      processing_status: 'error',\n      error_message: 'Invalid URL format - must start with http:// or https://',\n      content_ready: false\n    }\n  };\n}\n\n// Prepare for URL processing\nconst processingData = {\n  ...payload,\n  target_url: targetUrl,\n  processing_status: 'ready_for_extraction',\n  processing_type: 'url_extraction',\n  content_ready: false,\n  next_action: 'fetch_and_extract',\n  processing_notes: `URL ready for content extraction: ${targetUrl}`\n};\n\nreturn {\n  json: processingData\n};"},"name":"URL Processor2","typeVersion":1,"id":"64edd759-31f0-4056-9363-636c2efbd8fa","position":[-140,5790],"type":"n8n-nodes-base.code"},{"parameters":{"jsCode":"// TEXT IDEA PROCESSOR2 - DATA PRESERVATION CHECK\n// Let's see what data we're actually receiving and what we need to preserve\n\nconst payload = $json;\n\nconsole.log('=== TEXT IDEA PROCESSOR2 - DATA ANALYSIS ===');\nconsole.log('Input data keys:', Object.keys(payload));\nconsole.log('Has clientConfig:', !!payload.clientConfig);\nconsole.log('Has client_data:', !!payload.client_data);\nconsole.log('Has baserow_record:', !!payload.baserow_record);\nconsole.log('Has content_idea:', !!payload.content_idea);\nconsole.log('Has source_content:', !!payload.source_content);\n\n// Check if we're getting the full workflow data or just basic content\nconsole.log('=== CRITICAL DATA CHECK ===');\nconsole.log('clientConfig.client.name:', payload.clientConfig?.client?.name);\nconsole.log('clientConfig.recordId:', payload.clientConfig?.recordId);\nconsole.log('clientConfig.tables.brandAssets.id:', payload.clientConfig?.tables?.brandAssets?.id);\nconsole.log('client_data.client_name:', payload.client_data?.client_name);\n\n// For text ideas, we use the content directly\nconst processedData = {\n  // PRESERVE ALL ORIGINAL DATA\n  ...payload,\n  \n  // Processing results\n  processed_content: payload.source_content || payload.content_idea,\n  processing_status: 'completed',\n  processing_type: 'text_direct',\n  content_ready: true,\n  processing_notes: 'Text content used directly - no additional processing needed',\n  \n  // Ensure critical data is preserved\n  clientConfig: payload.clientConfig, // CRITICAL\n  client_data: payload.client_data,\n  baserow_record: payload.baserow_record,\n  \n  // Debug info\n  debug_info: {\n    ...payload.debug_info,\n    text_processing_completed: true,\n    data_preservation_applied: true,\n    clientConfig_preserved: !!payload.clientConfig\n  }\n};\n\nconsole.log('=== TEXT PROCESSING RESULT ===');\nconsole.log('Processed content length:', processedData.processed_content?.length);\nconsole.log('clientConfig preserved:', !!processedData.clientConfig);\nconsole.log('All original keys preserved:', Object.keys(processedData).length);\n\nreturn {\n  json: processedData\n};"},"name":"Text Idea Processor2","typeVersion":1,"id":"e4196298-39ea-42d8-a9ae-2053cc024088","position":[520,5190],"type":"n8n-nodes-base.code"},{"parameters":{"rules":{"values":[{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":1},"conditions":[{"leftValue":"={{ $json.content_type }}","operator":{"type":"string","operation":"equals"},"rightValue":"text_idea","id":"38387e44-5c24-4c6b-baa7-55560ef41e8b"}],"combinator":"and"},"renameOutput":true,"outputKey":"text_idea"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":1},"conditions":[{"leftValue":"={{ $json.content_type }}","operator":{"type":"string","operation":"equals"},"rightValue":"voice_note","id":"ad279f25-a004-4507-9d61-847518de57e2"}],"combinator":"and"},"renameOutput":true,"outputKey":"voice_note"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":1},"conditions":[{"leftValue":"={{ $json.content_type }}","operator":{"type":"string","operation":"equals"},"rightValue":"image","id":"d6429611-af2e-465d-97d2-b226f11db930"}],"combinator":"and"},"renameOutput":true,"outputKey":"image"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":1},"conditions":[{"leftValue":"={{ $json.content_type }}","operator":{"type":"string","operation":"equals"},"rightValue":"url","id":"a8c6fcd2-ae1a-495d-a1de-49d2a7faf087"}],"combinator":"and"},"renameOutput":true,"outputKey":"url"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":1},"conditions":[{"leftValue":"={{ $json.content_type }}","operator":{"type":"string","operation":"equals"},"rightValue":"video","id":"ff2ec465-4ef3-4bc4-bfbc-5afcba928398"}],"combinator":"and"},"renameOutput":true,"outputKey":"video"}]},"options":{}},"name":"Content Type Router2","typeVersion":3,"id":"a9325f9f-774c-484c-abcb-ea46cc52cc78","position":[-360,5598],"type":"n8n-nodes-base.switch"},{"parameters":{"jsCode":"// COMPLETE PROCESS BASEROW DATA2 NODE - Multi-Client with Strategic Framework\n// ENHANCED URL DETECTION - PRIORITY FOR field_7040 (Source URL)\nconsole.log('=== COMPLETE PROCESS BASEROW DATA2 START ===');\n\nconst mergedData = $json;\n\n// Validate client config\nif (!mergedData.clientConfig) {\n  throw new Error('❌ No clientConfig found. Check Merge Data node.');\n}\n\nconst clientConfig = mergedData.clientConfig;\nconsole.log(`Client: ${clientConfig.client.name} (${clientConfig.client.id})`);\nconsole.log(`Base ID: ${clientConfig.baseId}`);\nconsole.log(`Record ID: ${clientConfig.recordId}`);\n\n// Categorize all Baserow fields by type\nconst textFields = [];\nconst selectFields = [];\nconst arrayFields = [];\n\nfor (const [key, value] of Object.entries(mergedData)) {\n  if (key.startsWith('field_') && value !== null && value !== '') {\n    if (typeof value === 'string' && value.trim() !== '') {\n      textFields.push({\n        key,\n        value: value.trim(),\n        length: value.trim().length,\n        fieldNumber: parseInt(key.replace('field_', ''))\n      });\n    } else if (value && typeof value === 'object' && value.value) {\n      selectFields.push({\n        key,\n        value: value,\n        displayValue: value.value,\n        fieldNumber: parseInt(key.replace('field_', ''))\n      });\n    } else if (Array.isArray(value) && value.length > 0) {\n      arrayFields.push({\n        key,\n        value: value,\n        fieldNumber: parseInt(key.replace('field_', ''))\n      });\n    }\n  }\n}\n\nconsole.log(`Field analysis: ${textFields.length} text, ${selectFields.length} select, ${arrayFields.length} array fields`);\n\n// LOG ALL FIELDS FOR DEBUGGING\nconsole.log('=== ALL FIELDS DEBUG ===');\ntextFields.forEach(f => console.log(`Text Field ${f.key}: \"${f.value}\"`));\nselectFields.forEach(f => console.log(`Select Field ${f.key}: \"${f.displayValue}\"`));\narrayFields.forEach(f => console.log(`Array Field ${f.key}:`, f.value.map(item => item.value || item)));\n\n// CRITICAL: Check field_7040 specifically (Source URL field)\nconsole.log('=== FIELD_7040 (SOURCE URL) CHECK ===');\nconst field7040Value = mergedData.field_7040;\nconsole.log(`field_7040 value: \"${field7040Value}\"`);\nconsole.log(`field_7040 type: ${typeof field7040Value}`);\nconsole.log(`field_7040 is empty: ${!field7040Value || field7040Value.trim() === ''}`);\n\n// STRATEGIC FIELDS EXTRACTION\nconsole.log('=== EXTRACTING STRATEGIC FIELDS ===');\n\n// PRIMARY OBJECTIVE (field_7176)\nconst primaryObjectiveField = selectFields.find(f => f.key === 'field_7176');\nconst primaryObjective = primaryObjectiveField ? primaryObjectiveField.displayValue : 'Build Brand Awareness & Recognition';\n\n// CONTENT STRATEGY (field_7174) \nconst contentStrategyField = selectFields.find(f => f.key === 'field_7174');\nconst contentStrategy = contentStrategyField ? contentStrategyField.displayValue : 'Awareness & Positioning';\n\n// CONTENT TYPE STRATEGY (field_7175) - Multi-select\nconst contentTypeStrategyField = arrayFields.find(f => f.key === 'field_7175');\nconst contentTypeStrategy = contentTypeStrategyField ? \n  contentTypeStrategyField.value.map(item => item.value) : \n  ['Brand Positioning & Values'];\n\nconsole.log('✅ Primary Objective:', primaryObjective);\nconsole.log('✅ Content Strategy:', contentStrategy);\nconsole.log('✅ Content Type Strategy:', contentTypeStrategy);\nconsole.log('✅ Content Types Count:', contentTypeStrategy.length);\n\n// ENHANCED URL DETECTION - PRIORITY FOR field_7040 (Source URL)\nlet urlCandidates = [];\n\n// PRIORITY 1: Check field_7040 (Source URL) specifically\nif (field7040Value && field7040Value.trim() !== '') {\n  const trimmedUrl = field7040Value.trim();\n  console.log(`🔗 Found URL in field_7040: \"${trimmedUrl}\"`);\n  urlCandidates.push({\n    key: 'field_7040',\n    value: trimmedUrl,\n    length: trimmedUrl.length,\n    fieldNumber: 7040,\n    priority: 'source_url_field'\n  });\n} else {\n  console.log('⚠️ field_7040 (Source URL) is empty!');\n}\n\n// PRIORITY 2: Check other text fields for URLs\nconst otherUrlCandidates = textFields.filter(f => {\n  if (f.key === 'field_7040') return false; // Skip field_7040 as we already checked it\n  const value = f.value.toLowerCase();\n  return value.includes('http://') || \n         value.includes('https://') || \n         value.includes('www.') || \n         value.includes('.com') || \n         value.includes('.co.za') ||\n         value.includes('.org') ||\n         value.includes('.net') ||\n         // Common URL patterns\n         /^[a-zA-Z0-9-]+\\.[a-zA-Z]{2,}/.test(value);\n});\n\n// Add other URL candidates with lower priority\nurlCandidates.push(...otherUrlCandidates.map(candidate => ({\n  ...candidate,\n  priority: 'other_field'\n})));\n\n// Sort by priority (field_7040 first, then others)\nurlCandidates.sort((a, b) => {\n  if (a.priority === 'source_url_field') return -1;\n  if (b.priority === 'source_url_field') return 1;\n  return 0;\n});\n\nconsole.log('=== URL DETECTION RESULTS ===');\nconsole.log(`Found ${urlCandidates.length} potential URL fields:`);\nurlCandidates.forEach(f => console.log(`  ${f.key} (${f.priority}): \"${f.value}\"`));\n\n// SMART CONTENT EXTRACTION - Find the right fields based on content analysis\n\n// SOURCE CONTENT - Enhanced to detect URLs FIRST, prioritizing field_7040\nlet sourceContent = '';\nlet detectedContentType = 'text_idea'; // Default\n\n// PRIORITY 1: Check for URLs (field_7040 gets highest priority)\nif (urlCandidates.length > 0) {\n  sourceContent = urlCandidates[0].value;\n  detectedContentType = 'url';\n  console.log(`🔗 Detected URL content from ${urlCandidates[0].key}: \"${sourceContent}\"`);\n  console.log(`🔗 URL Priority: ${urlCandidates[0].priority}`);\n} else {\n  // PRIORITY 2: Original source content detection for text\n  const sourceContentCandidates = textFields.filter(f => \n    f.value.toLowerCase().includes('best') || \n    f.value.toLowerCase().includes('post') ||\n    f.value.toLowerCase().includes('management') ||\n    f.value.toLowerCase().includes('make') ||\n    f.value.toLowerCase().includes('content') ||\n    f.length > 25\n  ).sort((a, b) => b.fieldNumber - a.fieldNumber);\n  \n  sourceContent = sourceContentCandidates.length > 0 ? \n    sourceContentCandidates[0].value :\n    (textFields.length > 0 ? textFields.sort((a, b) => b.length - a.length)[0].value : 'Default content');\n  \n  console.log('📝 Using text content:', sourceContent);\n}\n\n// HOOK FOCUS - look for text with \"hook\" keywords or medium length text\nconst hookCandidates = textFields.filter(f => \n  f.value.toLowerCase().includes('hook') ||\n  f.value.toLowerCase().includes('focus') ||\n  (f.length > 2 && f.length < 100 && f.value !== sourceContent)\n).sort((a, b) => b.fieldNumber - a.fieldNumber);\n\nconst hookFocus = hookCandidates.length > 0 ? \n  hookCandidates[0].value :\n  (textFields.filter(f => f.value !== sourceContent && f.length > 2).length > 0 ? \n   textFields.filter(f => f.value !== sourceContent && f.length > 2)[0].value : 'Hook');\n\n// CTA - look for very short text or text containing \"cta\"\nconst ctaCandidates = textFields.filter(f => \n  f.value.toLowerCase().includes('cta') ||\n  f.value.toLowerCase().includes('action') ||\n  f.value.toLowerCase().includes('learn') ||\n  f.value.toLowerCase().includes('call') ||\n  (f.length < 20 && f.length > 1 && f.value !== sourceContent && f.value !== hookFocus)\n).sort((a, b) => a.length - b.length);\n\nconst cta = ctaCandidates.length > 0 ? \n  ctaCandidates[0].value : 'Learn More';\n\n// INFORMATION SOURCE - Enhanced detection with URL priority\nlet informationSourceRaw;\nif (detectedContentType === 'url') {\n  informationSourceRaw = { value: 'URL' };\n  console.log('🔗 Setting information source to URL based on detected URL content');\n} else {\n  // Check for voice files\n  const hasVoiceFiles = arrayFields.some(f => \n    f.key.toLowerCase().includes('voice') || \n    f.key.toLowerCase().includes('audio')\n  );\n  \n  // Check for image files  \n  const hasImageFiles = arrayFields.some(f => \n    f.key.toLowerCase().includes('image') || \n    f.key.toLowerCase().includes('photo')\n  );\n  \n  // Check for video files\n  const hasVideoFiles = arrayFields.some(f => \n    f.key.toLowerCase().includes('video')\n  );\n  \n  if (hasVoiceFiles) {\n    informationSourceRaw = { value: 'Voice Note' };\n    detectedContentType = 'voice_note';\n    console.log('🎤 Detected voice files');\n  } else if (hasImageFiles) {\n    informationSourceRaw = { value: 'Image' };\n    detectedContentType = 'image';\n    console.log('🖼️ Detected image files');\n  } else if (hasVideoFiles) {\n    informationSourceRaw = { value: 'Video Upload' };\n    detectedContentType = 'video';\n    console.log('🎥 Detected video files');\n  } else {\n    // Original select field detection\n    const sourceCandidates = selectFields.filter(f => \n      ['manual', 'voice', 'image', 'url', 'video'].some(term => \n        f.displayValue.toLowerCase().includes(term))\n    );\n    informationSourceRaw = sourceCandidates.length > 0 ? \n      sourceCandidates[0].value : { value: 'Manual' };\n  }\n}\n\n// PLATFORMS - array field with platform names\nconst platformCandidates = arrayFields.filter(f => \n  f.value.some(item => item.value && \n    ['facebook', 'instagram', 'linkedin', 'twitter', 'x'].includes(item.value.toLowerCase()))\n);\nconst platforms = platformCandidates.length > 0 ? \n  platformCandidates[0].value : [{ value: 'Facebook' }];\n\n// TARGET AUDIENCE - select field with audience keywords\nconst audienceCandidates = selectFields.filter(f => \n  f.displayValue.toLowerCase().includes('millennials') ||\n  f.displayValue.toLowerCase().includes('audience') ||\n  f.displayValue.toLowerCase().includes('target') ||\n  f.displayValue.toLowerCase().includes('professional') ||\n  f.displayValue.toLowerCase().includes('working') ||\n  f.displayValue.includes('25') || f.displayValue.includes('40') ||\n  f.displayValue.includes('26')\n);\nconst targetAudience = audienceCandidates.length > 0 ? \n  audienceCandidates[0].value : { value: 'General audience' };\n\n// CONTENT IDEA - title-like text, prefer lower field numbers\nconst ideaCandidates = textFields.filter(f => \n  f.value.toLowerCase().includes('testing') ||\n  f.value.toLowerCase().includes('workflow') ||\n  f.value.toLowerCase().includes('information') ||\n  f.value.toLowerCase().includes('baserow') ||\n  (f.length > 5 && f.length < 80 && f.value !== sourceContent)\n).sort((a, b) => a.fieldNumber - b.fieldNumber);\n\nconst contentIdea = ideaCandidates.length > 0 ? \n  ideaCandidates[0].value : 'Content Idea';\n\n// NUMBER OF POSTS - numeric text field\nconst postCountCandidates = textFields.filter(f => \n  !isNaN(parseInt(f.value)) && parseInt(f.value) > 0 && parseInt(f.value) < 20\n);\nconst numberOfPosts = postCountCandidates.length > 0 ? \n  parseInt(postCountCandidates[0].value) : 1;\n\nconsole.log('=== SMART EXTRACTION RESULTS ===');\nconsole.log(`Content Idea: \"${contentIdea}\"`);\nconsole.log(`Source Content: \"${sourceContent}\"`);\nconsole.log(`Hook Focus: \"${hookFocus}\"`);\nconsole.log(`CTA: \"${cta}\"`);\nconsole.log(`Information Source: \"${informationSourceRaw.value || informationSourceRaw}\"`);\nconsole.log(`Target Audience: \"${targetAudience.value || targetAudience}\"`);\nconsole.log(`Number of Posts: ${numberOfPosts}`);\nconsole.log(`Detected Content Type: ${detectedContentType}`);\n\n// CONTENT TYPE MAPPING - Use detected type or mapping\nconst rawSource = informationSourceRaw.value || informationSourceRaw || 'Manual';\nconst contentTypeMapping = {\n  'Manual': 'text_idea',\n  'Voice Note': 'voice_note', \n  'Image': 'image',\n  'URL': 'url',\n  'Video Upload': 'video',\n  'manual': 'text_idea',\n  'voice note': 'voice_note',\n  'voice': 'voice_note',\n  'image': 'image',\n  'url': 'url',\n  'video upload': 'video',\n  'video': 'video'\n};\n\n// Use detected content type if available, otherwise use mapping\nconst contentType = detectedContentType !== 'text_idea' ? detectedContentType : \n  (contentTypeMapping[rawSource] || contentTypeMapping[rawSource.toLowerCase()] || 'text_idea');\n\nconsole.log(`Content Type Mapping: \"${rawSource}\" → \"${contentType}\"`);\nconsole.log(`Final Content Type: \"${contentType}\"`);\n\n// Extract media files based on content type\nlet mediaFiles = [];\nswitch (contentType) {\n  case 'voice_note':\n    for (const [key, value] of Object.entries(mergedData)) {\n      if ((key.toLowerCase().includes('voice') || key.toLowerCase().includes('audio')) && Array.isArray(value)) {\n        mediaFiles = value;\n        break;\n      }\n    }\n    break;\n  case 'image':\n    for (const [key, value] of Object.entries(mergedData)) {\n      if ((key.toLowerCase().includes('image') || key.toLowerCase().includes('photo')) && Array.isArray(value)) {\n        mediaFiles = value;\n        break;\n      }\n    }\n    break;\n  case 'video':\n    for (const [key, value] of Object.entries(mergedData)) {\n      if (key.toLowerCase().includes('video') && Array.isArray(value)) {\n        mediaFiles = value;\n        break;\n      }\n    }\n    break;\n}\n\n// Process platforms\nconst selectedPlatforms = [];\nif (Array.isArray(platforms)) {\n  for (const platformData of platforms) {\n    if (typeof platformData === 'string') {\n      selectedPlatforms.push(platformData);\n    } else if (platformData && platformData.value) {\n      selectedPlatforms.push(platformData.value);\n    }\n  }\n}\n\nif (selectedPlatforms.length === 0) {\n  selectedPlatforms.push(...clientConfig.socialMedia.platforms);\n}\n\nconsole.log(`Selected Platforms: ${selectedPlatforms.join(', ')}`);\n\n// Create client data\nconst clientData = {\n  client_id: clientConfig.client.id,\n  client_name: clientConfig.client.name,\n  brand_name: clientConfig.client.name,\n  brand_voice: 'Professional yet approachable',\n  target_audience: targetAudience.value || targetAudience || 'General audience',\n  industry: 'Technology',\n  database: {\n    baseId: clientConfig.baseId,\n    tables: clientConfig.tables,\n    recordId: clientConfig.recordId\n  }\n};\n\n// CREATE FINAL WORKFLOW ITEM WITH STRATEGIC FIELDS\nconst workflowItem = {\n  ...mergedData,\n  \n  // MAPPED CONTENT TYPE (for router) - THIS IS THE KEY FIX!\n  content_type: contentType,\n  informationSource: contentType,\n  \n  // Platform configuration\n  platforms: selectedPlatforms,\n  platform: 'multiple',\n  number_of_posts: numberOfPosts,\n  \n  // CORRECTED CONTENT DATA\n  content_idea: contentIdea,\n  source_content: sourceContent,\n  hook_focus: hookFocus,\n  cta: cta,\n  information_source: rawSource,\n  media_files: mediaFiles,\n  processed_content: sourceContent,\n  \n  // STRATEGIC FIELDS\n  primary_objective: primaryObjective,\n  content_strategy: contentStrategy,\n  content_type_strategy: contentTypeStrategy, // Array of content types\n  \n  // Client configuration\n  client_data: clientData,\n  baserow_record: mergedData,\n  baserow_lookup_complete: true,\n  clientConfig: clientConfig,\n  \n  // Processing flags\n  needs_processing: contentType !== 'text_idea',\n  next_step: contentType === 'text_idea' ? 'platform_split' : 'process_content_then_split',\n  content_ready: contentType === 'text_idea',\n  \n  // Unique identifiers\n  unique_id: `${clientConfig.recordId}_all_platforms`,\n  original_record_id: clientConfig.recordId,\n  \n  // Debug information\n  debug_info: {\n    client_id: clientConfig.client.id,\n    client_name: clientConfig.client.name,\n    total_platforms_selected: selectedPlatforms.length,\n    approach: 'complete_multi_client_smart_extraction_with_strategy_field_7040_priority',\n    content_type: contentType,\n    original_source: rawSource,\n    detected_content_type: detectedContentType,\n    url_candidates_found: urlCandidates.length,\n    field_7040_checked: true,\n    field_7040_value: field7040Value,\n    field_7040_empty: !field7040Value || field7040Value.trim() === '',\n    mapping_applied: true,\n    smart_extraction_applied: true,\n    multi_client_safe: true,\n    enhanced_url_detection: true,\n    // STRATEGIC DEBUG INFO\n    strategic_fields_extracted: true,\n    primary_objective_found: primaryObjective,\n    content_strategy_found: contentStrategy,\n    content_types_selected: contentTypeStrategy.length,\n    content_types_list: contentTypeStrategy\n  }\n};\n\nconsole.log('=== COMPLETE PROCESSING SUMMARY ===');\nconsole.log(`✅ Client: ${clientConfig.client.name} (${clientConfig.client.id})`);\nconsole.log(`✅ Database: ${clientConfig.baseId}`);\nconsole.log(`✅ Source Content: \"${sourceContent}\"`);\nconsole.log(`✅ Hook Focus: \"${hookFocus}\"`);\nconsole.log(`✅ CTA: \"${cta}\"`);\nconsole.log(`✅ Target Audience: \"${targetAudience.value || targetAudience}\"`);\nconsole.log(`✅ Platforms: ${selectedPlatforms.join(', ')}`);\nconsole.log(`✅ Content Type: ${contentType}`);\nconsole.log(`✅ Information Source: ${rawSource}`);\nconsole.log(`✅ field_7040 (Source URL): ${field7040Value || 'EMPTY'}`);\nconsole.log(`✅ URL Detection: ${urlCandidates.length > 0 ? 'SUCCESS' : 'NO URLS FOUND'}`);\nconsole.log(`✅ Strategic Framework:`);\nconsole.log(`   - Primary Objective: ${primaryObjective}`);\nconsole.log(`   - Content Strategy: ${contentStrategy}`);\nconsole.log(`   - Content Types: ${contentTypeStrategy.join(', ')}`);\nconsole.log(`✅ Multi-client compatibility: MAINTAINED`);\nconsole.log('=== COMPLETE PROCESS BASEROW DATA2 FINISHED ===');\n\nreturn [{ json: workflowItem }];"},"name":"Process Baserow Data2","typeVersion":1,"id":"ed7a73c8-2a03-4471-85c5-50c8111338ee","position":[-580,5640],"type":"n8n-nodes-base.code"},{"parameters":{"jsCode":"// PROCESS VOICE TRANSCRIPTION2 - DATA PRESERVATION CHECK\nconst whisperResponse = $json;\n\nconsole.log('=== VOICE TRANSCRIPTION PROCESSING - DATA ANALYSIS ===');\nconsole.log('Whisper Response Keys:', Object.keys(whisperResponse));\nconsole.log('Has whisper text:', !!whisperResponse.text);\n\n// Extract transcription from Whisper API response\nlet transcription = '';\nlet processingStatus = 'completed';\nlet errorMessage = '';\n\ntry {\n  if (whisperResponse.text && whisperResponse.text.trim() !== '') {\n    transcription = whisperResponse.text.trim();\n    console.log(`✅ Transcription successful: ${transcription.length} characters`);\n    console.log(`Transcription preview: ${transcription.substring(0, 100)}...`);\n  } else if (whisperResponse.error) {\n    errorMessage = whisperResponse.error.message || 'Unknown Whisper API error';\n    transcription = `Error transcribing voice: ${errorMessage}`;\n    processingStatus = 'error';\n    console.log(`❌ Whisper API error: ${errorMessage}`);\n  } else {\n    errorMessage = 'No transcription text in response';\n    transcription = 'Unable to transcribe voice - no text returned';\n    processingStatus = 'error';  \n    console.log(`❌ No transcription text found in response`);\n  }\n} catch (error) {\n  errorMessage = `Processing error: ${error.message}`;\n  transcription = 'Error processing transcription response';\n  processingStatus = 'error';\n  console.log(`❌ Processing error: ${error.message}`);\n}\n\n// CRITICAL: Get the original workflow data that started the voice processing\nconsole.log('=== ORIGINAL DATA RECOVERY ===');\nlet originalWorkflowData = {};\n\ntry {\n  // Method 1: Try to get from Voice Note Processor2\n  const voiceProcessorData = $('Voice Note Processor2').first();\n  if (voiceProcessorData?.json) {\n    originalWorkflowData = voiceProcessorData.json;\n    console.log(`✅ Found original data from Voice Note Processor2`);\n    console.log('Original data has clientConfig:', !!originalWorkflowData.clientConfig);\n    console.log('Original data has platforms:', !!originalWorkflowData.platforms);\n    console.log('Original data keys:', Object.keys(originalWorkflowData));\n  } else {\n    console.log(`❌ No data found from Voice Note Processor2`);\n  }\n} catch (error) {\n  console.log(`⚠️ Error getting original data: ${error.message}`);\n}\n\n// If no original data found, try alternative recovery methods\nif (!originalWorkflowData.clientConfig) {\n  console.log('⚠️ No clientConfig in original data, attempting broader recovery...');\n  \n  try {\n    // Try to get from earlier nodes\n    const processBaserowData = $('Process Baserow Data2').first();\n    if (processBaserowData?.json?.clientConfig) {\n      console.log('✅ Found clientConfig in Process Baserow Data2');\n      originalWorkflowData.clientConfig = processBaserowData.json.clientConfig;\n      originalWorkflowData.client_data = processBaserowData.json.client_data;\n      originalWorkflowData.baserow_record = processBaserowData.json.baserow_record;\n    }\n  } catch (error) {\n    console.log('❌ Could not recover clientConfig:', error.message);\n  }\n}\n\n// Check what platforms we need to create\nconst platforms = originalWorkflowData.platforms || ['Facebook', 'Instagram', 'X', 'LinkedIn'];\nconst numberOfPosts = originalWorkflowData.number_of_posts || 1;\n\nconsole.log('=== PLATFORM RESTORATION ===');\nconsole.log(`Platforms to restore: ${platforms.join(', ')}`);\nconsole.log(`Posts per platform: ${numberOfPosts}`);\nconsole.log(`Total items to create: ${platforms.length * numberOfPosts}`);\n\n// Create platform items with transcription applied\nconst restoredItems = [];\nlet itemCounter = 0;\n\nfor (const platformName of platforms) {\n  for (let postNumber = 1; postNumber <= numberOfPosts; postNumber++) {\n    itemCounter++;\n    \n    const platformItem = {\n      // PRESERVE ALL ORIGINAL WORKFLOW DATA\n      ...originalWorkflowData,\n      \n      // Apply transcription result  \n      processed_content: transcription,\n      processing_status: processingStatus,\n      processing_type: 'voice_transcription_completed',\n      content_ready: processingStatus === 'completed',\n      voice_transcription: transcription,\n      error_message: errorMessage,\n      \n      // Platform-specific data\n      platform: platformName,\n      platforms: [platformName],\n      post_number: postNumber,\n      total_posts_for_platform: numberOfPosts,\n      workflow_item_id: `${platformName}_post_${postNumber}`,\n      unique_id: `${originalWorkflowData.clientConfig?.recordId || 'unknown'}_${platformName}_${postNumber}`,\n      \n      // Processing notes\n      processing_notes: processingStatus === 'completed' \n        ? `✅ Voice transcribed for ${platformName} post ${postNumber}. Length: ${transcription.length} chars`\n        : `❌ Voice transcription failed for ${platformName} post ${postNumber}: ${errorMessage}`,\n      \n      // ENSURE CRITICAL DATA IS PRESERVED\n      clientConfig: originalWorkflowData.clientConfig, // CRITICAL!\n      client_data: originalWorkflowData.client_data,\n      baserow_record: originalWorkflowData.baserow_record,\n      \n      // Processing flags\n      ready_for_ai_generation: true,\n      platform_split_complete: true,\n      \n      // Debug info\n      debug_info: {\n        ...originalWorkflowData.debug_info,\n        voice_transcription_completed: true,\n        original_data_preserved: true,\n        clientConfig_preserved: !!originalWorkflowData.clientConfig,\n        platform_assigned: platformName,\n        post_number: postNumber\n      }\n    };\n    \n    console.log(`✅ Created platform item ${itemCounter}: ${platformName} post ${postNumber}`);\n    console.log(`   - clientConfig present: ${!!platformItem.clientConfig}`);\n    console.log(`   - client name: ${platformItem.clientConfig?.client?.name || 'missing'}`);\n    console.log(`   - record ID: ${platformItem.clientConfig?.recordId || 'missing'}`);\n    \n    restoredItems.push(platformItem);\n  }\n}\n\nconsole.log('=== VOICE TRANSCRIPTION SUMMARY ===');\nconsole.log(`Transcription Status: ${processingStatus === 'completed' ? '✅ SUCCESS' : '❌ FAILED'}`)\nconsole.log(`Transcription Length: ${transcription.length} characters`); \nconsole.log(`Platform Items Restored: ${restoredItems.length}`);\nconsole.log(`All items have clientConfig: ${restoredItems.every(item => !!item.clientConfig)}`);\nconsole.log(`All items have client name: ${restoredItems.every(item => !!item.clientConfig?.client?.name)}`);\nconsole.log('=== END TRANSCRIPTION SUMMARY ===');\n\n// Return all platform items with transcription applied\nreturn restoredItems.map(item => ({ json: item }));"},"name":"Process Voice Transcription2","typeVersion":1,"id":"7ce709aa-9431-4a92-b48d-615cd65d7037","position":[520,5390],"type":"n8n-nodes-base.code"},{"parameters":{"method":"POST","url":"https://api.openai.com/v1/audio/transcriptions","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"contentType":"multipart-form-data","bodyParameters":{"parameters":[{"parameterType":"formBinaryData","name":"file","inputDataFieldName":"=data"},{"name":"model","value":"whisper-1"},{"name":"response_format","value":"json"},{"name":"language","value":"en"}]},"options":{"timeout":300000}},"name":"Transcribe Voice with Whisper3","typeVersion":4.2,"id":"e76b1fb0-6bc4-4204-bc76-979b1f6ee0b7","position":[300,5390],"type":"n8n-nodes-base.httpRequest","credentials":{"httpHeaderAuth":{"id":"z06CbCGaeEeBPVIt","name":"GPT Image Generator"}}},{"parameters":{"url":"={{ $json.field_7046[0].url }}","options":{"response":{"response":{"responseFormat":"file"}},"timeout":120000}},"name":"Download Voice File2","typeVersion":4.2,"id":"f7ec44e8-22e9-438a-87ce-bf1520f8f36d","position":[80,5390],"type":"n8n-nodes-base.httpRequest"},{"parameters":{"jsCode":"// VOICE NOTE PROCESSOR - Transcription via OpenAI Whisper\n// This path handles voice file transcription\n\nconst payload = $json;\nconst voiceFileUrl = payload.source_content;\n\nconsole.log('Processing Voice Note:', voiceFileUrl);\n\n// Validate voice file URL\nif (!voiceFileUrl || voiceFileUrl === '') {\n  return {\n    json: {\n      ...payload,\n      processing_status: 'error',\n      error_message: 'No voice file URL provided',\n      content_ready: false\n    }\n  };\n}\n\n// Prepare for voice processing\nconst processingData = {\n  ...payload,\n  voice_file_url: voiceFileUrl,\n  processing_status: 'ready_for_transcription',\n  processing_type: 'voice_transcription',\n  content_ready: false,\n  next_action: 'download_and_transcribe',\n  processing_notes: `Voice file ready for transcription: ${voiceFileUrl}`\n};\n\nreturn {\n  json: processingData\n};"},"name":"Voice Note Processor2","typeVersion":1,"id":"6649df85-880b-40f2-8879-95cb31d4ba47","position":[-140,5390],"type":"n8n-nodes-base.code"},{"parameters":{"jsCode":"// Process OpenAI Vision API response - PRESERVING ALL WORKFLOW DATA\nconst payload = $json;\n\nconsole.log('=== PROCESS IMAGE ANALYSIS - DATA PRESERVATION ===');\nconsole.log('OpenAI Vision API Response keys:', Object.keys(payload));\n\n// Get the original workflow data that was passed to the image analysis\n// This should contain clientConfig and other important data\nlet originalWorkflowData = {};\n\n// Try to get the original data from the Image Processor2 node\ntry {\n  const imageProcessorData = $('Image Processor2').first();\n  if (imageProcessorData && imageProcessorData.json) {\n    originalWorkflowData = imageProcessorData.json;\n    console.log('✅ Found original workflow data from Image Processor2');\n    console.log('Original data has clientConfig:', !!originalWorkflowData.clientConfig);\n  }\n} catch (error) {\n  console.log('⚠️ Could not get original data from Image Processor2:', error.message);\n}\n\n// Extract the image analysis from OpenAI response\nlet imageAnalysis = '';\nlet processingStatus = 'error';\nlet errorMessage = '';\n\ntry {\n  if (payload.choices && payload.choices.length > 0) {\n    imageAnalysis = payload.choices[0].message.content;\n    processingStatus = 'completed';\n    console.log(`✅ Image analysis successful: ${imageAnalysis.length} characters`);\n  } else if (payload.error) {\n    errorMessage = payload.error.message || 'Unknown OpenAI API error';\n    imageAnalysis = `Error analyzing image: ${errorMessage}`;\n    console.log(`❌ OpenAI API error: ${errorMessage}`);\n  } else {\n    errorMessage = 'No analysis returned from OpenAI Vision API';\n    imageAnalysis = 'Unable to analyze image - no response from vision API';\n    console.log(`❌ No analysis returned`);\n  }\n} catch (error) {\n  errorMessage = `Error processing vision API response: ${error.message}`;\n  imageAnalysis = 'Error processing image analysis response';\n  console.log(`❌ Processing error: ${error.message}`);\n}\n\n// CRITICAL: Preserve ALL original workflow data and add the image analysis\nconst processedData = {\n  // PRESERVE ALL ORIGINAL WORKFLOW DATA FIRST\n  ...originalWorkflowData,\n  \n  // Add the image analysis results\n  processed_content: imageAnalysis,\n  processing_status: processingStatus,\n  processing_type: 'image_analysis_completed',\n  content_ready: processingStatus === 'completed',\n  image_analysis: imageAnalysis,\n  error_message: errorMessage,\n  \n  // Processing notes\n  processing_notes: processingStatus === 'completed' \n    ? `✅ Image analysis completed. Analysis length: ${imageAnalysis.length} characters`\n    : `❌ Image analysis failed: ${errorMessage}`,\n  \n  // PRESERVE CRITICAL WORKFLOW DATA\n  clientConfig: originalWorkflowData.clientConfig, // CRITICAL!\n  client_data: originalWorkflowData.client_data,\n  baserow_record: originalWorkflowData.baserow_record,\n  hook_focus: originalWorkflowData.hook_focus,\n  cta: originalWorkflowData.cta,\n  content_type: originalWorkflowData.content_type || 'image',\n  platforms: originalWorkflowData.platforms,\n  number_of_posts: originalWorkflowData.number_of_posts,\n  \n  // Keep original identifiers\n  recordId: originalWorkflowData.recordId,\n  baseId: originalWorkflowData.baseId,\n  clientId: originalWorkflowData.clientId,\n  clientName: originalWorkflowData.clientName,\n  \n  // Add OpenAI response metadata (but preserve original ID)\n  openai_response_id: payload.id,\n  openai_model: payload.model,\n  \n  // Debug info\n  debug_info: {\n    ...originalWorkflowData.debug_info,\n    image_analysis_completed: true,\n    original_data_preserved: true,\n    clientConfig_preserved: !!originalWorkflowData.clientConfig,\n    processing_timestamp: new Date().toISOString()\n  }\n};\n\nconsole.log('=== DATA PRESERVATION SUMMARY ===');\nconsole.log(`✅ Image analysis: ${processingStatus === 'completed' ? 'SUCCESS' : 'FAILED'}`);\nconsole.log(`✅ Original clientConfig preserved: ${!!processedData.clientConfig}`);\nconsole.log(`✅ Original client data preserved: ${!!processedData.client_data}`);\nconsole.log(`✅ Original identifiers preserved: ${!!processedData.recordId}`);\nconsole.log(`✅ Analysis length: ${imageAnalysis.length} characters`);\n\nreturn {\n  json: processedData\n};"},"name":"Process Image Analysis2","typeVersion":1,"id":"aac5d838-89ee-4af1-be57-1fcc046356b2","position":[520,5590],"type":"n8n-nodes-base.code"},{"parameters":{"method":"POST","url":"https://api.openai.com/v1/chat/completions","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"application/json"}]},"sendBody":true,"specifyBody":"json","jsonBody":"={\n  \"model\": \"gpt-4o-mini\",\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": [\n        {\n          \"type\": \"text\",\n          \"text\": \"Analyze this image in detail. Describe what you see, including objects, people, colors, mood, setting, and any text visible. Focus on elements that would be useful for creating social media content about this image.\"\n        },\n        {\n          \"type\": \"image_url\",\n          \"image_url\": {\n            \"url\": \"{{ $json.body.body.socialMedia.uploadedImage[0].url }}\"\n          }\n        }\n      ]\n    }\n  ],\n  \"max_tokens\": 1000\n}","options":{"timeout":60000}},"name":"Analyze Image with OpenAI Vision2","typeVersion":4.2,"id":"515285ff-ac26-43ec-8fce-cd7dd4269cc5","position":[300,5590],"type":"n8n-nodes-base.httpRequest","credentials":{"httpHeaderAuth":{"id":"z06CbCGaeEeBPVIt","name":"GPT Image Generator"}}},{"parameters":{"jsCode":"// IMAGE PROCESSOR - Analysis via OpenAI Vision\n// This path handles image analysis and description\n\nconst payload = $json;\nconst imageFileUrl = payload.source_content;\n\nconsole.log('Processing Image:', imageFileUrl);\n\n// Validate image file URL\nif (!imageFileUrl || imageFileUrl === '') {\n  return {\n    json: {\n      ...payload,\n      processing_status: 'error',\n      error_message: 'No image file URL provided',\n      content_ready: false\n    }\n  };\n}\n\n// Prepare for image processing\nconst processingData = {\n  ...payload,\n  image_file_url: imageFileUrl,\n  processing_status: 'ready_for_analysis',\n  processing_type: 'image_analysis',\n  content_ready: false,\n  next_action: 'analyze_image',\n  processing_notes: `Image ready for analysis: ${imageFileUrl}`\n};\n\nreturn {\n  json: processingData\n};"},"name":"Image Processor2","typeVersion":1,"id":"7026b4f9-0fea-44db-b571-98bd92b39854","position":[80,5590],"type":"n8n-nodes-base.code"},{"parameters":{"rules":{"values":[{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":1},"conditions":[{"leftValue":"={{ $json.platform }}","operator":{"type":"string","operation":"equals"},"rightValue":"Facebook","id":"38387e44-5c24-4c6b-baa7-55560ef41e8b"}],"combinator":"and"},"renameOutput":true,"outputKey":"Facebook"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":1},"conditions":[{"leftValue":"={{ $json.platform }}","operator":{"type":"string","operation":"equals"},"rightValue":"Instagram","id":"ad279f25-a004-4507-9d61-847518de57e2"}],"combinator":"and"},"renameOutput":true,"outputKey":"Instagram"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":1},"conditions":[{"leftValue":"={{ $json.platform }}","operator":{"type":"string","operation":"equals"},"rightValue":"LinkedIn","id":"d6429611-af2e-465d-97d2-b226f11db930"}],"combinator":"and"},"renameOutput":true,"outputKey":"LinkedIn"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":1},"conditions":[{"leftValue":"={{ $json.platform }}","operator":{"type":"string","operation":"equals"},"rightValue":"X","id":"a8c6fcd2-ae1a-495d-a1de-49d2a7faf087"}],"combinator":"and"},"renameOutput":true,"outputKey":"X"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":1},"conditions":[{"leftValue":"={{ $json.platform }}","operator":{"type":"string","operation":"equals"},"rightValue":"","id":"ff2ec465-4ef3-4bc4-bfbc-5afcba928398"}],"combinator":"and"},"renameOutput":true}]},"options":{}},"name":"Platform Switch","typeVersion":3,"id":"bb7b21ea-2df3-4462-8b4a-1de5dd4ec5f6","position":[960,5548],"type":"n8n-nodes-base.switch"},{"parameters":{"databaseId":"={{ $json.clientConfig.baseId }}","tableId":"={{ $json.clientConfig.tables.brandAssets.id }}","additionalOptions":{}},"type":"n8n-nodes-base.baserowTool","typeVersion":1,"position":[1860,6420],"id":"4aee9c0a-dc8d-42f3-9cec-0b21b6939745","name":"Get many rows in Baserow","credentials":{"baserowApi":{"id":"naYCtMuym8ZQ75kw","name":"Baserow account"}}},{"parameters":{"jsCode":"// MULTI-CLIENT CONFIG EXTRACTOR - Works for ANY Client\n// This extracts client configuration dynamically from webhook payload\n\nconst payload = $json;\n\nconsole.log('=== MULTI-CLIENT CONFIG EXTRACTOR START ===');\nconsole.log('Payload structure analysis...');\n\n// Find the webhook body data - trace through the nested structure\nlet webhookData = null;\n\n// Method 1: Check nested body.body structure (most common)\nif (payload.body && payload.body.body) {\n  webhookData = payload.body.body;\n  console.log('✅ Found webhook data in payload.body.body');\n} \n// Method 2: Check direct body structure\nelse if (payload.body && payload.body.client_id) {\n  webhookData = payload.body;\n  console.log('✅ Found webhook data in payload.body');\n}\n// Method 3: Check root level\nelse if (payload.client_id) {\n  webhookData = payload;\n  console.log('✅ Found webhook data in payload root');\n}\n\nif (!webhookData) {\n  console.log('❌ No webhook data found. Available keys:', Object.keys(payload));\n  throw new Error('Could not locate client configuration in webhook payload');\n}\n\nconsole.log('Webhook data keys:', Object.keys(webhookData));\n\n// Validate required fields for multi-client setup\nconst requiredFields = ['client_id', 'base_id', 'record_id'];\nconst missingFields = requiredFields.filter(field => !webhookData[field]);\n\nif (missingFields.length > 0) {\n  console.log('❌ Missing required fields:', missingFields);\n  console.log('Available webhook fields:', Object.keys(webhookData));\n  throw new Error(`Missing required fields for client: ${missingFields.join(', ')}`);\n}\n\n// EXTRACT DYNAMIC CLIENT CONFIGURATION\nconst clientConfig = {\n  // Core database information (changes per client)\n  baseId: webhookData.base_id,\n  recordId: webhookData.record_id,\n  \n  // Client information (unique per client)\n  client: {\n    id: webhookData.client_id,\n    name: webhookData.client?.name || \n          webhookData.client_name || \n          webhookData.client_id.charAt(0).toUpperCase() + webhookData.client_id.slice(1).replace('-', ' ')\n  },\n  \n  // Table configuration (different per client's database)\n  tables: {\n    contentIdeas: {\n      id: webhookData.tables?.contentIdeas?.id || webhookData.table_id,\n      recordId: webhookData.record_id\n    },\n    socialMediaContent: {\n      id: webhookData.tables?.socialMediaContent?.id || null\n    },\n    brandAssets: {\n      id: webhookData.tables?.brandAssets?.id || null\n    }\n  },\n  \n  // Baserow connection (client-specific)\n  baserow: {\n    baseUrl: webhookData.baserow?.baseUrl || 'https://baserow.aiautomata.co.za',\n    token: webhookData.baserow?.token || null, // Should be client-specific\n    databaseId: webhookData.base_id\n  },\n  \n  // Content configuration from webhook\n  content: {\n    ideaId: webhookData.record_id,\n    title: webhookData.title || webhookData.contentIdea?.title || 'Untitled Content',\n    priority: webhookData.priority || 'Medium',\n    targetAudience: webhookData.contentIdea?.targetAudience || 'general audience'\n  },\n  \n  // Social media configuration (can vary per client)\n  socialMedia: {\n    platforms: webhookData.socialMedia?.platforms || ['Facebook'],\n    postType: webhookData.socialMedia?.postType || 'Text',\n    informationSource: webhookData.socialMedia?.informationSource || 'Manual',\n    numberOfPosts: parseInt(webhookData.socialMedia?.numberOfPosts) || 1,\n    hookFocus: webhookData.socialMedia?.hookFocus || 'Hook',\n    cta: webhookData.socialMedia?.cta || 'Learn More'\n  },\n  \n  // Metadata\n  metadata: {\n    timestamp: new Date().toISOString(),\n    source: 'Multi-Client Config Extractor',\n    version: '3.0',\n    originalEvent: webhookData.event,\n    workflowType: 'multi-client-social-media-processor'\n  }\n};\n\n// Validation for multi-client setup\nconst validation = {\n  hasValidBaseId: !!clientConfig.baseId && clientConfig.baseId !== 'unknown',\n  hasValidClientId: !!clientConfig.client.id && clientConfig.client.id !== 'unknown',\n  hasContentIdeasTable: !!clientConfig.tables.contentIdeas.id,\n  hasSocialMediaTable: !!clientConfig.tables.socialMediaContent.id,\n  hasBrandAssetsTable: !!clientConfig.tables.brandAssets.id,\n  hasBaserowToken: !!clientConfig.baserow.token\n};\n\nconsole.log('=== MULTI-CLIENT VALIDATION ===');\nconsole.log(`✅ Valid Base ID: ${validation.hasValidBaseId} (${clientConfig.baseId})`);\nconsole.log(`✅ Valid Client ID: ${validation.hasValidClientId} (${clientConfig.client.id})`);\nconsole.log(`✅ Content Ideas Table: ${validation.hasContentIdeasTable} (${clientConfig.tables.contentIdeas.id})`);\nconsole.log(`✅ Social Media Table: ${validation.hasSocialMediaTable} (${clientConfig.tables.socialMediaContent.id || 'missing'})`);\nconsole.log(`✅ Brand Assets Table: ${validation.hasBrandAssetsTable} (${clientConfig.tables.brandAssets.id || 'missing'})`);\nconsole.log(`✅ Baserow Token: ${validation.hasBaserowToken ? 'present' : 'missing'}`);\n\n// Critical validations\nif (!validation.hasValidBaseId) {\n  throw new Error(`Invalid base_id for client ${clientConfig.client.id}: ${clientConfig.baseId}`);\n}\n\nif (!validation.hasValidClientId) {\n  throw new Error(`Invalid client_id: ${clientConfig.client.id}`);\n}\n\nif (!validation.hasContentIdeasTable) {\n  throw new Error(`Missing content ideas table ID for client ${clientConfig.client.id}`);\n}\n\n// Warning for missing optional tables\nif (!validation.hasSocialMediaTable) {\n  console.log(`⚠️ Missing social media content table for client ${clientConfig.client.id}`);\n}\n\nif (!validation.hasBrandAssetsTable) {\n  console.log(`⚠️ Missing brand assets table for client ${clientConfig.client.id}`);\n}\n\n// Create enriched payload with dynamic client configuration\nconst enrichedPayload = {\n  // Preserve original webhook payload\n  ...payload,\n  \n  // DYNAMIC client configuration (changes per client)\n  clientConfig: clientConfig,\n  \n  // Quick access fields for downstream nodes\n  baseId: clientConfig.baseId,\n  recordId: clientConfig.recordId,\n  clientId: clientConfig.client.id,\n  clientName: clientConfig.client.name,\n  platforms: clientConfig.socialMedia.platforms,\n  numberOfPosts: clientConfig.socialMedia.numberOfPosts,\n  informationSource: clientConfig.socialMedia.informationSource,\n  \n  // Processing flags\n  configExtracted: true,\n  multiClientReady: true,\n  dynamicClientConfig: true,\n  supportsAnyClient: true,\n  \n  // Validation results\n  validation: validation,\n  \n  // Debug information\n  debugInfo: {\n    extractionMethod: 'multi_client_dynamic_extraction',\n    clientId: clientConfig.client.id,\n    baseId: clientConfig.baseId,\n    tablesFound: {\n      contentIdeas: !!clientConfig.tables.contentIdeas.id,\n      socialMediaContent: !!clientConfig.tables.socialMediaContent.id,\n      brandAssets: !!clientConfig.tables.brandAssets.id\n    },\n    validationPassed: validation.hasValidBaseId && validation.hasValidClientId && validation.hasContentIdeasTable,\n    processingTimestamp: new Date().toISOString()\n  }\n};\n\nconsole.log('=== MULTI-CLIENT CONFIG SUMMARY ===');\nconsole.log(`✅ Client: ${clientConfig.client.name} (${clientConfig.client.id})`);\nconsole.log(`✅ Database: ${clientConfig.baseId}`);\nconsole.log(`✅ Record: ${clientConfig.recordId}`);\nconsole.log(`✅ Content Ideas Table: ${clientConfig.tables.contentIdeas.id}`);\nconsole.log(`✅ Platforms: ${clientConfig.socialMedia.platforms.join(', ')}`);\nconsole.log(`✅ Posts per platform: ${clientConfig.socialMedia.numberOfPosts}`);\nconsole.log(`✅ Multi-client support: ENABLED`);\nconsole.log(`✅ Dynamic configuration: READY`);\nconsole.log('=== CONFIG EXTRACTION COMPLETE ===');\n\nreturn {\n  json: enrichedPayload\n};"},"name":"Client Config Extractor","typeVersion":2,"id":"8d768e23-44c1-48d6-aeba-2ba821229c43","position":[-1240,5640],"type":"n8n-nodes-base.code"},{"parameters":{"url":"=https://baserow.aiautomata.co.za/api/database/rows/table/{{ $json.clientConfig.tables.contentIdeas.id }}/{{ $json.clientConfig.recordId }}/","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Authorization","value":"=Token {{ $json.clientConfig.baserow.token }}"},{"name":"Content-Type","value":"application/json"},{"name":"Accept","value":"application/json"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-1020,5640],"id":"029f96f1-46e4-48a7-8a09-e26a547d2b81","name":"Get Baserow Row via HTTP"},{"parameters":{"jsCode":"// MERGE DATA NODE - Combines Baserow row data with client config\n// Place this node BETWEEN \"Get Baserow Row via HTTP\" and \"Process Baserow Data2\"\n\nconsole.log('=== MERGE DATA NODE START ===');\n\n// Get the Baserow row data (current input)\nconst baserowRowData = $json;\n\n// Get the client config from the Client Config Extractor node\nconst clientConfigNode = $('Client Config Extractor').first();\n\nif (!clientConfigNode) {\n  throw new Error('❌ Cannot find Client Config Extractor node. Make sure it exists and has run successfully.');\n}\n\nconst clientConfigData = clientConfigNode.json;\n\nconsole.log('=== DATA SOURCES ===');\nconsole.log('Baserow row data keys:', Object.keys(baserowRowData));\nconsole.log('Client config data keys:', Object.keys(clientConfigData));\n\n// Extract client config\nif (!clientConfigData.clientConfig) {\n  throw new Error('❌ No clientConfig found in Client Config Extractor output. Check that node is working properly.');\n}\n\nconst clientConfig = clientConfigData.clientConfig;\n\nconsole.log('=== CLIENT CONFIG VALIDATION ===');\nconsole.log('Client ID:', clientConfig.client?.id);\nconsole.log('Base ID:', clientConfig.baseId);\nconsole.log('Record ID:', clientConfig.recordId);\n\n// Merge the data\nconst mergedData = {\n  // Include the Baserow row data (field_7035, field_7036, etc.)\n  ...baserowRowData,\n  \n  // Include the client configuration\n  clientConfig: clientConfig,\n  \n  // Include other useful data from Client Config Extractor\n  baseId: clientConfigData.baseId,\n  recordId: clientConfigData.recordId,\n  clientId: clientConfigData.clientId,\n  clientName: clientConfigData.clientName,\n  platforms: clientConfigData.platforms,\n  numberOfPosts: clientConfigData.numberOfPosts,\n  informationSource: clientConfigData.informationSource,\n  \n  // Include original webhook data if available\n  body: clientConfigData.body,\n  headers: clientConfigData.headers,\n  \n  // Processing flags\n  configExtracted: clientConfigData.configExtracted,\n  multiClientReady: clientConfigData.multiClientReady,\n  validation: clientConfigData.validation,\n  debugInfo: clientConfigData.debugInfo,\n  \n  // Merge metadata\n  mergedAt: new Date().toISOString(),\n  dataFromSources: {\n    baserowRow: 'Get Baserow Row via HTTP',\n    clientConfig: 'Client Config Extractor'\n  }\n};\n\nconsole.log('=== MERGE COMPLETE ===');\nconsole.log('✅ Baserow row data: INCLUDED');\nconsole.log('✅ Client config: INCLUDED');\nconsole.log('✅ Client ID:', mergedData.clientConfig.client.id);\nconsole.log('✅ Base ID:', mergedData.clientConfig.baseId);\nconsole.log('✅ Total merged keys:', Object.keys(mergedData).length);\nconsole.log('=== READY FOR PROCESS BASEROW DATA2 ===');\n\nreturn {\n  json: mergedData\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-800,5640],"id":"3ec4a157-d3fd-4713-9d38-d7a6d45b57fe","name":"Merge Node"},{"parameters":{"promptType":"define","text":"=Please create a {{ $json.numberOfPosts || $json.clientConfig.socialMedia.numberOfPosts || 1 }}-post strategic {{ $json.platform || 'Facebook' }} campaign for {{ $json.clientConfig.client.name || $json.client_data.client_name || 'Unknown Client' }}.\n\n## STRATEGIC FRAMEWORK\n- **Content Strategy**: {{ $json.content_strategy || 'Awareness & Positioning' }}\n- **Content Types**: {{ Array.isArray($json.content_type_strategy) ? $json.content_type_strategy.join(' + ') : ($json.content_type_strategy || 'Brand Positioning & Values') }}\n- **Primary Objective**: {{ $json.primary_objective || 'Build Brand Awareness & Recognition' }}\n- **Target Platform**: {{ $json.platform || 'Facebook' }}\n\n## CONTENT TO PROCESS\n{{ $json.processed_content }}\n\n## CAMPAIGN REQUIREMENTS\n- **Posts needed**: {{ $json.numberOfPosts || $json.clientConfig.socialMedia.numberOfPosts || 1 }}\n- **Hook focus**: {{ $json.hook_focus || 'Hook' }}\n- **Call to action**: {{ $json.body.body.socialMedia.cta || 'Learn More' }}\n- **Target audience**: {{ $json.client_data.target_audience || 'General audience' }}\n- **Content type**: {{ $json.content_type || 'text_idea' }}\n\n## STRATEGIC EXECUTION BY OBJECTIVE\n\n### **{{ $json.primary_objective || 'Build Brand Awareness & Recognition' }}**\n\n{{\n$json.primary_objective === 'Build Brand Awareness & Recognition' ? \n'→ Focus on brand story, values, differentiators, memorable messaging\\n→ Tone: Authentic, distinctive, memorable\\n→ CTA: Follow, learn more, discover our story' :\n$json.primary_objective === 'Generate Leads & Drive Conversions' ?\n'→ Focus on benefits, social proof, urgency, clear value proposition\\n→ Tone: Persuasive, benefit-driven, action-oriented\\n→ CTA: Book demo, sign up, get started, claim offer' :\n$json.primary_objective === 'Educate & Inform Target Audience' ?\n'→ Focus on tutorials, insights, explanations, valuable information\\n→ Tone: Helpful, authoritative, educational\\n→ CTA: Learn more, download guide, read full article' :\n$json.primary_objective === 'Increase Engagement & Community Building' ?\n'→ Focus on questions, polls, discussions, community invitations\\n→ Tone: Conversational, inclusive, interactive\\n→ CTA: Comment, share your thoughts, join the discussion' :\n$json.primary_objective === 'Establish Thought Leadership & Authority' ?\n'→ Focus on industry insights, predictions, expert opinions, data\\n→ Tone: Authoritative, insightful, analytical\\n→ CTA: What\\'s your take, share your experience, follow for insights' :\n$json.primary_objective === 'Drive Website Traffic & Click-throughs' ?\n'→ Focus on teasers, partial information, compelling previews\\n→ Tone: Intriguing, benefit-focused, curiosity-driven\\n→ CTA: Read more, visit website, see full story' :\n$json.primary_objective === 'Boost Customer Retention & Loyalty' ?\n'→ Focus on appreciation, exclusive content, customer success, tips\\n→ Tone: Appreciative, supportive, value-adding\\n→ CTA: Thank you, try this tip, celebrate with us' :\n$json.primary_objective === 'Support & Nurture Existing Customers' ?\n'→ Focus on help, tips, troubleshooting, advanced features\\n→ Tone: Helpful, supportive, solution-oriented\\n→ CTA: Try this, need help, contact support' :\n$json.primary_objective === 'Attract Strategic Partnerships & Collaborations' ?\n'→ Focus on opportunities, mutual benefits, professional networking\\n→ Tone: Professional, opportunity-focused, collaborative\\n→ CTA: Let\\'s connect, explore partnership, reach out' :\n$json.primary_objective === 'Create Viral Content & Expand Reach' ?\n'→ Focus on trending topics, shareable moments, emotional triggers\\n→ Tone: Entertaining, relatable, share-worthy\\n→ CTA: Share this, tag someone, spread the word' :\n'→ Focus on the selected objective with appropriate tone and CTA'\n}}\n\n## CONTENT TYPE EXECUTION\n\n{{ Array.isArray($json.content_type_strategy) && $json.content_type_strategy.length > 1 ? \n'**HYBRID CONTENT APPROACH**: Blend these content types seamlessly:' : \n'**FOCUSED CONTENT APPROACH**: Execute this content type:' }}\n\n{{ Array.isArray($json.content_type_strategy) ? \n$json.content_type_strategy.join(', ') : \n($json.content_type_strategy || 'Brand Positioning & Values') }}\n\n## PLATFORM-SPECIFIC OPTIMIZATION\n\n**Facebook**: 40-250 characters optimal, community focus, 3 hashtags max, conversational tone\n**LinkedIn**: 150-300 words optimal, professional value, business insights, 3-5 industry hashtags  \n**X**: Under 280 characters, trending topics, viral potential, 1-2 hashtags max\n**Instagram**: Visual-first descriptions, lifestyle integration, aesthetic hashtags\n\n## TASK\n1. Read brand assets from Baserow table {{ $json.clientConfig.tables.brandAssets.id || '728' }}\n2. Create {{ $json.numberOfPosts || $json.clientConfig.socialMedia.numberOfPosts || 1 }} posts that strategically serve the \"{{ $json.primary_objective || 'Build Brand Awareness & Recognition' }}\" objective\n3. {{ Array.isArray($json.content_type_strategy) && $json.content_type_strategy.length > 1 ? \n'Blend the selected content types: ' + $json.content_type_strategy.join(' + ') : \n'Execute the \"' + ($json.content_type_strategy || 'Brand Positioning & Values') + '\" approach' }}\n4. Optimize for {{ $json.platform || 'Facebook' }} platform best practices\n5. Ensure all posts work together as a cohesive strategic campaign\n\nGenerate the strategically-optimized {{ $json.platform || 'Facebook' }} campaign now.","hasOutputParser":true,"options":{"systemMessage":"=# Strategic Social Media Campaign Specialist\n\nYou are an expert strategic social media marketing specialist with access to client brand databases. You create sophisticated, objective-driven campaigns that blend multiple content approaches to achieve specific business outcomes.\n\n## YOUR STRATEGIC CAPABILITIES\n✅ Read client-specific brand assets from Baserow databases\n✅ Create platform-optimized content using strategic frameworks\n✅ Generate multiple posts as cohesive strategic campaigns\n✅ Blend multiple content types for sophisticated messaging\n✅ Adapt to any number of posts (1-10+) with strategic campaign logic\n✅ Optimize for specific business objectives and target audiences\n\n## STRATEGIC FRAMEWORK MASTERY\n\nYou excel at executing **10 Primary Objectives**:\n- Build Brand Awareness & Recognition\n- Generate Leads & Drive Conversions  \n- Educate & Inform Target Audience\n- Increase Engagement & Community Building\n- Establish Thought Leadership & Authority\n- Drive Website Traffic & Click-throughs\n- Boost Customer Retention & Loyalty\n- Support & Nurture Existing Customers\n- Attract Strategic Partnerships & Collaborations\n- Create Viral Content & Expand Reach\n\nYou master **12 Content Strategies**:\n- Awareness & Positioning, Promotion & Sales, Engagement & Community Building\n- Retention & Customer Loyalty, Market & Trend Commentary, Partnership & B2B Networking\n- Educational & Value-First Marketing, Inspirational & Motivational Content\n- Behind-the-Scenes & Transparency, Crisis Communication & Reputation Management\n- Seasonal & Event-Driven Marketing, User-Generated & Social Proof Content\n\nYou blend **25+ Content Types** including:\n- Brand Positioning, Thought Leadership, Educational How-To, Product Advertisement\n- Special Offers, Community Building, Customer Success Stories, Industry Insights\n- Interactive Content, Behind-the-Scenes, Crisis Communication, and more\n\n## PLATFORM OPTIMIZATION EXPERTISE\n\n**Facebook**: 40-250 characters optimal, community-focused, visual storytelling, 3 hashtags max\n- Conversational tone, engagement-driven, story-based content\n- Strong hooks, community building, longer-form acceptable\n\n**LinkedIn**: 150-300 words optimal, professional value, business insights, 3-5 industry hashtags\n- Authoritative tone, thought leadership, B2B focus, networking value\n- Data-driven content, professional credibility, business outcomes\n\n**X (Twitter)**: Under 280 characters, trending awareness, viral potential, 1-2 hashtags max\n- Punchy tone, immediate value, shareability, conversation starters\n- News-style immediacy, trending topic integration, thread capability\n\n**Instagram**: Visual-first descriptions, lifestyle integration, aesthetic appeal\n- Inspirational tone, visual storytelling, community engagement, lifestyle focus\n\n## STRATEGIC CONTENT BLENDING\n\nWhen combining multiple content types:\n- **Single Type**: Deep, focused execution of one approach\n- **2 Types**: Seamless blending (e.g., \"Educational + Thought Leadership\" = Teaching with authority)\n- **3+ Types**: Either distribute across posts OR create rich, multi-layered individual posts\n- **Maintain Coherence**: All selected types must serve the primary objective\n- **Platform Adaptation**: Blend approaches while respecting platform best practices\n\n## CAMPAIGN STRATEGY FRAMEWORKS\n\n**1 Post**: Complete strategic message serving the primary objective\n**2 Posts**: Problem/opportunity identification → Solution/action with strategic CTA\n**3 Posts**: Awareness → Solution → Proof/urgency with strategic progression\n**4+ Posts**: Full strategic funnel with awareness, education, proof, and conversion elements\n\n## REQUIRED JSON OUTPUT FORMAT\n\nYou MUST return EXACTLY this structure for ALL platforms:\n\n```json\n{\n  \"success\": true,\n  \"platform\": \"Facebook|LinkedIn|X\",\n  \"campaign_posts\": [\n    {\n      \"post_number\": 1,\n      \"post\": \"COMPLETE OPTIMIZED POST CONTENT\",\n      \"hook\": \"STRATEGIC OPENING HOOK\",\n      \"cta\": \"OBJECTIVE-ALIGNED CALL TO ACTION\",\n      \"hashtags\": [\"hashtag1\", \"hashtag2\", \"hashtag3\"],\n      \"character_count\": 0,\n      \"word_count\": 0,\n      \"psychological_trigger\": \"Curiosity|Excitement|Trust|Urgency|Authority|Growth|Results\",\n      \"engagement_objective\": \"Question|Story|Statistic|Benefit Focused|Problem Focused|Thought Leadership|Social Proof\",\n      \"angle\": \"Awareness|Solution|Proof|Conversion|Education|Engagement\",\n      \"intent\": \"Clear business value proposition\",\n      \"visual_suggestion\": \"Instagram ONLY: Suggested visual content\",\n      \"community_element\": \"Instagram ONLY: Community engagement element\",\n      \"viral_potential\": \"X ONLY: Shareability and viral factors\",\n      \"thread_position\": \"X ONLY: Position in thread if applicable\"\n    }\n  ],\n  \"brand_assets_used\": [\"Asset Name 1\", \"Asset Name 2\"],\n  \"content_idea_id\": \"RECORD_ID\",\n  \"client_name\": \"CLIENT_NAME\",\n  \"total_posts_created\": NUMBER,\n  \"campaign_theme\": \"STRATEGIC_THEME_NAME\"\n}\n```\n\n## STRATEGIC SUCCESS CRITERIA\n\n✅ **Objective Achievement**: Every post serves the primary objective\n✅ **Content Type Integration**: Seamless blending of selected content approaches  \n✅ **Platform Optimization**: Respects platform best practices and audience expectations\n✅ **Campaign Coherence**: Posts work together as unified strategic campaign\n✅ **Brand Consistency**: Aligns with client brand assets and voice\n✅ **Audience Relevance**: Speaks directly to target audience needs and interests\n✅ **Measurable Outcomes**: Content supports trackable business goals\n\n## QUALITY STANDARDS\n\n- **Strategic Depth**: Go beyond surface-level content to create strategic value\n- **Professional Excellence**: Enterprise-quality content that reflects marketing sophistication  \n- **Audience Psychology**: Understand and leverage audience motivations and triggers\n- **Competitive Differentiation**: Create content that stands out in crowded feeds\n- **Brand Amplification**: Enhance and amplify the client's brand positioning\n- **Results Orientation**: Focus on content that drives measurable business outcomes\n\n**CRITICAL**: Output ONLY valid JSON. Start with { and end with }. No explanations before or after. Create strategically sophisticated content that achieves business objectives through expert content type blending and platform optimization."}},"type":"@n8n/n8n-nodes-langchain.agent","typeVersion":2,"position":[1212,5140],"id":"da6945d5-b9f1-4b85-b4d7-0b0ad7709e89","name":"Facebook AI Agent"},{"parameters":{"schemaType":"manual","inputSchema":"{\n  \"success\": {\n    \"type\": \"boolean\",\n    \"description\": \"Whether content generation was successful\"\n  },\n  \"platform\": {\n    \"type\": \"string\", \n    \"description\": \"Platform name - Facebook, LinkedIn, Instagram, or X\"\n  },\n  \"campaign_posts\": {\n    \"type\": \"array\",\n    \"description\": \"Array of campaign posts for any platform\",\n    \"items\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"post_number\": {\n          \"type\": \"number\",\n          \"description\": \"Post number in campaign sequence\"\n        },\n        \"post\": {\n          \"type\": \"string\",\n          \"description\": \"Complete post content for the platform\"\n        },\n        \"hook\": {\n          \"type\": \"string\",\n          \"description\": \"Opening attention-grabbing line\"\n        },\n        \"cta\": {\n          \"type\": \"string\",\n          \"description\": \"Call to action\"\n        },\n        \"hashtags\": {\n          \"type\": \"array\",\n          \"description\": \"Array of hashtags without # symbol\"\n        },\n        \"character_count\": {\n          \"type\": \"number\",\n          \"description\": \"Character count for this post\"\n        },\n        \"word_count\": {\n          \"type\": \"number\",\n          \"description\": \"Word count for this post\"\n        },\n        \"psychological_trigger\": {\n          \"type\": \"string\",\n          \"description\": \"Emotional trigger used\"\n        },\n        \"engagement_objective\": {\n          \"type\": \"string\",\n          \"description\": \"Engagement tactic used\"\n        },\n        \"angle\": {\n          \"type\": \"string\",\n          \"description\": \"Focus of this post in campaign\"\n        },\n        \"intent\": {\n          \"type\": \"string\",\n          \"description\": \"LinkedIn only: Business value proposition\"\n        },\n        \"visual_suggestion\": {\n          \"type\": \"string\",\n          \"description\": \"Instagram only: Suggested visual style or content\"\n        },\n        \"community_element\": {\n          \"type\": \"string\",\n          \"description\": \"Instagram only: Community engagement element\"\n        },\n        \"viral_potential\": {\n          \"type\": \"string\",\n          \"description\": \"X only: Viral shareability factor\"\n        },\n        \"thread_position\": {\n          \"type\": \"string\",\n          \"description\": \"X only: Position in thread (standalone, 1/4, etc.)\"\n        }\n      }\n    }\n  },\n  \"brand_assets_used\": {\n    \"type\": \"array\",\n    \"description\": \"Brand assets used across campaign\"\n  },\n  \"content_idea_id\": {\n    \"type\": \"string\",\n    \"description\": \"Original content idea ID\"\n  },\n  \"client_name\": {\n    \"type\": \"string\",\n    \"description\": \"Client name\"\n  },\n  \"total_posts_created\": {\n    \"type\": \"number\",\n    \"description\": \"Total number of posts in campaign\"\n  },\n  \"campaign_theme\": {\n    \"type\": \"string\",\n    \"description\": \"Overall campaign theme\"\n  }\n}"},"type":"@n8n/n8n-nodes-langchain.outputParserStructured","typeVersion":1.2,"position":[2120,6420],"id":"87447396-9dc0-4d38-9533-4f0aa942325b","name":"Script Output Parser"},{"parameters":{"promptType":"define","text":"=Please create a {{ $json.numberOfPosts || $json.clientConfig.socialMedia.numberOfPosts || 1 }}-post strategic {{ $json.platform || 'Facebook' }} campaign for {{ $json.clientConfig.client.name || $json.client_data.client_name || 'Unknown Client' }}.\n\n## STRATEGIC FRAMEWORK\n- **Content Strategy**: {{ $json.content_strategy || 'Awareness & Positioning' }}\n- **Content Types**: {{ Array.isArray($json.content_type_strategy) ? $json.content_type_strategy.join(' + ') : ($json.content_type_strategy || 'Brand Positioning & Values') }}\n- **Primary Objective**: {{ $json.primary_objective || 'Build Brand Awareness & Recognition' }}\n- **Target Platform**: {{ $json.platform || 'Facebook' }}\n\n## CONTENT TO PROCESS\n{{ $json.processed_content }}\n\n## CAMPAIGN REQUIREMENTS\n- **Posts needed**: {{ $json.numberOfPosts || $json.clientConfig.socialMedia.numberOfPosts || 1 }}\n- **Hook focus**: {{ $json.hook_focus || 'Hook' }}\n- **Call to action**: {{ $json.clientConfig.socialMedia.cta || 'Learn More' }}\n- **Target audience**: {{ $json.client_data.target_audience || 'General audience' }}\n- **Content type**: {{ $json.content_type || 'text_idea' }}\n\n## STRATEGIC EXECUTION BY OBJECTIVE\n\n### **{{ $json.primary_objective || 'Build Brand Awareness & Recognition' }}**\n\n{{\n$json.primary_objective === 'Build Brand Awareness & Recognition' ? \n'→ Focus on brand story, values, differentiators, memorable messaging\\n→ Tone: Authentic, distinctive, memorable\\n→ CTA: Follow, learn more, discover our story' :\n$json.primary_objective === 'Generate Leads & Drive Conversions' ?\n'→ Focus on benefits, social proof, urgency, clear value proposition\\n→ Tone: Persuasive, benefit-driven, action-oriented\\n→ CTA: Book demo, sign up, get started, claim offer' :\n$json.primary_objective === 'Educate & Inform Target Audience' ?\n'→ Focus on tutorials, insights, explanations, valuable information\\n→ Tone: Helpful, authoritative, educational\\n→ CTA: Learn more, download guide, read full article' :\n$json.primary_objective === 'Increase Engagement & Community Building' ?\n'→ Focus on questions, polls, discussions, community invitations\\n→ Tone: Conversational, inclusive, interactive\\n→ CTA: Comment, share your thoughts, join the discussion' :\n$json.primary_objective === 'Establish Thought Leadership & Authority' ?\n'→ Focus on industry insights, predictions, expert opinions, data\\n→ Tone: Authoritative, insightful, analytical\\n→ CTA: What\\'s your take, share your experience, follow for insights' :\n$json.primary_objective === 'Drive Website Traffic & Click-throughs' ?\n'→ Focus on teasers, partial information, compelling previews\\n→ Tone: Intriguing, benefit-focused, curiosity-driven\\n→ CTA: Read more, visit website, see full story' :\n$json.primary_objective === 'Boost Customer Retention & Loyalty' ?\n'→ Focus on appreciation, exclusive content, customer success, tips\\n→ Tone: Appreciative, supportive, value-adding\\n→ CTA: Thank you, try this tip, celebrate with us' :\n$json.primary_objective === 'Support & Nurture Existing Customers' ?\n'→ Focus on help, tips, troubleshooting, advanced features\\n→ Tone: Helpful, supportive, solution-oriented\\n→ CTA: Try this, need help, contact support' :\n$json.primary_objective === 'Attract Strategic Partnerships & Collaborations' ?\n'→ Focus on opportunities, mutual benefits, professional networking\\n→ Tone: Professional, opportunity-focused, collaborative\\n→ CTA: Let\\'s connect, explore partnership, reach out' :\n$json.primary_objective === 'Create Viral Content & Expand Reach' ?\n'→ Focus on trending topics, shareable moments, emotional triggers\\n→ Tone: Entertaining, relatable, share-worthy\\n→ CTA: Share this, tag someone, spread the word' :\n'→ Focus on the selected objective with appropriate tone and CTA'\n}}\n\n## CONTENT TYPE EXECUTION\n\n{{ Array.isArray($json.content_type_strategy) && $json.content_type_strategy.length > 1 ? \n'**HYBRID CONTENT APPROACH**: Blend these content types seamlessly:' : \n'**FOCUSED CONTENT APPROACH**: Execute this content type:' }}\n\n{{ Array.isArray($json.content_type_strategy) ? \n$json.content_type_strategy.join(', ') : \n($json.content_type_strategy || 'Brand Positioning & Values') }}\n\n## PLATFORM-SPECIFIC OPTIMIZATION\n\n**Facebook**: 40-250 characters optimal, community focus, 3 hashtags max, conversational tone\n**LinkedIn**: 150-300 words optimal, professional value, business insights, 3-5 industry hashtags  \n**X**: Under 280 characters, trending topics, viral potential, 1-2 hashtags max\n**Instagram**: Visual-first descriptions, lifestyle integration, aesthetic hashtags\n\n## TASK\n1. Read brand assets from Baserow table {{ $json.clientConfig.tables.brandAssets.id || '728' }}\n2. Create {{ $json.numberOfPosts || $json.clientConfig.socialMedia.numberOfPosts || 1 }} posts that strategically serve the \"{{ $json.primary_objective || 'Build Brand Awareness & Recognition' }}\" objective\n3. {{ Array.isArray($json.content_type_strategy) && $json.content_type_strategy.length > 1 ? \n'Blend the selected content types: ' + $json.content_type_strategy.join(' + ') : \n'Execute the \"' + ($json.content_type_strategy || 'Brand Positioning & Values') + '\" approach' }}\n4. Optimize for {{ $json.platform || 'Facebook' }} platform best practices\n5. Ensure all posts work together as a cohesive strategic campaign\n\nGenerate the strategically-optimized {{ $json.platform || 'Facebook' }} campaign now.","hasOutputParser":true,"options":{"systemMessage":"=# Strategic Social Media Campaign Specialist\n\nYou are an expert strategic social media marketing specialist with access to client brand databases. You create sophisticated, objective-driven campaigns that blend multiple content approaches to achieve specific business outcomes.\n\n## YOUR STRATEGIC CAPABILITIES\n✅ Read client-specific brand assets from Baserow databases\n✅ Create platform-optimized content using strategic frameworks\n✅ Generate multiple posts as cohesive strategic campaigns\n✅ Blend multiple content types for sophisticated messaging\n✅ Adapt to any number of posts (1-10+) with strategic campaign logic\n✅ Optimize for specific business objectives and target audiences\n\n## STRATEGIC FRAMEWORK MASTERY\n\nYou excel at executing **10 Primary Objectives**:\n- Build Brand Awareness & Recognition\n- Generate Leads & Drive Conversions  \n- Educate & Inform Target Audience\n- Increase Engagement & Community Building\n- Establish Thought Leadership & Authority\n- Drive Website Traffic & Click-throughs\n- Boost Customer Retention & Loyalty\n- Support & Nurture Existing Customers\n- Attract Strategic Partnerships & Collaborations\n- Create Viral Content & Expand Reach\n\nYou master **12 Content Strategies**:\n- Awareness & Positioning, Promotion & Sales, Engagement & Community Building\n- Retention & Customer Loyalty, Market & Trend Commentary, Partnership & B2B Networking\n- Educational & Value-First Marketing, Inspirational & Motivational Content\n- Behind-the-Scenes & Transparency, Crisis Communication & Reputation Management\n- Seasonal & Event-Driven Marketing, User-Generated & Social Proof Content\n\nYou blend **25+ Content Types** including:\n- Brand Positioning, Thought Leadership, Educational How-To, Product Advertisement\n- Special Offers, Community Building, Customer Success Stories, Industry Insights\n- Interactive Content, Behind-the-Scenes, Crisis Communication, and more\n\n## PLATFORM OPTIMIZATION EXPERTISE\n\n**Facebook**: 40-250 characters optimal, community-focused, visual storytelling, 3 hashtags max\n- Conversational tone, engagement-driven, story-based content\n- Strong hooks, community building, longer-form acceptable\n\n**LinkedIn**: 150-300 words optimal, professional value, business insights, 3-5 industry hashtags\n- Authoritative tone, thought leadership, B2B focus, networking value\n- Data-driven content, professional credibility, business outcomes\n\n**X (Twitter)**: Under 280 characters, trending awareness, viral potential, 1-2 hashtags max\n- Punchy tone, immediate value, shareability, conversation starters\n- News-style immediacy, trending topic integration, thread capability\n\n**Instagram**: Visual-first descriptions, lifestyle integration, aesthetic appeal\n- Inspirational tone, visual storytelling, community engagement, lifestyle focus\n\n## STRATEGIC CONTENT BLENDING\n\nWhen combining multiple content types:\n- **Single Type**: Deep, focused execution of one approach\n- **2 Types**: Seamless blending (e.g., \"Educational + Thought Leadership\" = Teaching with authority)\n- **3+ Types**: Either distribute across posts OR create rich, multi-layered individual posts\n- **Maintain Coherence**: All selected types must serve the primary objective\n- **Platform Adaptation**: Blend approaches while respecting platform best practices\n\n## CAMPAIGN STRATEGY FRAMEWORKS\n\n**1 Post**: Complete strategic message serving the primary objective\n**2 Posts**: Problem/opportunity identification → Solution/action with strategic CTA\n**3 Posts**: Awareness → Solution → Proof/urgency with strategic progression\n**4+ Posts**: Full strategic funnel with awareness, education, proof, and conversion elements\n\n## REQUIRED JSON OUTPUT FORMAT\n\nYou MUST return EXACTLY this structure for ALL platforms:\n\n```json\n{\n  \"success\": true,\n  \"platform\": \"Facebook|LinkedIn|X\",\n  \"campaign_posts\": [\n    {\n      \"post_number\": 1,\n      \"post\": \"COMPLETE OPTIMIZED POST CONTENT\",\n      \"hook\": \"STRATEGIC OPENING HOOK\",\n      \"cta\": \"OBJECTIVE-ALIGNED CALL TO ACTION\",\n      \"hashtags\": [\"hashtag1\", \"hashtag2\", \"hashtag3\"],\n      \"character_count\": 0,\n      \"word_count\": 0,\n      \"psychological_trigger\": \"Curiosity|Excitement|Trust|Urgency|Authority|Growth|Results\",\n      \"engagement_objective\": \"Question|Story|Statistic|Benefit Focused|Problem Focused|Thought Leadership|Social Proof\",\n      \"angle\": \"Awareness|Solution|Proof|Conversion|Education|Engagement\",\n      \"intent\": \"Clear business value proposition\",\n      \"visual_suggestion\": \"Instagram ONLY: Suggested visual content\",\n      \"community_element\": \"Instagram ONLY: Community engagement element\",\n      \"viral_potential\": \"X ONLY: Shareability and viral factors\",\n      \"thread_position\": \"X ONLY: Position in thread if applicable\"\n    }\n  ],\n  \"brand_assets_used\": [\"Asset Name 1\", \"Asset Name 2\"],\n  \"content_idea_id\": \"RECORD_ID\",\n  \"client_name\": \"CLIENT_NAME\",\n  \"total_posts_created\": NUMBER,\n  \"campaign_theme\": \"STRATEGIC_THEME_NAME\"\n}\n```\n\n## STRATEGIC SUCCESS CRITERIA\n\n✅ **Objective Achievement**: Every post serves the primary objective\n✅ **Content Type Integration**: Seamless blending of selected content approaches  \n✅ **Platform Optimization**: Respects platform best practices and audience expectations\n✅ **Campaign Coherence**: Posts work together as unified strategic campaign\n✅ **Brand Consistency**: Aligns with client brand assets and voice\n✅ **Audience Relevance**: Speaks directly to target audience needs and interests\n✅ **Measurable Outcomes**: Content supports trackable business goals\n\n## QUALITY STANDARDS\n\n- **Strategic Depth**: Go beyond surface-level content to create strategic value\n- **Professional Excellence**: Enterprise-quality content that reflects marketing sophistication  \n- **Audience Psychology**: Understand and leverage audience motivations and triggers\n- **Competitive Differentiation**: Create content that stands out in crowded feeds\n- **Brand Amplification**: Enhance and amplify the client's brand positioning\n- **Results Orientation**: Focus on content that drives measurable business outcomes\n\n**CRITICAL**: Output ONLY valid JSON. Start with { and end with }. No explanations before or after. Create strategically sophisticated content that achieves business objectives through expert content type blending and platform optimization."}},"type":"@n8n/n8n-nodes-langchain.agent","typeVersion":2,"position":[1212,5940],"id":"62e8676d-a192-43b5-bb6a-237f5d7eddef","name":"X AI Agent"},{"parameters":{"promptType":"define","text":"=Please create a {{ $json.numberOfPosts || $json.clientConfig.socialMedia.numberOfPosts || 1 }}-post strategic {{ $json.platform || 'Facebook' }} campaign for {{ $json.clientConfig.client.name || $json.client_data.client_name || 'Unknown Client' }}.\n\n## STRATEGIC FRAMEWORK\n- **Content Strategy**: {{ $json.content_strategy || 'Awareness & Positioning' }}\n- **Content Types**: {{ Array.isArray($json.content_type_strategy) ? $json.content_type_strategy.join(' + ') : ($json.content_type_strategy || 'Brand Positioning & Values') }}\n- **Primary Objective**: {{ $json.primary_objective || 'Build Brand Awareness & Recognition' }}\n- **Target Platform**: {{ $json.platform || 'Facebook' }}\n\n## CONTENT TO PROCESS\n{{ $json.processed_content }}\n\n## CAMPAIGN REQUIREMENTS\n- **Posts needed**: {{ $json.numberOfPosts || $json.clientConfig.socialMedia.numberOfPosts || 1 }}\n- **Hook focus**: {{ $json.hook_focus || 'Hook' }}\n- **Call to action**: {{ $json.clientConfig.socialMedia.cta || 'Learn More' }}\n- **Target audience**: {{ $json.client_data.target_audience || 'General audience' }}\n- **Content type**: {{ $json.content_type || 'text_idea' }}\n\n## STRATEGIC EXECUTION BY OBJECTIVE\n\n### **{{ $json.primary_objective || 'Build Brand Awareness & Recognition' }}**\n\n{{\n$json.primary_objective === 'Build Brand Awareness & Recognition' ? \n'→ Focus on brand story, values, differentiators, memorable messaging\\n→ Tone: Authentic, distinctive, memorable\\n→ CTA: Follow, learn more, discover our story' :\n$json.primary_objective === 'Generate Leads & Drive Conversions' ?\n'→ Focus on benefits, social proof, urgency, clear value proposition\\n→ Tone: Persuasive, benefit-driven, action-oriented\\n→ CTA: Book demo, sign up, get started, claim offer' :\n$json.primary_objective === 'Educate & Inform Target Audience' ?\n'→ Focus on tutorials, insights, explanations, valuable information\\n→ Tone: Helpful, authoritative, educational\\n→ CTA: Learn more, download guide, read full article' :\n$json.primary_objective === 'Increase Engagement & Community Building' ?\n'→ Focus on questions, polls, discussions, community invitations\\n→ Tone: Conversational, inclusive, interactive\\n→ CTA: Comment, share your thoughts, join the discussion' :\n$json.primary_objective === 'Establish Thought Leadership & Authority' ?\n'→ Focus on industry insights, predictions, expert opinions, data\\n→ Tone: Authoritative, insightful, analytical\\n→ CTA: What\\'s your take, share your experience, follow for insights' :\n$json.primary_objective === 'Drive Website Traffic & Click-throughs' ?\n'→ Focus on teasers, partial information, compelling previews\\n→ Tone: Intriguing, benefit-focused, curiosity-driven\\n→ CTA: Read more, visit website, see full story' :\n$json.primary_objective === 'Boost Customer Retention & Loyalty' ?\n'→ Focus on appreciation, exclusive content, customer success, tips\\n→ Tone: Appreciative, supportive, value-adding\\n→ CTA: Thank you, try this tip, celebrate with us' :\n$json.primary_objective === 'Support & Nurture Existing Customers' ?\n'→ Focus on help, tips, troubleshooting, advanced features\\n→ Tone: Helpful, supportive, solution-oriented\\n→ CTA: Try this, need help, contact support' :\n$json.primary_objective === 'Attract Strategic Partnerships & Collaborations' ?\n'→ Focus on opportunities, mutual benefits, professional networking\\n→ Tone: Professional, opportunity-focused, collaborative\\n→ CTA: Let\\'s connect, explore partnership, reach out' :\n$json.primary_objective === 'Create Viral Content & Expand Reach' ?\n'→ Focus on trending topics, shareable moments, emotional triggers\\n→ Tone: Entertaining, relatable, share-worthy\\n→ CTA: Share this, tag someone, spread the word' :\n'→ Focus on the selected objective with appropriate tone and CTA'\n}}\n\n## CONTENT TYPE EXECUTION\n\n{{ Array.isArray($json.content_type_strategy) && $json.content_type_strategy.length > 1 ? \n'**HYBRID CONTENT APPROACH**: Blend these content types seamlessly:' : \n'**FOCUSED CONTENT APPROACH**: Execute this content type:' }}\n\n{{ Array.isArray($json.content_type_strategy) ? \n$json.content_type_strategy.join(', ') : \n($json.content_type_strategy || 'Brand Positioning & Values') }}\n\n## PLATFORM-SPECIFIC OPTIMIZATION\n\n**Facebook**: 40-250 characters optimal, community focus, 3 hashtags max, conversational tone\n**LinkedIn**: 150-300 words optimal, professional value, business insights, 3-5 industry hashtags  \n**X**: Under 280 characters, trending topics, viral potential, 1-2 hashtags max\n**Instagram**: Visual-first descriptions, lifestyle integration, aesthetic hashtags\n\n## TASK\n1. Read brand assets from Baserow table {{ $json.clientConfig.tables.brandAssets.id || '728' }}\n2. Create {{ $json.numberOfPosts || $json.clientConfig.socialMedia.numberOfPosts || 1 }} posts that strategically serve the \"{{ $json.primary_objective || 'Build Brand Awareness & Recognition' }}\" objective\n3. {{ Array.isArray($json.content_type_strategy) && $json.content_type_strategy.length > 1 ? \n'Blend the selected content types: ' + $json.content_type_strategy.join(' + ') : \n'Execute the \"' + ($json.content_type_strategy || 'Brand Positioning & Values') + '\" approach' }}\n4. Optimize for {{ $json.platform || 'Facebook' }} platform best practices\n5. Ensure all posts work together as a cohesive strategic campaign\n\nGenerate the strategically-optimized {{ $json.platform || 'Facebook' }} campaign now.","hasOutputParser":true,"options":{"systemMessage":"=# Strategic Social Media Campaign Specialist\n\nYou are an expert strategic social media marketing specialist with access to client brand databases. You create sophisticated, objective-driven campaigns that blend multiple content approaches to achieve specific business outcomes.\n\n## YOUR STRATEGIC CAPABILITIES\n✅ Read client-specific brand assets from Baserow databases\n✅ Create platform-optimized content using strategic frameworks\n✅ Generate multiple posts as cohesive strategic campaigns\n✅ Blend multiple content types for sophisticated messaging\n✅ Adapt to any number of posts (1-10+) with strategic campaign logic\n✅ Optimize for specific business objectives and target audiences\n\n## STRATEGIC FRAMEWORK MASTERY\n\nYou excel at executing **10 Primary Objectives**:\n- Build Brand Awareness & Recognition\n- Generate Leads & Drive Conversions  \n- Educate & Inform Target Audience\n- Increase Engagement & Community Building\n- Establish Thought Leadership & Authority\n- Drive Website Traffic & Click-throughs\n- Boost Customer Retention & Loyalty\n- Support & Nurture Existing Customers\n- Attract Strategic Partnerships & Collaborations\n- Create Viral Content & Expand Reach\n\nYou master **12 Content Strategies**:\n- Awareness & Positioning, Promotion & Sales, Engagement & Community Building\n- Retention & Customer Loyalty, Market & Trend Commentary, Partnership & B2B Networking\n- Educational & Value-First Marketing, Inspirational & Motivational Content\n- Behind-the-Scenes & Transparency, Crisis Communication & Reputation Management\n- Seasonal & Event-Driven Marketing, User-Generated & Social Proof Content\n\nYou blend **25+ Content Types** including:\n- Brand Positioning, Thought Leadership, Educational How-To, Product Advertisement\n- Special Offers, Community Building, Customer Success Stories, Industry Insights\n- Interactive Content, Behind-the-Scenes, Crisis Communication, and more\n\n## PLATFORM OPTIMIZATION EXPERTISE\n\n**Facebook**: 40-250 characters optimal, community-focused, visual storytelling, 3 hashtags max\n- Conversational tone, engagement-driven, story-based content\n- Strong hooks, community building, longer-form acceptable\n\n**LinkedIn**: 150-300 words optimal, professional value, business insights, 3-5 industry hashtags\n- Authoritative tone, thought leadership, B2B focus, networking value\n- Data-driven content, professional credibility, business outcomes\n\n**X (Twitter)**: Under 280 characters, trending awareness, viral potential, 1-2 hashtags max\n- Punchy tone, immediate value, shareability, conversation starters\n- News-style immediacy, trending topic integration, thread capability\n\n**Instagram**: Visual-first descriptions, lifestyle integration, aesthetic appeal\n- Inspirational tone, visual storytelling, community engagement, lifestyle focus\n\n## STRATEGIC CONTENT BLENDING\n\nWhen combining multiple content types:\n- **Single Type**: Deep, focused execution of one approach\n- **2 Types**: Seamless blending (e.g., \"Educational + Thought Leadership\" = Teaching with authority)\n- **3+ Types**: Either distribute across posts OR create rich, multi-layered individual posts\n- **Maintain Coherence**: All selected types must serve the primary objective\n- **Platform Adaptation**: Blend approaches while respecting platform best practices\n\n## CAMPAIGN STRATEGY FRAMEWORKS\n\n**1 Post**: Complete strategic message serving the primary objective\n**2 Posts**: Problem/opportunity identification → Solution/action with strategic CTA\n**3 Posts**: Awareness → Solution → Proof/urgency with strategic progression\n**4+ Posts**: Full strategic funnel with awareness, education, proof, and conversion elements\n\n## REQUIRED JSON OUTPUT FORMAT\n\nYou MUST return EXACTLY this structure for ALL platforms:\n\n```json\n{\n  \"success\": true,\n  \"platform\": \"Facebook|LinkedIn|X\",\n  \"campaign_posts\": [\n    {\n      \"post_number\": 1,\n      \"post\": \"COMPLETE OPTIMIZED POST CONTENT\",\n      \"hook\": \"STRATEGIC OPENING HOOK\",\n      \"cta\": \"OBJECTIVE-ALIGNED CALL TO ACTION\",\n      \"hashtags\": [\"hashtag1\", \"hashtag2\", \"hashtag3\"],\n      \"character_count\": 0,\n      \"word_count\": 0,\n      \"psychological_trigger\": \"Curiosity|Excitement|Trust|Urgency|Authority|Growth|Results\",\n      \"engagement_objective\": \"Question|Story|Statistic|Benefit Focused|Problem Focused|Thought Leadership|Social Proof\",\n      \"angle\": \"Awareness|Solution|Proof|Conversion|Education|Engagement\",\n      \"intent\": \"Clear business value proposition\",\n      \"visual_suggestion\": \"Instagram ONLY: Suggested visual content\",\n      \"community_element\": \"Instagram ONLY: Community engagement element\",\n      \"viral_potential\": \"X ONLY: Shareability and viral factors\",\n      \"thread_position\": \"X ONLY: Position in thread if applicable\"\n    }\n  ],\n  \"brand_assets_used\": [\"Asset Name 1\", \"Asset Name 2\"],\n  \"content_idea_id\": \"RECORD_ID\",\n  \"client_name\": \"CLIENT_NAME\",\n  \"total_posts_created\": NUMBER,\n  \"campaign_theme\": \"STRATEGIC_THEME_NAME\"\n}\n```\n\n## STRATEGIC SUCCESS CRITERIA\n\n✅ **Objective Achievement**: Every post serves the primary objective\n✅ **Content Type Integration**: Seamless blending of selected content approaches  \n✅ **Platform Optimization**: Respects platform best practices and audience expectations\n✅ **Campaign Coherence**: Posts work together as unified strategic campaign\n✅ **Brand Consistency**: Aligns with client brand assets and voice\n✅ **Audience Relevance**: Speaks directly to target audience needs and interests\n✅ **Measurable Outcomes**: Content supports trackable business goals\n\n## QUALITY STANDARDS\n\n- **Strategic Depth**: Go beyond surface-level content to create strategic value\n- **Professional Excellence**: Enterprise-quality content that reflects marketing sophistication  \n- **Audience Psychology**: Understand and leverage audience motivations and triggers\n- **Competitive Differentiation**: Create content that stands out in crowded feeds\n- **Brand Amplification**: Enhance and amplify the client's brand positioning\n- **Results Orientation**: Focus on content that drives measurable business outcomes\n\n**CRITICAL**: Output ONLY valid JSON. Start with { and end with }. No explanations before or after. Create strategically sophisticated content that achieves business objectives through expert content type blending and platform optimization."}},"type":"@n8n/n8n-nodes-langchain.agent","typeVersion":2,"position":[1212,5540],"id":"b5a4a452-c8cd-40ab-9ae3-22f77c0bcfc8","name":"Instagram AI Agent"},{"parameters":{"method":"POST","url":"=https://baserow.aiautomata.co.za/api/database/rows/table/{{ $json.storage_config.table_id }}/","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Authorization","value":"=Token {{ $('Merge Data').first().json.clientConfig.baserow.token }}"},{"name":"Content-Type","value":"application/json"},{"name":"Accept","value":"application/json"}]},"sendBody":true,"specifyBody":"json","jsonBody":"={{ $json.baserow_record }}","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[2280,5640],"id":"c79ee7a9-817c-4766-9d34-f707b1bb0255","name":"Store Social Media Content"},{"parameters":{"jsCode":"// UNIVERSAL DYNAMIC MAPPER - UPDATED FOR NEW FIELD NAMES\n// Gets the platform dynamically from AI output and uses new field structure\n\nconst payload = $json;\n\nconsole.log('=== UNIVERSAL DYNAMIC MAPPER START ===');\n\n// Validate we have complete merged data\nif (!payload.field_structure || !payload.output || !payload.clientConfig) {\n  throw new Error('Missing required data: field_structure, output, or clientConfig');\n}\n\nconst fieldStructure = payload.field_structure;\nconst aiOutput = payload.output;\nconst clientConfig = payload.clientConfig;\n\n// GET PLATFORM DYNAMICALLY from AI output\nconst platformName = aiOutput.platform || payload.platform || 'Facebook';\n\nconsole.log(`Platform: ${platformName}`);\nconsole.log(`Client: ${clientConfig.client.name}`);\nconsole.log(`Table ID: ${clientConfig.tables.socialMediaContent.id}`);\nconsole.log(`AI Posts: ${aiOutput.campaign_posts.length}`);\n\n// Create field mapping from field names to IDs\nconst fieldMapping = {};\n\n// Map each field by name - UPDATED with new field names\nfor (const field of fieldStructure) {\n  switch (field.name) {\n    case 'Platform':\n      fieldMapping.platform = field.id;\n      break;\n    case 'Post':\n      fieldMapping.post_content = field.id;\n      break;\n    case 'Hook':\n      fieldMapping.hook = field.id;\n      break;\n    case 'CTA':\n      fieldMapping.cta = field.id;\n      break;\n    case 'Hashtags':\n      fieldMapping.hashtags = field.id;\n      break;\n    case 'Character Count':\n      fieldMapping.character_count = field.id;\n      break;\n    case 'Content Theme':\n      fieldMapping.campaign_theme = field.id;\n      break;\n    case 'Status':\n      fieldMapping.status = field.id;\n      break;\n    case 'Content Type':\n      fieldMapping.content_type = field.id;\n      break;\n    case 'Content Idea':\n      fieldMapping.content_idea_link = field.id;\n      break;\n    case 'Comments':\n      fieldMapping.comments = field.id;\n      break;\n    case 'Psychological Trigger (7167)':  // Updated with field ID reference\n      fieldMapping.psychological_trigger = field.id;\n      break;\n    case 'Engagement Objective (7168)':   // Updated with field ID reference\n      fieldMapping.engagement_objective = field.id;\n      break;\n    case 'Angle (6925)':                  // NEW - Added angle mapping\n      fieldMapping.angle = field.id;\n      break;\n    case 'Intent (6926)':                 // NEW - Added intent mapping\n      fieldMapping.intent = field.id;\n      break;\n    // Alternative field name patterns (in case field names don't include IDs)\n    case 'Psychological Trigger':\n      fieldMapping.psychological_trigger = field.id;\n      break;\n    case 'Engagement Objective':\n      fieldMapping.engagement_objective = field.id;\n      break;\n    case 'Angle':\n      fieldMapping.angle = field.id;\n      break;\n    case 'Intent':\n      fieldMapping.intent = field.id;\n      break;\n  }\n}\n\nconsole.log(`Fields mapped: ${Object.keys(fieldMapping).length}`);\nconsole.log('Available field mappings:', Object.keys(fieldMapping));\n\n// Process each campaign post into separate Baserow records\nconst results = [];\n\nfor (let i = 0; i < aiOutput.campaign_posts.length; i++) {\n  const post = aiOutput.campaign_posts[i];\n  \n  // Create Baserow record with proper field IDs\n  const baserowRecord = {};\n  \n  // Helper function to safely map fields\n  const mapField = (mappingKey, value) => {\n    const fieldId = fieldMapping[mappingKey];\n    if (fieldId && value !== undefined && value !== null) {\n      baserowRecord[`field_${fieldId}`] = value;\n      console.log(`✅ Mapped ${mappingKey}: ${value}`);\n      return true;\n    }\n    if (!fieldId) {\n      console.log(`⚠️ Field not available: ${mappingKey}`);\n    } else {\n      console.log(`⚠️ No value for: ${mappingKey}`);\n    }\n    return false;\n  };\n  \n  // Map post content fields - USE DYNAMIC PLATFORM\n  mapField('platform', platformName);\n  mapField('post_content', post.post);\n  mapField('hook', post.hook);\n  mapField('cta', post.cta);\n  mapField('hashtags', Array.isArray(post.hashtags) ? post.hashtags.join(', ') : post.hashtags);\n  mapField('character_count', post.character_count);\n  \n  // Map campaign fields\n  mapField('campaign_theme', aiOutput.campaign_theme);\n  mapField('status', 'In Review');\n  mapField('content_type', 'Copywrite');\n  \n  // UPDATED: Map NEW psychological and engagement fields with ACTUAL AI values\n  mapField('psychological_trigger', post.psychological_trigger);  // ✅ Uses actual AI value\n  mapField('engagement_objective', post.engagement_objective);    // ✅ Uses actual AI value\n  mapField('angle', post.angle);                                  // ✅ NEW - Uses actual AI value  \n  mapField('intent', post.intent);                                // ✅ NEW - Uses actual AI value\n  \n  // UPDATED: Map comments with NEW field names\n  const commentParts = [\n    `AI Generated - ${platformName} Campaign: ${aiOutput.campaign_theme}`,\n    `Post ${post.post_number}/${aiOutput.total_posts_created}`,\n    `Trigger: ${post.psychological_trigger || 'N/A'}`,           // ✅ Updated field name\n    `Objective: ${post.engagement_objective || 'N/A'}`,          // ✅ Updated field name\n    `Angle: ${post.angle || 'N/A'}`,                             // ✅ NEW field\n    `Intent: ${post.intent || 'N/A'}`                            // ✅ NEW field\n  ];\n  \n  mapField('comments', commentParts.join(' | '));\n  \n  // Link to original content idea\n  if (fieldMapping.content_idea_link && clientConfig.recordId) {\n    baserowRecord[`field_${fieldMapping.content_idea_link}`] = [parseInt(clientConfig.recordId)];\n  }\n  \n  const result = {\n    output: aiOutput,\n    baserow_record: baserowRecord,\n    storage_config: {\n      database_id: clientConfig.baseId,\n      table_id: clientConfig.tables.socialMediaContent.id,\n      method: \"create_record\",\n      token: clientConfig.baserow.token\n    },\n    mapping_successful: true,\n    ready_for_storage: true,\n    debug_info: {\n      dynamic_mapping_completed: true,\n      platform: platformName,\n      table_id: clientConfig.tables.socialMediaContent.id,\n      client_name: clientConfig.client.name,\n      current_post_number: post.post_number,\n      fields_mapped: Object.keys(baserowRecord).length,\n      total_fields_available: fieldStructure.length,\n      storage_table_id: clientConfig.tables.socialMediaContent.id,\n      post_preview: post.post.substring(0, 50) + '...',\n      // NEW: Debug info for new fields\n      new_fields_mapped: {\n        psychological_trigger: !!post.psychological_trigger,\n        engagement_objective: !!post.engagement_objective,\n        angle: !!post.angle,\n        intent: !!post.intent\n      }\n    }\n  };\n  \n  console.log(`✅ ${platformName} Post ${post.post_number}: ${Object.keys(baserowRecord).length} fields mapped`);\n  console.log(`   - Psychological Trigger: ${post.psychological_trigger}`);\n  console.log(`   - Engagement Objective: ${post.engagement_objective}`);\n  console.log(`   - Angle: ${post.angle}`);\n  console.log(`   - Intent: ${post.intent}`);\n  \n  results.push(result);\n}\n\nconsole.log('=== UNIVERSAL MAPPING COMPLETE ===');\nconsole.log(`✅ Platform: ${platformName}`);\nconsole.log(`✅ Total records created: ${results.length}`);\nconsole.log(`✅ Client: ${clientConfig.client.name}`);\nconsole.log(`✅ New fields successfully mapped`);\n\nreturn results.map(item => ({ json: item }));"},"id":"new-dynamic-mapper","name":"Dynamic Baserow Mapper Facebook","type":"n8n-nodes-base.code","typeVersion":1,"position":[2060,5240]},{"parameters":{"jsCode":"// COLLECT STORAGE RESULTS - Prepare Final Response After All Storage Complete\n// This node collects all stored record results and prepares the final response\n\nconsole.log('=== COLLECT STORAGE RESULTS START ===');\n\n// Get all storage results from HTTP requests\nconst allStorageResults = $input.all();\nconsole.log(`Processing ${allStorageResults.length} storage results`);\n\n// Extract the first result to get client and campaign info\nconst firstResult = allStorageResults[0].json;\n\n// Get original AI output from the first item\nconst originalAIOutput = firstResult.originalAIOutput || {};\nconst clientInfo = firstResult.clientInfo || {};\n\nconsole.log('=== CAMPAIGN INFO ===');\nconsole.log(`Platform: ${originalAIOutput.platform || 'Unknown'}`);\nconsole.log(`Client: ${clientInfo.clientName || 'Unknown'}`);\nconsole.log(`Storage results: ${allStorageResults.length}`);\n\n// Collect all stored record information\nconst storedRecords = [];\nlet totalCharacters = 0;\nlet totalWords = 0;\n\nfor (let i = 0; i < allStorageResults.length; i++) {\n  const result = allStorageResults[i].json;\n  \n  // Extract stored record information from Baserow response\n  const storedRecord = {\n    id: result.id, // Baserow record ID\n    platform: originalAIOutput.platform,\n    post_number: i + 1,\n    post_content: result.post_content || 'Content stored',\n    character_count: result.character_count || 0,\n    word_count: result.word_count || 0,\n    created_at: result.created_at || new Date().toISOString()\n  };\n  \n  storedRecords.push(storedRecord);\n  totalCharacters += storedRecord.character_count;\n  totalWords += storedRecord.word_count;\n  \n  console.log(`✅ Collected record ${i + 1}: ID ${storedRecord.id}`);\n}\n\n// Extract campaign posts from original AI output\nlet campaignPosts = [];\nif (originalAIOutput.campaign_posts && Array.isArray(originalAIOutput.campaign_posts)) {\n  campaignPosts = originalAIOutput.campaign_posts;\n} else if (originalAIOutput.output || originalAIOutput.response) {\n  campaignPosts = [{\n    post_number: 1,\n    post: originalAIOutput.output || originalAIOutput.response,\n    hook: originalAIOutput.hook_focus || 'Hook',\n    cta: originalAIOutput.cta || 'Learn More'\n  }];\n}\n\n// Prepare comprehensive final response\nconst finalResponse = {\n  success: true,\n  message: 'Social media content generated and stored successfully',\n  \n  // Content details\n  content: {\n    platform: originalAIOutput.platform || 'Unknown',\n    generated_content: campaignPosts.map(post => post.post).join('\\n\\n---\\n\\n'),\n    campaign_posts: campaignPosts,\n    total_posts: campaignPosts.length,\n    content_length: totalCharacters\n  },\n  \n  // Storage confirmation\n  storage: {\n    stored_in_baserow: true,\n    records_stored: storedRecords.length,\n    stored_record_ids: storedRecords.map(r => r.id),\n    database_id: clientInfo.baseId || 'unknown',\n    table_id: clientInfo.targetTableId || 'unknown',\n    storage_timestamp: new Date().toISOString()\n  },\n  \n  // Client information\n  client: {\n    client_id: clientInfo.clientId || 'unknown',\n    client_name: clientInfo.clientName || 'Unknown Client',\n    original_idea_id: clientInfo.originalRecordId || 'unknown'\n  },\n  \n  // Processing metadata\n  processing: {\n    content_type: originalAIOutput.content_type || 'text_idea',\n    hook_focus: originalAIOutput.hook_focus || 'Hook',\n    call_to_action: originalAIOutput.cta || 'Learn More',\n    ai_model: 'Claude 3.5 Sonnet',\n    processor: 'Enhanced Multi-Modal Social Media Processor v3.0',\n    generation_timestamp: new Date().toISOString()\n  },\n  \n  // Campaign analysis\n  campaign_analysis: campaignPosts.length > 0 ? {\n    campaign_theme: originalAIOutput.campaign_theme || 'Multi-platform campaign',\n    brand_assets_used: originalAIOutput.brand_assets_used || [],\n    posts_breakdown: campaignPosts.map((post, index) => ({\n      post_number: post.post_number || index + 1,\n      character_count: post.character_count || post.post.length,\n      emotional_trigger: post.emotional_trigger || 'engagement',\n      engagement_tactic: post.engagement_tactic || 'story',\n      campaign_focus: post.campaign_focus || 'awareness',\n      stored_record_id: storedRecords[index]?.id || 'unknown'\n    }))\n  } : null,\n  \n  // Success indicators\n  workflow_status: {\n    content_generated: true,\n    data_mapped: true,\n    stored_in_database: true,\n    multi_client_compatible: true,\n    processing_complete: true\n  },\n  \n  // Statistics\n  stats: {\n    total_characters: totalCharacters,\n    total_words: totalWords,\n    posts_created: campaignPosts.length,\n    records_stored: storedRecords.length,\n    processing_time: 'Real-time',\n    quality_score: campaignPosts.length > 0 ? 'High' : 'Standard'\n  },\n  \n  // Stored records details\n  stored_records: storedRecords\n};\n\nconsole.log('=== FINAL RESPONSE SUMMARY ===');\nconsole.log(`✅ Platform: ${finalResponse.content.platform}`);\nconsole.log(`✅ Posts created: ${finalResponse.content.total_posts}`);\nconsole.log(`✅ Records stored: ${finalResponse.storage.records_stored}`);\nconsole.log(`✅ Client: ${finalResponse.client.client_name}`);\nconsole.log(`✅ Storage IDs: ${finalResponse.storage.stored_record_ids.join(', ')}`);\nconsole.log(`✅ Multi-client processing: SUCCESSFUL`);\nconsole.log('=== COLLECT STORAGE RESULTS COMPLETE ===');\n\nreturn {\n  json: finalResponse\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[2500,5640],"id":"c152267c-bb6e-4328-b4c0-247df323acd0","name":"Collect Storage Results"},{"parameters":{"url":"=https://baserow.aiautomata.co.za/api/database/fields/table/{{ $('Platform Switch').item.json.baserow_record.body.baserow.tableId }}/","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Authorization","value":"=Token {{ $('Platform Switch').item.json.clientConfig.baserow.token }}"},{"name":"Content-Type","value":"application/json"},{"name":"Accept","value":"application/json"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[1620,5240],"id":"084b2eaf-6766-49f1-b155-aab01a13e878","name":"Get Field Structure"},{"parameters":{"jsCode":"// ENHANCED MERGE DATA NODE - RECOVER MISSING CLIENTCONFIG\n// Gets AI output from Facebook AI Agent + recovers clientConfig from earlier nodes\n\nconsole.log('=== ENHANCED MERGE DATA WITH RECOVERY ===');\n\n// Get ALL field items from the Get Field Structure node\nconst allFieldItems = $input.all();\n\n// Get AI output from Facebook AI Agent\nconst facebookAIData = $('Facebook AI Agent').first();\nif (!facebookAIData) {\n  throw new Error('Cannot find Facebook AI Agent node data');\n}\n\nconst aiData = facebookAIData.json;\nconsole.log('Facebook AI Agent data keys:', Object.keys(aiData));\n\n// Reconstruct the field structure array from individual items\nconst fieldStructure = allFieldItems.map(item => item.json);\n\n// Validate we have field data\nif (!fieldStructure || fieldStructure.length === 0) {\n  throw new Error('No field structure items received from Get Field Structure node');\n}\n\nconsole.log('Field structure reconstructed:', fieldStructure.length, 'fields');\n\n// Validate AI data has the output we need\nif (!aiData.output || !aiData.output.campaign_posts) {\n  throw new Error('Facebook AI Agent missing output.campaign_posts - check AI agent configuration');\n}\n\nconsole.log('✅ AI output found:', aiData.output.campaign_posts.length, 'posts');\n\n// RECOVER CLIENTCONFIG from earlier nodes if missing\nlet clientConfig = aiData.clientConfig;\n\nif (!clientConfig) {\n  console.log('⚠️ Missing clientConfig in Facebook AI Agent, attempting recovery...');\n  \n  // Try to get clientConfig from earlier nodes in order of preference\n  const nodesToCheck = [\n    'Process Voice Transcription2',\n    'Voice Note Processor2', \n    'Platform Splitter1',\n    'Process Baserow Data2',\n    'Merge Node',\n    'Client Config Extractor'\n  ];\n  \n  for (const nodeName of nodesToCheck) {\n    try {\n      const nodeData = $(nodeName).first();\n      if (nodeData && nodeData.json && nodeData.json.clientConfig) {\n        clientConfig = nodeData.json.clientConfig;\n        console.log(`✅ Recovered clientConfig from ${nodeName}`);\n        break;\n      }\n    } catch (error) {\n      console.log(`❌ Could not access ${nodeName}:`, error.message);\n    }\n  }\n  \n  if (!clientConfig) {\n    throw new Error('Could not recover clientConfig from any earlier nodes');\n  }\n} else {\n  console.log('✅ Client config found in AI data');\n}\n\nconsole.log('✅ Final client config:', clientConfig.client.name);\n\n// RECOVER PLATFORM INFO if missing\nlet platform = aiData.platform || aiData.output.platform || 'Facebook';\n\n// Create complete merged data object\nconst mergedData = {\n  // Preserve AI agent data\n  ...aiData,\n  \n  // Add recovered clientConfig\n  clientConfig: clientConfig,\n  \n  // Add platform info\n  platform: platform,\n  \n  // Add reconstructed field structure for mapping\n  field_structure: fieldStructure,\n  \n  // Processing metadata\n  merge_timestamp: new Date().toISOString(),\n  ready_for_dynamic_mapping: true,\n  \n  debug_info: {\n    ...aiData.debug_info,\n    field_structure_loaded: true,\n    total_fields_available: fieldStructure.length,\n    merge_completed: true,\n    items_processed: allFieldItems.length,\n    ai_posts_found: aiData.output.campaign_posts.length,\n    source_node: 'Facebook AI Agent',\n    clientConfig_recovery: !aiData.clientConfig ? 'recovered_from_earlier_node' : 'found_in_ai_data',\n    client_name: clientConfig.client.name,\n    table_id: clientConfig.tables.socialMediaContent.id\n  }\n};\n\nconsole.log('=== ENHANCED MERGE COMPLETE ===');\nconsole.log('✅ AI data from Facebook AI Agent');\nconsole.log('✅ ClientConfig recovered/preserved');\nconsole.log('✅ Field structure reconstructed:', fieldStructure.length, 'fields');\nconsole.log('✅ Campaign posts found:', aiData.output.campaign_posts.length);\nconsole.log('✅ Client:', clientConfig.client.name);\nconsole.log('✅ Table ID:', clientConfig.tables.socialMediaContent.id);\nconsole.log('✅ Ready for dynamic mapping');\n\nreturn {\n  json: mergedData\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1840,5240],"id":"82bbe683-6cf7-4ecd-a2a9-ada8930ac2f2","name":"Merge Data"},{"parameters":{"url":"=https://baserow.aiautomata.co.za/api/database/fields/table/{{ $('Platform Switch').item.json.baserow_record.body.baserow.tableId }}/","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Authorization","value":"=Token {{ $('Platform Switch').item.json.clientConfig.baserow.token }}"},{"name":"Content-Type","value":"application/json"},{"name":"Accept","value":"application/json"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[1620,5540],"id":"39773a06-80ab-4e2b-b1cc-6c6551762703","name":"Get Field Structure1"},{"parameters":{"jsCode":"// ENHANCED MERGE DATA NODE - RECOVER MISSING CLIENTCONFIG\n// Gets AI output from Instagram AI Agent + recovers clientConfig from earlier nodes\n\nconsole.log('=== ENHANCED MERGE DATA WITH RECOVERY ===');\n\n// Get ALL field items from the Get Field Structure node\nconst allFieldItems = $input.all();\n\n// Get AI output from Instagram AI Agent\nconst InstagramAIData = $('Instagram AI Agent').first();\nif (!InstagramAIData) {\n  throw new Error('Cannot find Instagram AI Agent node data');\n}\n\nconst aiData = InstagramAIData.json;\nconsole.log('Instagram AI Agent data keys:', Object.keys(aiData));\n\n// Reconstruct the field structure array from individual items\nconst fieldStructure = allFieldItems.map(item => item.json);\n\n// Validate we have field data\nif (!fieldStructure || fieldStructure.length === 0) {\n  throw new Error('No field structure items received from Get Field Structure node');\n}\n\nconsole.log('Field structure reconstructed:', fieldStructure.length, 'fields');\n\n// Validate AI data has the output we need\nif (!aiData.output || !aiData.output.campaign_posts) {\n  throw new Error('Instagram AI Agent missing output.campaign_posts - check AI agent configuration');\n}\n\nconsole.log('✅ AI output found:', aiData.output.campaign_posts.length, 'posts');\n\n// RECOVER CLIENTCONFIG from earlier nodes if missing\nlet clientConfig = aiData.clientConfig;\n\nif (!clientConfig) {\n  console.log('⚠️ Missing clientConfig in Instagram AI Agent, attempting recovery...');\n  \n  // Try to get clientConfig from earlier nodes in order of preference\n  const nodesToCheck = [\n    'Process Voice Transcription2',\n    'Voice Note Processor2', \n    'Platform Splitter1',\n    'Process Baserow Data2',\n    'Merge Node',\n    'Client Config Extractor'\n  ];\n  \n  for (const nodeName of nodesToCheck) {\n    try {\n      const nodeData = $(nodeName).first();\n      if (nodeData && nodeData.json && nodeData.json.clientConfig) {\n        clientConfig = nodeData.json.clientConfig;\n        console.log(`✅ Recovered clientConfig from ${nodeName}`);\n        break;\n      }\n    } catch (error) {\n      console.log(`❌ Could not access ${nodeName}:`, error.message);\n    }\n  }\n  \n  if (!clientConfig) {\n    throw new Error('Could not recover clientConfig from any earlier nodes');\n  }\n} else {\n  console.log('✅ Client config found in AI data');\n}\n\nconsole.log('✅ Final client config:', clientConfig.client.name);\n\n// RECOVER PLATFORM INFO if missing\nlet platform = aiData.platform || aiData.output.platform || 'Instagram';\n\n// Create complete merged data object\nconst mergedData = {\n  // Preserve AI agent data\n  ...aiData,\n  \n  // Add recovered clientConfig\n  clientConfig: clientConfig,\n  \n  // Add platform info\n  platform: platform,\n  \n  // Add reconstructed field structure for mapping\n  field_structure: fieldStructure,\n  \n  // Processing metadata\n  merge_timestamp: new Date().toISOString(),\n  ready_for_dynamic_mapping: true,\n  \n  debug_info: {\n    ...aiData.debug_info,\n    field_structure_loaded: true,\n    total_fields_available: fieldStructure.length,\n    merge_completed: true,\n    items_processed: allFieldItems.length,\n    ai_posts_found: aiData.output.campaign_posts.length,\n    source_node: 'Instagram AI Agent',\n    clientConfig_recovery: !aiData.clientConfig ? 'recovered_from_earlier_node' : 'found_in_ai_data',\n    client_name: clientConfig.client.name,\n    table_id: clientConfig.tables.socialMediaContent.id\n  }\n};\n\nconsole.log('=== ENHANCED MERGE COMPLETE ===');\nconsole.log('✅ AI data from Instagram AI Agent');\nconsole.log('✅ ClientConfig recovered/preserved');\nconsole.log('✅ Field structure reconstructed:', fieldStructure.length, 'fields');\nconsole.log('✅ Campaign posts found:', aiData.output.campaign_posts.length);\nconsole.log('✅ Client:', clientConfig.client.name);\nconsole.log('✅ Table ID:', clientConfig.tables.socialMediaContent.id);\nconsole.log('✅ Ready for dynamic mapping');\n\nreturn {\n  json: mergedData\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1840,5540],"id":"8e765c86-5db5-48c1-be31-4faac9f8572e","name":"Merge Data1"},{"parameters":{"url":"=https://baserow.aiautomata.co.za/api/database/fields/table/{{ $('Platform Switch').item.json.baserow_record.body.baserow.tableId }}/","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Authorization","value":"=Token {{ $('Platform Switch').item.json.clientConfig.baserow.token }}"},{"name":"Content-Type","value":"application/json"},{"name":"Accept","value":"application/json"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[1620,5740],"id":"25a16dd8-245b-4376-98b8-d8afce26c5fa","name":"Get Field Structure2"},{"parameters":{"jsCode":"// FIXED LINKEDIN MERGE DATA NODE\n// Gets AI output from LinkedIn AI Agent (not Facebook!)\n\nconsole.log('=== LINKEDIN MERGE DATA NODE ===');\n\n// Get ALL field items from the Get Field Structure node\nconst allFieldItems = $input.all();\n\n// Get AI output from LinkedIn AI Agent1 (CORRECTED!)\nconst linkedinAIData = $('LinkedIn AI Agent').first();\nif (!linkedinAIData) {\n  throw new Error('Cannot find LinkedIn AI Agent1 node data');\n}\n\nconst aiData = linkedinAIData.json;\n\nconsole.log('Total field items received:', allFieldItems.length);\nconsole.log('LinkedIn AI Agent data keys:', Object.keys(aiData));\nconsole.log('Platform from AI:', aiData.output?.platform);\n\n// Reconstruct the field structure array from individual items\nconst fieldStructure = allFieldItems.map(item => item.json);\n\n// Validate we have field data\nif (!fieldStructure || fieldStructure.length === 0) {\n  throw new Error('No field structure items received from Get Field Structure node');\n}\n\nconsole.log('Field structure reconstructed:', fieldStructure.length, 'fields');\n\n// Validate AI data has the output we need\nif (!aiData.output || !aiData.output.campaign_posts) {\n  console.log('❌ Missing AI output structure');\n  console.log('Available keys in AI data:', Object.keys(aiData));\n  throw new Error('LinkedIn AI Agent missing output.campaign_posts - check AI agent configuration');\n}\n\n// RECOVER CLIENTCONFIG from earlier nodes if missing\nlet clientConfig = aiData.clientConfig;\n\nif (!clientConfig) {\n  console.log('⚠️ Missing clientConfig in LinkedIn AI Agent, attempting recovery...');\n  \n  const nodesToCheck = [\n    'Process Voice Transcription2',\n    'Voice Note Processor2', \n    'Platform Splitter1',\n    'Process Baserow Data2',\n    'Merge Node',\n    'Client Config Extractor'\n  ];\n  \n  for (const nodeName of nodesToCheck) {\n    try {\n      const nodeData = $(nodeName).first();\n      if (nodeData && nodeData.json && nodeData.json.clientConfig) {\n        clientConfig = nodeData.json.clientConfig;\n        console.log(`✅ Recovered clientConfig from ${nodeName}`);\n        break;\n      }\n    } catch (error) {\n      console.log(`❌ Could not access ${nodeName}:`, error.message);\n    }\n  }\n  \n  if (!clientConfig) {\n    throw new Error('Could not recover clientConfig from any earlier nodes');\n  }\n}\n\nconsole.log('✅ AI output found:', aiData.output.campaign_posts.length, 'posts');\nconsole.log('✅ Platform confirmed:', aiData.output.platform);\nconsole.log('✅ Client config:', clientConfig.client.name);\n\n// Create complete merged data object\nconst mergedData = {\n  // Preserve AI agent data\n  ...aiData,\n  \n  // Add recovered clientConfig\n  clientConfig: clientConfig,\n  \n  // IMPORTANT: Preserve the correct platform\n  platform: aiData.output.platform, // This should be \"LinkedIn\"\n  \n  // Add reconstructed field structure for mapping\n  field_structure: fieldStructure,\n  \n  // Processing metadata\n  merge_timestamp: new Date().toISOString(),\n  ready_for_dynamic_mapping: true,\n  \n  debug_info: {\n    ...aiData.debug_info,\n    field_structure_loaded: true,\n    total_fields_available: fieldStructure.length,\n    merge_completed: true,\n    items_processed: allFieldItems.length,\n    ai_posts_found: aiData.output.campaign_posts.length,\n    source_node: 'LinkedIn AI Agent1', // CORRECTED!\n    platform_confirmed: aiData.output.platform,\n    clientConfig_recovery: !aiData.clientConfig ? 'recovered_from_earlier_node' : 'found_in_ai_data',\n    client_name: clientConfig.client.name,\n    table_id: clientConfig.tables.socialMediaContent.id\n  }\n};\n\nconsole.log('=== LINKEDIN MERGE COMPLETE ===');\nconsole.log('✅ AI data from LinkedIn AI Agent1');\nconsole.log('✅ Platform preserved:', mergedData.platform);\nconsole.log('✅ ClientConfig recovered/preserved');\nconsole.log('✅ Field structure reconstructed:', fieldStructure.length, 'fields');\n\nreturn {\n  json: mergedData\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1840,5740],"id":"c4ebf13e-580b-428a-88d6-91c93104f79e","name":"Merge Data2"},{"parameters":{"url":"=https://baserow.aiautomata.co.za/api/database/fields/table/{{ $('Platform Switch').item.json.baserow_record.body.baserow.tableId }}/","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Authorization","value":"=Token {{ $('Platform Switch').item.json.clientConfig.baserow.token }}"},{"name":"Content-Type","value":"application/json"},{"name":"Accept","value":"application/json"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[1620,5940],"id":"3a78daa8-ed62-4072-b1d3-64e8092cfcbb","name":"Get Field Structure3"},{"parameters":{"jsCode":"// ENHANCED MERGE DATA NODE - RECOVER MISSING CLIENTCONFIG\n// Gets AI output from X AI Agent + recovers clientConfig from earlier nodes\n\nconsole.log('=== ENHANCED MERGE DATA WITH RECOVERY ===');\n\n// Get ALL field items from the Get Field Structure node\nconst allFieldItems = $input.all();\n\n// Get AI output from X AI Agent\nconst XAIData = $('X AI Agent').first();\nif (!XAIData) {\n  throw new Error('Cannot find X AI Agent node data');\n}\n\nconst aiData = XAIData.json;\nconsole.log('X AI Agent data keys:', Object.keys(aiData));\n\n// Reconstruct the field structure array from individual items\nconst fieldStructure = allFieldItems.map(item => item.json);\n\n// Validate we have field data\nif (!fieldStructure || fieldStructure.length === 0) {\n  throw new Error('No field structure items received from Get Field Structure node');\n}\n\nconsole.log('Field structure reconstructed:', fieldStructure.length, 'fields');\n\n// Validate AI data has the output we need\nif (!aiData.output || !aiData.output.campaign_posts) {\n  throw new Error('X AI Agent missing output.campaign_posts - check AI agent configuration');\n}\n\nconsole.log('✅ AI output found:', aiData.output.campaign_posts.length, 'posts');\n\n// RECOVER CLIENTCONFIG from earlier nodes if missing\nlet clientConfig = aiData.clientConfig;\n\nif (!clientConfig) {\n  console.log('⚠️ Missing clientConfig in Facebook AI Agent, attempting recovery...');\n  \n  // Try to get clientConfig from earlier nodes in order of preference\n  const nodesToCheck = [\n    'Process Voice Transcription2',\n    'Voice Note Processor2', \n    'Platform Splitter1',\n    'Process Baserow Data2',\n    'Merge Node',\n    'Client Config Extractor'\n  ];\n  \n  for (const nodeName of nodesToCheck) {\n    try {\n      const nodeData = $(nodeName).first();\n      if (nodeData && nodeData.json && nodeData.json.clientConfig) {\n        clientConfig = nodeData.json.clientConfig;\n        console.log(`✅ Recovered clientConfig from ${nodeName}`);\n        break;\n      }\n    } catch (error) {\n      console.log(`❌ Could not access ${nodeName}:`, error.message);\n    }\n  }\n  \n  if (!clientConfig) {\n    throw new Error('Could not recover clientConfig from any earlier nodes');\n  }\n} else {\n  console.log('✅ Client config found in AI data');\n}\n\nconsole.log('✅ Final client config:', clientConfig.client.name);\n\n// RECOVER PLATFORM INFO if missing\nlet platform = aiData.platform || aiData.output.platform || 'X';\n\n// Create complete merged data object\nconst mergedData = {\n  // Preserve AI agent data\n  ...aiData,\n  \n  // Add recovered clientConfig\n  clientConfig: clientConfig,\n  \n  // Add platform info\n  platform: platform,\n  \n  // Add reconstructed field structure for mapping\n  field_structure: fieldStructure,\n  \n  // Processing metadata\n  merge_timestamp: new Date().toISOString(),\n  ready_for_dynamic_mapping: true,\n  \n  debug_info: {\n    ...aiData.debug_info,\n    field_structure_loaded: true,\n    total_fields_available: fieldStructure.length,\n    merge_completed: true,\n    items_processed: allFieldItems.length,\n    ai_posts_found: aiData.output.campaign_posts.length,\n    source_node: 'X AI Agent',\n    clientConfig_recovery: !aiData.clientConfig ? 'recovered_from_earlier_node' : 'found_in_ai_data',\n    client_name: clientConfig.client.name,\n    table_id: clientConfig.tables.socialMediaContent.id\n  }\n};\n\nconsole.log('=== ENHANCED MERGE COMPLETE ===');\nconsole.log('✅ AI data from X AI Agent');\nconsole.log('✅ ClientConfig recovered/preserved');\nconsole.log('✅ Field structure reconstructed:', fieldStructure.length, 'fields');\nconsole.log('✅ Campaign posts found:', aiData.output.campaign_posts.length);\nconsole.log('✅ Client:', clientConfig.client.name);\nconsole.log('✅ Table ID:', clientConfig.tables.socialMediaContent.id);\nconsole.log('✅ Ready for dynamic mapping');\n\nreturn {\n  json: mergedData\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1840,5940],"id":"9e3efc8a-449f-4e7f-8c26-18dfa85be662","name":"Merge Data3"},{"parameters":{"jsCode":"// UNIVERSAL DYNAMIC MAPPER - UPDATED FOR NEW FIELD NAMES\n// Gets the platform dynamically from AI output and uses new field structure\n\nconst payload = $json;\n\nconsole.log('=== UNIVERSAL DYNAMIC MAPPER START ===');\n\n// Validate we have complete merged data\nif (!payload.field_structure || !payload.output || !payload.clientConfig) {\n  throw new Error('Missing required data: field_structure, output, or clientConfig');\n}\n\nconst fieldStructure = payload.field_structure;\nconst aiOutput = payload.output;\nconst clientConfig = payload.clientConfig;\n\n// GET PLATFORM DYNAMICALLY from AI output\nconst platformName = aiOutput.platform || payload.platform || 'Facebook';\n\nconsole.log(`Platform: ${platformName}`);\nconsole.log(`Client: ${clientConfig.client.name}`);\nconsole.log(`Table ID: ${clientConfig.tables.socialMediaContent.id}`);\nconsole.log(`AI Posts: ${aiOutput.campaign_posts.length}`);\n\n// Create field mapping from field names to IDs\nconst fieldMapping = {};\n\n// Map each field by name - UPDATED with new field names\nfor (const field of fieldStructure) {\n  switch (field.name) {\n    case 'Platform':\n      fieldMapping.platform = field.id;\n      break;\n    case 'Post':\n      fieldMapping.post_content = field.id;\n      break;\n    case 'Hook':\n      fieldMapping.hook = field.id;\n      break;\n    case 'CTA':\n      fieldMapping.cta = field.id;\n      break;\n    case 'Hashtags':\n      fieldMapping.hashtags = field.id;\n      break;\n    case 'Character Count':\n      fieldMapping.character_count = field.id;\n      break;\n    case 'Content Theme':\n      fieldMapping.campaign_theme = field.id;\n      break;\n    case 'Status':\n      fieldMapping.status = field.id;\n      break;\n    case 'Content Type':\n      fieldMapping.content_type = field.id;\n      break;\n    case 'Content Idea':\n      fieldMapping.content_idea_link = field.id;\n      break;\n    case 'Comments':\n      fieldMapping.comments = field.id;\n      break;\n    case 'Psychological Trigger (7167)':  // Updated with field ID reference\n      fieldMapping.psychological_trigger = field.id;\n      break;\n    case 'Engagement Objective (7168)':   // Updated with field ID reference\n      fieldMapping.engagement_objective = field.id;\n      break;\n    case 'Angle (6925)':                  // NEW - Added angle mapping\n      fieldMapping.angle = field.id;\n      break;\n    case 'Intent (6926)':                 // NEW - Added intent mapping\n      fieldMapping.intent = field.id;\n      break;\n    // Alternative field name patterns (in case field names don't include IDs)\n    case 'Psychological Trigger':\n      fieldMapping.psychological_trigger = field.id;\n      break;\n    case 'Engagement Objective':\n      fieldMapping.engagement_objective = field.id;\n      break;\n    case 'Angle':\n      fieldMapping.angle = field.id;\n      break;\n    case 'Intent':\n      fieldMapping.intent = field.id;\n      break;\n  }\n}\n\nconsole.log(`Fields mapped: ${Object.keys(fieldMapping).length}`);\nconsole.log('Available field mappings:', Object.keys(fieldMapping));\n\n// Process each campaign post into separate Baserow records\nconst results = [];\n\nfor (let i = 0; i < aiOutput.campaign_posts.length; i++) {\n  const post = aiOutput.campaign_posts[i];\n  \n  // Create Baserow record with proper field IDs\n  const baserowRecord = {};\n  \n  // Helper function to safely map fields\n  const mapField = (mappingKey, value) => {\n    const fieldId = fieldMapping[mappingKey];\n    if (fieldId && value !== undefined && value !== null) {\n      baserowRecord[`field_${fieldId}`] = value;\n      console.log(`✅ Mapped ${mappingKey}: ${value}`);\n      return true;\n    }\n    if (!fieldId) {\n      console.log(`⚠️ Field not available: ${mappingKey}`);\n    } else {\n      console.log(`⚠️ No value for: ${mappingKey}`);\n    }\n    return false;\n  };\n  \n  // Map post content fields - USE DYNAMIC PLATFORM\n  mapField('platform', platformName);\n  mapField('post_content', post.post);\n  mapField('hook', post.hook);\n  mapField('cta', post.cta);\n  mapField('hashtags', Array.isArray(post.hashtags) ? post.hashtags.join(', ') : post.hashtags);\n  mapField('character_count', post.character_count);\n  \n  // Map campaign fields\n  mapField('campaign_theme', aiOutput.campaign_theme);\n  mapField('status', 'In Review');\n  mapField('content_type', 'Copywrite');\n  \n  // UPDATED: Map NEW psychological and engagement fields with ACTUAL AI values\n  mapField('psychological_trigger', post.psychological_trigger);  // ✅ Uses actual AI value\n  mapField('engagement_objective', post.engagement_objective);    // ✅ Uses actual AI value\n  mapField('angle', post.angle);                                  // ✅ NEW - Uses actual AI value  \n  mapField('intent', post.intent);                                // ✅ NEW - Uses actual AI value\n  \n  // UPDATED: Map comments with NEW field names\n  const commentParts = [\n    `AI Generated - ${platformName} Campaign: ${aiOutput.campaign_theme}`,\n    `Post ${post.post_number}/${aiOutput.total_posts_created}`,\n    `Trigger: ${post.psychological_trigger || 'N/A'}`,           // ✅ Updated field name\n    `Objective: ${post.engagement_objective || 'N/A'}`,          // ✅ Updated field name\n    `Angle: ${post.angle || 'N/A'}`,                             // ✅ NEW field\n    `Intent: ${post.intent || 'N/A'}`                            // ✅ NEW field\n  ];\n  \n  mapField('comments', commentParts.join(' | '));\n  \n  // Link to original content idea\n  if (fieldMapping.content_idea_link && clientConfig.recordId) {\n    baserowRecord[`field_${fieldMapping.content_idea_link}`] = [parseInt(clientConfig.recordId)];\n  }\n  \n  const result = {\n    output: aiOutput,\n    baserow_record: baserowRecord,\n    storage_config: {\n      database_id: clientConfig.baseId,\n      table_id: clientConfig.tables.socialMediaContent.id,\n      method: \"create_record\",\n      token: clientConfig.baserow.token\n    },\n    mapping_successful: true,\n    ready_for_storage: true,\n    debug_info: {\n      dynamic_mapping_completed: true,\n      platform: platformName,\n      table_id: clientConfig.tables.socialMediaContent.id,\n      client_name: clientConfig.client.name,\n      current_post_number: post.post_number,\n      fields_mapped: Object.keys(baserowRecord).length,\n      total_fields_available: fieldStructure.length,\n      storage_table_id: clientConfig.tables.socialMediaContent.id,\n      post_preview: post.post.substring(0, 50) + '...',\n      // NEW: Debug info for new fields\n      new_fields_mapped: {\n        psychological_trigger: !!post.psychological_trigger,\n        engagement_objective: !!post.engagement_objective,\n        angle: !!post.angle,\n        intent: !!post.intent\n      }\n    }\n  };\n  \n  console.log(`✅ ${platformName} Post ${post.post_number}: ${Object.keys(baserowRecord).length} fields mapped`);\n  console.log(`   - Psychological Trigger: ${post.psychological_trigger}`);\n  console.log(`   - Engagement Objective: ${post.engagement_objective}`);\n  console.log(`   - Angle: ${post.angle}`);\n  console.log(`   - Intent: ${post.intent}`);\n  \n  results.push(result);\n}\n\nconsole.log('=== UNIVERSAL MAPPING COMPLETE ===');\nconsole.log(`✅ Platform: ${platformName}`);\nconsole.log(`✅ Total records created: ${results.length}`);\nconsole.log(`✅ Client: ${clientConfig.client.name}`);\nconsole.log(`✅ New fields successfully mapped`);\n\nreturn results.map(item => ({ json: item }));"},"id":"8f8732ca-cd78-4ae8-a0d3-976f275b5e79","name":"Dynamic Baserow Mapper Instagram","type":"n8n-nodes-base.code","typeVersion":1,"position":[2060,5540]},{"parameters":{"jsCode":"// UNIVERSAL DYNAMIC MAPPER - UPDATED FOR NEW FIELD NAMES\n// Gets the platform dynamically from AI output and uses new field structure\n\nconst payload = $json;\n\nconsole.log('=== UNIVERSAL DYNAMIC MAPPER START ===');\n\n// Validate we have complete merged data\nif (!payload.field_structure || !payload.output || !payload.clientConfig) {\n  throw new Error('Missing required data: field_structure, output, or clientConfig');\n}\n\nconst fieldStructure = payload.field_structure;\nconst aiOutput = payload.output;\nconst clientConfig = payload.clientConfig;\n\n// GET PLATFORM DYNAMICALLY from AI output\nconst platformName = aiOutput.platform || payload.platform || 'Facebook';\n\nconsole.log(`Platform: ${platformName}`);\nconsole.log(`Client: ${clientConfig.client.name}`);\nconsole.log(`Table ID: ${clientConfig.tables.socialMediaContent.id}`);\nconsole.log(`AI Posts: ${aiOutput.campaign_posts.length}`);\n\n// Create field mapping from field names to IDs\nconst fieldMapping = {};\n\n// Map each field by name - UPDATED with new field names\nfor (const field of fieldStructure) {\n  switch (field.name) {\n    case 'Platform':\n      fieldMapping.platform = field.id;\n      break;\n    case 'Post':\n      fieldMapping.post_content = field.id;\n      break;\n    case 'Hook':\n      fieldMapping.hook = field.id;\n      break;\n    case 'CTA':\n      fieldMapping.cta = field.id;\n      break;\n    case 'Hashtags':\n      fieldMapping.hashtags = field.id;\n      break;\n    case 'Character Count':\n      fieldMapping.character_count = field.id;\n      break;\n    case 'Content Theme':\n      fieldMapping.campaign_theme = field.id;\n      break;\n    case 'Status':\n      fieldMapping.status = field.id;\n      break;\n    case 'Content Type':\n      fieldMapping.content_type = field.id;\n      break;\n    case 'Content Idea':\n      fieldMapping.content_idea_link = field.id;\n      break;\n    case 'Comments':\n      fieldMapping.comments = field.id;\n      break;\n    case 'Psychological Trigger (7167)':  // Updated with field ID reference\n      fieldMapping.psychological_trigger = field.id;\n      break;\n    case 'Engagement Objective (7168)':   // Updated with field ID reference\n      fieldMapping.engagement_objective = field.id;\n      break;\n    case 'Angle (6925)':                  // NEW - Added angle mapping\n      fieldMapping.angle = field.id;\n      break;\n    case 'Intent (6926)':                 // NEW - Added intent mapping\n      fieldMapping.intent = field.id;\n      break;\n    // Alternative field name patterns (in case field names don't include IDs)\n    case 'Psychological Trigger':\n      fieldMapping.psychological_trigger = field.id;\n      break;\n    case 'Engagement Objective':\n      fieldMapping.engagement_objective = field.id;\n      break;\n    case 'Angle':\n      fieldMapping.angle = field.id;\n      break;\n    case 'Intent':\n      fieldMapping.intent = field.id;\n      break;\n  }\n}\n\nconsole.log(`Fields mapped: ${Object.keys(fieldMapping).length}`);\nconsole.log('Available field mappings:', Object.keys(fieldMapping));\n\n// Process each campaign post into separate Baserow records\nconst results = [];\n\nfor (let i = 0; i < aiOutput.campaign_posts.length; i++) {\n  const post = aiOutput.campaign_posts[i];\n  \n  // Create Baserow record with proper field IDs\n  const baserowRecord = {};\n  \n  // Helper function to safely map fields\n  const mapField = (mappingKey, value) => {\n    const fieldId = fieldMapping[mappingKey];\n    if (fieldId && value !== undefined && value !== null) {\n      baserowRecord[`field_${fieldId}`] = value;\n      console.log(`✅ Mapped ${mappingKey}: ${value}`);\n      return true;\n    }\n    if (!fieldId) {\n      console.log(`⚠️ Field not available: ${mappingKey}`);\n    } else {\n      console.log(`⚠️ No value for: ${mappingKey}`);\n    }\n    return false;\n  };\n  \n  // Map post content fields - USE DYNAMIC PLATFORM\n  mapField('platform', platformName);\n  mapField('post_content', post.post);\n  mapField('hook', post.hook);\n  mapField('cta', post.cta);\n  mapField('hashtags', Array.isArray(post.hashtags) ? post.hashtags.join(', ') : post.hashtags);\n  mapField('character_count', post.character_count);\n  \n  // Map campaign fields\n  mapField('campaign_theme', aiOutput.campaign_theme);\n  mapField('status', 'In Review');\n  mapField('content_type', 'Copywrite');\n  \n  // UPDATED: Map NEW psychological and engagement fields with ACTUAL AI values\n  mapField('psychological_trigger', post.psychological_trigger);  // ✅ Uses actual AI value\n  mapField('engagement_objective', post.engagement_objective);    // ✅ Uses actual AI value\n  mapField('angle', post.angle);                                  // ✅ NEW - Uses actual AI value  \n  mapField('intent', post.intent);                                // ✅ NEW - Uses actual AI value\n  \n  // UPDATED: Map comments with NEW field names\n  const commentParts = [\n    `AI Generated - ${platformName} Campaign: ${aiOutput.campaign_theme}`,\n    `Post ${post.post_number}/${aiOutput.total_posts_created}`,\n    `Trigger: ${post.psychological_trigger || 'N/A'}`,           // ✅ Updated field name\n    `Objective: ${post.engagement_objective || 'N/A'}`,          // ✅ Updated field name\n    `Angle: ${post.angle || 'N/A'}`,                             // ✅ NEW field\n    `Intent: ${post.intent || 'N/A'}`                            // ✅ NEW field\n  ];\n  \n  mapField('comments', commentParts.join(' | '));\n  \n  // Link to original content idea\n  if (fieldMapping.content_idea_link && clientConfig.recordId) {\n    baserowRecord[`field_${fieldMapping.content_idea_link}`] = [parseInt(clientConfig.recordId)];\n  }\n  \n  const result = {\n    output: aiOutput,\n    baserow_record: baserowRecord,\n    storage_config: {\n      database_id: clientConfig.baseId,\n      table_id: clientConfig.tables.socialMediaContent.id,\n      method: \"create_record\",\n      token: clientConfig.baserow.token\n    },\n    mapping_successful: true,\n    ready_for_storage: true,\n    debug_info: {\n      dynamic_mapping_completed: true,\n      platform: platformName,\n      table_id: clientConfig.tables.socialMediaContent.id,\n      client_name: clientConfig.client.name,\n      current_post_number: post.post_number,\n      fields_mapped: Object.keys(baserowRecord).length,\n      total_fields_available: fieldStructure.length,\n      storage_table_id: clientConfig.tables.socialMediaContent.id,\n      post_preview: post.post.substring(0, 50) + '...',\n      // NEW: Debug info for new fields\n      new_fields_mapped: {\n        psychological_trigger: !!post.psychological_trigger,\n        engagement_objective: !!post.engagement_objective,\n        angle: !!post.angle,\n        intent: !!post.intent\n      }\n    }\n  };\n  \n  console.log(`✅ ${platformName} Post ${post.post_number}: ${Object.keys(baserowRecord).length} fields mapped`);\n  console.log(`   - Psychological Trigger: ${post.psychological_trigger}`);\n  console.log(`   - Engagement Objective: ${post.engagement_objective}`);\n  console.log(`   - Angle: ${post.angle}`);\n  console.log(`   - Intent: ${post.intent}`);\n  \n  results.push(result);\n}\n\nconsole.log('=== UNIVERSAL MAPPING COMPLETE ===');\nconsole.log(`✅ Platform: ${platformName}`);\nconsole.log(`✅ Total records created: ${results.length}`);\nconsole.log(`✅ Client: ${clientConfig.client.name}`);\nconsole.log(`✅ New fields successfully mapped`);\n\nreturn results.map(item => ({ json: item }));"},"id":"25aee0b6-1daf-4e49-8d40-e062dcc3ac20","name":"Dynamic Baserow Mapper LinkedIn","type":"n8n-nodes-base.code","typeVersion":1,"position":[2060,5740]},{"parameters":{"jsCode":"// UNIVERSAL DYNAMIC MAPPER - UPDATED FOR NEW FIELD NAMES\n// Gets the platform dynamically from AI output and uses new field structure\n\nconst payload = $json;\n\nconsole.log('=== UNIVERSAL DYNAMIC MAPPER START ===');\n\n// Validate we have complete merged data\nif (!payload.field_structure || !payload.output || !payload.clientConfig) {\n  throw new Error('Missing required data: field_structure, output, or clientConfig');\n}\n\nconst fieldStructure = payload.field_structure;\nconst aiOutput = payload.output;\nconst clientConfig = payload.clientConfig;\n\n// GET PLATFORM DYNAMICALLY from AI output\nconst platformName = aiOutput.platform || payload.platform || 'Facebook';\n\nconsole.log(`Platform: ${platformName}`);\nconsole.log(`Client: ${clientConfig.client.name}`);\nconsole.log(`Table ID: ${clientConfig.tables.socialMediaContent.id}`);\nconsole.log(`AI Posts: ${aiOutput.campaign_posts.length}`);\n\n// Create field mapping from field names to IDs\nconst fieldMapping = {};\n\n// Map each field by name - UPDATED with new field names\nfor (const field of fieldStructure) {\n  switch (field.name) {\n    case 'Platform':\n      fieldMapping.platform = field.id;\n      break;\n    case 'Post':\n      fieldMapping.post_content = field.id;\n      break;\n    case 'Hook':\n      fieldMapping.hook = field.id;\n      break;\n    case 'CTA':\n      fieldMapping.cta = field.id;\n      break;\n    case 'Hashtags':\n      fieldMapping.hashtags = field.id;\n      break;\n    case 'Character Count':\n      fieldMapping.character_count = field.id;\n      break;\n    case 'Content Theme':\n      fieldMapping.campaign_theme = field.id;\n      break;\n    case 'Status':\n      fieldMapping.status = field.id;\n      break;\n    case 'Content Type':\n      fieldMapping.content_type = field.id;\n      break;\n    case 'Content Idea':\n      fieldMapping.content_idea_link = field.id;\n      break;\n    case 'Comments':\n      fieldMapping.comments = field.id;\n      break;\n    case 'Psychological Trigger (7167)':  // Updated with field ID reference\n      fieldMapping.psychological_trigger = field.id;\n      break;\n    case 'Engagement Objective (7168)':   // Updated with field ID reference\n      fieldMapping.engagement_objective = field.id;\n      break;\n    case 'Angle (6925)':                  // NEW - Added angle mapping\n      fieldMapping.angle = field.id;\n      break;\n    case 'Intent (6926)':                 // NEW - Added intent mapping\n      fieldMapping.intent = field.id;\n      break;\n    // Alternative field name patterns (in case field names don't include IDs)\n    case 'Psychological Trigger':\n      fieldMapping.psychological_trigger = field.id;\n      break;\n    case 'Engagement Objective':\n      fieldMapping.engagement_objective = field.id;\n      break;\n    case 'Angle':\n      fieldMapping.angle = field.id;\n      break;\n    case 'Intent':\n      fieldMapping.intent = field.id;\n      break;\n  }\n}\n\nconsole.log(`Fields mapped: ${Object.keys(fieldMapping).length}`);\nconsole.log('Available field mappings:', Object.keys(fieldMapping));\n\n// Process each campaign post into separate Baserow records\nconst results = [];\n\nfor (let i = 0; i < aiOutput.campaign_posts.length; i++) {\n  const post = aiOutput.campaign_posts[i];\n  \n  // Create Baserow record with proper field IDs\n  const baserowRecord = {};\n  \n  // Helper function to safely map fields\n  const mapField = (mappingKey, value) => {\n    const fieldId = fieldMapping[mappingKey];\n    if (fieldId && value !== undefined && value !== null) {\n      baserowRecord[`field_${fieldId}`] = value;\n      console.log(`✅ Mapped ${mappingKey}: ${value}`);\n      return true;\n    }\n    if (!fieldId) {\n      console.log(`⚠️ Field not available: ${mappingKey}`);\n    } else {\n      console.log(`⚠️ No value for: ${mappingKey}`);\n    }\n    return false;\n  };\n  \n  // Map post content fields - USE DYNAMIC PLATFORM\n  mapField('platform', platformName);\n  mapField('post_content', post.post);\n  mapField('hook', post.hook);\n  mapField('cta', post.cta);\n  mapField('hashtags', Array.isArray(post.hashtags) ? post.hashtags.join(', ') : post.hashtags);\n  mapField('character_count', post.character_count);\n  \n  // Map campaign fields\n  mapField('campaign_theme', aiOutput.campaign_theme);\n  mapField('status', 'In Review');\n  mapField('content_type', 'Copywrite');\n  \n  // UPDATED: Map NEW psychological and engagement fields with ACTUAL AI values\n  mapField('psychological_trigger', post.psychological_trigger);  // ✅ Uses actual AI value\n  mapField('engagement_objective', post.engagement_objective);    // ✅ Uses actual AI value\n  mapField('angle', post.angle);                                  // ✅ NEW - Uses actual AI value  \n  mapField('intent', post.intent);                                // ✅ NEW - Uses actual AI value\n  \n  // UPDATED: Map comments with NEW field names\n  const commentParts = [\n    `AI Generated - ${platformName} Campaign: ${aiOutput.campaign_theme}`,\n    `Post ${post.post_number}/${aiOutput.total_posts_created}`,\n    `Trigger: ${post.psychological_trigger || 'N/A'}`,           // ✅ Updated field name\n    `Objective: ${post.engagement_objective || 'N/A'}`,          // ✅ Updated field name\n    `Angle: ${post.angle || 'N/A'}`,                             // ✅ NEW field\n    `Intent: ${post.intent || 'N/A'}`                            // ✅ NEW field\n  ];\n  \n  mapField('comments', commentParts.join(' | '));\n  \n  // Link to original content idea\n  if (fieldMapping.content_idea_link && clientConfig.recordId) {\n    baserowRecord[`field_${fieldMapping.content_idea_link}`] = [parseInt(clientConfig.recordId)];\n  }\n  \n  const result = {\n    output: aiOutput,\n    baserow_record: baserowRecord,\n    storage_config: {\n      database_id: clientConfig.baseId,\n      table_id: clientConfig.tables.socialMediaContent.id,\n      method: \"create_record\",\n      token: clientConfig.baserow.token\n    },\n    mapping_successful: true,\n    ready_for_storage: true,\n    debug_info: {\n      dynamic_mapping_completed: true,\n      platform: platformName,\n      table_id: clientConfig.tables.socialMediaContent.id,\n      client_name: clientConfig.client.name,\n      current_post_number: post.post_number,\n      fields_mapped: Object.keys(baserowRecord).length,\n      total_fields_available: fieldStructure.length,\n      storage_table_id: clientConfig.tables.socialMediaContent.id,\n      post_preview: post.post.substring(0, 50) + '...',\n      // NEW: Debug info for new fields\n      new_fields_mapped: {\n        psychological_trigger: !!post.psychological_trigger,\n        engagement_objective: !!post.engagement_objective,\n        angle: !!post.angle,\n        intent: !!post.intent\n      }\n    }\n  };\n  \n  console.log(`✅ ${platformName} Post ${post.post_number}: ${Object.keys(baserowRecord).length} fields mapped`);\n  console.log(`   - Psychological Trigger: ${post.psychological_trigger}`);\n  console.log(`   - Engagement Objective: ${post.engagement_objective}`);\n  console.log(`   - Angle: ${post.angle}`);\n  console.log(`   - Intent: ${post.intent}`);\n  \n  results.push(result);\n}\n\nconsole.log('=== UNIVERSAL MAPPING COMPLETE ===');\nconsole.log(`✅ Platform: ${platformName}`);\nconsole.log(`✅ Total records created: ${results.length}`);\nconsole.log(`✅ Client: ${clientConfig.client.name}`);\nconsole.log(`✅ New fields successfully mapped`);\n\nreturn results.map(item => ({ json: item }));"},"id":"90cce111-ccce-411f-9742-93577f7c45c6","name":"Dynamic Baserow Mapper X","type":"n8n-nodes-base.code","typeVersion":1,"position":[2060,5940]},{"parameters":{"promptType":"define","text":"=Please create a {{ $json.numberOfPosts || $json.clientConfig.socialMedia.numberOfPosts || 1 }}-post strategic {{ $json.platform || 'Facebook' }} campaign for {{ $json.clientConfig.client.name || $json.client_data.client_name || 'Unknown Client' }}.\n\n## STRATEGIC FRAMEWORK\n- **Content Strategy**: {{ $json.content_strategy || 'Awareness & Positioning' }}\n- **Content Types**: {{ Array.isArray($json.content_type_strategy) ? $json.content_type_strategy.join(' + ') : ($json.content_type_strategy || 'Brand Positioning & Values') }}\n- **Primary Objective**: {{ $json.primary_objective || 'Build Brand Awareness & Recognition' }}\n- **Target Platform**: {{ $json.platform || 'Facebook' }}\n\n## CONTENT TO PROCESS\n{{ $json.processed_content }}\n\n## CAMPAIGN REQUIREMENTS\n- **Posts needed**: {{ $json.numberOfPosts || $json.clientConfig.socialMedia.numberOfPosts || 1 }}\n- **Hook focus**: {{ $json.hook_focus || 'Hook' }}\n- **Call to action**: {{ $json.clientConfig.socialMedia.cta || 'Learn More' }}\n- **Target audience**: {{ $json.client_data.target_audience || 'General audience' }}\n- **Content type**: {{ $json.content_type || 'text_idea' }}\n\n## STRATEGIC EXECUTION BY OBJECTIVE\n\n### **{{ $json.primary_objective || 'Build Brand Awareness & Recognition' }}**\n\n{{\n$json.primary_objective === 'Build Brand Awareness & Recognition' ? \n'→ Focus on brand story, values, differentiators, memorable messaging\\n→ Tone: Authentic, distinctive, memorable\\n→ CTA: Follow, learn more, discover our story' :\n$json.primary_objective === 'Generate Leads & Drive Conversions' ?\n'→ Focus on benefits, social proof, urgency, clear value proposition\\n→ Tone: Persuasive, benefit-driven, action-oriented\\n→ CTA: Book demo, sign up, get started, claim offer' :\n$json.primary_objective === 'Educate & Inform Target Audience' ?\n'→ Focus on tutorials, insights, explanations, valuable information\\n→ Tone: Helpful, authoritative, educational\\n→ CTA: Learn more, download guide, read full article' :\n$json.primary_objective === 'Increase Engagement & Community Building' ?\n'→ Focus on questions, polls, discussions, community invitations\\n→ Tone: Conversational, inclusive, interactive\\n→ CTA: Comment, share your thoughts, join the discussion' :\n$json.primary_objective === 'Establish Thought Leadership & Authority' ?\n'→ Focus on industry insights, predictions, expert opinions, data\\n→ Tone: Authoritative, insightful, analytical\\n→ CTA: What\\'s your take, share your experience, follow for insights' :\n$json.primary_objective === 'Drive Website Traffic & Click-throughs' ?\n'→ Focus on teasers, partial information, compelling previews\\n→ Tone: Intriguing, benefit-focused, curiosity-driven\\n→ CTA: Read more, visit website, see full story' :\n$json.primary_objective === 'Boost Customer Retention & Loyalty' ?\n'→ Focus on appreciation, exclusive content, customer success, tips\\n→ Tone: Appreciative, supportive, value-adding\\n→ CTA: Thank you, try this tip, celebrate with us' :\n$json.primary_objective === 'Support & Nurture Existing Customers' ?\n'→ Focus on help, tips, troubleshooting, advanced features\\n→ Tone: Helpful, supportive, solution-oriented\\n→ CTA: Try this, need help, contact support' :\n$json.primary_objective === 'Attract Strategic Partnerships & Collaborations' ?\n'→ Focus on opportunities, mutual benefits, professional networking\\n→ Tone: Professional, opportunity-focused, collaborative\\n→ CTA: Let\\'s connect, explore partnership, reach out' :\n$json.primary_objective === 'Create Viral Content & Expand Reach' ?\n'→ Focus on trending topics, shareable moments, emotional triggers\\n→ Tone: Entertaining, relatable, share-worthy\\n→ CTA: Share this, tag someone, spread the word' :\n'→ Focus on the selected objective with appropriate tone and CTA'\n}}\n\n## CONTENT TYPE EXECUTION\n\n{{ Array.isArray($json.content_type_strategy) && $json.content_type_strategy.length > 1 ? \n'**HYBRID CONTENT APPROACH**: Blend these content types seamlessly:' : \n'**FOCUSED CONTENT APPROACH**: Execute this content type:' }}\n\n{{ Array.isArray($json.content_type_strategy) ? \n$json.content_type_strategy.join(', ') : \n($json.content_type_strategy || 'Brand Positioning & Values') }}\n\n## PLATFORM-SPECIFIC OPTIMIZATION\n\n**Facebook**: 40-250 characters optimal, community focus, 3 hashtags max, conversational tone\n**LinkedIn**: 150-300 words optimal, professional value, business insights, 3-5 industry hashtags  \n**X**: Under 280 characters, trending topics, viral potential, 1-2 hashtags max\n**Instagram**: Visual-first descriptions, lifestyle integration, aesthetic hashtags\n\n## TASK\n1. Read brand assets from Baserow table {{ $json.clientConfig.tables.brandAssets.id || '728' }}\n2. Create {{ $json.numberOfPosts || $json.clientConfig.socialMedia.numberOfPosts || 1 }} posts that strategically serve the \"{{ $json.primary_objective || 'Build Brand Awareness & Recognition' }}\" objective\n3. {{ Array.isArray($json.content_type_strategy) && $json.content_type_strategy.length > 1 ? \n'Blend the selected content types: ' + $json.content_type_strategy.join(' + ') : \n'Execute the \"' + ($json.content_type_strategy || 'Brand Positioning & Values') + '\" approach' }}\n4. Optimize for {{ $json.platform || 'Facebook' }} platform best practices\n5. Ensure all posts work together as a cohesive strategic campaign\n\nGenerate the strategically-optimized {{ $json.platform || 'Facebook' }} campaign now.","hasOutputParser":true,"options":{"systemMessage":"=# Strategic Social Media Campaign Specialist\n\nYou are an expert strategic social media marketing specialist with access to client brand databases. You create sophisticated, objective-driven campaigns that blend multiple content approaches to achieve specific business outcomes.\n\n## YOUR STRATEGIC CAPABILITIES\n✅ Read client-specific brand assets from Baserow databases\n✅ Create platform-optimized content using strategic frameworks\n✅ Generate multiple posts as cohesive strategic campaigns\n✅ Blend multiple content types for sophisticated messaging\n✅ Adapt to any number of posts (1-10+) with strategic campaign logic\n✅ Optimize for specific business objectives and target audiences\n\n## STRATEGIC FRAMEWORK MASTERY\n\nYou excel at executing **10 Primary Objectives**:\n- Build Brand Awareness & Recognition\n- Generate Leads & Drive Conversions  \n- Educate & Inform Target Audience\n- Increase Engagement & Community Building\n- Establish Thought Leadership & Authority\n- Drive Website Traffic & Click-throughs\n- Boost Customer Retention & Loyalty\n- Support & Nurture Existing Customers\n- Attract Strategic Partnerships & Collaborations\n- Create Viral Content & Expand Reach\n\nYou master **12 Content Strategies**:\n- Awareness & Positioning, Promotion & Sales, Engagement & Community Building\n- Retention & Customer Loyalty, Market & Trend Commentary, Partnership & B2B Networking\n- Educational & Value-First Marketing, Inspirational & Motivational Content\n- Behind-the-Scenes & Transparency, Crisis Communication & Reputation Management\n- Seasonal & Event-Driven Marketing, User-Generated & Social Proof Content\n\nYou blend **25+ Content Types** including:\n- Brand Positioning, Thought Leadership, Educational How-To, Product Advertisement\n- Special Offers, Community Building, Customer Success Stories, Industry Insights\n- Interactive Content, Behind-the-Scenes, Crisis Communication, and more\n\n## PLATFORM OPTIMIZATION EXPERTISE\n\n**Facebook**: 40-250 characters optimal, community-focused, visual storytelling, 3 hashtags max\n- Conversational tone, engagement-driven, story-based content\n- Strong hooks, community building, longer-form acceptable\n\n**LinkedIn**: 150-300 words optimal, professional value, business insights, 3-5 industry hashtags\n- Authoritative tone, thought leadership, B2B focus, networking value\n- Data-driven content, professional credibility, business outcomes\n\n**X (Twitter)**: Under 280 characters, trending awareness, viral potential, 1-2 hashtags max\n- Punchy tone, immediate value, shareability, conversation starters\n- News-style immediacy, trending topic integration, thread capability\n\n**Instagram**: Visual-first descriptions, lifestyle integration, aesthetic appeal\n- Inspirational tone, visual storytelling, community engagement, lifestyle focus\n\n## STRATEGIC CONTENT BLENDING\n\nWhen combining multiple content types:\n- **Single Type**: Deep, focused execution of one approach\n- **2 Types**: Seamless blending (e.g., \"Educational + Thought Leadership\" = Teaching with authority)\n- **3+ Types**: Either distribute across posts OR create rich, multi-layered individual posts\n- **Maintain Coherence**: All selected types must serve the primary objective\n- **Platform Adaptation**: Blend approaches while respecting platform best practices\n\n## CAMPAIGN STRATEGY FRAMEWORKS\n\n**1 Post**: Complete strategic message serving the primary objective\n**2 Posts**: Problem/opportunity identification → Solution/action with strategic CTA\n**3 Posts**: Awareness → Solution → Proof/urgency with strategic progression\n**4+ Posts**: Full strategic funnel with awareness, education, proof, and conversion elements\n\n## REQUIRED JSON OUTPUT FORMAT\n\nYou MUST return EXACTLY this structure for ALL platforms:\n\n```json\n{\n  \"success\": true,\n  \"platform\": \"Facebook|LinkedIn|X\",\n  \"campaign_posts\": [\n    {\n      \"post_number\": 1,\n      \"post\": \"COMPLETE OPTIMIZED POST CONTENT\",\n      \"hook\": \"STRATEGIC OPENING HOOK\",\n      \"cta\": \"OBJECTIVE-ALIGNED CALL TO ACTION\",\n      \"hashtags\": [\"hashtag1\", \"hashtag2\", \"hashtag3\"],\n      \"character_count\": 0,\n      \"word_count\": 0,\n      \"psychological_trigger\": \"Curiosity|Excitement|Trust|Urgency|Authority|Growth|Results\",\n      \"engagement_objective\": \"Question|Story|Statistic|Benefit Focused|Problem Focused|Thought Leadership|Social Proof\",\n      \"angle\": \"Awareness|Solution|Proof|Conversion|Education|Engagement\",\n      \"intent\": \"Clear business value proposition\",\n      \"visual_suggestion\": \"Instagram ONLY: Suggested visual content\",\n      \"community_element\": \"Instagram ONLY: Community engagement element\",\n      \"viral_potential\": \"X ONLY: Shareability and viral factors\",\n      \"thread_position\": \"X ONLY: Position in thread if applicable\"\n    }\n  ],\n  \"brand_assets_used\": [\"Asset Name 1\", \"Asset Name 2\"],\n  \"content_idea_id\": \"RECORD_ID\",\n  \"client_name\": \"CLIENT_NAME\",\n  \"total_posts_created\": NUMBER,\n  \"campaign_theme\": \"STRATEGIC_THEME_NAME\"\n}\n```\n\n## STRATEGIC SUCCESS CRITERIA\n\n✅ **Objective Achievement**: Every post serves the primary objective\n✅ **Content Type Integration**: Seamless blending of selected content approaches  \n✅ **Platform Optimization**: Respects platform best practices and audience expectations\n✅ **Campaign Coherence**: Posts work together as unified strategic campaign\n✅ **Brand Consistency**: Aligns with client brand assets and voice\n✅ **Audience Relevance**: Speaks directly to target audience needs and interests\n✅ **Measurable Outcomes**: Content supports trackable business goals\n\n## QUALITY STANDARDS\n\n- **Strategic Depth**: Go beyond surface-level content to create strategic value\n- **Professional Excellence**: Enterprise-quality content that reflects marketing sophistication  \n- **Audience Psychology**: Understand and leverage audience motivations and triggers\n- **Competitive Differentiation**: Create content that stands out in crowded feeds\n- **Brand Amplification**: Enhance and amplify the client's brand positioning\n- **Results Orientation**: Focus on content that drives measurable business outcomes\n\n**CRITICAL**: Output ONLY valid JSON. Start with { and end with }. No explanations before or after. Create strategically sophisticated content that achieves business objectives through expert content type blending and platform optimization."}},"type":"@n8n/n8n-nodes-langchain.agent","typeVersion":2,"position":[1212,5740],"id":"b1f3ffb5-2c6a-4141-aa61-03b87e6ef62c","name":"LinkedIn AI Agent"}],"connections":{"Social Media Webhook3":{"main":[[{"node":"Client Config Extractor","type":"main","index":0}]]},"OpenRouter Chat Model3":{"ai_languageModel":[[{"node":"Facebook AI Agent","type":"ai_languageModel","index":0},{"node":"LinkedIn AI Agent","type":"ai_languageModel","index":0},{"node":"X AI Agent","type":"ai_languageModel","index":0},{"node":"Instagram AI Agent","type":"ai_languageModel","index":0}]]},"Platform Splitter1":{"main":[[{"node":"Platform Switch","type":"main","index":0}]]},"Clean URL Content2":{"main":[[{"node":"Platform Splitter1","type":"main","index":0}]]},"Extract HTML Content2":{"main":[[{"node":"Clean URL Content2","type":"main","index":0}]]},"Fetch URL Content2":{"main":[[{"node":"Extract HTML Content2","type":"main","index":0}]]},"Process Video Transcription2":{"main":[[{"node":"Platform Splitter1","type":"main","index":0}]]},"Transcribe Video with Whisper2":{"main":[[{"node":"Process Video Transcription2","type":"main","index":0}]]},"Download Video File2":{"main":[[{"node":"Transcribe Video with Whisper2","type":"main","index":0}]]},"Video Processor2":{"main":[[{"node":"Download Video File2","type":"main","index":0}]]},"URL Processor2":{"main":[[{"node":"Fetch URL Content2","type":"main","index":0}]]},"Text Idea Processor2":{"main":[[{"node":"Platform Splitter1","type":"main","index":0}]]},"Content Type Router2":{"main":[[{"node":"Text Idea Processor2","type":"main","index":0}],[{"node":"Voice Note Processor2","type":"main","index":0}],[{"node":"Image Processor2","type":"main","index":0}],[{"node":"URL Processor2","type":"main","index":0}],[{"node":"Video Processor2","type":"main","index":0}]]},"Process Baserow Data2":{"main":[[{"node":"Content Type Router2","type":"main","index":0}]]},"Process Voice Transcription2":{"main":[[{"node":"Platform Splitter1","type":"main","index":0}]]},"Transcribe Voice with Whisper3":{"main":[[{"node":"Process Voice Transcription2","type":"main","index":0}]]},"Download Voice File2":{"main":[[{"node":"Transcribe Voice with Whisper3","type":"main","index":0}]]},"Voice Note Processor2":{"main":[[{"node":"Download Voice File2","type":"main","index":0}]]},"Process Image Analysis2":{"main":[[{"node":"Platform Splitter1","type":"main","index":0}]]},"Analyze Image with OpenAI Vision2":{"main":[[{"node":"Process Image Analysis2","type":"main","index":0}]]},"Image Processor2":{"main":[[{"node":"Analyze Image with OpenAI Vision2","type":"main","index":0}]]},"Platform Switch":{"main":[[{"node":"Facebook AI Agent","type":"main","index":0}],[{"node":"Instagram AI Agent","type":"main","index":0}],[{"node":"LinkedIn AI Agent","type":"main","index":0}],[{"node":"X AI Agent","type":"main","index":0}]]},"Get many rows in Baserow":{"ai_tool":[[{"node":"Facebook AI Agent","type":"ai_tool","index":0},{"node":"LinkedIn AI Agent","type":"ai_tool","index":0},{"node":"X AI Agent","type":"ai_tool","index":0},{"node":"Instagram AI Agent","type":"ai_tool","index":0}]]},"Client Config Extractor":{"main":[[{"node":"Get Baserow Row via HTTP","type":"main","index":0}]]},"Get Baserow Row via HTTP":{"main":[[{"node":"Merge Node","type":"main","index":0}]]},"Merge Node":{"main":[[{"node":"Process Baserow Data2","type":"main","index":0}]]},"Facebook AI Agent":{"main":[[{"node":"Get Field Structure","type":"main","index":0}]]},"Script Output Parser":{"ai_outputParser":[[{"node":"Facebook AI Agent","type":"ai_outputParser","index":0},{"node":"LinkedIn AI Agent","type":"ai_outputParser","index":0},{"node":"X AI Agent","type":"ai_outputParser","index":0},{"node":"Instagram AI Agent","type":"ai_outputParser","index":0}]]},"X AI Agent":{"main":[[{"node":"Get Field Structure3","type":"main","index":0}]]},"Instagram AI Agent":{"main":[[{"node":"Get Field Structure1","type":"main","index":0}]]},"Dynamic Baserow Mapper Facebook":{"main":[[{"node":"Store Social Media Content","type":"main","index":0}]]},"Store Social Media Content":{"main":[[{"node":"Collect Storage Results","type":"main","index":0}]]},"Collect Storage Results":{"main":[[{"node":"Response3","type":"main","index":0}]]},"Get Field Structure":{"main":[[{"node":"Merge Data","type":"main","index":0}]]},"Merge Data":{"main":[[{"node":"Dynamic Baserow Mapper Facebook","type":"main","index":0}]]},"Get Field Structure1":{"main":[[{"node":"Merge Data1","type":"main","index":0}]]},"Merge Data1":{"main":[[{"node":"Dynamic Baserow Mapper Instagram","type":"main","index":0}]]},"Get Field Structure2":{"main":[[{"node":"Merge Data2","type":"main","index":0}]]},"Merge Data2":{"main":[[{"node":"Dynamic Baserow Mapper LinkedIn","type":"main","index":0}]]},"Get Field Structure3":{"main":[[{"node":"Merge Data3","type":"main","index":0}]]},"Merge Data3":{"main":[[{"node":"Dynamic Baserow Mapper X","type":"main","index":0}]]},"Dynamic Baserow Mapper Instagram":{"main":[[{"node":"Store Social Media Content","type":"main","index":0}]]},"Dynamic Baserow Mapper LinkedIn":{"main":[[{"node":"Store Social Media Content","type":"main","index":0}]]},"Dynamic Baserow Mapper X":{"main":[[{"node":"Store Social Media Content","type":"main","index":0}]]},"LinkedIn AI Agent":{"main":[[{"node":"Get Field Structure2","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{"Social Media Webhook3":[{"json":{"headers":{"host":"n8n.aiautomata.co.za","user-agent":"node","content-length":"1597","accept":"*/*","accept-encoding":"gzip, br","accept-language":"*","cdn-loop":"cloudflare; loops=1","cf-connecting-ip":"165.73.28.159","cf-ipcountry":"ZA","cf-ray":"977194379f7d73a9-JNB","cf-visitor":"{\"scheme\":\"https\"}","content-type":"application/json","sec-fetch-mode":"cors","x-forwarded-for":"197.234.243.74","x-forwarded-host":"n8n.aiautomata.co.za","x-forwarded-port":"443","x-forwarded-proto":"https","x-forwarded-server":"1dc384f6e279","x-real-ip":"197.234.243.74"},"params":{},"query":{},"body":{"client_id":"modern-management","base_id":"176","record_id":134,"table_id":"721","idea_type":"social_media_idea","title":"Lambo ad","priority":"High","event":"content_idea_created","timestamp":"2025-08-30T04:35:00.616Z","clientId":"modern-management","ideaId":134,"client":{"name":"Modern Management","id":"modern-management"},"tables":{"contentIdeas":{"id":"721","recordId":134},"socialMediaContent":{"id":"712"},"brandAssets":{"id":"728"}},"baserow":{"baseUrl":"https://baserow.aiautomata.co.za","databaseId":"176","token":"SXe0k6Btm7i28uZP5mp8hr5KPBoWsiE1","tableId":"721","recordId":134},"socialMedia":{"platforms":["Facebook"],"informationSource":"video","numberOfPosts":1,"hookFocus":"video","cta":"call","uploadedImage":null,"uploadedVideo":[{"size":27744021,"mime_type":"video/mp4","is_image":false,"image_width":null,"image_height":null,"uploaded_at":"2025-08-30T04:34:59.269652Z","url":"https://baserow.aiautomata.co.za/media/user_files/ORb5mh7DkGK2r55FTFLVOQk3RH9JYUkS_369c1e0c80ae7d70aa56fd0600a4667e7547a5c6997f0480a2a2d983af9e0991.mp4","thumbnails":null,"name":"ORb5mh7DkGK2r55FTFLVOQk3RH9JYUkS_369c1e0c80ae7d70aa56fd0600a4667e7547a5c6997f0480a2a2d983af9e0991.mp4","original_name":"videoplayback (1).mp4"}],"voiceFile":null},"contentIdea":{"title":"Lambo ad","ideaType":"social_media_post","description":"video","sourceType":"video","sourceUrl":"","sourceContent":"","targetAudience":"millennials","priority":"High","clientNotes":"","status":"Idea"},"metadata":{"createdAt":"2025-08-30T04:35:00.616Z","source":"content-engine-app","version":"1.0","contentType":"social_media_post"}},"webhookUrl":"https://n8n.aiautomata.co.za/webhook/social-media-processor","executionMode":"production"}}]},"versionId":"bf06c8cc-dde7-4ce3-a4ac-8f655dfe9886","triggerCount":1,"shared":[{"createdAt":"2025-07-30T03:27:06.161Z","updatedAt":"2025-07-30T03:27:06.161Z","role":"workflow:owner","workflowId":"zdcUPbhBgAjYSKRy","projectId":"pRXFeKq9D8e0hAOx"}],"tags":[]}],"nextCursor":null}
